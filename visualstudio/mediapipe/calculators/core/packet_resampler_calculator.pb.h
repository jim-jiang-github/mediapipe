// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/core/packet_resampler_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcore_2fpacket_5fresampler_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcore_2fpacket_5fresampler_5fcalculator_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2fcore_2fpacket_5fresampler_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2fcore_2fpacket_5fresampler_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fcore_2fpacket_5fresampler_5fcalculator_2eproto;
namespace mediapipe {
class PacketResamplerCalculatorOptions;
struct PacketResamplerCalculatorOptionsDefaultTypeInternal;
extern PacketResamplerCalculatorOptionsDefaultTypeInternal _PacketResamplerCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::PacketResamplerCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::PacketResamplerCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum PacketResamplerCalculatorOptions_OutputHeader : int {
  PacketResamplerCalculatorOptions_OutputHeader_NONE = 0,
  PacketResamplerCalculatorOptions_OutputHeader_PASS_HEADER = 1,
  PacketResamplerCalculatorOptions_OutputHeader_UPDATE_VIDEO_HEADER = 2
};
bool PacketResamplerCalculatorOptions_OutputHeader_IsValid(int value);
constexpr PacketResamplerCalculatorOptions_OutputHeader PacketResamplerCalculatorOptions_OutputHeader_OutputHeader_MIN = PacketResamplerCalculatorOptions_OutputHeader_NONE;
constexpr PacketResamplerCalculatorOptions_OutputHeader PacketResamplerCalculatorOptions_OutputHeader_OutputHeader_MAX = PacketResamplerCalculatorOptions_OutputHeader_UPDATE_VIDEO_HEADER;
constexpr int PacketResamplerCalculatorOptions_OutputHeader_OutputHeader_ARRAYSIZE = PacketResamplerCalculatorOptions_OutputHeader_OutputHeader_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketResamplerCalculatorOptions_OutputHeader_descriptor();
template<typename T>
inline const std::string& PacketResamplerCalculatorOptions_OutputHeader_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketResamplerCalculatorOptions_OutputHeader>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketResamplerCalculatorOptions_OutputHeader_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketResamplerCalculatorOptions_OutputHeader_descriptor(), enum_t_value);
}
inline bool PacketResamplerCalculatorOptions_OutputHeader_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketResamplerCalculatorOptions_OutputHeader* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketResamplerCalculatorOptions_OutputHeader>(
    PacketResamplerCalculatorOptions_OutputHeader_descriptor(), name, value);
}
// ===================================================================

class PacketResamplerCalculatorOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.PacketResamplerCalculatorOptions) */ {
 public:
  inline PacketResamplerCalculatorOptions() : PacketResamplerCalculatorOptions(nullptr) {}
  ~PacketResamplerCalculatorOptions() override;
  explicit constexpr PacketResamplerCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketResamplerCalculatorOptions(const PacketResamplerCalculatorOptions& from);
  PacketResamplerCalculatorOptions(PacketResamplerCalculatorOptions&& from) noexcept
    : PacketResamplerCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline PacketResamplerCalculatorOptions& operator=(const PacketResamplerCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketResamplerCalculatorOptions& operator=(PacketResamplerCalculatorOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketResamplerCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketResamplerCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const PacketResamplerCalculatorOptions*>(
               &_PacketResamplerCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketResamplerCalculatorOptions& a, PacketResamplerCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketResamplerCalculatorOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketResamplerCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketResamplerCalculatorOptions* New() const final {
    return CreateMaybeMessage<PacketResamplerCalculatorOptions>(nullptr);
  }

  PacketResamplerCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketResamplerCalculatorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketResamplerCalculatorOptions& from);
  void MergeFrom(const PacketResamplerCalculatorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketResamplerCalculatorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.PacketResamplerCalculatorOptions";
  }
  protected:
  explicit PacketResamplerCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PacketResamplerCalculatorOptions_OutputHeader OutputHeader;
  static constexpr OutputHeader NONE =
    PacketResamplerCalculatorOptions_OutputHeader_NONE;
  static constexpr OutputHeader PASS_HEADER =
    PacketResamplerCalculatorOptions_OutputHeader_PASS_HEADER;
  static constexpr OutputHeader UPDATE_VIDEO_HEADER =
    PacketResamplerCalculatorOptions_OutputHeader_UPDATE_VIDEO_HEADER;
  static inline bool OutputHeader_IsValid(int value) {
    return PacketResamplerCalculatorOptions_OutputHeader_IsValid(value);
  }
  static constexpr OutputHeader OutputHeader_MIN =
    PacketResamplerCalculatorOptions_OutputHeader_OutputHeader_MIN;
  static constexpr OutputHeader OutputHeader_MAX =
    PacketResamplerCalculatorOptions_OutputHeader_OutputHeader_MAX;
  static constexpr int OutputHeader_ARRAYSIZE =
    PacketResamplerCalculatorOptions_OutputHeader_OutputHeader_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OutputHeader_descriptor() {
    return PacketResamplerCalculatorOptions_OutputHeader_descriptor();
  }
  template<typename T>
  static inline const std::string& OutputHeader_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OutputHeader>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OutputHeader_Name.");
    return PacketResamplerCalculatorOptions_OutputHeader_Name(enum_t_value);
  }
  static inline bool OutputHeader_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OutputHeader* value) {
    return PacketResamplerCalculatorOptions_OutputHeader_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kJitterFieldNumber = 4,
    kBaseTimestampFieldNumber = 5,
    kStartTimeFieldNumber = 6,
    kEndTimeFieldNumber = 7,
    kOutputHeaderFieldNumber = 2,
    kJitterWithReflectionFieldNumber = 9,
    kReproducibleSamplingFieldNumber = 10,
    kRoundLimitsFieldNumber = 8,
    kFlushLastPacketFieldNumber = 3,
    kFrameRateFieldNumber = 1,
  };
  // optional double jitter = 4;
  bool has_jitter() const;
  private:
  bool _internal_has_jitter() const;
  public:
  void clear_jitter();
  double jitter() const;
  void set_jitter(double value);
  private:
  double _internal_jitter() const;
  void _internal_set_jitter(double value);
  public:

  // optional int64 base_timestamp = 5;
  bool has_base_timestamp() const;
  private:
  bool _internal_has_base_timestamp() const;
  public:
  void clear_base_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 base_timestamp() const;
  void set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_base_timestamp() const;
  void _internal_set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 start_time = 6;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 end_time = 7;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .mediapipe.PacketResamplerCalculatorOptions.OutputHeader output_header = 2 [default = NONE];
  bool has_output_header() const;
  private:
  bool _internal_has_output_header() const;
  public:
  void clear_output_header();
  ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader output_header() const;
  void set_output_header(::mediapipe::PacketResamplerCalculatorOptions_OutputHeader value);
  private:
  ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader _internal_output_header() const;
  void _internal_set_output_header(::mediapipe::PacketResamplerCalculatorOptions_OutputHeader value);
  public:

  // optional bool jitter_with_reflection = 9 [default = false];
  bool has_jitter_with_reflection() const;
  private:
  bool _internal_has_jitter_with_reflection() const;
  public:
  void clear_jitter_with_reflection();
  bool jitter_with_reflection() const;
  void set_jitter_with_reflection(bool value);
  private:
  bool _internal_jitter_with_reflection() const;
  void _internal_set_jitter_with_reflection(bool value);
  public:

  // optional bool reproducible_sampling = 10 [default = false];
  bool has_reproducible_sampling() const;
  private:
  bool _internal_has_reproducible_sampling() const;
  public:
  void clear_reproducible_sampling();
  bool reproducible_sampling() const;
  void set_reproducible_sampling(bool value);
  private:
  bool _internal_reproducible_sampling() const;
  void _internal_set_reproducible_sampling(bool value);
  public:

  // optional bool round_limits = 8 [default = false];
  bool has_round_limits() const;
  private:
  bool _internal_has_round_limits() const;
  public:
  void clear_round_limits();
  bool round_limits() const;
  void set_round_limits(bool value);
  private:
  bool _internal_round_limits() const;
  void _internal_set_round_limits(bool value);
  public:

  // optional bool flush_last_packet = 3 [default = true];
  bool has_flush_last_packet() const;
  private:
  bool _internal_has_flush_last_packet() const;
  public:
  void clear_flush_last_packet();
  bool flush_last_packet() const;
  void set_flush_last_packet(bool value);
  private:
  bool _internal_flush_last_packet() const;
  void _internal_set_flush_last_packet(bool value);
  public:

  // optional double frame_rate = 1 [default = -1];
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  double frame_rate() const;
  void set_frame_rate(double value);
  private:
  double _internal_frame_rate() const;
  void _internal_set_frame_rate(double value);
  public:

  static const int kExtFieldNumber = 95743844;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::PacketResamplerCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.PacketResamplerCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double jitter_;
  ::PROTOBUF_NAMESPACE_ID::int64 base_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  int output_header_;
  bool jitter_with_reflection_;
  bool reproducible_sampling_;
  bool round_limits_;
  bool flush_last_packet_;
  double frame_rate_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2fcore_2fpacket_5fresampler_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketResamplerCalculatorOptions

// optional double frame_rate = 1 [default = -1];
inline bool PacketResamplerCalculatorOptions::_internal_has_frame_rate() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void PacketResamplerCalculatorOptions::clear_frame_rate() {
  frame_rate_ = -1;
  _has_bits_[0] &= ~0x00000200u;
}
inline double PacketResamplerCalculatorOptions::_internal_frame_rate() const {
  return frame_rate_;
}
inline double PacketResamplerCalculatorOptions::frame_rate() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.frame_rate)
  return _internal_frame_rate();
}
inline void PacketResamplerCalculatorOptions::_internal_set_frame_rate(double value) {
  _has_bits_[0] |= 0x00000200u;
  frame_rate_ = value;
}
inline void PacketResamplerCalculatorOptions::set_frame_rate(double value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.frame_rate)
}

// optional .mediapipe.PacketResamplerCalculatorOptions.OutputHeader output_header = 2 [default = NONE];
inline bool PacketResamplerCalculatorOptions::_internal_has_output_header() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_output_header() const {
  return _internal_has_output_header();
}
inline void PacketResamplerCalculatorOptions::clear_output_header() {
  output_header_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader PacketResamplerCalculatorOptions::_internal_output_header() const {
  return static_cast< ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader >(output_header_);
}
inline ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader PacketResamplerCalculatorOptions::output_header() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.output_header)
  return _internal_output_header();
}
inline void PacketResamplerCalculatorOptions::_internal_set_output_header(::mediapipe::PacketResamplerCalculatorOptions_OutputHeader value) {
  assert(::mediapipe::PacketResamplerCalculatorOptions_OutputHeader_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  output_header_ = value;
}
inline void PacketResamplerCalculatorOptions::set_output_header(::mediapipe::PacketResamplerCalculatorOptions_OutputHeader value) {
  _internal_set_output_header(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.output_header)
}

// optional bool flush_last_packet = 3 [default = true];
inline bool PacketResamplerCalculatorOptions::_internal_has_flush_last_packet() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_flush_last_packet() const {
  return _internal_has_flush_last_packet();
}
inline void PacketResamplerCalculatorOptions::clear_flush_last_packet() {
  flush_last_packet_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PacketResamplerCalculatorOptions::_internal_flush_last_packet() const {
  return flush_last_packet_;
}
inline bool PacketResamplerCalculatorOptions::flush_last_packet() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.flush_last_packet)
  return _internal_flush_last_packet();
}
inline void PacketResamplerCalculatorOptions::_internal_set_flush_last_packet(bool value) {
  _has_bits_[0] |= 0x00000100u;
  flush_last_packet_ = value;
}
inline void PacketResamplerCalculatorOptions::set_flush_last_packet(bool value) {
  _internal_set_flush_last_packet(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.flush_last_packet)
}

// optional double jitter = 4;
inline bool PacketResamplerCalculatorOptions::_internal_has_jitter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_jitter() const {
  return _internal_has_jitter();
}
inline void PacketResamplerCalculatorOptions::clear_jitter() {
  jitter_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PacketResamplerCalculatorOptions::_internal_jitter() const {
  return jitter_;
}
inline double PacketResamplerCalculatorOptions::jitter() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.jitter)
  return _internal_jitter();
}
inline void PacketResamplerCalculatorOptions::_internal_set_jitter(double value) {
  _has_bits_[0] |= 0x00000001u;
  jitter_ = value;
}
inline void PacketResamplerCalculatorOptions::set_jitter(double value) {
  _internal_set_jitter(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.jitter)
}

// optional bool jitter_with_reflection = 9 [default = false];
inline bool PacketResamplerCalculatorOptions::_internal_has_jitter_with_reflection() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_jitter_with_reflection() const {
  return _internal_has_jitter_with_reflection();
}
inline void PacketResamplerCalculatorOptions::clear_jitter_with_reflection() {
  jitter_with_reflection_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PacketResamplerCalculatorOptions::_internal_jitter_with_reflection() const {
  return jitter_with_reflection_;
}
inline bool PacketResamplerCalculatorOptions::jitter_with_reflection() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.jitter_with_reflection)
  return _internal_jitter_with_reflection();
}
inline void PacketResamplerCalculatorOptions::_internal_set_jitter_with_reflection(bool value) {
  _has_bits_[0] |= 0x00000020u;
  jitter_with_reflection_ = value;
}
inline void PacketResamplerCalculatorOptions::set_jitter_with_reflection(bool value) {
  _internal_set_jitter_with_reflection(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.jitter_with_reflection)
}

// optional bool reproducible_sampling = 10 [default = false];
inline bool PacketResamplerCalculatorOptions::_internal_has_reproducible_sampling() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_reproducible_sampling() const {
  return _internal_has_reproducible_sampling();
}
inline void PacketResamplerCalculatorOptions::clear_reproducible_sampling() {
  reproducible_sampling_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PacketResamplerCalculatorOptions::_internal_reproducible_sampling() const {
  return reproducible_sampling_;
}
inline bool PacketResamplerCalculatorOptions::reproducible_sampling() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.reproducible_sampling)
  return _internal_reproducible_sampling();
}
inline void PacketResamplerCalculatorOptions::_internal_set_reproducible_sampling(bool value) {
  _has_bits_[0] |= 0x00000040u;
  reproducible_sampling_ = value;
}
inline void PacketResamplerCalculatorOptions::set_reproducible_sampling(bool value) {
  _internal_set_reproducible_sampling(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.reproducible_sampling)
}

// optional int64 base_timestamp = 5;
inline bool PacketResamplerCalculatorOptions::_internal_has_base_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_base_timestamp() const {
  return _internal_has_base_timestamp();
}
inline void PacketResamplerCalculatorOptions::clear_base_timestamp() {
  base_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketResamplerCalculatorOptions::_internal_base_timestamp() const {
  return base_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketResamplerCalculatorOptions::base_timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.base_timestamp)
  return _internal_base_timestamp();
}
inline void PacketResamplerCalculatorOptions::_internal_set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  base_timestamp_ = value;
}
inline void PacketResamplerCalculatorOptions::set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_base_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.base_timestamp)
}

// optional int64 start_time = 6;
inline bool PacketResamplerCalculatorOptions::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_start_time() const {
  return _internal_has_start_time();
}
inline void PacketResamplerCalculatorOptions::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketResamplerCalculatorOptions::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketResamplerCalculatorOptions::start_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.start_time)
  return _internal_start_time();
}
inline void PacketResamplerCalculatorOptions::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_ = value;
}
inline void PacketResamplerCalculatorOptions::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.start_time)
}

// optional int64 end_time = 7;
inline bool PacketResamplerCalculatorOptions::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_end_time() const {
  return _internal_has_end_time();
}
inline void PacketResamplerCalculatorOptions::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketResamplerCalculatorOptions::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PacketResamplerCalculatorOptions::end_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.end_time)
  return _internal_end_time();
}
inline void PacketResamplerCalculatorOptions::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  end_time_ = value;
}
inline void PacketResamplerCalculatorOptions::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.end_time)
}

// optional bool round_limits = 8 [default = false];
inline bool PacketResamplerCalculatorOptions::_internal_has_round_limits() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PacketResamplerCalculatorOptions::has_round_limits() const {
  return _internal_has_round_limits();
}
inline void PacketResamplerCalculatorOptions::clear_round_limits() {
  round_limits_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PacketResamplerCalculatorOptions::_internal_round_limits() const {
  return round_limits_;
}
inline bool PacketResamplerCalculatorOptions::round_limits() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketResamplerCalculatorOptions.round_limits)
  return _internal_round_limits();
}
inline void PacketResamplerCalculatorOptions::_internal_set_round_limits(bool value) {
  _has_bits_[0] |= 0x00000080u;
  round_limits_ = value;
}
inline void PacketResamplerCalculatorOptions::set_round_limits(bool value) {
  _internal_set_round_limits(value);
  // @@protoc_insertion_point(field_set:mediapipe.PacketResamplerCalculatorOptions.round_limits)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader>() {
  return ::mediapipe::PacketResamplerCalculatorOptions_OutputHeader_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcore_2fpacket_5fresampler_5fcalculator_2eproto
