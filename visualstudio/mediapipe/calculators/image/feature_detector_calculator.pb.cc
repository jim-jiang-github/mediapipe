// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/image/feature_detector_calculator.proto

#include "mediapipe/calculators/image/feature_detector_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr FeatureDetectorCalculatorOptions::FeatureDetectorCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_patch_(false)
  , scale_factor_(1.2f)
  , max_features_(200)
  , pyramid_level_(4){}
struct FeatureDetectorCalculatorOptionsDefaultTypeInternal {
  constexpr FeatureDetectorCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureDetectorCalculatorOptionsDefaultTypeInternal() {}
  union {
    FeatureDetectorCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureDetectorCalculatorOptionsDefaultTypeInternal _FeatureDetectorCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::FeatureDetectorCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FeatureDetectorCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::FeatureDetectorCalculatorOptions, output_patch_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FeatureDetectorCalculatorOptions, max_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FeatureDetectorCalculatorOptions, pyramid_level_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FeatureDetectorCalculatorOptions, scale_factor_),
  0,
  2,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mediapipe::FeatureDetectorCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_FeatureDetectorCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=mediapipe/calculators/image/feature_de"
  "tector_calculator.proto\022\tmediapipe\032$medi"
  "apipe/framework/calculator.proto\"\344\001\n Fea"
  "tureDetectorCalculatorOptions\022\024\n\014output_"
  "patch\030\001 \001(\010\022\031\n\014max_features\030\002 \001(\005:\003200\022\030"
  "\n\rpyramid_level\030\003 \001(\005:\0014\022\031\n\014scale_factor"
  "\030\004 \001(\002:\0031.22Z\n\003ext\022\034.mediapipe.Calculato"
  "rOptions\030\260\205\365\204\001 \001(\0132+.mediapipe.FeatureDe"
  "tectorCalculatorOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto = {
  false, false, 343, descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto, "mediapipe/calculators/image/feature_detector_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class FeatureDetectorCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureDetectorCalculatorOptions>()._has_bits_);
  static void set_has_output_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_features(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pyramid_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FeatureDetectorCalculatorOptions::FeatureDetectorCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.FeatureDetectorCalculatorOptions)
}
FeatureDetectorCalculatorOptions::FeatureDetectorCalculatorOptions(const FeatureDetectorCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&output_patch_, &from.output_patch_,
    static_cast<size_t>(reinterpret_cast<char*>(&pyramid_level_) -
    reinterpret_cast<char*>(&output_patch_)) + sizeof(pyramid_level_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.FeatureDetectorCalculatorOptions)
}

void FeatureDetectorCalculatorOptions::SharedCtor() {
output_patch_ = false;
scale_factor_ = 1.2f;
max_features_ = 200;
pyramid_level_ = 4;
}

FeatureDetectorCalculatorOptions::~FeatureDetectorCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.FeatureDetectorCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureDetectorCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeatureDetectorCalculatorOptions::ArenaDtor(void* object) {
  FeatureDetectorCalculatorOptions* _this = reinterpret_cast< FeatureDetectorCalculatorOptions* >(object);
  (void)_this;
}
void FeatureDetectorCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureDetectorCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeatureDetectorCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.FeatureDetectorCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    output_patch_ = false;
    scale_factor_ = 1.2f;
    max_features_ = 200;
    pyramid_level_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureDetectorCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool output_patch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_output_patch(&has_bits);
          output_patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_features = 2 [default = 200];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_features(&has_bits);
          max_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pyramid_level = 3 [default = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pyramid_level(&has_bits);
          pyramid_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale_factor = 4 [default = 1.2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_scale_factor(&has_bits);
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureDetectorCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.FeatureDetectorCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool output_patch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_output_patch(), target);
  }

  // optional int32 max_features = 2 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_features(), target);
  }

  // optional int32 pyramid_level = 3 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pyramid_level(), target);
  }

  // optional float scale_factor = 4 [default = 1.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_scale_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.FeatureDetectorCalculatorOptions)
  return target;
}

size_t FeatureDetectorCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.FeatureDetectorCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool output_patch = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float scale_factor = 4 [default = 1.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 max_features = 2 [default = 200];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_features());
    }

    // optional int32 pyramid_level = 3 [default = 4];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pyramid_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureDetectorCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.FeatureDetectorCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureDetectorCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureDetectorCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.FeatureDetectorCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.FeatureDetectorCalculatorOptions)
    MergeFrom(*source);
  }
}

void FeatureDetectorCalculatorOptions::MergeFrom(const FeatureDetectorCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.FeatureDetectorCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      output_patch_ = from.output_patch_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_factor_ = from.scale_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_features_ = from.max_features_;
    }
    if (cached_has_bits & 0x00000008u) {
      pyramid_level_ = from.pyramid_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeatureDetectorCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.FeatureDetectorCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureDetectorCalculatorOptions::CopyFrom(const FeatureDetectorCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.FeatureDetectorCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureDetectorCalculatorOptions::IsInitialized() const {
  return true;
}

void FeatureDetectorCalculatorOptions::InternalSwap(FeatureDetectorCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_patch_, other->output_patch_);
  swap(scale_factor_, other->scale_factor_);
  swap(max_features_, other->max_features_);
  swap(pyramid_level_, other->pyramid_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureDetectorCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fimage_2ffeature_5fdetector_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureDetectorCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::FeatureDetectorCalculatorOptions >, 11, false >
  FeatureDetectorCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::FeatureDetectorCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::FeatureDetectorCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::FeatureDetectorCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::FeatureDetectorCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
