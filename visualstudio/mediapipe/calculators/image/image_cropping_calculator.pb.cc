// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/image/image_cropping_calculator.proto

#include "mediapipe/calculators/image/image_cropping_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr ImageCroppingCalculatorOptions::ImageCroppingCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0)
  , rotation_(0)
  , norm_width_(0)
  , norm_height_(0)
  , norm_center_x_(0)
  , norm_center_y_(0)
  , output_max_width_(0)
  , output_max_height_(0)
  , border_mode_(1)
{}
struct ImageCroppingCalculatorOptionsDefaultTypeInternal {
  constexpr ImageCroppingCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageCroppingCalculatorOptionsDefaultTypeInternal() {}
  union {
    ImageCroppingCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageCroppingCalculatorOptionsDefaultTypeInternal _ImageCroppingCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, norm_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, norm_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, norm_center_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, norm_center_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, border_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, output_max_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageCroppingCalculatorOptions, output_max_height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::mediapipe::ImageCroppingCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ImageCroppingCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;mediapipe/calculators/image/image_crop"
  "ping_calculator.proto\022\tmediapipe\032$mediap"
  "ipe/framework/calculator.proto\"\344\003\n\036Image"
  "CroppingCalculatorOptions\022\r\n\005width\030\001 \001(\005"
  "\022\016\n\006height\030\002 \001(\005\022\023\n\010rotation\030\003 \001(\002:\0010\022\022\n"
  "\nnorm_width\030\004 \001(\002\022\023\n\013norm_height\030\005 \001(\002\022\030"
  "\n\rnorm_center_x\030\006 \001(\002:\0010\022\030\n\rnorm_center_"
  "y\030\007 \001(\002:\0010\022V\n\013border_mode\030\010 \001(\01624.mediap"
  "ipe.ImageCroppingCalculatorOptions.Borde"
  "rMode:\013BORDER_ZERO\022\030\n\020output_max_width\030\t"
  " \001(\005\022\031\n\021output_max_height\030\n \001(\005\"K\n\nBorde"
  "rMode\022\026\n\022BORDER_UNSPECIFIED\020\000\022\017\n\013BORDER_"
  "ZERO\020\001\022\024\n\020BORDER_REPLICATE\020\0022W\n\003ext\022\034.me"
  "diapipe.CalculatorOptions\030\337\326\223} \001(\0132).med"
  "iapipe.ImageCroppingCalculatorOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto = {
  false, false, 597, descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto, "mediapipe/calculators/image/image_cropping_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageCroppingCalculatorOptions_BorderMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto);
  return file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto[0];
}
bool ImageCroppingCalculatorOptions_BorderMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageCroppingCalculatorOptions_BorderMode ImageCroppingCalculatorOptions::BORDER_UNSPECIFIED;
constexpr ImageCroppingCalculatorOptions_BorderMode ImageCroppingCalculatorOptions::BORDER_ZERO;
constexpr ImageCroppingCalculatorOptions_BorderMode ImageCroppingCalculatorOptions::BORDER_REPLICATE;
constexpr ImageCroppingCalculatorOptions_BorderMode ImageCroppingCalculatorOptions::BorderMode_MIN;
constexpr ImageCroppingCalculatorOptions_BorderMode ImageCroppingCalculatorOptions::BorderMode_MAX;
constexpr int ImageCroppingCalculatorOptions::BorderMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ImageCroppingCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageCroppingCalculatorOptions>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_norm_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_norm_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_norm_center_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_norm_center_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_border_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_output_max_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_output_max_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

ImageCroppingCalculatorOptions::ImageCroppingCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ImageCroppingCalculatorOptions)
}
ImageCroppingCalculatorOptions::ImageCroppingCalculatorOptions(const ImageCroppingCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&border_mode_) -
    reinterpret_cast<char*>(&width_)) + sizeof(border_mode_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ImageCroppingCalculatorOptions)
}

void ImageCroppingCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&output_max_height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(output_max_height_));
border_mode_ = 1;
}

ImageCroppingCalculatorOptions::~ImageCroppingCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.ImageCroppingCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageCroppingCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageCroppingCalculatorOptions::ArenaDtor(void* object) {
  ImageCroppingCalculatorOptions* _this = reinterpret_cast< ImageCroppingCalculatorOptions* >(object);
  (void)_this;
}
void ImageCroppingCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageCroppingCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageCroppingCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ImageCroppingCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_max_width_) -
        reinterpret_cast<char*>(&width_)) + sizeof(output_max_width_));
  }
  if (cached_has_bits & 0x00000300u) {
    output_max_height_ = 0;
    border_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageCroppingCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float norm_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_norm_width(&has_bits);
          norm_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float norm_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_norm_height(&has_bits);
          norm_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float norm_center_x = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_norm_center_x(&has_bits);
          norm_center_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float norm_center_y = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_norm_center_y(&has_bits);
          norm_center_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ImageCroppingCalculatorOptions.BorderMode border_mode = 8 [default = BORDER_ZERO];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ImageCroppingCalculatorOptions_BorderMode_IsValid(val))) {
            _internal_set_border_mode(static_cast<::mediapipe::ImageCroppingCalculatorOptions_BorderMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 output_max_width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_output_max_width(&has_bits);
          output_max_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 output_max_height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_output_max_height(&has_bits);
          output_max_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageCroppingCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ImageCroppingCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional float rotation = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rotation(), target);
  }

  // optional float norm_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_norm_width(), target);
  }

  // optional float norm_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_norm_height(), target);
  }

  // optional float norm_center_x = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_norm_center_x(), target);
  }

  // optional float norm_center_y = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_norm_center_y(), target);
  }

  // optional .mediapipe.ImageCroppingCalculatorOptions.BorderMode border_mode = 8 [default = BORDER_ZERO];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_border_mode(), target);
  }

  // optional int32 output_max_width = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_output_max_width(), target);
  }

  // optional int32 output_max_height = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_output_max_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ImageCroppingCalculatorOptions)
  return target;
}

size_t ImageCroppingCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ImageCroppingCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional float rotation = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float norm_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float norm_height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float norm_center_x = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float norm_center_y = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 output_max_width = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_output_max_width());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 output_max_height = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_output_max_height());
    }

    // optional .mediapipe.ImageCroppingCalculatorOptions.BorderMode border_mode = 8 [default = BORDER_ZERO];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_border_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageCroppingCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ImageCroppingCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageCroppingCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageCroppingCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ImageCroppingCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ImageCroppingCalculatorOptions)
    MergeFrom(*source);
  }
}

void ImageCroppingCalculatorOptions::MergeFrom(const ImageCroppingCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ImageCroppingCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00000008u) {
      norm_width_ = from.norm_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      norm_height_ = from.norm_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      norm_center_x_ = from.norm_center_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      norm_center_y_ = from.norm_center_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      output_max_width_ = from.output_max_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      output_max_height_ = from.output_max_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      border_mode_ = from.border_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageCroppingCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ImageCroppingCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCroppingCalculatorOptions::CopyFrom(const ImageCroppingCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ImageCroppingCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCroppingCalculatorOptions::IsInitialized() const {
  return true;
}

void ImageCroppingCalculatorOptions::InternalSwap(ImageCroppingCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageCroppingCalculatorOptions, output_max_height_)
      + sizeof(ImageCroppingCalculatorOptions::output_max_height_)
      - PROTOBUF_FIELD_OFFSET(ImageCroppingCalculatorOptions, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
  swap(border_mode_, other->border_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageCroppingCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fimage_2fimage_5fcropping_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageCroppingCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::ImageCroppingCalculatorOptions >, 11, false >
  ImageCroppingCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::ImageCroppingCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::ImageCroppingCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::ImageCroppingCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ImageCroppingCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
