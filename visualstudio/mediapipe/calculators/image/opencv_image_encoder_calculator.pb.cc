// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/image/opencv_image_encoder_calculator.proto

#include "mediapipe/calculators/image/opencv_image_encoder_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr OpenCvImageEncoderCalculatorOptions::OpenCvImageEncoderCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quality_(0){}
struct OpenCvImageEncoderCalculatorOptionsDefaultTypeInternal {
  constexpr OpenCvImageEncoderCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenCvImageEncoderCalculatorOptionsDefaultTypeInternal() {}
  union {
    OpenCvImageEncoderCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenCvImageEncoderCalculatorOptionsDefaultTypeInternal _OpenCvImageEncoderCalculatorOptions_default_instance_;
constexpr OpenCvImageEncoderCalculatorResults::OpenCvImageEncoderCalculatorResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(0)
  , width_(0)
  , colorspace_(0)
{}
struct OpenCvImageEncoderCalculatorResultsDefaultTypeInternal {
  constexpr OpenCvImageEncoderCalculatorResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenCvImageEncoderCalculatorResultsDefaultTypeInternal() {}
  union {
    OpenCvImageEncoderCalculatorResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenCvImageEncoderCalculatorResultsDefaultTypeInternal _OpenCvImageEncoderCalculatorResults_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorOptions, quality_),
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorResults, encoded_image_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorResults, height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorResults, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::OpenCvImageEncoderCalculatorResults, colorspace_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::mediapipe::OpenCvImageEncoderCalculatorOptions)},
  { 7, 16, sizeof(::mediapipe::OpenCvImageEncoderCalculatorResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_OpenCvImageEncoderCalculatorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_OpenCvImageEncoderCalculatorResults_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nAmediapipe/calculators/image/opencv_ima"
  "ge_encoder_calculator.proto\022\tmediapipe\032$"
  "mediapipe/framework/calculator.proto\"\224\001\n"
  "#OpenCvImageEncoderCalculatorOptions\022\017\n\007"
  "quality\030\001 \001(\0052\\\n\003ext\022\034.mediapipe.Calcula"
  "torOptions\030\376\260\301l \001(\0132..mediapipe.OpenCvIm"
  "ageEncoderCalculatorOptions\"\335\001\n#OpenCvIm"
  "ageEncoderCalculatorResults\022\025\n\rencoded_i"
  "mage\030\001 \001(\014\022\016\n\006height\030\002 \001(\005\022\r\n\005width\030\003 \001("
  "\005\022M\n\ncolorspace\030\004 \001(\01629.mediapipe.OpenCv"
  "ImageEncoderCalculatorResults.ColorSpace"
  "\"1\n\nColorSpace\022\013\n\007UNKNOWN\020\000\022\r\n\tGRAYSCALE"
  "\020\001\022\007\n\003RGB\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto = {
  false, false, 491, descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto, "mediapipe/calculators/image/opencv_image_encoder_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenCvImageEncoderCalculatorResults_ColorSpace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto);
  return file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto[0];
}
bool OpenCvImageEncoderCalculatorResults_ColorSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OpenCvImageEncoderCalculatorResults_ColorSpace OpenCvImageEncoderCalculatorResults::UNKNOWN;
constexpr OpenCvImageEncoderCalculatorResults_ColorSpace OpenCvImageEncoderCalculatorResults::GRAYSCALE;
constexpr OpenCvImageEncoderCalculatorResults_ColorSpace OpenCvImageEncoderCalculatorResults::RGB;
constexpr OpenCvImageEncoderCalculatorResults_ColorSpace OpenCvImageEncoderCalculatorResults::ColorSpace_MIN;
constexpr OpenCvImageEncoderCalculatorResults_ColorSpace OpenCvImageEncoderCalculatorResults::ColorSpace_MAX;
constexpr int OpenCvImageEncoderCalculatorResults::ColorSpace_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class OpenCvImageEncoderCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenCvImageEncoderCalculatorOptions>()._has_bits_);
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OpenCvImageEncoderCalculatorOptions::OpenCvImageEncoderCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.OpenCvImageEncoderCalculatorOptions)
}
OpenCvImageEncoderCalculatorOptions::OpenCvImageEncoderCalculatorOptions(const OpenCvImageEncoderCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quality_ = from.quality_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.OpenCvImageEncoderCalculatorOptions)
}

void OpenCvImageEncoderCalculatorOptions::SharedCtor() {
quality_ = 0;
}

OpenCvImageEncoderCalculatorOptions::~OpenCvImageEncoderCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.OpenCvImageEncoderCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenCvImageEncoderCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OpenCvImageEncoderCalculatorOptions::ArenaDtor(void* object) {
  OpenCvImageEncoderCalculatorOptions* _this = reinterpret_cast< OpenCvImageEncoderCalculatorOptions* >(object);
  (void)_this;
}
void OpenCvImageEncoderCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenCvImageEncoderCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenCvImageEncoderCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.OpenCvImageEncoderCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quality_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenCvImageEncoderCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenCvImageEncoderCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.OpenCvImageEncoderCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 quality = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.OpenCvImageEncoderCalculatorOptions)
  return target;
}

size_t OpenCvImageEncoderCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.OpenCvImageEncoderCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 quality = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenCvImageEncoderCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.OpenCvImageEncoderCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenCvImageEncoderCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenCvImageEncoderCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.OpenCvImageEncoderCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.OpenCvImageEncoderCalculatorOptions)
    MergeFrom(*source);
  }
}

void OpenCvImageEncoderCalculatorOptions::MergeFrom(const OpenCvImageEncoderCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.OpenCvImageEncoderCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quality()) {
    _internal_set_quality(from._internal_quality());
  }
}

void OpenCvImageEncoderCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.OpenCvImageEncoderCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenCvImageEncoderCalculatorOptions::CopyFrom(const OpenCvImageEncoderCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.OpenCvImageEncoderCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenCvImageEncoderCalculatorOptions::IsInitialized() const {
  return true;
}

void OpenCvImageEncoderCalculatorOptions::InternalSwap(OpenCvImageEncoderCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quality_, other->quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenCvImageEncoderCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto[0]);
}

// ===================================================================

class OpenCvImageEncoderCalculatorResults::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenCvImageEncoderCalculatorResults>()._has_bits_);
  static void set_has_encoded_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_colorspace(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OpenCvImageEncoderCalculatorResults::OpenCvImageEncoderCalculatorResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.OpenCvImageEncoderCalculatorResults)
}
OpenCvImageEncoderCalculatorResults::OpenCvImageEncoderCalculatorResults(const OpenCvImageEncoderCalculatorResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encoded_image()) {
    encoded_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_image(), 
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&colorspace_) -
    reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.OpenCvImageEncoderCalculatorResults)
}

void OpenCvImageEncoderCalculatorResults::SharedCtor() {
encoded_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&colorspace_) -
    reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
}

OpenCvImageEncoderCalculatorResults::~OpenCvImageEncoderCalculatorResults() {
  // @@protoc_insertion_point(destructor:mediapipe.OpenCvImageEncoderCalculatorResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpenCvImageEncoderCalculatorResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenCvImageEncoderCalculatorResults::ArenaDtor(void* object) {
  OpenCvImageEncoderCalculatorResults* _this = reinterpret_cast< OpenCvImageEncoderCalculatorResults* >(object);
  (void)_this;
}
void OpenCvImageEncoderCalculatorResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenCvImageEncoderCalculatorResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenCvImageEncoderCalculatorResults::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.OpenCvImageEncoderCalculatorResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encoded_image_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colorspace_) -
        reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenCvImageEncoderCalculatorResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes encoded_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encoded_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.OpenCvImageEncoderCalculatorResults.ColorSpace colorspace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::OpenCvImageEncoderCalculatorResults_ColorSpace_IsValid(val))) {
            _internal_set_colorspace(static_cast<::mediapipe::OpenCvImageEncoderCalculatorResults_ColorSpace>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenCvImageEncoderCalculatorResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.OpenCvImageEncoderCalculatorResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encoded_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encoded_image(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional .mediapipe.OpenCvImageEncoderCalculatorResults.ColorSpace colorspace = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_colorspace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.OpenCvImageEncoderCalculatorResults)
  return target;
}

size_t OpenCvImageEncoderCalculatorResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.OpenCvImageEncoderCalculatorResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes encoded_image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encoded_image());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional .mediapipe.OpenCvImageEncoderCalculatorResults.ColorSpace colorspace = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_colorspace());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenCvImageEncoderCalculatorResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.OpenCvImageEncoderCalculatorResults)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenCvImageEncoderCalculatorResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenCvImageEncoderCalculatorResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.OpenCvImageEncoderCalculatorResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.OpenCvImageEncoderCalculatorResults)
    MergeFrom(*source);
  }
}

void OpenCvImageEncoderCalculatorResults::MergeFrom(const OpenCvImageEncoderCalculatorResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.OpenCvImageEncoderCalculatorResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encoded_image(from._internal_encoded_image());
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      colorspace_ = from.colorspace_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenCvImageEncoderCalculatorResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.OpenCvImageEncoderCalculatorResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenCvImageEncoderCalculatorResults::CopyFrom(const OpenCvImageEncoderCalculatorResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.OpenCvImageEncoderCalculatorResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenCvImageEncoderCalculatorResults::IsInitialized() const {
  return true;
}

void OpenCvImageEncoderCalculatorResults::InternalSwap(OpenCvImageEncoderCalculatorResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encoded_image_.Swap(&other->encoded_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenCvImageEncoderCalculatorResults, colorspace_)
      + sizeof(OpenCvImageEncoderCalculatorResults::colorspace_)
      - PROTOBUF_FIELD_OFFSET(OpenCvImageEncoderCalculatorResults, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenCvImageEncoderCalculatorResults::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fimage_2fopencv_5fimage_5fencoder_5fcalculator_2eproto[1]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenCvImageEncoderCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::OpenCvImageEncoderCalculatorOptions >, 11, false >
  OpenCvImageEncoderCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::OpenCvImageEncoderCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::OpenCvImageEncoderCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::OpenCvImageEncoderCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::OpenCvImageEncoderCalculatorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::OpenCvImageEncoderCalculatorResults* Arena::CreateMaybeMessage< ::mediapipe::OpenCvImageEncoderCalculatorResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::OpenCvImageEncoderCalculatorResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
