// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/image/recolor_calculator.proto

#include "mediapipe/calculators/image/recolor_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr RecolorCalculatorOptions::RecolorCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(nullptr)
  , invert_mask_(false)
  , mask_channel_(1)

  , adjust_with_luminance_(true){}
struct RecolorCalculatorOptionsDefaultTypeInternal {
  constexpr RecolorCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecolorCalculatorOptionsDefaultTypeInternal() {}
  union {
    RecolorCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecolorCalculatorOptionsDefaultTypeInternal _RecolorCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::RecolorCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RecolorCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RecolorCalculatorOptions, mask_channel_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RecolorCalculatorOptions, color_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RecolorCalculatorOptions, invert_mask_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RecolorCalculatorOptions, adjust_with_luminance_),
  2,
  0,
  1,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mediapipe::RecolorCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RecolorCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4mediapipe/calculators/image/recolor_ca"
  "lculator.proto\022\tmediapipe\032$mediapipe/fra"
  "mework/calculator.proto\032\032mediapipe/util/"
  "color.proto\"\313\002\n\030RecolorCalculatorOptions"
  "\022J\n\014mask_channel\030\001 \001(\0162/.mediapipe.Recol"
  "orCalculatorOptions.MaskChannel:\003RED\022\037\n\005"
  "color\030\002 \001(\0132\020.mediapipe.Color\022\032\n\013invert_"
  "mask\030\003 \001(\010:\005false\022#\n\025adjust_with_luminan"
  "ce\030\004 \001(\010:\004true\".\n\013MaskChannel\022\013\n\007UNKNOWN"
  "\020\000\022\007\n\003RED\020\001\022\t\n\005ALPHA\020\0022Q\n\003ext\022\034.mediapip"
  "e.CalculatorOptions\030\215\204\265x \001(\0132#.mediapipe"
  ".RecolorCalculatorOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
  &::descriptor_table_mediapipe_2futil_2fcolor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto = {
  false, false, 465, descriptor_table_protodef_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto, "mediapipe/calculators/image/recolor_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecolorCalculatorOptions_MaskChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto);
  return file_level_enum_descriptors_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto[0];
}
bool RecolorCalculatorOptions_MaskChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecolorCalculatorOptions_MaskChannel RecolorCalculatorOptions::UNKNOWN;
constexpr RecolorCalculatorOptions_MaskChannel RecolorCalculatorOptions::RED;
constexpr RecolorCalculatorOptions_MaskChannel RecolorCalculatorOptions::ALPHA;
constexpr RecolorCalculatorOptions_MaskChannel RecolorCalculatorOptions::MaskChannel_MIN;
constexpr RecolorCalculatorOptions_MaskChannel RecolorCalculatorOptions::MaskChannel_MAX;
constexpr int RecolorCalculatorOptions::MaskChannel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RecolorCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RecolorCalculatorOptions>()._has_bits_);
  static void set_has_mask_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::Color& color(const RecolorCalculatorOptions* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invert_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adjust_with_luminance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mediapipe::Color&
RecolorCalculatorOptions::_Internal::color(const RecolorCalculatorOptions* msg) {
  return *msg->color_;
}
void RecolorCalculatorOptions::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RecolorCalculatorOptions::RecolorCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RecolorCalculatorOptions)
}
RecolorCalculatorOptions::RecolorCalculatorOptions(const RecolorCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::mediapipe::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&invert_mask_, &from.invert_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&adjust_with_luminance_) -
    reinterpret_cast<char*>(&invert_mask_)) + sizeof(adjust_with_luminance_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RecolorCalculatorOptions)
}

void RecolorCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invert_mask_) -
    reinterpret_cast<char*>(&color_)) + sizeof(invert_mask_));
mask_channel_ = 1;
adjust_with_luminance_ = true;
}

RecolorCalculatorOptions::~RecolorCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.RecolorCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecolorCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_;
}

void RecolorCalculatorOptions::ArenaDtor(void* object) {
  RecolorCalculatorOptions* _this = reinterpret_cast< RecolorCalculatorOptions* >(object);
  (void)_this;
}
void RecolorCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecolorCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecolorCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RecolorCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    invert_mask_ = false;
    mask_channel_ = 1;
    adjust_with_luminance_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecolorCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.RecolorCalculatorOptions.MaskChannel mask_channel = 1 [default = RED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::RecolorCalculatorOptions_MaskChannel_IsValid(val))) {
            _internal_set_mask_channel(static_cast<::mediapipe::RecolorCalculatorOptions_MaskChannel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool invert_mask = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_invert_mask(&has_bits);
          invert_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adjust_with_luminance = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_adjust_with_luminance(&has_bits);
          adjust_with_luminance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecolorCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RecolorCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.RecolorCalculatorOptions.MaskChannel mask_channel = 1 [default = RED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mask_channel(), target);
  }

  // optional .mediapipe.Color color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::color(this), target, stream);
  }

  // optional bool invert_mask = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_invert_mask(), target);
  }

  // optional bool adjust_with_luminance = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_adjust_with_luminance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RecolorCalculatorOptions)
  return target;
}

size_t RecolorCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RecolorCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mediapipe.Color color = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional bool invert_mask = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.RecolorCalculatorOptions.MaskChannel mask_channel = 1 [default = RED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mask_channel());
    }

    // optional bool adjust_with_luminance = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecolorCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RecolorCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RecolorCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecolorCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RecolorCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RecolorCalculatorOptions)
    MergeFrom(*source);
  }
}

void RecolorCalculatorOptions::MergeFrom(const RecolorCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RecolorCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::mediapipe::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      invert_mask_ = from.invert_mask_;
    }
    if (cached_has_bits & 0x00000004u) {
      mask_channel_ = from.mask_channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      adjust_with_luminance_ = from.adjust_with_luminance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecolorCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RecolorCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecolorCalculatorOptions::CopyFrom(const RecolorCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RecolorCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecolorCalculatorOptions::IsInitialized() const {
  return true;
}

void RecolorCalculatorOptions::InternalSwap(RecolorCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecolorCalculatorOptions, invert_mask_)
      + sizeof(RecolorCalculatorOptions::invert_mask_)
      - PROTOBUF_FIELD_OFFSET(RecolorCalculatorOptions, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
  swap(mask_channel_, other->mask_channel_);
  swap(adjust_with_luminance_, other->adjust_with_luminance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecolorCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fimage_2frecolor_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecolorCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::RecolorCalculatorOptions >, 11, false >
  RecolorCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::RecolorCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::RecolorCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::RecolorCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RecolorCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
