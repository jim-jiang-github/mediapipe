// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/tflite/tflite_inference_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto;
namespace mediapipe {
class TfLiteInferenceCalculatorOptions;
struct TfLiteInferenceCalculatorOptionsDefaultTypeInternal;
extern TfLiteInferenceCalculatorOptionsDefaultTypeInternal _TfLiteInferenceCalculatorOptions_default_instance_;
class TfLiteInferenceCalculatorOptions_Delegate;
struct TfLiteInferenceCalculatorOptions_DelegateDefaultTypeInternal;
extern TfLiteInferenceCalculatorOptions_DelegateDefaultTypeInternal _TfLiteInferenceCalculatorOptions_Delegate_default_instance_;
class TfLiteInferenceCalculatorOptions_Delegate_Gpu;
struct TfLiteInferenceCalculatorOptions_Delegate_GpuDefaultTypeInternal;
extern TfLiteInferenceCalculatorOptions_Delegate_GpuDefaultTypeInternal _TfLiteInferenceCalculatorOptions_Delegate_Gpu_default_instance_;
class TfLiteInferenceCalculatorOptions_Delegate_Nnapi;
struct TfLiteInferenceCalculatorOptions_Delegate_NnapiDefaultTypeInternal;
extern TfLiteInferenceCalculatorOptions_Delegate_NnapiDefaultTypeInternal _TfLiteInferenceCalculatorOptions_Delegate_Nnapi_default_instance_;
class TfLiteInferenceCalculatorOptions_Delegate_TfLite;
struct TfLiteInferenceCalculatorOptions_Delegate_TfLiteDefaultTypeInternal;
extern TfLiteInferenceCalculatorOptions_Delegate_TfLiteDefaultTypeInternal _TfLiteInferenceCalculatorOptions_Delegate_TfLite_default_instance_;
class TfLiteInferenceCalculatorOptions_Delegate_Xnnpack;
struct TfLiteInferenceCalculatorOptions_Delegate_XnnpackDefaultTypeInternal;
extern TfLiteInferenceCalculatorOptions_Delegate_XnnpackDefaultTypeInternal _TfLiteInferenceCalculatorOptions_Delegate_Xnnpack_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::TfLiteInferenceCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::TfLiteInferenceCalculatorOptions>(Arena*);
template<> ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* Arena::CreateMaybeMessage<::mediapipe::TfLiteInferenceCalculatorOptions_Delegate>(Arena*);
template<> ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* Arena::CreateMaybeMessage<::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu>(Arena*);
template<> ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* Arena::CreateMaybeMessage<::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi>(Arena*);
template<> ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* Arena::CreateMaybeMessage<::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite>(Arena*);
template<> ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* Arena::CreateMaybeMessage<::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api : int {
  TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_ANY = 0,
  TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_OPENGL = 1,
  TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_OPENCL = 2
};
bool TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_IsValid(int value);
constexpr TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Api_MIN = TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_ANY;
constexpr TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Api_MAX = TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_OPENCL;
constexpr int TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Api_ARRAYSIZE = TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Api_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_descriptor();
template<typename T>
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_descriptor(), enum_t_value);
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api>(
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_descriptor(), name, value);
}
enum TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage : int {
  TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_UNSPECIFIED = 0,
  TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_FAST_SINGLE_ANSWER = 1,
  TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_SUSTAINED_SPEED = 2
};
bool TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_IsValid(int value);
constexpr TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_InferenceUsage_MIN = TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_UNSPECIFIED;
constexpr TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_InferenceUsage_MAX = TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_SUSTAINED_SPEED;
constexpr int TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_InferenceUsage_ARRAYSIZE = TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_InferenceUsage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_descriptor();
template<typename T>
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_descriptor(), enum_t_value);
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage>(
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_descriptor(), name, value);
}
// ===================================================================

class TfLiteInferenceCalculatorOptions_Delegate_TfLite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.TfLite) */ {
 public:
  inline TfLiteInferenceCalculatorOptions_Delegate_TfLite() : TfLiteInferenceCalculatorOptions_Delegate_TfLite(nullptr) {}
  ~TfLiteInferenceCalculatorOptions_Delegate_TfLite() override;
  explicit constexpr TfLiteInferenceCalculatorOptions_Delegate_TfLite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteInferenceCalculatorOptions_Delegate_TfLite(const TfLiteInferenceCalculatorOptions_Delegate_TfLite& from);
  TfLiteInferenceCalculatorOptions_Delegate_TfLite(TfLiteInferenceCalculatorOptions_Delegate_TfLite&& from) noexcept
    : TfLiteInferenceCalculatorOptions_Delegate_TfLite() {
    *this = ::std::move(from);
  }

  inline TfLiteInferenceCalculatorOptions_Delegate_TfLite& operator=(const TfLiteInferenceCalculatorOptions_Delegate_TfLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteInferenceCalculatorOptions_Delegate_TfLite& operator=(TfLiteInferenceCalculatorOptions_Delegate_TfLite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteInferenceCalculatorOptions_Delegate_TfLite& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteInferenceCalculatorOptions_Delegate_TfLite* internal_default_instance() {
    return reinterpret_cast<const TfLiteInferenceCalculatorOptions_Delegate_TfLite*>(
               &_TfLiteInferenceCalculatorOptions_Delegate_TfLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfLiteInferenceCalculatorOptions_Delegate_TfLite& a, TfLiteInferenceCalculatorOptions_Delegate_TfLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteInferenceCalculatorOptions_Delegate_TfLite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteInferenceCalculatorOptions_Delegate_TfLite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteInferenceCalculatorOptions_Delegate_TfLite* New() const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_TfLite>(nullptr);
  }

  TfLiteInferenceCalculatorOptions_Delegate_TfLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_TfLite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteInferenceCalculatorOptions_Delegate_TfLite& from);
  void MergeFrom(const TfLiteInferenceCalculatorOptions_Delegate_TfLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteInferenceCalculatorOptions_Delegate_TfLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteInferenceCalculatorOptions.Delegate.TfLite";
  }
  protected:
  explicit TfLiteInferenceCalculatorOptions_Delegate_TfLite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.TfLite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class TfLiteInferenceCalculatorOptions_Delegate_Gpu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu) */ {
 public:
  inline TfLiteInferenceCalculatorOptions_Delegate_Gpu() : TfLiteInferenceCalculatorOptions_Delegate_Gpu(nullptr) {}
  ~TfLiteInferenceCalculatorOptions_Delegate_Gpu() override;
  explicit constexpr TfLiteInferenceCalculatorOptions_Delegate_Gpu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteInferenceCalculatorOptions_Delegate_Gpu(const TfLiteInferenceCalculatorOptions_Delegate_Gpu& from);
  TfLiteInferenceCalculatorOptions_Delegate_Gpu(TfLiteInferenceCalculatorOptions_Delegate_Gpu&& from) noexcept
    : TfLiteInferenceCalculatorOptions_Delegate_Gpu() {
    *this = ::std::move(from);
  }

  inline TfLiteInferenceCalculatorOptions_Delegate_Gpu& operator=(const TfLiteInferenceCalculatorOptions_Delegate_Gpu& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteInferenceCalculatorOptions_Delegate_Gpu& operator=(TfLiteInferenceCalculatorOptions_Delegate_Gpu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteInferenceCalculatorOptions_Delegate_Gpu& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteInferenceCalculatorOptions_Delegate_Gpu* internal_default_instance() {
    return reinterpret_cast<const TfLiteInferenceCalculatorOptions_Delegate_Gpu*>(
               &_TfLiteInferenceCalculatorOptions_Delegate_Gpu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TfLiteInferenceCalculatorOptions_Delegate_Gpu& a, TfLiteInferenceCalculatorOptions_Delegate_Gpu& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteInferenceCalculatorOptions_Delegate_Gpu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteInferenceCalculatorOptions_Delegate_Gpu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteInferenceCalculatorOptions_Delegate_Gpu* New() const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_Gpu>(nullptr);
  }

  TfLiteInferenceCalculatorOptions_Delegate_Gpu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_Gpu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteInferenceCalculatorOptions_Delegate_Gpu& from);
  void MergeFrom(const TfLiteInferenceCalculatorOptions_Delegate_Gpu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteInferenceCalculatorOptions_Delegate_Gpu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu";
  }
  protected:
  explicit TfLiteInferenceCalculatorOptions_Delegate_Gpu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api Api;
  static constexpr Api ANY =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_ANY;
  static constexpr Api OPENGL =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_OPENGL;
  static constexpr Api OPENCL =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_OPENCL;
  static inline bool Api_IsValid(int value) {
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_IsValid(value);
  }
  static constexpr Api Api_MIN =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Api_MIN;
  static constexpr Api Api_MAX =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Api_MAX;
  static constexpr int Api_ARRAYSIZE =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Api_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Api_descriptor() {
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_descriptor();
  }
  template<typename T>
  static inline const std::string& Api_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Api>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Api_Name.");
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Name(enum_t_value);
  }
  static inline bool Api_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Api* value) {
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_Parse(name, value);
  }

  typedef TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage InferenceUsage;
  static constexpr InferenceUsage UNSPECIFIED =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_UNSPECIFIED;
  static constexpr InferenceUsage FAST_SINGLE_ANSWER =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_FAST_SINGLE_ANSWER;
  static constexpr InferenceUsage SUSTAINED_SPEED =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_SUSTAINED_SPEED;
  static inline bool InferenceUsage_IsValid(int value) {
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_IsValid(value);
  }
  static constexpr InferenceUsage InferenceUsage_MIN =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_InferenceUsage_MIN;
  static constexpr InferenceUsage InferenceUsage_MAX =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_InferenceUsage_MAX;
  static constexpr int InferenceUsage_ARRAYSIZE =
    TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_InferenceUsage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InferenceUsage_descriptor() {
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_descriptor();
  }
  template<typename T>
  static inline const std::string& InferenceUsage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InferenceUsage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InferenceUsage_Name.");
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_Name(enum_t_value);
  }
  static inline bool InferenceUsage_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InferenceUsage* value) {
    return TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCachedKernelPathFieldNumber = 2,
    kUseAdvancedGpuApiFieldNumber = 1,
    kApiFieldNumber = 4,
    kAllowPrecisionLossFieldNumber = 3,
    kUsageFieldNumber = 5,
  };
  // optional string cached_kernel_path = 2;
  bool has_cached_kernel_path() const;
  private:
  bool _internal_has_cached_kernel_path() const;
  public:
  void clear_cached_kernel_path();
  const std::string& cached_kernel_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cached_kernel_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cached_kernel_path();
  std::string* release_cached_kernel_path();
  void set_allocated_cached_kernel_path(std::string* cached_kernel_path);
  private:
  const std::string& _internal_cached_kernel_path() const;
  void _internal_set_cached_kernel_path(const std::string& value);
  std::string* _internal_mutable_cached_kernel_path();
  public:

  // optional bool use_advanced_gpu_api = 1 [default = false];
  bool has_use_advanced_gpu_api() const;
  private:
  bool _internal_has_use_advanced_gpu_api() const;
  public:
  void clear_use_advanced_gpu_api();
  bool use_advanced_gpu_api() const;
  void set_use_advanced_gpu_api(bool value);
  private:
  bool _internal_use_advanced_gpu_api() const;
  void _internal_set_use_advanced_gpu_api(bool value);
  public:

  // optional .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.Api api = 4 [default = ANY];
  bool has_api() const;
  private:
  bool _internal_has_api() const;
  public:
  void clear_api();
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api api() const;
  void set_api(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api value);
  private:
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api _internal_api() const;
  void _internal_set_api(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api value);
  public:

  // optional bool allow_precision_loss = 3 [default = true];
  bool has_allow_precision_loss() const;
  private:
  bool _internal_has_allow_precision_loss() const;
  public:
  void clear_allow_precision_loss();
  bool allow_precision_loss() const;
  void set_allow_precision_loss(bool value);
  private:
  bool _internal_allow_precision_loss() const;
  void _internal_set_allow_precision_loss(bool value);
  public:

  // optional .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.InferenceUsage usage = 5 [default = SUSTAINED_SPEED];
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage usage() const;
  void set_usage(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage value);
  private:
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage _internal_usage() const;
  void _internal_set_usage(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cached_kernel_path_;
  bool use_advanced_gpu_api_;
  int api_;
  bool allow_precision_loss_;
  int usage_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class TfLiteInferenceCalculatorOptions_Delegate_Nnapi PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi) */ {
 public:
  inline TfLiteInferenceCalculatorOptions_Delegate_Nnapi() : TfLiteInferenceCalculatorOptions_Delegate_Nnapi(nullptr) {}
  ~TfLiteInferenceCalculatorOptions_Delegate_Nnapi() override;
  explicit constexpr TfLiteInferenceCalculatorOptions_Delegate_Nnapi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteInferenceCalculatorOptions_Delegate_Nnapi(const TfLiteInferenceCalculatorOptions_Delegate_Nnapi& from);
  TfLiteInferenceCalculatorOptions_Delegate_Nnapi(TfLiteInferenceCalculatorOptions_Delegate_Nnapi&& from) noexcept
    : TfLiteInferenceCalculatorOptions_Delegate_Nnapi() {
    *this = ::std::move(from);
  }

  inline TfLiteInferenceCalculatorOptions_Delegate_Nnapi& operator=(const TfLiteInferenceCalculatorOptions_Delegate_Nnapi& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteInferenceCalculatorOptions_Delegate_Nnapi& operator=(TfLiteInferenceCalculatorOptions_Delegate_Nnapi&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteInferenceCalculatorOptions_Delegate_Nnapi& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteInferenceCalculatorOptions_Delegate_Nnapi* internal_default_instance() {
    return reinterpret_cast<const TfLiteInferenceCalculatorOptions_Delegate_Nnapi*>(
               &_TfLiteInferenceCalculatorOptions_Delegate_Nnapi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TfLiteInferenceCalculatorOptions_Delegate_Nnapi& a, TfLiteInferenceCalculatorOptions_Delegate_Nnapi& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteInferenceCalculatorOptions_Delegate_Nnapi* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteInferenceCalculatorOptions_Delegate_Nnapi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteInferenceCalculatorOptions_Delegate_Nnapi* New() const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_Nnapi>(nullptr);
  }

  TfLiteInferenceCalculatorOptions_Delegate_Nnapi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_Nnapi>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteInferenceCalculatorOptions_Delegate_Nnapi& from);
  void MergeFrom(const TfLiteInferenceCalculatorOptions_Delegate_Nnapi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteInferenceCalculatorOptions_Delegate_Nnapi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi";
  }
  protected:
  explicit TfLiteInferenceCalculatorOptions_Delegate_Nnapi(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheDirFieldNumber = 1,
    kModelTokenFieldNumber = 2,
  };
  // optional string cache_dir = 1;
  bool has_cache_dir() const;
  private:
  bool _internal_has_cache_dir() const;
  public:
  void clear_cache_dir();
  const std::string& cache_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_dir();
  std::string* release_cache_dir();
  void set_allocated_cache_dir(std::string* cache_dir);
  private:
  const std::string& _internal_cache_dir() const;
  void _internal_set_cache_dir(const std::string& value);
  std::string* _internal_mutable_cache_dir();
  public:

  // optional string model_token = 2;
  bool has_model_token() const;
  private:
  bool _internal_has_model_token() const;
  public:
  void clear_model_token();
  const std::string& model_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_token();
  std::string* release_model_token();
  void set_allocated_model_token(std::string* model_token);
  private:
  const std::string& _internal_model_token() const;
  void _internal_set_model_token(const std::string& value);
  std::string* _internal_mutable_model_token();
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_token_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class TfLiteInferenceCalculatorOptions_Delegate_Xnnpack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Xnnpack) */ {
 public:
  inline TfLiteInferenceCalculatorOptions_Delegate_Xnnpack() : TfLiteInferenceCalculatorOptions_Delegate_Xnnpack(nullptr) {}
  ~TfLiteInferenceCalculatorOptions_Delegate_Xnnpack() override;
  explicit constexpr TfLiteInferenceCalculatorOptions_Delegate_Xnnpack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteInferenceCalculatorOptions_Delegate_Xnnpack(const TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& from);
  TfLiteInferenceCalculatorOptions_Delegate_Xnnpack(TfLiteInferenceCalculatorOptions_Delegate_Xnnpack&& from) noexcept
    : TfLiteInferenceCalculatorOptions_Delegate_Xnnpack() {
    *this = ::std::move(from);
  }

  inline TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& operator=(const TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& operator=(TfLiteInferenceCalculatorOptions_Delegate_Xnnpack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* internal_default_instance() {
    return reinterpret_cast<const TfLiteInferenceCalculatorOptions_Delegate_Xnnpack*>(
               &_TfLiteInferenceCalculatorOptions_Delegate_Xnnpack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& a, TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* New() const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_Xnnpack>(nullptr);
  }

  TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate_Xnnpack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& from);
  void MergeFrom(const TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Xnnpack";
  }
  protected:
  explicit TfLiteInferenceCalculatorOptions_Delegate_Xnnpack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumThreadsFieldNumber = 1,
  };
  // optional int32 num_threads = 1 [default = -1];
  bool has_num_threads() const;
  private:
  bool _internal_has_num_threads() const;
  public:
  void clear_num_threads();
  ::PROTOBUF_NAMESPACE_ID::int32 num_threads() const;
  void set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_threads() const;
  void _internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Xnnpack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_threads_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class TfLiteInferenceCalculatorOptions_Delegate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteInferenceCalculatorOptions.Delegate) */ {
 public:
  inline TfLiteInferenceCalculatorOptions_Delegate() : TfLiteInferenceCalculatorOptions_Delegate(nullptr) {}
  ~TfLiteInferenceCalculatorOptions_Delegate() override;
  explicit constexpr TfLiteInferenceCalculatorOptions_Delegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteInferenceCalculatorOptions_Delegate(const TfLiteInferenceCalculatorOptions_Delegate& from);
  TfLiteInferenceCalculatorOptions_Delegate(TfLiteInferenceCalculatorOptions_Delegate&& from) noexcept
    : TfLiteInferenceCalculatorOptions_Delegate() {
    *this = ::std::move(from);
  }

  inline TfLiteInferenceCalculatorOptions_Delegate& operator=(const TfLiteInferenceCalculatorOptions_Delegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteInferenceCalculatorOptions_Delegate& operator=(TfLiteInferenceCalculatorOptions_Delegate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteInferenceCalculatorOptions_Delegate& default_instance() {
    return *internal_default_instance();
  }
  enum DelegateCase {
    kTflite = 1,
    kGpu = 2,
    kNnapi = 3,
    kXnnpack = 4,
    DELEGATE_NOT_SET = 0,
  };

  static inline const TfLiteInferenceCalculatorOptions_Delegate* internal_default_instance() {
    return reinterpret_cast<const TfLiteInferenceCalculatorOptions_Delegate*>(
               &_TfLiteInferenceCalculatorOptions_Delegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TfLiteInferenceCalculatorOptions_Delegate& a, TfLiteInferenceCalculatorOptions_Delegate& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteInferenceCalculatorOptions_Delegate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteInferenceCalculatorOptions_Delegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteInferenceCalculatorOptions_Delegate* New() const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate>(nullptr);
  }

  TfLiteInferenceCalculatorOptions_Delegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions_Delegate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteInferenceCalculatorOptions_Delegate& from);
  void MergeFrom(const TfLiteInferenceCalculatorOptions_Delegate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteInferenceCalculatorOptions_Delegate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteInferenceCalculatorOptions.Delegate";
  }
  protected:
  explicit TfLiteInferenceCalculatorOptions_Delegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TfLiteInferenceCalculatorOptions_Delegate_TfLite TfLite;
  typedef TfLiteInferenceCalculatorOptions_Delegate_Gpu Gpu;
  typedef TfLiteInferenceCalculatorOptions_Delegate_Nnapi Nnapi;
  typedef TfLiteInferenceCalculatorOptions_Delegate_Xnnpack Xnnpack;

  // accessors -------------------------------------------------------

  enum : int {
    kTfliteFieldNumber = 1,
    kGpuFieldNumber = 2,
    kNnapiFieldNumber = 3,
    kXnnpackFieldNumber = 4,
  };
  // .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.TfLite tflite = 1;
  bool has_tflite() const;
  private:
  bool _internal_has_tflite() const;
  public:
  void clear_tflite();
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite& tflite() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* release_tflite();
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* mutable_tflite();
  void set_allocated_tflite(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* tflite);
  private:
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite& _internal_tflite() const;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* _internal_mutable_tflite();
  public:
  void unsafe_arena_set_allocated_tflite(
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* tflite);
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* unsafe_arena_release_tflite();

  // .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu gpu = 2;
  bool has_gpu() const;
  private:
  bool _internal_has_gpu() const;
  public:
  void clear_gpu();
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu& gpu() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* release_gpu();
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* mutable_gpu();
  void set_allocated_gpu(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* gpu);
  private:
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu& _internal_gpu() const;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* _internal_mutable_gpu();
  public:
  void unsafe_arena_set_allocated_gpu(
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* gpu);
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* unsafe_arena_release_gpu();

  // .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi nnapi = 3;
  bool has_nnapi() const;
  private:
  bool _internal_has_nnapi() const;
  public:
  void clear_nnapi();
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi& nnapi() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* release_nnapi();
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* mutable_nnapi();
  void set_allocated_nnapi(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* nnapi);
  private:
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi& _internal_nnapi() const;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* _internal_mutable_nnapi();
  public:
  void unsafe_arena_set_allocated_nnapi(
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* nnapi);
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* unsafe_arena_release_nnapi();

  // .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Xnnpack xnnpack = 4;
  bool has_xnnpack() const;
  private:
  bool _internal_has_xnnpack() const;
  public:
  void clear_xnnpack();
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& xnnpack() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* release_xnnpack();
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* mutable_xnnpack();
  void set_allocated_xnnpack(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* xnnpack);
  private:
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& _internal_xnnpack() const;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* _internal_mutable_xnnpack();
  public:
  void unsafe_arena_set_allocated_xnnpack(
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* xnnpack);
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* unsafe_arena_release_xnnpack();

  void clear_delegate();
  DelegateCase delegate_case() const;
  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteInferenceCalculatorOptions.Delegate)
 private:
  class _Internal;
  void set_has_tflite();
  void set_has_gpu();
  void set_has_nnapi();
  void set_has_xnnpack();

  inline bool has_delegate() const;
  inline void clear_has_delegate();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DelegateUnion {
    constexpr DelegateUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* tflite_;
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* gpu_;
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* nnapi_;
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* xnnpack_;
  } delegate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class TfLiteInferenceCalculatorOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteInferenceCalculatorOptions) */ {
 public:
  inline TfLiteInferenceCalculatorOptions() : TfLiteInferenceCalculatorOptions(nullptr) {}
  ~TfLiteInferenceCalculatorOptions() override;
  explicit constexpr TfLiteInferenceCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteInferenceCalculatorOptions(const TfLiteInferenceCalculatorOptions& from);
  TfLiteInferenceCalculatorOptions(TfLiteInferenceCalculatorOptions&& from) noexcept
    : TfLiteInferenceCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline TfLiteInferenceCalculatorOptions& operator=(const TfLiteInferenceCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteInferenceCalculatorOptions& operator=(TfLiteInferenceCalculatorOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteInferenceCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteInferenceCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const TfLiteInferenceCalculatorOptions*>(
               &_TfLiteInferenceCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TfLiteInferenceCalculatorOptions& a, TfLiteInferenceCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteInferenceCalculatorOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteInferenceCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteInferenceCalculatorOptions* New() const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions>(nullptr);
  }

  TfLiteInferenceCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteInferenceCalculatorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteInferenceCalculatorOptions& from);
  void MergeFrom(const TfLiteInferenceCalculatorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteInferenceCalculatorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteInferenceCalculatorOptions";
  }
  protected:
  explicit TfLiteInferenceCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TfLiteInferenceCalculatorOptions_Delegate Delegate;

  // accessors -------------------------------------------------------

  enum : int {
    kModelPathFieldNumber = 1,
    kDelegateFieldNumber = 5,
    kUseGpuFieldNumber = 2,
    kUseNnapiFieldNumber = 3,
    kCpuNumThreadFieldNumber = 4,
  };
  // optional string model_path = 1;
  bool has_model_path() const;
  private:
  bool _internal_has_model_path() const;
  public:
  void clear_model_path();
  const std::string& model_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_path();
  std::string* release_model_path();
  void set_allocated_model_path(std::string* model_path);
  private:
  const std::string& _internal_model_path() const;
  void _internal_set_model_path(const std::string& value);
  std::string* _internal_mutable_model_path();
  public:

  // optional .mediapipe.TfLiteInferenceCalculatorOptions.Delegate delegate = 5;
  bool has_delegate() const;
  private:
  bool _internal_has_delegate() const;
  public:
  void clear_delegate();
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate& delegate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* release_delegate();
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* mutable_delegate();
  void set_allocated_delegate(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* delegate);
  private:
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate& _internal_delegate() const;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* _internal_mutable_delegate();
  public:
  void unsafe_arena_set_allocated_delegate(
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* delegate);
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* unsafe_arena_release_delegate();

  // optional bool use_gpu = 2 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_use_gpu() const;
  private:
  bool _internal_has_use_gpu() const;
  public:
  PROTOBUF_DEPRECATED void clear_use_gpu();
  PROTOBUF_DEPRECATED bool use_gpu() const;
  PROTOBUF_DEPRECATED void set_use_gpu(bool value);
  private:
  bool _internal_use_gpu() const;
  void _internal_set_use_gpu(bool value);
  public:

  // optional bool use_nnapi = 3 [default = false, deprecated = true];
  PROTOBUF_DEPRECATED bool has_use_nnapi() const;
  private:
  bool _internal_has_use_nnapi() const;
  public:
  PROTOBUF_DEPRECATED void clear_use_nnapi();
  PROTOBUF_DEPRECATED bool use_nnapi() const;
  PROTOBUF_DEPRECATED void set_use_nnapi(bool value);
  private:
  bool _internal_use_nnapi() const;
  void _internal_set_use_nnapi(bool value);
  public:

  // optional int32 cpu_num_thread = 4 [default = -1];
  bool has_cpu_num_thread() const;
  private:
  bool _internal_has_cpu_num_thread() const;
  public:
  void clear_cpu_num_thread();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_num_thread() const;
  void set_cpu_num_thread(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_num_thread() const;
  void _internal_set_cpu_num_thread(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  static const int kExtFieldNumber = 233867213;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::TfLiteInferenceCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteInferenceCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_path_;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* delegate_;
  bool use_gpu_;
  bool use_nnapi_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_num_thread_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfLiteInferenceCalculatorOptions_Delegate_TfLite

// -------------------------------------------------------------------

// TfLiteInferenceCalculatorOptions_Delegate_Gpu

// optional bool use_advanced_gpu_api = 1 [default = false];
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_has_use_advanced_gpu_api() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::has_use_advanced_gpu_api() const {
  return _internal_has_use_advanced_gpu_api();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::clear_use_advanced_gpu_api() {
  use_advanced_gpu_api_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_use_advanced_gpu_api() const {
  return use_advanced_gpu_api_;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::use_advanced_gpu_api() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.use_advanced_gpu_api)
  return _internal_use_advanced_gpu_api();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_set_use_advanced_gpu_api(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_advanced_gpu_api_ = value;
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::set_use_advanced_gpu_api(bool value) {
  _internal_set_use_advanced_gpu_api(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.use_advanced_gpu_api)
}

// optional .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.Api api = 4 [default = ANY];
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_has_api() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::has_api() const {
  return _internal_has_api();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::clear_api() {
  api_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_api() const {
  return static_cast< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api >(api_);
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api TfLiteInferenceCalculatorOptions_Delegate_Gpu::api() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.api)
  return _internal_api();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_set_api(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api value) {
  assert(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  api_ = value;
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::set_api(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api value) {
  _internal_set_api(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.api)
}

// optional bool allow_precision_loss = 3 [default = true];
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_has_allow_precision_loss() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::has_allow_precision_loss() const {
  return _internal_has_allow_precision_loss();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::clear_allow_precision_loss() {
  allow_precision_loss_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_allow_precision_loss() const {
  return allow_precision_loss_;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::allow_precision_loss() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.allow_precision_loss)
  return _internal_allow_precision_loss();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_set_allow_precision_loss(bool value) {
  _has_bits_[0] |= 0x00000008u;
  allow_precision_loss_ = value;
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::set_allow_precision_loss(bool value) {
  _internal_set_allow_precision_loss(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.allow_precision_loss)
}

// optional string cached_kernel_path = 2;
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_has_cached_kernel_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::has_cached_kernel_path() const {
  return _internal_has_cached_kernel_path();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::clear_cached_kernel_path() {
  cached_kernel_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Gpu::cached_kernel_path() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.cached_kernel_path)
  return _internal_cached_kernel_path();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::set_cached_kernel_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cached_kernel_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.cached_kernel_path)
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Gpu::mutable_cached_kernel_path() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.cached_kernel_path)
  return _internal_mutable_cached_kernel_path();
}
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_cached_kernel_path() const {
  return cached_kernel_path_.Get();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_set_cached_kernel_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cached_kernel_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_mutable_cached_kernel_path() {
  _has_bits_[0] |= 0x00000001u;
  return cached_kernel_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Gpu::release_cached_kernel_path() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.cached_kernel_path)
  if (!_internal_has_cached_kernel_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cached_kernel_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::set_allocated_cached_kernel_path(std::string* cached_kernel_path) {
  if (cached_kernel_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cached_kernel_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cached_kernel_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.cached_kernel_path)
}

// optional .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.InferenceUsage usage = 5 [default = SUSTAINED_SPEED];
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_has_usage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Gpu::has_usage() const {
  return _internal_has_usage();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::clear_usage() {
  usage_ = 2;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_usage() const {
  return static_cast< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage >(usage_);
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage TfLiteInferenceCalculatorOptions_Delegate_Gpu::usage() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.usage)
  return _internal_usage();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::_internal_set_usage(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage value) {
  assert(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  usage_ = value;
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Gpu::set_usage(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu.usage)
}

// -------------------------------------------------------------------

// TfLiteInferenceCalculatorOptions_Delegate_Nnapi

// optional string cache_dir = 1;
inline bool TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_has_cache_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Nnapi::has_cache_dir() const {
  return _internal_has_cache_dir();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::clear_cache_dir() {
  cache_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Nnapi::cache_dir() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.cache_dir)
  return _internal_cache_dir();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::set_cache_dir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cache_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.cache_dir)
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Nnapi::mutable_cache_dir() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.cache_dir)
  return _internal_mutable_cache_dir();
}
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_cache_dir() const {
  return cache_dir_.Get();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_set_cache_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_mutable_cache_dir() {
  _has_bits_[0] |= 0x00000001u;
  return cache_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Nnapi::release_cache_dir() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.cache_dir)
  if (!_internal_has_cache_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cache_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::set_allocated_cache_dir(std::string* cache_dir) {
  if (cache_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.cache_dir)
}

// optional string model_token = 2;
inline bool TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_has_model_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Nnapi::has_model_token() const {
  return _internal_has_model_token();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::clear_model_token() {
  model_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Nnapi::model_token() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.model_token)
  return _internal_model_token();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::set_model_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 model_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.model_token)
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Nnapi::mutable_model_token() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.model_token)
  return _internal_mutable_model_token();
}
inline const std::string& TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_model_token() const {
  return model_token_.Get();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_set_model_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Nnapi::_internal_mutable_model_token() {
  _has_bits_[0] |= 0x00000002u;
  return model_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions_Delegate_Nnapi::release_model_token() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.model_token)
  if (!_internal_has_model_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Nnapi::set_allocated_model_token(std::string* model_token) {
  if (model_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi.model_token)
}

// -------------------------------------------------------------------

// TfLiteInferenceCalculatorOptions_Delegate_Xnnpack

// optional int32 num_threads = 1 [default = -1];
inline bool TfLiteInferenceCalculatorOptions_Delegate_Xnnpack::_internal_has_num_threads() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate_Xnnpack::has_num_threads() const {
  return _internal_has_num_threads();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Xnnpack::clear_num_threads() {
  num_threads_ = -1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteInferenceCalculatorOptions_Delegate_Xnnpack::_internal_num_threads() const {
  return num_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteInferenceCalculatorOptions_Delegate_Xnnpack::num_threads() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Xnnpack.num_threads)
  return _internal_num_threads();
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Xnnpack::_internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_threads_ = value;
}
inline void TfLiteInferenceCalculatorOptions_Delegate_Xnnpack::set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Xnnpack.num_threads)
}

// -------------------------------------------------------------------

// TfLiteInferenceCalculatorOptions_Delegate

// .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.TfLite tflite = 1;
inline bool TfLiteInferenceCalculatorOptions_Delegate::_internal_has_tflite() const {
  return delegate_case() == kTflite;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate::has_tflite() const {
  return _internal_has_tflite();
}
inline void TfLiteInferenceCalculatorOptions_Delegate::set_has_tflite() {
  _oneof_case_[0] = kTflite;
}
inline void TfLiteInferenceCalculatorOptions_Delegate::clear_tflite() {
  if (_internal_has_tflite()) {
    if (GetArena() == nullptr) {
      delete delegate_.tflite_;
    }
    clear_has_delegate();
  }
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* TfLiteInferenceCalculatorOptions_Delegate::release_tflite() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.tflite)
  if (_internal_has_tflite()) {
    clear_has_delegate();
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* temp = delegate_.tflite_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    delegate_.tflite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite& TfLiteInferenceCalculatorOptions_Delegate::_internal_tflite() const {
  return _internal_has_tflite()
      ? *delegate_.tflite_
      : reinterpret_cast< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite&>(::mediapipe::_TfLiteInferenceCalculatorOptions_Delegate_TfLite_default_instance_);
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite& TfLiteInferenceCalculatorOptions_Delegate::tflite() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.tflite)
  return _internal_tflite();
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_release_tflite() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.tflite)
  if (_internal_has_tflite()) {
    clear_has_delegate();
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* temp = delegate_.tflite_;
    delegate_.tflite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_set_allocated_tflite(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* tflite) {
  clear_delegate();
  if (tflite) {
    set_has_tflite();
    delegate_.tflite_ = tflite;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.tflite)
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* TfLiteInferenceCalculatorOptions_Delegate::_internal_mutable_tflite() {
  if (!_internal_has_tflite()) {
    clear_delegate();
    set_has_tflite();
    delegate_.tflite_ = CreateMaybeMessage< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite >(GetArena());
  }
  return delegate_.tflite_;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_TfLite* TfLiteInferenceCalculatorOptions_Delegate::mutable_tflite() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.tflite)
  return _internal_mutable_tflite();
}

// .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Gpu gpu = 2;
inline bool TfLiteInferenceCalculatorOptions_Delegate::_internal_has_gpu() const {
  return delegate_case() == kGpu;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate::has_gpu() const {
  return _internal_has_gpu();
}
inline void TfLiteInferenceCalculatorOptions_Delegate::set_has_gpu() {
  _oneof_case_[0] = kGpu;
}
inline void TfLiteInferenceCalculatorOptions_Delegate::clear_gpu() {
  if (_internal_has_gpu()) {
    if (GetArena() == nullptr) {
      delete delegate_.gpu_;
    }
    clear_has_delegate();
  }
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* TfLiteInferenceCalculatorOptions_Delegate::release_gpu() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.gpu)
  if (_internal_has_gpu()) {
    clear_has_delegate();
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* temp = delegate_.gpu_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    delegate_.gpu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu& TfLiteInferenceCalculatorOptions_Delegate::_internal_gpu() const {
  return _internal_has_gpu()
      ? *delegate_.gpu_
      : reinterpret_cast< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu&>(::mediapipe::_TfLiteInferenceCalculatorOptions_Delegate_Gpu_default_instance_);
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu& TfLiteInferenceCalculatorOptions_Delegate::gpu() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.gpu)
  return _internal_gpu();
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_release_gpu() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.gpu)
  if (_internal_has_gpu()) {
    clear_has_delegate();
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* temp = delegate_.gpu_;
    delegate_.gpu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_set_allocated_gpu(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* gpu) {
  clear_delegate();
  if (gpu) {
    set_has_gpu();
    delegate_.gpu_ = gpu;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.gpu)
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* TfLiteInferenceCalculatorOptions_Delegate::_internal_mutable_gpu() {
  if (!_internal_has_gpu()) {
    clear_delegate();
    set_has_gpu();
    delegate_.gpu_ = CreateMaybeMessage< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu >(GetArena());
  }
  return delegate_.gpu_;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu* TfLiteInferenceCalculatorOptions_Delegate::mutable_gpu() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.gpu)
  return _internal_mutable_gpu();
}

// .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Nnapi nnapi = 3;
inline bool TfLiteInferenceCalculatorOptions_Delegate::_internal_has_nnapi() const {
  return delegate_case() == kNnapi;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate::has_nnapi() const {
  return _internal_has_nnapi();
}
inline void TfLiteInferenceCalculatorOptions_Delegate::set_has_nnapi() {
  _oneof_case_[0] = kNnapi;
}
inline void TfLiteInferenceCalculatorOptions_Delegate::clear_nnapi() {
  if (_internal_has_nnapi()) {
    if (GetArena() == nullptr) {
      delete delegate_.nnapi_;
    }
    clear_has_delegate();
  }
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* TfLiteInferenceCalculatorOptions_Delegate::release_nnapi() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.nnapi)
  if (_internal_has_nnapi()) {
    clear_has_delegate();
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* temp = delegate_.nnapi_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    delegate_.nnapi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi& TfLiteInferenceCalculatorOptions_Delegate::_internal_nnapi() const {
  return _internal_has_nnapi()
      ? *delegate_.nnapi_
      : reinterpret_cast< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi&>(::mediapipe::_TfLiteInferenceCalculatorOptions_Delegate_Nnapi_default_instance_);
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi& TfLiteInferenceCalculatorOptions_Delegate::nnapi() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.nnapi)
  return _internal_nnapi();
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_release_nnapi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.nnapi)
  if (_internal_has_nnapi()) {
    clear_has_delegate();
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* temp = delegate_.nnapi_;
    delegate_.nnapi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_set_allocated_nnapi(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* nnapi) {
  clear_delegate();
  if (nnapi) {
    set_has_nnapi();
    delegate_.nnapi_ = nnapi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.nnapi)
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* TfLiteInferenceCalculatorOptions_Delegate::_internal_mutable_nnapi() {
  if (!_internal_has_nnapi()) {
    clear_delegate();
    set_has_nnapi();
    delegate_.nnapi_ = CreateMaybeMessage< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi >(GetArena());
  }
  return delegate_.nnapi_;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Nnapi* TfLiteInferenceCalculatorOptions_Delegate::mutable_nnapi() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.nnapi)
  return _internal_mutable_nnapi();
}

// .mediapipe.TfLiteInferenceCalculatorOptions.Delegate.Xnnpack xnnpack = 4;
inline bool TfLiteInferenceCalculatorOptions_Delegate::_internal_has_xnnpack() const {
  return delegate_case() == kXnnpack;
}
inline bool TfLiteInferenceCalculatorOptions_Delegate::has_xnnpack() const {
  return _internal_has_xnnpack();
}
inline void TfLiteInferenceCalculatorOptions_Delegate::set_has_xnnpack() {
  _oneof_case_[0] = kXnnpack;
}
inline void TfLiteInferenceCalculatorOptions_Delegate::clear_xnnpack() {
  if (_internal_has_xnnpack()) {
    if (GetArena() == nullptr) {
      delete delegate_.xnnpack_;
    }
    clear_has_delegate();
  }
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* TfLiteInferenceCalculatorOptions_Delegate::release_xnnpack() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.xnnpack)
  if (_internal_has_xnnpack()) {
    clear_has_delegate();
      ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* temp = delegate_.xnnpack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    delegate_.xnnpack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& TfLiteInferenceCalculatorOptions_Delegate::_internal_xnnpack() const {
  return _internal_has_xnnpack()
      ? *delegate_.xnnpack_
      : reinterpret_cast< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack&>(::mediapipe::_TfLiteInferenceCalculatorOptions_Delegate_Xnnpack_default_instance_);
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack& TfLiteInferenceCalculatorOptions_Delegate::xnnpack() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.xnnpack)
  return _internal_xnnpack();
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_release_xnnpack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.xnnpack)
  if (_internal_has_xnnpack()) {
    clear_has_delegate();
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* temp = delegate_.xnnpack_;
    delegate_.xnnpack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TfLiteInferenceCalculatorOptions_Delegate::unsafe_arena_set_allocated_xnnpack(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* xnnpack) {
  clear_delegate();
  if (xnnpack) {
    set_has_xnnpack();
    delegate_.xnnpack_ = xnnpack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.xnnpack)
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* TfLiteInferenceCalculatorOptions_Delegate::_internal_mutable_xnnpack() {
  if (!_internal_has_xnnpack()) {
    clear_delegate();
    set_has_xnnpack();
    delegate_.xnnpack_ = CreateMaybeMessage< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack >(GetArena());
  }
  return delegate_.xnnpack_;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Xnnpack* TfLiteInferenceCalculatorOptions_Delegate::mutable_xnnpack() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.Delegate.xnnpack)
  return _internal_mutable_xnnpack();
}

inline bool TfLiteInferenceCalculatorOptions_Delegate::has_delegate() const {
  return delegate_case() != DELEGATE_NOT_SET;
}
inline void TfLiteInferenceCalculatorOptions_Delegate::clear_has_delegate() {
  _oneof_case_[0] = DELEGATE_NOT_SET;
}
inline TfLiteInferenceCalculatorOptions_Delegate::DelegateCase TfLiteInferenceCalculatorOptions_Delegate::delegate_case() const {
  return TfLiteInferenceCalculatorOptions_Delegate::DelegateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TfLiteInferenceCalculatorOptions

// optional string model_path = 1;
inline bool TfLiteInferenceCalculatorOptions::_internal_has_model_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions::has_model_path() const {
  return _internal_has_model_path();
}
inline void TfLiteInferenceCalculatorOptions::clear_model_path() {
  model_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TfLiteInferenceCalculatorOptions::model_path() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.model_path)
  return _internal_model_path();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TfLiteInferenceCalculatorOptions::set_model_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.model_path)
}
inline std::string* TfLiteInferenceCalculatorOptions::mutable_model_path() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.model_path)
  return _internal_mutable_model_path();
}
inline const std::string& TfLiteInferenceCalculatorOptions::_internal_model_path() const {
  return model_path_.Get();
}
inline void TfLiteInferenceCalculatorOptions::_internal_set_model_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions::_internal_mutable_model_path() {
  _has_bits_[0] |= 0x00000001u;
  return model_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TfLiteInferenceCalculatorOptions::release_model_path() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.model_path)
  if (!_internal_has_model_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TfLiteInferenceCalculatorOptions::set_allocated_model_path(std::string* model_path) {
  if (model_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.model_path)
}

// optional bool use_gpu = 2 [default = false, deprecated = true];
inline bool TfLiteInferenceCalculatorOptions::_internal_has_use_gpu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions::has_use_gpu() const {
  return _internal_has_use_gpu();
}
inline void TfLiteInferenceCalculatorOptions::clear_use_gpu() {
  use_gpu_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TfLiteInferenceCalculatorOptions::_internal_use_gpu() const {
  return use_gpu_;
}
inline bool TfLiteInferenceCalculatorOptions::use_gpu() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.use_gpu)
  return _internal_use_gpu();
}
inline void TfLiteInferenceCalculatorOptions::_internal_set_use_gpu(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_gpu_ = value;
}
inline void TfLiteInferenceCalculatorOptions::set_use_gpu(bool value) {
  _internal_set_use_gpu(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.use_gpu)
}

// optional bool use_nnapi = 3 [default = false, deprecated = true];
inline bool TfLiteInferenceCalculatorOptions::_internal_has_use_nnapi() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions::has_use_nnapi() const {
  return _internal_has_use_nnapi();
}
inline void TfLiteInferenceCalculatorOptions::clear_use_nnapi() {
  use_nnapi_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TfLiteInferenceCalculatorOptions::_internal_use_nnapi() const {
  return use_nnapi_;
}
inline bool TfLiteInferenceCalculatorOptions::use_nnapi() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.use_nnapi)
  return _internal_use_nnapi();
}
inline void TfLiteInferenceCalculatorOptions::_internal_set_use_nnapi(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_nnapi_ = value;
}
inline void TfLiteInferenceCalculatorOptions::set_use_nnapi(bool value) {
  _internal_set_use_nnapi(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.use_nnapi)
}

// optional int32 cpu_num_thread = 4 [default = -1];
inline bool TfLiteInferenceCalculatorOptions::_internal_has_cpu_num_thread() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TfLiteInferenceCalculatorOptions::has_cpu_num_thread() const {
  return _internal_has_cpu_num_thread();
}
inline void TfLiteInferenceCalculatorOptions::clear_cpu_num_thread() {
  cpu_num_thread_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteInferenceCalculatorOptions::_internal_cpu_num_thread() const {
  return cpu_num_thread_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteInferenceCalculatorOptions::cpu_num_thread() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.cpu_num_thread)
  return _internal_cpu_num_thread();
}
inline void TfLiteInferenceCalculatorOptions::_internal_set_cpu_num_thread(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  cpu_num_thread_ = value;
}
inline void TfLiteInferenceCalculatorOptions::set_cpu_num_thread(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu_num_thread(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteInferenceCalculatorOptions.cpu_num_thread)
}

// optional .mediapipe.TfLiteInferenceCalculatorOptions.Delegate delegate = 5;
inline bool TfLiteInferenceCalculatorOptions::_internal_has_delegate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || delegate_ != nullptr);
  return value;
}
inline bool TfLiteInferenceCalculatorOptions::has_delegate() const {
  return _internal_has_delegate();
}
inline void TfLiteInferenceCalculatorOptions::clear_delegate() {
  if (delegate_ != nullptr) delegate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate& TfLiteInferenceCalculatorOptions::_internal_delegate() const {
  const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* p = delegate_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate&>(
      ::mediapipe::_TfLiteInferenceCalculatorOptions_Delegate_default_instance_);
}
inline const ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate& TfLiteInferenceCalculatorOptions::delegate() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteInferenceCalculatorOptions.delegate)
  return _internal_delegate();
}
inline void TfLiteInferenceCalculatorOptions::unsafe_arena_set_allocated_delegate(
    ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* delegate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delegate_);
  }
  delegate_ = delegate;
  if (delegate) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.delegate)
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* TfLiteInferenceCalculatorOptions::release_delegate() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* temp = delegate_;
  delegate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* TfLiteInferenceCalculatorOptions::unsafe_arena_release_delegate() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteInferenceCalculatorOptions.delegate)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* temp = delegate_;
  delegate_ = nullptr;
  return temp;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* TfLiteInferenceCalculatorOptions::_internal_mutable_delegate() {
  _has_bits_[0] |= 0x00000002u;
  if (delegate_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TfLiteInferenceCalculatorOptions_Delegate>(GetArena());
    delegate_ = p;
  }
  return delegate_;
}
inline ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* TfLiteInferenceCalculatorOptions::mutable_delegate() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteInferenceCalculatorOptions.delegate)
  return _internal_mutable_delegate();
}
inline void TfLiteInferenceCalculatorOptions::set_allocated_delegate(::mediapipe::TfLiteInferenceCalculatorOptions_Delegate* delegate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delegate_;
  }
  if (delegate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegate);
    if (message_arena != submessage_arena) {
      delegate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  delegate_ = delegate;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TfLiteInferenceCalculatorOptions.delegate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api>() {
  return ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_Api_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage>() {
  return ::mediapipe::TfLiteInferenceCalculatorOptions_Delegate_Gpu_InferenceUsage_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5finference_5fcalculator_2eproto
