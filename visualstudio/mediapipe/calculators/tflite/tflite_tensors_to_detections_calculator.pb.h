// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/tflite/tflite_tensors_to_detections_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fdetections_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fdetections_5fcalculator_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fdetections_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fdetections_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fdetections_5fcalculator_2eproto;
namespace mediapipe {
class TfLiteTensorsToDetectionsCalculatorOptions;
struct TfLiteTensorsToDetectionsCalculatorOptionsDefaultTypeInternal;
extern TfLiteTensorsToDetectionsCalculatorOptionsDefaultTypeInternal _TfLiteTensorsToDetectionsCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::TfLiteTensorsToDetectionsCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::TfLiteTensorsToDetectionsCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class TfLiteTensorsToDetectionsCalculatorOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions) */ {
 public:
  inline TfLiteTensorsToDetectionsCalculatorOptions() : TfLiteTensorsToDetectionsCalculatorOptions(nullptr) {}
  ~TfLiteTensorsToDetectionsCalculatorOptions() override;
  explicit constexpr TfLiteTensorsToDetectionsCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteTensorsToDetectionsCalculatorOptions(const TfLiteTensorsToDetectionsCalculatorOptions& from);
  TfLiteTensorsToDetectionsCalculatorOptions(TfLiteTensorsToDetectionsCalculatorOptions&& from) noexcept
    : TfLiteTensorsToDetectionsCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline TfLiteTensorsToDetectionsCalculatorOptions& operator=(const TfLiteTensorsToDetectionsCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteTensorsToDetectionsCalculatorOptions& operator=(TfLiteTensorsToDetectionsCalculatorOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteTensorsToDetectionsCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteTensorsToDetectionsCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const TfLiteTensorsToDetectionsCalculatorOptions*>(
               &_TfLiteTensorsToDetectionsCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfLiteTensorsToDetectionsCalculatorOptions& a, TfLiteTensorsToDetectionsCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteTensorsToDetectionsCalculatorOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteTensorsToDetectionsCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteTensorsToDetectionsCalculatorOptions* New() const final {
    return CreateMaybeMessage<TfLiteTensorsToDetectionsCalculatorOptions>(nullptr);
  }

  TfLiteTensorsToDetectionsCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteTensorsToDetectionsCalculatorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteTensorsToDetectionsCalculatorOptions& from);
  void MergeFrom(const TfLiteTensorsToDetectionsCalculatorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteTensorsToDetectionsCalculatorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteTensorsToDetectionsCalculatorOptions";
  }
  protected:
  explicit TfLiteTensorsToDetectionsCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreClassesFieldNumber = 8,
    kNumClassesFieldNumber = 1,
    kNumBoxesFieldNumber = 2,
    kNumCoordsFieldNumber = 3,
    kXScaleFieldNumber = 4,
    kYScaleFieldNumber = 5,
    kWScaleFieldNumber = 6,
    kHScaleFieldNumber = 7,
    kKeypointCoordOffsetFieldNumber = 9,
    kNumKeypointsFieldNumber = 10,
    kBoxCoordOffsetFieldNumber = 12,
    kApplyExponentialOnBoxSizeFieldNumber = 13,
    kReverseOutputOrderFieldNumber = 14,
    kSigmoidScoreFieldNumber = 15,
    kFlipVerticallyFieldNumber = 18,
    kScoreClippingThreshFieldNumber = 16,
    kMinScoreThreshFieldNumber = 19,
    kNumValuesPerKeypointFieldNumber = 11,
  };
  // repeated int32 ignore_classes = 8;
  int ignore_classes_size() const;
  private:
  int _internal_ignore_classes_size() const;
  public:
  void clear_ignore_classes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ignore_classes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ignore_classes() const;
  void _internal_add_ignore_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ignore_classes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ignore_classes(int index) const;
  void set_ignore_classes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ignore_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ignore_classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ignore_classes();

  // optional int32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes() const;
  void set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_classes() const;
  void _internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_boxes = 2;
  bool has_num_boxes() const;
  private:
  bool _internal_has_num_boxes() const;
  public:
  void clear_num_boxes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_boxes() const;
  void set_num_boxes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_boxes() const;
  void _internal_set_num_boxes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_coords = 3;
  bool has_num_coords() const;
  private:
  bool _internal_has_num_coords() const;
  public:
  void clear_num_coords();
  ::PROTOBUF_NAMESPACE_ID::int32 num_coords() const;
  void set_num_coords(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_coords() const;
  void _internal_set_num_coords(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float x_scale = 4 [default = 0];
  bool has_x_scale() const;
  private:
  bool _internal_has_x_scale() const;
  public:
  void clear_x_scale();
  float x_scale() const;
  void set_x_scale(float value);
  private:
  float _internal_x_scale() const;
  void _internal_set_x_scale(float value);
  public:

  // optional float y_scale = 5 [default = 0];
  bool has_y_scale() const;
  private:
  bool _internal_has_y_scale() const;
  public:
  void clear_y_scale();
  float y_scale() const;
  void set_y_scale(float value);
  private:
  float _internal_y_scale() const;
  void _internal_set_y_scale(float value);
  public:

  // optional float w_scale = 6 [default = 0];
  bool has_w_scale() const;
  private:
  bool _internal_has_w_scale() const;
  public:
  void clear_w_scale();
  float w_scale() const;
  void set_w_scale(float value);
  private:
  float _internal_w_scale() const;
  void _internal_set_w_scale(float value);
  public:

  // optional float h_scale = 7 [default = 0];
  bool has_h_scale() const;
  private:
  bool _internal_has_h_scale() const;
  public:
  void clear_h_scale();
  float h_scale() const;
  void set_h_scale(float value);
  private:
  float _internal_h_scale() const;
  void _internal_set_h_scale(float value);
  public:

  // optional int32 keypoint_coord_offset = 9;
  bool has_keypoint_coord_offset() const;
  private:
  bool _internal_has_keypoint_coord_offset() const;
  public:
  void clear_keypoint_coord_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 keypoint_coord_offset() const;
  void set_keypoint_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keypoint_coord_offset() const;
  void _internal_set_keypoint_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_keypoints = 10 [default = 0];
  bool has_num_keypoints() const;
  private:
  bool _internal_has_num_keypoints() const;
  public:
  void clear_num_keypoints();
  ::PROTOBUF_NAMESPACE_ID::int32 num_keypoints() const;
  void set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_keypoints() const;
  void _internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 box_coord_offset = 12 [default = 0];
  bool has_box_coord_offset() const;
  private:
  bool _internal_has_box_coord_offset() const;
  public:
  void clear_box_coord_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 box_coord_offset() const;
  void set_box_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_box_coord_offset() const;
  void _internal_set_box_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool apply_exponential_on_box_size = 13 [default = false];
  bool has_apply_exponential_on_box_size() const;
  private:
  bool _internal_has_apply_exponential_on_box_size() const;
  public:
  void clear_apply_exponential_on_box_size();
  bool apply_exponential_on_box_size() const;
  void set_apply_exponential_on_box_size(bool value);
  private:
  bool _internal_apply_exponential_on_box_size() const;
  void _internal_set_apply_exponential_on_box_size(bool value);
  public:

  // optional bool reverse_output_order = 14 [default = false];
  bool has_reverse_output_order() const;
  private:
  bool _internal_has_reverse_output_order() const;
  public:
  void clear_reverse_output_order();
  bool reverse_output_order() const;
  void set_reverse_output_order(bool value);
  private:
  bool _internal_reverse_output_order() const;
  void _internal_set_reverse_output_order(bool value);
  public:

  // optional bool sigmoid_score = 15 [default = false];
  bool has_sigmoid_score() const;
  private:
  bool _internal_has_sigmoid_score() const;
  public:
  void clear_sigmoid_score();
  bool sigmoid_score() const;
  void set_sigmoid_score(bool value);
  private:
  bool _internal_sigmoid_score() const;
  void _internal_set_sigmoid_score(bool value);
  public:

  // optional bool flip_vertically = 18 [default = false];
  bool has_flip_vertically() const;
  private:
  bool _internal_has_flip_vertically() const;
  public:
  void clear_flip_vertically();
  bool flip_vertically() const;
  void set_flip_vertically(bool value);
  private:
  bool _internal_flip_vertically() const;
  void _internal_set_flip_vertically(bool value);
  public:

  // optional float score_clipping_thresh = 16;
  bool has_score_clipping_thresh() const;
  private:
  bool _internal_has_score_clipping_thresh() const;
  public:
  void clear_score_clipping_thresh();
  float score_clipping_thresh() const;
  void set_score_clipping_thresh(float value);
  private:
  float _internal_score_clipping_thresh() const;
  void _internal_set_score_clipping_thresh(float value);
  public:

  // optional float min_score_thresh = 19;
  bool has_min_score_thresh() const;
  private:
  bool _internal_has_min_score_thresh() const;
  public:
  void clear_min_score_thresh();
  float min_score_thresh() const;
  void set_min_score_thresh(float value);
  private:
  float _internal_min_score_thresh() const;
  void _internal_set_min_score_thresh(float value);
  public:

  // optional int32 num_values_per_keypoint = 11 [default = 2];
  bool has_num_values_per_keypoint() const;
  private:
  bool _internal_has_num_values_per_keypoint() const;
  public:
  void clear_num_values_per_keypoint();
  ::PROTOBUF_NAMESPACE_ID::int32 num_values_per_keypoint() const;
  void set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_values_per_keypoint() const;
  void _internal_set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  static const int kExtFieldNumber = 246514968;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::TfLiteTensorsToDetectionsCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ignore_classes_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_boxes_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_coords_;
  float x_scale_;
  float y_scale_;
  float w_scale_;
  float h_scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 keypoint_coord_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_keypoints_;
  ::PROTOBUF_NAMESPACE_ID::int32 box_coord_offset_;
  bool apply_exponential_on_box_size_;
  bool reverse_output_order_;
  bool sigmoid_score_;
  bool flip_vertically_;
  float score_clipping_thresh_;
  float min_score_thresh_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_values_per_keypoint_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fdetections_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfLiteTensorsToDetectionsCalculatorOptions

// optional int32 num_classes = 1;
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_num_classes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_num_classes() {
  num_classes_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_num_classes() const {
  return num_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::num_classes() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_classes)
  return _internal_num_classes();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_classes_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_classes)
}

// optional int32 num_boxes = 2;
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_num_boxes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_num_boxes() const {
  return _internal_has_num_boxes();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_num_boxes() {
  num_boxes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_num_boxes() const {
  return num_boxes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::num_boxes() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_boxes)
  return _internal_num_boxes();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_num_boxes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_boxes_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_num_boxes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_boxes(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_boxes)
}

// optional int32 num_coords = 3;
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_num_coords() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_num_coords() const {
  return _internal_has_num_coords();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_num_coords() {
  num_coords_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_num_coords() const {
  return num_coords_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::num_coords() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_coords)
  return _internal_num_coords();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_num_coords(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_coords_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_num_coords(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_coords(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_coords)
}

// optional int32 keypoint_coord_offset = 9;
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_keypoint_coord_offset() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_keypoint_coord_offset() const {
  return _internal_has_keypoint_coord_offset();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_keypoint_coord_offset() {
  keypoint_coord_offset_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_keypoint_coord_offset() const {
  return keypoint_coord_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::keypoint_coord_offset() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.keypoint_coord_offset)
  return _internal_keypoint_coord_offset();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_keypoint_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  keypoint_coord_offset_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_keypoint_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keypoint_coord_offset(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.keypoint_coord_offset)
}

// optional int32 num_keypoints = 10 [default = 0];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_num_keypoints() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_num_keypoints() const {
  return _internal_has_num_keypoints();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_num_keypoints() {
  num_keypoints_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_num_keypoints() const {
  return num_keypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::num_keypoints() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_keypoints)
  return _internal_num_keypoints();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_keypoints_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_keypoints(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_keypoints)
}

// optional int32 num_values_per_keypoint = 11 [default = 2];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_num_values_per_keypoint() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_num_values_per_keypoint() const {
  return _internal_has_num_values_per_keypoint();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_num_values_per_keypoint() {
  num_values_per_keypoint_ = 2;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_num_values_per_keypoint() const {
  return num_values_per_keypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::num_values_per_keypoint() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_values_per_keypoint)
  return _internal_num_values_per_keypoint();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  num_values_per_keypoint_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_values_per_keypoint(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.num_values_per_keypoint)
}

// optional int32 box_coord_offset = 12 [default = 0];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_box_coord_offset() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_box_coord_offset() const {
  return _internal_has_box_coord_offset();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_box_coord_offset() {
  box_coord_offset_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_box_coord_offset() const {
  return box_coord_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::box_coord_offset() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.box_coord_offset)
  return _internal_box_coord_offset();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_box_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  box_coord_offset_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_box_coord_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_box_coord_offset(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.box_coord_offset)
}

// optional float x_scale = 4 [default = 0];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_x_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_x_scale() const {
  return _internal_has_x_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_x_scale() {
  x_scale_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::_internal_x_scale() const {
  return x_scale_;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::x_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.x_scale)
  return _internal_x_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_x_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_scale_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_x_scale(float value) {
  _internal_set_x_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.x_scale)
}

// optional float y_scale = 5 [default = 0];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_y_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_y_scale() const {
  return _internal_has_y_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_y_scale() {
  y_scale_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::_internal_y_scale() const {
  return y_scale_;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::y_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.y_scale)
  return _internal_y_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_y_scale(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_scale_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_y_scale(float value) {
  _internal_set_y_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.y_scale)
}

// optional float w_scale = 6 [default = 0];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_w_scale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_w_scale() const {
  return _internal_has_w_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_w_scale() {
  w_scale_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::_internal_w_scale() const {
  return w_scale_;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::w_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.w_scale)
  return _internal_w_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_w_scale(float value) {
  _has_bits_[0] |= 0x00000020u;
  w_scale_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_w_scale(float value) {
  _internal_set_w_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.w_scale)
}

// optional float h_scale = 7 [default = 0];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_h_scale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_h_scale() const {
  return _internal_has_h_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_h_scale() {
  h_scale_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::_internal_h_scale() const {
  return h_scale_;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::h_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.h_scale)
  return _internal_h_scale();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_h_scale(float value) {
  _has_bits_[0] |= 0x00000040u;
  h_scale_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_h_scale(float value) {
  _internal_set_h_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.h_scale)
}

// optional bool apply_exponential_on_box_size = 13 [default = false];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_apply_exponential_on_box_size() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_apply_exponential_on_box_size() const {
  return _internal_has_apply_exponential_on_box_size();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_apply_exponential_on_box_size() {
  apply_exponential_on_box_size_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_apply_exponential_on_box_size() const {
  return apply_exponential_on_box_size_;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::apply_exponential_on_box_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.apply_exponential_on_box_size)
  return _internal_apply_exponential_on_box_size();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_apply_exponential_on_box_size(bool value) {
  _has_bits_[0] |= 0x00000400u;
  apply_exponential_on_box_size_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_apply_exponential_on_box_size(bool value) {
  _internal_set_apply_exponential_on_box_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.apply_exponential_on_box_size)
}

// optional bool reverse_output_order = 14 [default = false];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_reverse_output_order() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_reverse_output_order() const {
  return _internal_has_reverse_output_order();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_reverse_output_order() {
  reverse_output_order_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_reverse_output_order() const {
  return reverse_output_order_;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::reverse_output_order() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.reverse_output_order)
  return _internal_reverse_output_order();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_reverse_output_order(bool value) {
  _has_bits_[0] |= 0x00000800u;
  reverse_output_order_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_reverse_output_order(bool value) {
  _internal_set_reverse_output_order(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.reverse_output_order)
}

// repeated int32 ignore_classes = 8;
inline int TfLiteTensorsToDetectionsCalculatorOptions::_internal_ignore_classes_size() const {
  return ignore_classes_.size();
}
inline int TfLiteTensorsToDetectionsCalculatorOptions::ignore_classes_size() const {
  return _internal_ignore_classes_size();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_ignore_classes() {
  ignore_classes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::_internal_ignore_classes(int index) const {
  return ignore_classes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToDetectionsCalculatorOptions::ignore_classes(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.ignore_classes)
  return _internal_ignore_classes(index);
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_ignore_classes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ignore_classes_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.ignore_classes)
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_add_ignore_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ignore_classes_.Add(value);
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::add_ignore_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ignore_classes(value);
  // @@protoc_insertion_point(field_add:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.ignore_classes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TfLiteTensorsToDetectionsCalculatorOptions::_internal_ignore_classes() const {
  return ignore_classes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TfLiteTensorsToDetectionsCalculatorOptions::ignore_classes() const {
  // @@protoc_insertion_point(field_list:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.ignore_classes)
  return _internal_ignore_classes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TfLiteTensorsToDetectionsCalculatorOptions::_internal_mutable_ignore_classes() {
  return &ignore_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TfLiteTensorsToDetectionsCalculatorOptions::mutable_ignore_classes() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.ignore_classes)
  return _internal_mutable_ignore_classes();
}

// optional bool sigmoid_score = 15 [default = false];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_sigmoid_score() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_sigmoid_score() const {
  return _internal_has_sigmoid_score();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_sigmoid_score() {
  sigmoid_score_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_sigmoid_score() const {
  return sigmoid_score_;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::sigmoid_score() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.sigmoid_score)
  return _internal_sigmoid_score();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_sigmoid_score(bool value) {
  _has_bits_[0] |= 0x00001000u;
  sigmoid_score_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_sigmoid_score(bool value) {
  _internal_set_sigmoid_score(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.sigmoid_score)
}

// optional float score_clipping_thresh = 16;
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_score_clipping_thresh() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_score_clipping_thresh() const {
  return _internal_has_score_clipping_thresh();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_score_clipping_thresh() {
  score_clipping_thresh_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::_internal_score_clipping_thresh() const {
  return score_clipping_thresh_;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::score_clipping_thresh() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.score_clipping_thresh)
  return _internal_score_clipping_thresh();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_score_clipping_thresh(float value) {
  _has_bits_[0] |= 0x00004000u;
  score_clipping_thresh_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_score_clipping_thresh(float value) {
  _internal_set_score_clipping_thresh(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.score_clipping_thresh)
}

// optional bool flip_vertically = 18 [default = false];
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_flip_vertically() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_flip_vertically() const {
  return _internal_has_flip_vertically();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_flip_vertically() {
  flip_vertically_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_flip_vertically() const {
  return flip_vertically_;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::flip_vertically() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.flip_vertically)
  return _internal_flip_vertically();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_flip_vertically(bool value) {
  _has_bits_[0] |= 0x00002000u;
  flip_vertically_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_flip_vertically(bool value) {
  _internal_set_flip_vertically(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.flip_vertically)
}

// optional float min_score_thresh = 19;
inline bool TfLiteTensorsToDetectionsCalculatorOptions::_internal_has_min_score_thresh() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TfLiteTensorsToDetectionsCalculatorOptions::has_min_score_thresh() const {
  return _internal_has_min_score_thresh();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::clear_min_score_thresh() {
  min_score_thresh_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::_internal_min_score_thresh() const {
  return min_score_thresh_;
}
inline float TfLiteTensorsToDetectionsCalculatorOptions::min_score_thresh() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.min_score_thresh)
  return _internal_min_score_thresh();
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::_internal_set_min_score_thresh(float value) {
  _has_bits_[0] |= 0x00008000u;
  min_score_thresh_ = value;
}
inline void TfLiteTensorsToDetectionsCalculatorOptions::set_min_score_thresh(float value) {
  _internal_set_min_score_thresh(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.min_score_thresh)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fdetections_5fcalculator_2eproto
