// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/tflite/tflite_tensors_to_landmarks_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5flandmarks_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5flandmarks_5fcalculator_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5flandmarks_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5flandmarks_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5flandmarks_5fcalculator_2eproto;
namespace mediapipe {
class TfLiteTensorsToLandmarksCalculatorOptions;
struct TfLiteTensorsToLandmarksCalculatorOptionsDefaultTypeInternal;
extern TfLiteTensorsToLandmarksCalculatorOptionsDefaultTypeInternal _TfLiteTensorsToLandmarksCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum TfLiteTensorsToLandmarksCalculatorOptions_Activation : int {
  TfLiteTensorsToLandmarksCalculatorOptions_Activation_NONE = 0,
  TfLiteTensorsToLandmarksCalculatorOptions_Activation_SIGMOID = 1
};
bool TfLiteTensorsToLandmarksCalculatorOptions_Activation_IsValid(int value);
constexpr TfLiteTensorsToLandmarksCalculatorOptions_Activation TfLiteTensorsToLandmarksCalculatorOptions_Activation_Activation_MIN = TfLiteTensorsToLandmarksCalculatorOptions_Activation_NONE;
constexpr TfLiteTensorsToLandmarksCalculatorOptions_Activation TfLiteTensorsToLandmarksCalculatorOptions_Activation_Activation_MAX = TfLiteTensorsToLandmarksCalculatorOptions_Activation_SIGMOID;
constexpr int TfLiteTensorsToLandmarksCalculatorOptions_Activation_Activation_ARRAYSIZE = TfLiteTensorsToLandmarksCalculatorOptions_Activation_Activation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TfLiteTensorsToLandmarksCalculatorOptions_Activation_descriptor();
template<typename T>
inline const std::string& TfLiteTensorsToLandmarksCalculatorOptions_Activation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TfLiteTensorsToLandmarksCalculatorOptions_Activation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TfLiteTensorsToLandmarksCalculatorOptions_Activation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TfLiteTensorsToLandmarksCalculatorOptions_Activation_descriptor(), enum_t_value);
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions_Activation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TfLiteTensorsToLandmarksCalculatorOptions_Activation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TfLiteTensorsToLandmarksCalculatorOptions_Activation>(
    TfLiteTensorsToLandmarksCalculatorOptions_Activation_descriptor(), name, value);
}
// ===================================================================

class TfLiteTensorsToLandmarksCalculatorOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions) */ {
 public:
  inline TfLiteTensorsToLandmarksCalculatorOptions() : TfLiteTensorsToLandmarksCalculatorOptions(nullptr) {}
  ~TfLiteTensorsToLandmarksCalculatorOptions() override;
  explicit constexpr TfLiteTensorsToLandmarksCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteTensorsToLandmarksCalculatorOptions(const TfLiteTensorsToLandmarksCalculatorOptions& from);
  TfLiteTensorsToLandmarksCalculatorOptions(TfLiteTensorsToLandmarksCalculatorOptions&& from) noexcept
    : TfLiteTensorsToLandmarksCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline TfLiteTensorsToLandmarksCalculatorOptions& operator=(const TfLiteTensorsToLandmarksCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteTensorsToLandmarksCalculatorOptions& operator=(TfLiteTensorsToLandmarksCalculatorOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteTensorsToLandmarksCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteTensorsToLandmarksCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const TfLiteTensorsToLandmarksCalculatorOptions*>(
               &_TfLiteTensorsToLandmarksCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfLiteTensorsToLandmarksCalculatorOptions& a, TfLiteTensorsToLandmarksCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteTensorsToLandmarksCalculatorOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteTensorsToLandmarksCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteTensorsToLandmarksCalculatorOptions* New() const final {
    return CreateMaybeMessage<TfLiteTensorsToLandmarksCalculatorOptions>(nullptr);
  }

  TfLiteTensorsToLandmarksCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteTensorsToLandmarksCalculatorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteTensorsToLandmarksCalculatorOptions& from);
  void MergeFrom(const TfLiteTensorsToLandmarksCalculatorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteTensorsToLandmarksCalculatorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteTensorsToLandmarksCalculatorOptions";
  }
  protected:
  explicit TfLiteTensorsToLandmarksCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TfLiteTensorsToLandmarksCalculatorOptions_Activation Activation;
  static constexpr Activation NONE =
    TfLiteTensorsToLandmarksCalculatorOptions_Activation_NONE;
  static constexpr Activation SIGMOID =
    TfLiteTensorsToLandmarksCalculatorOptions_Activation_SIGMOID;
  static inline bool Activation_IsValid(int value) {
    return TfLiteTensorsToLandmarksCalculatorOptions_Activation_IsValid(value);
  }
  static constexpr Activation Activation_MIN =
    TfLiteTensorsToLandmarksCalculatorOptions_Activation_Activation_MIN;
  static constexpr Activation Activation_MAX =
    TfLiteTensorsToLandmarksCalculatorOptions_Activation_Activation_MAX;
  static constexpr int Activation_ARRAYSIZE =
    TfLiteTensorsToLandmarksCalculatorOptions_Activation_Activation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Activation_descriptor() {
    return TfLiteTensorsToLandmarksCalculatorOptions_Activation_descriptor();
  }
  template<typename T>
  static inline const std::string& Activation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Activation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Activation_Name.");
    return TfLiteTensorsToLandmarksCalculatorOptions_Activation_Name(enum_t_value);
  }
  static inline bool Activation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Activation* value) {
    return TfLiteTensorsToLandmarksCalculatorOptions_Activation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNumLandmarksFieldNumber = 1,
    kInputImageWidthFieldNumber = 2,
    kInputImageHeightFieldNumber = 3,
    kFlipVerticallyFieldNumber = 4,
    kFlipHorizontallyFieldNumber = 6,
    kVisibilityActivationFieldNumber = 7,
    kPresenceActivationFieldNumber = 8,
    kNormalizeZFieldNumber = 5,
  };
  // optional int32 num_landmarks = 1;
  bool has_num_landmarks() const;
  private:
  bool _internal_has_num_landmarks() const;
  public:
  void clear_num_landmarks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_landmarks() const;
  void set_num_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_landmarks() const;
  void _internal_set_num_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 input_image_width = 2;
  bool has_input_image_width() const;
  private:
  bool _internal_has_input_image_width() const;
  public:
  void clear_input_image_width();
  ::PROTOBUF_NAMESPACE_ID::int32 input_image_width() const;
  void set_input_image_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_image_width() const;
  void _internal_set_input_image_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 input_image_height = 3;
  bool has_input_image_height() const;
  private:
  bool _internal_has_input_image_height() const;
  public:
  void clear_input_image_height();
  ::PROTOBUF_NAMESPACE_ID::int32 input_image_height() const;
  void set_input_image_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_image_height() const;
  void _internal_set_input_image_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool flip_vertically = 4 [default = false];
  bool has_flip_vertically() const;
  private:
  bool _internal_has_flip_vertically() const;
  public:
  void clear_flip_vertically();
  bool flip_vertically() const;
  void set_flip_vertically(bool value);
  private:
  bool _internal_flip_vertically() const;
  void _internal_set_flip_vertically(bool value);
  public:

  // optional bool flip_horizontally = 6 [default = false];
  bool has_flip_horizontally() const;
  private:
  bool _internal_has_flip_horizontally() const;
  public:
  void clear_flip_horizontally();
  bool flip_horizontally() const;
  void set_flip_horizontally(bool value);
  private:
  bool _internal_flip_horizontally() const;
  void _internal_set_flip_horizontally(bool value);
  public:

  // optional .mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.Activation visibility_activation = 7 [default = NONE];
  bool has_visibility_activation() const;
  private:
  bool _internal_has_visibility_activation() const;
  public:
  void clear_visibility_activation();
  ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation visibility_activation() const;
  void set_visibility_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value);
  private:
  ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation _internal_visibility_activation() const;
  void _internal_set_visibility_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value);
  public:

  // optional .mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.Activation presence_activation = 8 [default = NONE];
  bool has_presence_activation() const;
  private:
  bool _internal_has_presence_activation() const;
  public:
  void clear_presence_activation();
  ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation presence_activation() const;
  void set_presence_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value);
  private:
  ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation _internal_presence_activation() const;
  void _internal_set_presence_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value);
  public:

  // optional float normalize_z = 5 [default = 1];
  bool has_normalize_z() const;
  private:
  bool _internal_has_normalize_z() const;
  public:
  void clear_normalize_z();
  float normalize_z() const;
  void set_normalize_z(float value);
  private:
  float _internal_normalize_z() const;
  void _internal_set_normalize_z(float value);
  public:

  static const int kExtFieldNumber = 257405002;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_landmarks_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_image_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_image_height_;
  bool flip_vertically_;
  bool flip_horizontally_;
  int visibility_activation_;
  int presence_activation_;
  float normalize_z_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5flandmarks_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfLiteTensorsToLandmarksCalculatorOptions

// optional int32 num_landmarks = 1;
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_num_landmarks() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_num_landmarks() const {
  return _internal_has_num_landmarks();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_num_landmarks() {
  num_landmarks_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToLandmarksCalculatorOptions::_internal_num_landmarks() const {
  return num_landmarks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToLandmarksCalculatorOptions::num_landmarks() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.num_landmarks)
  return _internal_num_landmarks();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_num_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_landmarks_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_num_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_landmarks(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.num_landmarks)
}

// optional int32 input_image_width = 2;
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_input_image_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_input_image_width() const {
  return _internal_has_input_image_width();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_input_image_width() {
  input_image_width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToLandmarksCalculatorOptions::_internal_input_image_width() const {
  return input_image_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToLandmarksCalculatorOptions::input_image_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.input_image_width)
  return _internal_input_image_width();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_input_image_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  input_image_width_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_input_image_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_image_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.input_image_width)
}

// optional int32 input_image_height = 3;
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_input_image_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_input_image_height() const {
  return _internal_has_input_image_height();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_input_image_height() {
  input_image_height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToLandmarksCalculatorOptions::_internal_input_image_height() const {
  return input_image_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToLandmarksCalculatorOptions::input_image_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.input_image_height)
  return _internal_input_image_height();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_input_image_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  input_image_height_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_input_image_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_image_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.input_image_height)
}

// optional bool flip_vertically = 4 [default = false];
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_flip_vertically() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_flip_vertically() const {
  return _internal_has_flip_vertically();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_flip_vertically() {
  flip_vertically_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_flip_vertically() const {
  return flip_vertically_;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::flip_vertically() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.flip_vertically)
  return _internal_flip_vertically();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_flip_vertically(bool value) {
  _has_bits_[0] |= 0x00000008u;
  flip_vertically_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_flip_vertically(bool value) {
  _internal_set_flip_vertically(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.flip_vertically)
}

// optional bool flip_horizontally = 6 [default = false];
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_flip_horizontally() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_flip_horizontally() const {
  return _internal_has_flip_horizontally();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_flip_horizontally() {
  flip_horizontally_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_flip_horizontally() const {
  return flip_horizontally_;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::flip_horizontally() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.flip_horizontally)
  return _internal_flip_horizontally();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_flip_horizontally(bool value) {
  _has_bits_[0] |= 0x00000010u;
  flip_horizontally_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_flip_horizontally(bool value) {
  _internal_set_flip_horizontally(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.flip_horizontally)
}

// optional float normalize_z = 5 [default = 1];
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_normalize_z() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_normalize_z() const {
  return _internal_has_normalize_z();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_normalize_z() {
  normalize_z_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TfLiteTensorsToLandmarksCalculatorOptions::_internal_normalize_z() const {
  return normalize_z_;
}
inline float TfLiteTensorsToLandmarksCalculatorOptions::normalize_z() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.normalize_z)
  return _internal_normalize_z();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_normalize_z(float value) {
  _has_bits_[0] |= 0x00000080u;
  normalize_z_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_normalize_z(float value) {
  _internal_set_normalize_z(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.normalize_z)
}

// optional .mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.Activation visibility_activation = 7 [default = NONE];
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_visibility_activation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_visibility_activation() const {
  return _internal_has_visibility_activation();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_visibility_activation() {
  visibility_activation_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation TfLiteTensorsToLandmarksCalculatorOptions::_internal_visibility_activation() const {
  return static_cast< ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation >(visibility_activation_);
}
inline ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation TfLiteTensorsToLandmarksCalculatorOptions::visibility_activation() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.visibility_activation)
  return _internal_visibility_activation();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_visibility_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value) {
  assert(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  visibility_activation_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_visibility_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value) {
  _internal_set_visibility_activation(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.visibility_activation)
}

// optional .mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.Activation presence_activation = 8 [default = NONE];
inline bool TfLiteTensorsToLandmarksCalculatorOptions::_internal_has_presence_activation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TfLiteTensorsToLandmarksCalculatorOptions::has_presence_activation() const {
  return _internal_has_presence_activation();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::clear_presence_activation() {
  presence_activation_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation TfLiteTensorsToLandmarksCalculatorOptions::_internal_presence_activation() const {
  return static_cast< ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation >(presence_activation_);
}
inline ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation TfLiteTensorsToLandmarksCalculatorOptions::presence_activation() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.presence_activation)
  return _internal_presence_activation();
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::_internal_set_presence_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value) {
  assert(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  presence_activation_ = value;
}
inline void TfLiteTensorsToLandmarksCalculatorOptions::set_presence_activation(::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation value) {
  _internal_set_presence_activation(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToLandmarksCalculatorOptions.presence_activation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation>() {
  return ::mediapipe::TfLiteTensorsToLandmarksCalculatorOptions_Activation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5flandmarks_5fcalculator_2eproto
