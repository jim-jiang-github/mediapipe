// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/tflite/tflite_tensors_to_segmentation_calculator.proto

#include "mediapipe/calculators/tflite/tflite_tensors_to_segmentation_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr TfLiteTensorsToSegmentationCalculatorOptions::TfLiteTensorsToSegmentationCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensor_width_(0)
  , tensor_height_(0)
  , tensor_channels_(0)
  , flip_vertically_(false)
  , combine_with_previous_ratio_(1)
  , output_layer_index_(1){}
struct TfLiteTensorsToSegmentationCalculatorOptionsDefaultTypeInternal {
  constexpr TfLiteTensorsToSegmentationCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TfLiteTensorsToSegmentationCalculatorOptionsDefaultTypeInternal() {}
  union {
    TfLiteTensorsToSegmentationCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TfLiteTensorsToSegmentationCalculatorOptionsDefaultTypeInternal _TfLiteTensorsToSegmentationCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, tensor_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, tensor_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, tensor_channels_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, combine_with_previous_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, output_layer_index_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions, flip_vertically_),
  0,
  1,
  2,
  4,
  5,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TfLiteTensorsToSegmentationCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nLmediapipe/calculators/tflite/tflite_te"
  "nsors_to_segmentation_calculator.proto\022\t"
  "mediapipe\032$mediapipe/framework/calculato"
  "r.proto\"\273\002\n,TfLiteTensorsToSegmentationC"
  "alculatorOptions\022\024\n\014tensor_width\030\001 \001(\005\022\025"
  "\n\rtensor_height\030\002 \001(\005\022\027\n\017tensor_channels"
  "\030\003 \001(\005\022&\n\033combine_with_previous_ratio\030\004 "
  "\001(\002:\0011\022\035\n\022output_layer_index\030\005 \001(\005:\0011\022\027\n"
  "\017flip_vertically\030\006 \001(\0102e\n\003ext\022\034.mediapip"
  "e.CalculatorOptions\030\312\373\264x \001(\01327.mediapipe"
  ".TfLiteTensorsToSegmentationCalculatorOp"
  "tions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto = {
  false, false, 445, descriptor_table_protodef_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto, "mediapipe/calculators/tflite/tflite_tensors_to_segmentation_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class TfLiteTensorsToSegmentationCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<TfLiteTensorsToSegmentationCalculatorOptions>()._has_bits_);
  static void set_has_tensor_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tensor_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tensor_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_combine_with_previous_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_output_layer_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_flip_vertically(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TfLiteTensorsToSegmentationCalculatorOptions::TfLiteTensorsToSegmentationCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
}
TfLiteTensorsToSegmentationCalculatorOptions::TfLiteTensorsToSegmentationCalculatorOptions(const TfLiteTensorsToSegmentationCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tensor_width_, &from.tensor_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_layer_index_) -
    reinterpret_cast<char*>(&tensor_width_)) + sizeof(output_layer_index_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
}

void TfLiteTensorsToSegmentationCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tensor_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flip_vertically_) -
    reinterpret_cast<char*>(&tensor_width_)) + sizeof(flip_vertically_));
combine_with_previous_ratio_ = 1;
output_layer_index_ = 1;
}

TfLiteTensorsToSegmentationCalculatorOptions::~TfLiteTensorsToSegmentationCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TfLiteTensorsToSegmentationCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TfLiteTensorsToSegmentationCalculatorOptions::ArenaDtor(void* object) {
  TfLiteTensorsToSegmentationCalculatorOptions* _this = reinterpret_cast< TfLiteTensorsToSegmentationCalculatorOptions* >(object);
  (void)_this;
}
void TfLiteTensorsToSegmentationCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TfLiteTensorsToSegmentationCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TfLiteTensorsToSegmentationCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&tensor_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flip_vertically_) -
        reinterpret_cast<char*>(&tensor_width_)) + sizeof(flip_vertically_));
    combine_with_previous_ratio_ = 1;
    output_layer_index_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TfLiteTensorsToSegmentationCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tensor_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tensor_width(&has_bits);
          tensor_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tensor_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tensor_height(&has_bits);
          tensor_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tensor_channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tensor_channels(&has_bits);
          tensor_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float combine_with_previous_ratio = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_combine_with_previous_ratio(&has_bits);
          combine_with_previous_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 output_layer_index = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_output_layer_index(&has_bits);
          output_layer_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flip_vertically = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_flip_vertically(&has_bits);
          flip_vertically_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TfLiteTensorsToSegmentationCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tensor_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tensor_width(), target);
  }

  // optional int32 tensor_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tensor_height(), target);
  }

  // optional int32 tensor_channels = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tensor_channels(), target);
  }

  // optional float combine_with_previous_ratio = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_combine_with_previous_ratio(), target);
  }

  // optional int32 output_layer_index = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_output_layer_index(), target);
  }

  // optional bool flip_vertically = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_flip_vertically(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  return target;
}

size_t TfLiteTensorsToSegmentationCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 tensor_width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tensor_width());
    }

    // optional int32 tensor_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tensor_height());
    }

    // optional int32 tensor_channels = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tensor_channels());
    }

    // optional bool flip_vertically = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float combine_with_previous_ratio = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 output_layer_index = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_output_layer_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfLiteTensorsToSegmentationCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TfLiteTensorsToSegmentationCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfLiteTensorsToSegmentationCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
    MergeFrom(*source);
  }
}

void TfLiteTensorsToSegmentationCalculatorOptions::MergeFrom(const TfLiteTensorsToSegmentationCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      tensor_width_ = from.tensor_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      tensor_height_ = from.tensor_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      tensor_channels_ = from.tensor_channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      flip_vertically_ = from.flip_vertically_;
    }
    if (cached_has_bits & 0x00000010u) {
      combine_with_previous_ratio_ = from.combine_with_previous_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      output_layer_index_ = from.output_layer_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TfLiteTensorsToSegmentationCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfLiteTensorsToSegmentationCalculatorOptions::CopyFrom(const TfLiteTensorsToSegmentationCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TfLiteTensorsToSegmentationCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfLiteTensorsToSegmentationCalculatorOptions::IsInitialized() const {
  return true;
}

void TfLiteTensorsToSegmentationCalculatorOptions::InternalSwap(TfLiteTensorsToSegmentationCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TfLiteTensorsToSegmentationCalculatorOptions, flip_vertically_)
      + sizeof(TfLiteTensorsToSegmentationCalculatorOptions::flip_vertically_)
      - PROTOBUF_FIELD_OFFSET(TfLiteTensorsToSegmentationCalculatorOptions, tensor_width_)>(
          reinterpret_cast<char*>(&tensor_width_),
          reinterpret_cast<char*>(&other->tensor_width_));
  swap(combine_with_previous_ratio_, other->combine_with_previous_ratio_);
  swap(output_layer_index_, other->output_layer_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TfLiteTensorsToSegmentationCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2ftflite_2ftflite_5ftensors_5fto_5fsegmentation_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TfLiteTensorsToSegmentationCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions >, 11, false >
  TfLiteTensorsToSegmentationCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TfLiteTensorsToSegmentationCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
