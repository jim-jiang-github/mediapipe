// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/annotation_overlay_calculator.proto

#include "mediapipe/calculators/util/annotation_overlay_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr AnnotationOverlayCalculatorOptions::AnnotationOverlayCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : canvas_color_(nullptr)
  , flip_text_vertically_(false)
  , canvas_width_px_(1920)
  , canvas_height_px_(1080)
  , gpu_uses_top_left_origin_(true)
  , gpu_scale_factor_(1){}
struct AnnotationOverlayCalculatorOptionsDefaultTypeInternal {
  constexpr AnnotationOverlayCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationOverlayCalculatorOptionsDefaultTypeInternal() {}
  union {
    AnnotationOverlayCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationOverlayCalculatorOptionsDefaultTypeInternal _AnnotationOverlayCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, canvas_width_px_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, canvas_height_px_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, canvas_color_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, flip_text_vertically_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, gpu_uses_top_left_origin_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AnnotationOverlayCalculatorOptions, gpu_scale_factor_),
  2,
  3,
  0,
  1,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mediapipe::AnnotationOverlayCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_AnnotationOverlayCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>mediapipe/calculators/util/annotation_"
  "overlay_calculator.proto\022\tmediapipe\032$med"
  "iapipe/framework/calculator.proto\032\032media"
  "pipe/util/color.proto\"\322\002\n\"AnnotationOver"
  "layCalculatorOptions\022\035\n\017canvas_width_px\030"
  "\002 \001(\005:\0041920\022\036\n\020canvas_height_px\030\003 \001(\005:\0041"
  "080\022&\n\014canvas_color\030\004 \001(\0132\020.mediapipe.Co"
  "lor\022#\n\024flip_text_vertically\030\005 \001(\010:\005false"
  "\022&\n\030gpu_uses_top_left_origin\030\006 \001(\010:\004true"
  "\022\033\n\020gpu_scale_factor\030\007 \001(\002:\00112[\n\003ext\022\034.m"
  "ediapipe.CalculatorOptions\030\207\360\277w \001(\0132-.me"
  "diapipe.AnnotationOverlayCalculatorOptio"
  "ns"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
  &::descriptor_table_mediapipe_2futil_2fcolor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto = {
  false, false, 482, descriptor_table_protodef_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto, "mediapipe/calculators/util/annotation_overlay_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class AnnotationOverlayCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotationOverlayCalculatorOptions>()._has_bits_);
  static void set_has_canvas_width_px(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_canvas_height_px(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mediapipe::Color& canvas_color(const AnnotationOverlayCalculatorOptions* msg);
  static void set_has_canvas_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flip_text_vertically(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gpu_uses_top_left_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gpu_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::mediapipe::Color&
AnnotationOverlayCalculatorOptions::_Internal::canvas_color(const AnnotationOverlayCalculatorOptions* msg) {
  return *msg->canvas_color_;
}
void AnnotationOverlayCalculatorOptions::clear_canvas_color() {
  if (canvas_color_ != nullptr) canvas_color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AnnotationOverlayCalculatorOptions::AnnotationOverlayCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.AnnotationOverlayCalculatorOptions)
}
AnnotationOverlayCalculatorOptions::AnnotationOverlayCalculatorOptions(const AnnotationOverlayCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_canvas_color()) {
    canvas_color_ = new ::mediapipe::Color(*from.canvas_color_);
  } else {
    canvas_color_ = nullptr;
  }
  ::memcpy(&flip_text_vertically_, &from.flip_text_vertically_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpu_scale_factor_) -
    reinterpret_cast<char*>(&flip_text_vertically_)) + sizeof(gpu_scale_factor_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.AnnotationOverlayCalculatorOptions)
}

void AnnotationOverlayCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&canvas_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flip_text_vertically_) -
    reinterpret_cast<char*>(&canvas_color_)) + sizeof(flip_text_vertically_));
canvas_width_px_ = 1920;
canvas_height_px_ = 1080;
gpu_uses_top_left_origin_ = true;
gpu_scale_factor_ = 1;
}

AnnotationOverlayCalculatorOptions::~AnnotationOverlayCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.AnnotationOverlayCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnnotationOverlayCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete canvas_color_;
}

void AnnotationOverlayCalculatorOptions::ArenaDtor(void* object) {
  AnnotationOverlayCalculatorOptions* _this = reinterpret_cast< AnnotationOverlayCalculatorOptions* >(object);
  (void)_this;
}
void AnnotationOverlayCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnotationOverlayCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotationOverlayCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.AnnotationOverlayCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(canvas_color_ != nullptr);
    canvas_color_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    flip_text_vertically_ = false;
    canvas_width_px_ = 1920;
    canvas_height_px_ = 1080;
    gpu_uses_top_left_origin_ = true;
    gpu_scale_factor_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationOverlayCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 canvas_width_px = 2 [default = 1920];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_canvas_width_px(&has_bits);
          canvas_width_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 canvas_height_px = 3 [default = 1080];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_canvas_height_px(&has_bits);
          canvas_height_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.Color canvas_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_canvas_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flip_text_vertically = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flip_text_vertically(&has_bits);
          flip_text_vertically_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gpu_uses_top_left_origin = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gpu_uses_top_left_origin(&has_bits);
          gpu_uses_top_left_origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gpu_scale_factor = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_gpu_scale_factor(&has_bits);
          gpu_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotationOverlayCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.AnnotationOverlayCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 canvas_width_px = 2 [default = 1920];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_canvas_width_px(), target);
  }

  // optional int32 canvas_height_px = 3 [default = 1080];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_canvas_height_px(), target);
  }

  // optional .mediapipe.Color canvas_color = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::canvas_color(this), target, stream);
  }

  // optional bool flip_text_vertically = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_flip_text_vertically(), target);
  }

  // optional bool gpu_uses_top_left_origin = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_gpu_uses_top_left_origin(), target);
  }

  // optional float gpu_scale_factor = 7 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_gpu_scale_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.AnnotationOverlayCalculatorOptions)
  return target;
}

size_t AnnotationOverlayCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.AnnotationOverlayCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .mediapipe.Color canvas_color = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *canvas_color_);
    }

    // optional bool flip_text_vertically = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 canvas_width_px = 2 [default = 1920];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_canvas_width_px());
    }

    // optional int32 canvas_height_px = 3 [default = 1080];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_canvas_height_px());
    }

    // optional bool gpu_uses_top_left_origin = 6 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float gpu_scale_factor = 7 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotationOverlayCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.AnnotationOverlayCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationOverlayCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnotationOverlayCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.AnnotationOverlayCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.AnnotationOverlayCalculatorOptions)
    MergeFrom(*source);
  }
}

void AnnotationOverlayCalculatorOptions::MergeFrom(const AnnotationOverlayCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.AnnotationOverlayCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_canvas_color()->::mediapipe::Color::MergeFrom(from._internal_canvas_color());
    }
    if (cached_has_bits & 0x00000002u) {
      flip_text_vertically_ = from.flip_text_vertically_;
    }
    if (cached_has_bits & 0x00000004u) {
      canvas_width_px_ = from.canvas_width_px_;
    }
    if (cached_has_bits & 0x00000008u) {
      canvas_height_px_ = from.canvas_height_px_;
    }
    if (cached_has_bits & 0x00000010u) {
      gpu_uses_top_left_origin_ = from.gpu_uses_top_left_origin_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpu_scale_factor_ = from.gpu_scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnotationOverlayCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.AnnotationOverlayCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationOverlayCalculatorOptions::CopyFrom(const AnnotationOverlayCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.AnnotationOverlayCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationOverlayCalculatorOptions::IsInitialized() const {
  return true;
}

void AnnotationOverlayCalculatorOptions::InternalSwap(AnnotationOverlayCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationOverlayCalculatorOptions, flip_text_vertically_)
      + sizeof(AnnotationOverlayCalculatorOptions::flip_text_vertically_)
      - PROTOBUF_FIELD_OFFSET(AnnotationOverlayCalculatorOptions, canvas_color_)>(
          reinterpret_cast<char*>(&canvas_color_),
          reinterpret_cast<char*>(&other->canvas_color_));
  swap(canvas_width_px_, other->canvas_width_px_);
  swap(canvas_height_px_, other->canvas_height_px_);
  swap(gpu_uses_top_left_origin_, other->gpu_uses_top_left_origin_);
  swap(gpu_scale_factor_, other->gpu_scale_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationOverlayCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2futil_2fannotation_5foverlay_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotationOverlayCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::AnnotationOverlayCalculatorOptions >, 11, false >
  AnnotationOverlayCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::AnnotationOverlayCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::AnnotationOverlayCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::AnnotationOverlayCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::AnnotationOverlayCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
