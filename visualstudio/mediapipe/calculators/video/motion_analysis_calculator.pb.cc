// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/video/motion_analysis_calculator.proto

#include "mediapipe/calculators/video/motion_analysis_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr MotionAnalysisCalculatorOptions::MotionAnalysisCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : analysis_options_(nullptr)
  , hybrid_selection_camera_(false)
  , bypass_mode_(false)
  , selection_analysis_(4)

  , meta_models_per_frame_(1)
  , meta_analysis_(1)

  , meta_outlier_domain_ratio_(0.0015f){}
struct MotionAnalysisCalculatorOptionsDefaultTypeInternal {
  constexpr MotionAnalysisCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionAnalysisCalculatorOptionsDefaultTypeInternal() {}
  union {
    MotionAnalysisCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionAnalysisCalculatorOptionsDefaultTypeInternal _MotionAnalysisCalculatorOptions_default_instance_;
constexpr HomographyData::HomographyData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motion_homography_data_()
  , histogram_count_data_()
  , _histogram_count_data_cached_byte_size_()
  , frame_width_(0)
  , frame_height_(0){}
struct HomographyDataDefaultTypeInternal {
  constexpr HomographyDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HomographyDataDefaultTypeInternal() {}
  union {
    HomographyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HomographyDataDefaultTypeInternal _HomographyData_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, analysis_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, selection_analysis_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, hybrid_selection_camera_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, meta_analysis_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, meta_models_per_frame_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, meta_outlier_domain_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisCalculatorOptions, bypass_mode_),
  0,
  3,
  1,
  5,
  4,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::HomographyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::HomographyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::HomographyData, motion_homography_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::HomographyData, histogram_count_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::HomographyData, frame_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::HomographyData, frame_height_),
  ~0u,
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::mediapipe::MotionAnalysisCalculatorOptions)},
  { 19, 28, sizeof(::mediapipe::HomographyData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionAnalysisCalculatorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_HomographyData_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n<mediapipe/calculators/video/motion_ana"
  "lysis_calculator.proto\022\tmediapipe\032$media"
  "pipe/framework/calculator.proto\032-mediapi"
  "pe/util/tracking/motion_analysis.proto\"\345"
  "\005\n\037MotionAnalysisCalculatorOptions\022:\n\020an"
  "alysis_options\030\001 \001(\0132 .mediapipe.MotionA"
  "nalysisOptions\022l\n\022selection_analysis\030\004 \001"
  "(\0162<.mediapipe.MotionAnalysisCalculatorO"
  "ptions.SelectionAnalysis:\022ANALYSIS_WITH_"
  "SEED\022&\n\027hybrid_selection_camera\030\005 \001(\010:\005f"
  "alse\022f\n\rmeta_analysis\030\010 \001(\01627.mediapipe."
  "MotionAnalysisCalculatorOptions.MetaAnal"
  "ysis:\026META_ANALYSIS_USE_META\022 \n\025meta_mod"
  "els_per_frame\030\006 \001(\005:\0011\022)\n\031meta_outlier_d"
  "omain_ratio\030\t \001(\002:\0060.0015\022\032\n\013bypass_mode"
  "\030\007 \001(\010:\005false\"~\n\021SelectionAnalysis\022\026\n\022AN"
  "ALYSIS_RECOMPUTE\020\001\022\035\n\031NO_ANALYSIS_USE_SE"
  "LECTION\020\002\022\032\n\026ANALYSIS_FROM_FEATURES\020\003\022\026\n"
  "\022ANALYSIS_WITH_SEED\020\004\"D\n\014MetaAnalysis\022\032\n"
  "\026META_ANALYSIS_USE_META\020\001\022\030\n\024META_ANALYS"
  "IS_HYBRID\020\0022Y\n\003ext\022\034.mediapipe.Calculato"
  "rOptions\030\217\216\212\201\001 \001(\0132*.mediapipe.MotionAna"
  "lysisCalculatorOptions\"\201\001\n\016HomographyDat"
  "a\022\"\n\026motion_homography_data\030\001 \003(\002B\002\020\001\022 \n"
  "\024histogram_count_data\030\002 \003(\rB\002\020\001\022\023\n\013frame"
  "_width\030\003 \001(\005\022\024\n\014frame_height\030\004 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
  &::descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto = {
  false, false, 1034, descriptor_table_protodef_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto, "mediapipe/calculators/video/motion_analysis_calculator.proto", 
  &descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto(&descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionAnalysisCalculatorOptions_SelectionAnalysis_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto);
  return file_level_enum_descriptors_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto[0];
}
bool MotionAnalysisCalculatorOptions_SelectionAnalysis_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::ANALYSIS_RECOMPUTE;
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::NO_ANALYSIS_USE_SELECTION;
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::ANALYSIS_FROM_FEATURES;
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::ANALYSIS_WITH_SEED;
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::SelectionAnalysis_MIN;
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::SelectionAnalysis_MAX;
constexpr int MotionAnalysisCalculatorOptions::SelectionAnalysis_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionAnalysisCalculatorOptions_MetaAnalysis_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto);
  return file_level_enum_descriptors_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto[1];
}
bool MotionAnalysisCalculatorOptions_MetaAnalysis_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions::META_ANALYSIS_USE_META;
constexpr MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions::META_ANALYSIS_HYBRID;
constexpr MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions::MetaAnalysis_MIN;
constexpr MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions::MetaAnalysis_MAX;
constexpr int MotionAnalysisCalculatorOptions::MetaAnalysis_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MotionAnalysisCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionAnalysisCalculatorOptions>()._has_bits_);
  static const ::mediapipe::MotionAnalysisOptions& analysis_options(const MotionAnalysisCalculatorOptions* msg);
  static void set_has_analysis_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_analysis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hybrid_selection_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_meta_analysis(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_meta_models_per_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_meta_outlier_domain_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bypass_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::MotionAnalysisOptions&
MotionAnalysisCalculatorOptions::_Internal::analysis_options(const MotionAnalysisCalculatorOptions* msg) {
  return *msg->analysis_options_;
}
void MotionAnalysisCalculatorOptions::clear_analysis_options() {
  if (analysis_options_ != nullptr) analysis_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MotionAnalysisCalculatorOptions::MotionAnalysisCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionAnalysisCalculatorOptions)
}
MotionAnalysisCalculatorOptions::MotionAnalysisCalculatorOptions(const MotionAnalysisCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_analysis_options()) {
    analysis_options_ = new ::mediapipe::MotionAnalysisOptions(*from.analysis_options_);
  } else {
    analysis_options_ = nullptr;
  }
  ::memcpy(&hybrid_selection_camera_, &from.hybrid_selection_camera_,
    static_cast<size_t>(reinterpret_cast<char*>(&meta_outlier_domain_ratio_) -
    reinterpret_cast<char*>(&hybrid_selection_camera_)) + sizeof(meta_outlier_domain_ratio_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionAnalysisCalculatorOptions)
}

void MotionAnalysisCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&analysis_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bypass_mode_) -
    reinterpret_cast<char*>(&analysis_options_)) + sizeof(bypass_mode_));
selection_analysis_ = 4;
meta_models_per_frame_ = 1;
meta_analysis_ = 1;
meta_outlier_domain_ratio_ = 0.0015f;
}

MotionAnalysisCalculatorOptions::~MotionAnalysisCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionAnalysisCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionAnalysisCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete analysis_options_;
}

void MotionAnalysisCalculatorOptions::ArenaDtor(void* object) {
  MotionAnalysisCalculatorOptions* _this = reinterpret_cast< MotionAnalysisCalculatorOptions* >(object);
  (void)_this;
}
void MotionAnalysisCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionAnalysisCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionAnalysisCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionAnalysisCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(analysis_options_ != nullptr);
    analysis_options_->Clear();
  }
  ::memset(&hybrid_selection_camera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bypass_mode_) -
      reinterpret_cast<char*>(&hybrid_selection_camera_)) + sizeof(bypass_mode_));
  if (cached_has_bits & 0x00000078u) {
    selection_analysis_ = 4;
    meta_models_per_frame_ = 1;
    meta_analysis_ = 1;
    meta_outlier_domain_ratio_ = 0.0015f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionAnalysisCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.MotionAnalysisOptions analysis_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_analysis_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionAnalysisCalculatorOptions.SelectionAnalysis selection_analysis = 4 [default = ANALYSIS_WITH_SEED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis_IsValid(val))) {
            _internal_set_selection_analysis(static_cast<::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool hybrid_selection_camera = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hybrid_selection_camera(&has_bits);
          hybrid_selection_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 meta_models_per_frame = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_meta_models_per_frame(&has_bits);
          meta_models_per_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bypass_mode = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bypass_mode(&has_bits);
          bypass_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionAnalysisCalculatorOptions.MetaAnalysis meta_analysis = 8 [default = META_ANALYSIS_USE_META];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis_IsValid(val))) {
            _internal_set_meta_analysis(static_cast<::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float meta_outlier_domain_ratio = 9 [default = 0.0015];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_meta_outlier_domain_ratio(&has_bits);
          meta_outlier_domain_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionAnalysisCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionAnalysisCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.MotionAnalysisOptions analysis_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::analysis_options(this), target, stream);
  }

  // optional .mediapipe.MotionAnalysisCalculatorOptions.SelectionAnalysis selection_analysis = 4 [default = ANALYSIS_WITH_SEED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_selection_analysis(), target);
  }

  // optional bool hybrid_selection_camera = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hybrid_selection_camera(), target);
  }

  // optional int32 meta_models_per_frame = 6 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_meta_models_per_frame(), target);
  }

  // optional bool bypass_mode = 7 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_bypass_mode(), target);
  }

  // optional .mediapipe.MotionAnalysisCalculatorOptions.MetaAnalysis meta_analysis = 8 [default = META_ANALYSIS_USE_META];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_meta_analysis(), target);
  }

  // optional float meta_outlier_domain_ratio = 9 [default = 0.0015];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_meta_outlier_domain_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionAnalysisCalculatorOptions)
  return target;
}

size_t MotionAnalysisCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionAnalysisCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .mediapipe.MotionAnalysisOptions analysis_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *analysis_options_);
    }

    // optional bool hybrid_selection_camera = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool bypass_mode = 7 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.MotionAnalysisCalculatorOptions.SelectionAnalysis selection_analysis = 4 [default = ANALYSIS_WITH_SEED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_analysis());
    }

    // optional int32 meta_models_per_frame = 6 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_meta_models_per_frame());
    }

    // optional .mediapipe.MotionAnalysisCalculatorOptions.MetaAnalysis meta_analysis = 8 [default = META_ANALYSIS_USE_META];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_meta_analysis());
    }

    // optional float meta_outlier_domain_ratio = 9 [default = 0.0015];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionAnalysisCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionAnalysisCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionAnalysisCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionAnalysisCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionAnalysisCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionAnalysisCalculatorOptions)
    MergeFrom(*source);
  }
}

void MotionAnalysisCalculatorOptions::MergeFrom(const MotionAnalysisCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionAnalysisCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_analysis_options()->::mediapipe::MotionAnalysisOptions::MergeFrom(from._internal_analysis_options());
    }
    if (cached_has_bits & 0x00000002u) {
      hybrid_selection_camera_ = from.hybrid_selection_camera_;
    }
    if (cached_has_bits & 0x00000004u) {
      bypass_mode_ = from.bypass_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_analysis_ = from.selection_analysis_;
    }
    if (cached_has_bits & 0x00000010u) {
      meta_models_per_frame_ = from.meta_models_per_frame_;
    }
    if (cached_has_bits & 0x00000020u) {
      meta_analysis_ = from.meta_analysis_;
    }
    if (cached_has_bits & 0x00000040u) {
      meta_outlier_domain_ratio_ = from.meta_outlier_domain_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionAnalysisCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionAnalysisCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionAnalysisCalculatorOptions::CopyFrom(const MotionAnalysisCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionAnalysisCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionAnalysisCalculatorOptions::IsInitialized() const {
  if (_internal_has_analysis_options()) {
    if (!analysis_options_->IsInitialized()) return false;
  }
  return true;
}

void MotionAnalysisCalculatorOptions::InternalSwap(MotionAnalysisCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionAnalysisCalculatorOptions, bypass_mode_)
      + sizeof(MotionAnalysisCalculatorOptions::bypass_mode_)
      - PROTOBUF_FIELD_OFFSET(MotionAnalysisCalculatorOptions, analysis_options_)>(
          reinterpret_cast<char*>(&analysis_options_),
          reinterpret_cast<char*>(&other->analysis_options_));
  swap(selection_analysis_, other->selection_analysis_);
  swap(meta_models_per_frame_, other->meta_models_per_frame_);
  swap(meta_analysis_, other->meta_analysis_);
  swap(meta_outlier_domain_ratio_, other->meta_outlier_domain_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionAnalysisCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto[0]);
}

// ===================================================================

class HomographyData::_Internal {
 public:
  using HasBits = decltype(std::declval<HomographyData>()._has_bits_);
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HomographyData::HomographyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  motion_homography_data_(arena),
  histogram_count_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.HomographyData)
}
HomographyData::HomographyData(const HomographyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      motion_homography_data_(from.motion_homography_data_),
      histogram_count_data_(from.histogram_count_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_width_, &from.frame_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_height_) -
    reinterpret_cast<char*>(&frame_width_)) + sizeof(frame_height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.HomographyData)
}

void HomographyData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_height_) -
    reinterpret_cast<char*>(&frame_width_)) + sizeof(frame_height_));
}

HomographyData::~HomographyData() {
  // @@protoc_insertion_point(destructor:mediapipe.HomographyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HomographyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HomographyData::ArenaDtor(void* object) {
  HomographyData* _this = reinterpret_cast< HomographyData* >(object);
  (void)_this;
}
void HomographyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HomographyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HomographyData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.HomographyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motion_homography_data_.Clear();
  histogram_count_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&frame_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_height_) -
        reinterpret_cast<char*>(&frame_width_)) + sizeof(frame_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HomographyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float motion_homography_data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_motion_homography_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_motion_homography_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 histogram_count_data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_histogram_count_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_histogram_count_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frame_width(&has_bits);
          frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frame_height(&has_bits);
          frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HomographyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.HomographyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float motion_homography_data = 1 [packed = true];
  if (this->_internal_motion_homography_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_motion_homography_data(), target);
  }

  // repeated uint32 histogram_count_data = 2 [packed = true];
  {
    int byte_size = _histogram_count_data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_histogram_count_data(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 frame_width = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_frame_width(), target);
  }

  // optional int32 frame_height = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_frame_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.HomographyData)
  return target;
}

size_t HomographyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.HomographyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float motion_homography_data = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_motion_homography_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 histogram_count_data = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->histogram_count_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _histogram_count_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 frame_width = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_width());
    }

    // optional int32 frame_height = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomographyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.HomographyData)
  GOOGLE_DCHECK_NE(&from, this);
  const HomographyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HomographyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.HomographyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.HomographyData)
    MergeFrom(*source);
  }
}

void HomographyData::MergeFrom(const HomographyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.HomographyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motion_homography_data_.MergeFrom(from.motion_homography_data_);
  histogram_count_data_.MergeFrom(from.histogram_count_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      frame_width_ = from.frame_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_height_ = from.frame_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HomographyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.HomographyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomographyData::CopyFrom(const HomographyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.HomographyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomographyData::IsInitialized() const {
  return true;
}

void HomographyData::InternalSwap(HomographyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  motion_homography_data_.InternalSwap(&other->motion_homography_data_);
  histogram_count_data_.InternalSwap(&other->histogram_count_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HomographyData, frame_height_)
      + sizeof(HomographyData::frame_height_)
      - PROTOBUF_FIELD_OFFSET(HomographyData, frame_width_)>(
          reinterpret_cast<char*>(&frame_width_),
          reinterpret_cast<char*>(&other->frame_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HomographyData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto[1]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotionAnalysisCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::MotionAnalysisCalculatorOptions >, 11, false >
  MotionAnalysisCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::MotionAnalysisCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::MotionAnalysisCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::MotionAnalysisCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionAnalysisCalculatorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::HomographyData* Arena::CreateMaybeMessage< ::mediapipe::HomographyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::HomographyData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
