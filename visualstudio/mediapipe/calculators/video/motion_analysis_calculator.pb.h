// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/video/motion_analysis_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
#include "mediapipe/util/tracking/motion_analysis.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto;
namespace mediapipe {
class HomographyData;
struct HomographyDataDefaultTypeInternal;
extern HomographyDataDefaultTypeInternal _HomographyData_default_instance_;
class MotionAnalysisCalculatorOptions;
struct MotionAnalysisCalculatorOptionsDefaultTypeInternal;
extern MotionAnalysisCalculatorOptionsDefaultTypeInternal _MotionAnalysisCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::HomographyData* Arena::CreateMaybeMessage<::mediapipe::HomographyData>(Arena*);
template<> ::mediapipe::MotionAnalysisCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::MotionAnalysisCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum MotionAnalysisCalculatorOptions_SelectionAnalysis : int {
  MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_RECOMPUTE = 1,
  MotionAnalysisCalculatorOptions_SelectionAnalysis_NO_ANALYSIS_USE_SELECTION = 2,
  MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_FROM_FEATURES = 3,
  MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_WITH_SEED = 4
};
bool MotionAnalysisCalculatorOptions_SelectionAnalysis_IsValid(int value);
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions_SelectionAnalysis_SelectionAnalysis_MIN = MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_RECOMPUTE;
constexpr MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions_SelectionAnalysis_SelectionAnalysis_MAX = MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_WITH_SEED;
constexpr int MotionAnalysisCalculatorOptions_SelectionAnalysis_SelectionAnalysis_ARRAYSIZE = MotionAnalysisCalculatorOptions_SelectionAnalysis_SelectionAnalysis_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionAnalysisCalculatorOptions_SelectionAnalysis_descriptor();
template<typename T>
inline const std::string& MotionAnalysisCalculatorOptions_SelectionAnalysis_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionAnalysisCalculatorOptions_SelectionAnalysis>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionAnalysisCalculatorOptions_SelectionAnalysis_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionAnalysisCalculatorOptions_SelectionAnalysis_descriptor(), enum_t_value);
}
inline bool MotionAnalysisCalculatorOptions_SelectionAnalysis_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionAnalysisCalculatorOptions_SelectionAnalysis* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionAnalysisCalculatorOptions_SelectionAnalysis>(
    MotionAnalysisCalculatorOptions_SelectionAnalysis_descriptor(), name, value);
}
enum MotionAnalysisCalculatorOptions_MetaAnalysis : int {
  MotionAnalysisCalculatorOptions_MetaAnalysis_META_ANALYSIS_USE_META = 1,
  MotionAnalysisCalculatorOptions_MetaAnalysis_META_ANALYSIS_HYBRID = 2
};
bool MotionAnalysisCalculatorOptions_MetaAnalysis_IsValid(int value);
constexpr MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions_MetaAnalysis_MetaAnalysis_MIN = MotionAnalysisCalculatorOptions_MetaAnalysis_META_ANALYSIS_USE_META;
constexpr MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions_MetaAnalysis_MetaAnalysis_MAX = MotionAnalysisCalculatorOptions_MetaAnalysis_META_ANALYSIS_HYBRID;
constexpr int MotionAnalysisCalculatorOptions_MetaAnalysis_MetaAnalysis_ARRAYSIZE = MotionAnalysisCalculatorOptions_MetaAnalysis_MetaAnalysis_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionAnalysisCalculatorOptions_MetaAnalysis_descriptor();
template<typename T>
inline const std::string& MotionAnalysisCalculatorOptions_MetaAnalysis_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionAnalysisCalculatorOptions_MetaAnalysis>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionAnalysisCalculatorOptions_MetaAnalysis_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionAnalysisCalculatorOptions_MetaAnalysis_descriptor(), enum_t_value);
}
inline bool MotionAnalysisCalculatorOptions_MetaAnalysis_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionAnalysisCalculatorOptions_MetaAnalysis* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionAnalysisCalculatorOptions_MetaAnalysis>(
    MotionAnalysisCalculatorOptions_MetaAnalysis_descriptor(), name, value);
}
// ===================================================================

class MotionAnalysisCalculatorOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionAnalysisCalculatorOptions) */ {
 public:
  inline MotionAnalysisCalculatorOptions() : MotionAnalysisCalculatorOptions(nullptr) {}
  ~MotionAnalysisCalculatorOptions() override;
  explicit constexpr MotionAnalysisCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionAnalysisCalculatorOptions(const MotionAnalysisCalculatorOptions& from);
  MotionAnalysisCalculatorOptions(MotionAnalysisCalculatorOptions&& from) noexcept
    : MotionAnalysisCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline MotionAnalysisCalculatorOptions& operator=(const MotionAnalysisCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionAnalysisCalculatorOptions& operator=(MotionAnalysisCalculatorOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionAnalysisCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionAnalysisCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const MotionAnalysisCalculatorOptions*>(
               &_MotionAnalysisCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MotionAnalysisCalculatorOptions& a, MotionAnalysisCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionAnalysisCalculatorOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionAnalysisCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionAnalysisCalculatorOptions* New() const final {
    return CreateMaybeMessage<MotionAnalysisCalculatorOptions>(nullptr);
  }

  MotionAnalysisCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionAnalysisCalculatorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionAnalysisCalculatorOptions& from);
  void MergeFrom(const MotionAnalysisCalculatorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionAnalysisCalculatorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionAnalysisCalculatorOptions";
  }
  protected:
  explicit MotionAnalysisCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MotionAnalysisCalculatorOptions_SelectionAnalysis SelectionAnalysis;
  static constexpr SelectionAnalysis ANALYSIS_RECOMPUTE =
    MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_RECOMPUTE;
  static constexpr SelectionAnalysis NO_ANALYSIS_USE_SELECTION =
    MotionAnalysisCalculatorOptions_SelectionAnalysis_NO_ANALYSIS_USE_SELECTION;
  static constexpr SelectionAnalysis ANALYSIS_FROM_FEATURES =
    MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_FROM_FEATURES;
  static constexpr SelectionAnalysis ANALYSIS_WITH_SEED =
    MotionAnalysisCalculatorOptions_SelectionAnalysis_ANALYSIS_WITH_SEED;
  static inline bool SelectionAnalysis_IsValid(int value) {
    return MotionAnalysisCalculatorOptions_SelectionAnalysis_IsValid(value);
  }
  static constexpr SelectionAnalysis SelectionAnalysis_MIN =
    MotionAnalysisCalculatorOptions_SelectionAnalysis_SelectionAnalysis_MIN;
  static constexpr SelectionAnalysis SelectionAnalysis_MAX =
    MotionAnalysisCalculatorOptions_SelectionAnalysis_SelectionAnalysis_MAX;
  static constexpr int SelectionAnalysis_ARRAYSIZE =
    MotionAnalysisCalculatorOptions_SelectionAnalysis_SelectionAnalysis_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelectionAnalysis_descriptor() {
    return MotionAnalysisCalculatorOptions_SelectionAnalysis_descriptor();
  }
  template<typename T>
  static inline const std::string& SelectionAnalysis_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelectionAnalysis>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelectionAnalysis_Name.");
    return MotionAnalysisCalculatorOptions_SelectionAnalysis_Name(enum_t_value);
  }
  static inline bool SelectionAnalysis_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SelectionAnalysis* value) {
    return MotionAnalysisCalculatorOptions_SelectionAnalysis_Parse(name, value);
  }

  typedef MotionAnalysisCalculatorOptions_MetaAnalysis MetaAnalysis;
  static constexpr MetaAnalysis META_ANALYSIS_USE_META =
    MotionAnalysisCalculatorOptions_MetaAnalysis_META_ANALYSIS_USE_META;
  static constexpr MetaAnalysis META_ANALYSIS_HYBRID =
    MotionAnalysisCalculatorOptions_MetaAnalysis_META_ANALYSIS_HYBRID;
  static inline bool MetaAnalysis_IsValid(int value) {
    return MotionAnalysisCalculatorOptions_MetaAnalysis_IsValid(value);
  }
  static constexpr MetaAnalysis MetaAnalysis_MIN =
    MotionAnalysisCalculatorOptions_MetaAnalysis_MetaAnalysis_MIN;
  static constexpr MetaAnalysis MetaAnalysis_MAX =
    MotionAnalysisCalculatorOptions_MetaAnalysis_MetaAnalysis_MAX;
  static constexpr int MetaAnalysis_ARRAYSIZE =
    MotionAnalysisCalculatorOptions_MetaAnalysis_MetaAnalysis_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MetaAnalysis_descriptor() {
    return MotionAnalysisCalculatorOptions_MetaAnalysis_descriptor();
  }
  template<typename T>
  static inline const std::string& MetaAnalysis_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MetaAnalysis>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MetaAnalysis_Name.");
    return MotionAnalysisCalculatorOptions_MetaAnalysis_Name(enum_t_value);
  }
  static inline bool MetaAnalysis_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MetaAnalysis* value) {
    return MotionAnalysisCalculatorOptions_MetaAnalysis_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnalysisOptionsFieldNumber = 1,
    kHybridSelectionCameraFieldNumber = 5,
    kBypassModeFieldNumber = 7,
    kSelectionAnalysisFieldNumber = 4,
    kMetaModelsPerFrameFieldNumber = 6,
    kMetaAnalysisFieldNumber = 8,
    kMetaOutlierDomainRatioFieldNumber = 9,
  };
  // optional .mediapipe.MotionAnalysisOptions analysis_options = 1;
  bool has_analysis_options() const;
  private:
  bool _internal_has_analysis_options() const;
  public:
  void clear_analysis_options();
  const ::mediapipe::MotionAnalysisOptions& analysis_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MotionAnalysisOptions* release_analysis_options();
  ::mediapipe::MotionAnalysisOptions* mutable_analysis_options();
  void set_allocated_analysis_options(::mediapipe::MotionAnalysisOptions* analysis_options);
  private:
  const ::mediapipe::MotionAnalysisOptions& _internal_analysis_options() const;
  ::mediapipe::MotionAnalysisOptions* _internal_mutable_analysis_options();
  public:
  void unsafe_arena_set_allocated_analysis_options(
      ::mediapipe::MotionAnalysisOptions* analysis_options);
  ::mediapipe::MotionAnalysisOptions* unsafe_arena_release_analysis_options();

  // optional bool hybrid_selection_camera = 5 [default = false];
  bool has_hybrid_selection_camera() const;
  private:
  bool _internal_has_hybrid_selection_camera() const;
  public:
  void clear_hybrid_selection_camera();
  bool hybrid_selection_camera() const;
  void set_hybrid_selection_camera(bool value);
  private:
  bool _internal_hybrid_selection_camera() const;
  void _internal_set_hybrid_selection_camera(bool value);
  public:

  // optional bool bypass_mode = 7 [default = false];
  bool has_bypass_mode() const;
  private:
  bool _internal_has_bypass_mode() const;
  public:
  void clear_bypass_mode();
  bool bypass_mode() const;
  void set_bypass_mode(bool value);
  private:
  bool _internal_bypass_mode() const;
  void _internal_set_bypass_mode(bool value);
  public:

  // optional .mediapipe.MotionAnalysisCalculatorOptions.SelectionAnalysis selection_analysis = 4 [default = ANALYSIS_WITH_SEED];
  bool has_selection_analysis() const;
  private:
  bool _internal_has_selection_analysis() const;
  public:
  void clear_selection_analysis();
  ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis selection_analysis() const;
  void set_selection_analysis(::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis value);
  private:
  ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis _internal_selection_analysis() const;
  void _internal_set_selection_analysis(::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis value);
  public:

  // optional int32 meta_models_per_frame = 6 [default = 1];
  bool has_meta_models_per_frame() const;
  private:
  bool _internal_has_meta_models_per_frame() const;
  public:
  void clear_meta_models_per_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 meta_models_per_frame() const;
  void set_meta_models_per_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_meta_models_per_frame() const;
  void _internal_set_meta_models_per_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.MotionAnalysisCalculatorOptions.MetaAnalysis meta_analysis = 8 [default = META_ANALYSIS_USE_META];
  bool has_meta_analysis() const;
  private:
  bool _internal_has_meta_analysis() const;
  public:
  void clear_meta_analysis();
  ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis meta_analysis() const;
  void set_meta_analysis(::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis value);
  private:
  ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis _internal_meta_analysis() const;
  void _internal_set_meta_analysis(::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis value);
  public:

  // optional float meta_outlier_domain_ratio = 9 [default = 0.0015];
  bool has_meta_outlier_domain_ratio() const;
  private:
  bool _internal_has_meta_outlier_domain_ratio() const;
  public:
  void clear_meta_outlier_domain_ratio();
  float meta_outlier_domain_ratio() const;
  void set_meta_outlier_domain_ratio(float value);
  private:
  float _internal_meta_outlier_domain_ratio() const;
  void _internal_set_meta_outlier_domain_ratio(float value);
  public:

  static const int kExtFieldNumber = 270698255;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::MotionAnalysisCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.MotionAnalysisCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::MotionAnalysisOptions* analysis_options_;
  bool hybrid_selection_camera_;
  bool bypass_mode_;
  int selection_analysis_;
  ::PROTOBUF_NAMESPACE_ID::int32 meta_models_per_frame_;
  int meta_analysis_;
  float meta_outlier_domain_ratio_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto;
};
// -------------------------------------------------------------------

class HomographyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.HomographyData) */ {
 public:
  inline HomographyData() : HomographyData(nullptr) {}
  ~HomographyData() override;
  explicit constexpr HomographyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HomographyData(const HomographyData& from);
  HomographyData(HomographyData&& from) noexcept
    : HomographyData() {
    *this = ::std::move(from);
  }

  inline HomographyData& operator=(const HomographyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomographyData& operator=(HomographyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HomographyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HomographyData* internal_default_instance() {
    return reinterpret_cast<const HomographyData*>(
               &_HomographyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HomographyData& a, HomographyData& b) {
    a.Swap(&b);
  }
  inline void Swap(HomographyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HomographyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HomographyData* New() const final {
    return CreateMaybeMessage<HomographyData>(nullptr);
  }

  HomographyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HomographyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HomographyData& from);
  void MergeFrom(const HomographyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomographyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.HomographyData";
  }
  protected:
  explicit HomographyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotionHomographyDataFieldNumber = 1,
    kHistogramCountDataFieldNumber = 2,
    kFrameWidthFieldNumber = 3,
    kFrameHeightFieldNumber = 4,
  };
  // repeated float motion_homography_data = 1 [packed = true];
  int motion_homography_data_size() const;
  private:
  int _internal_motion_homography_data_size() const;
  public:
  void clear_motion_homography_data();
  private:
  float _internal_motion_homography_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_motion_homography_data() const;
  void _internal_add_motion_homography_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_motion_homography_data();
  public:
  float motion_homography_data(int index) const;
  void set_motion_homography_data(int index, float value);
  void add_motion_homography_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      motion_homography_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_motion_homography_data();

  // repeated uint32 histogram_count_data = 2 [packed = true];
  int histogram_count_data_size() const;
  private:
  int _internal_histogram_count_data_size() const;
  public:
  void clear_histogram_count_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_histogram_count_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_histogram_count_data() const;
  void _internal_add_histogram_count_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_histogram_count_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 histogram_count_data(int index) const;
  void set_histogram_count_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_histogram_count_data(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      histogram_count_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_histogram_count_data();

  // optional int32 frame_width = 3;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_width() const;
  void set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_width() const;
  void _internal_set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 frame_height = 4;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_height() const;
  void set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_height() const;
  void _internal_set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.HomographyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > motion_homography_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > histogram_count_data_;
  mutable std::atomic<int> _histogram_count_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_height_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionAnalysisCalculatorOptions

// optional .mediapipe.MotionAnalysisOptions analysis_options = 1;
inline bool MotionAnalysisCalculatorOptions::_internal_has_analysis_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || analysis_options_ != nullptr);
  return value;
}
inline bool MotionAnalysisCalculatorOptions::has_analysis_options() const {
  return _internal_has_analysis_options();
}
inline const ::mediapipe::MotionAnalysisOptions& MotionAnalysisCalculatorOptions::_internal_analysis_options() const {
  const ::mediapipe::MotionAnalysisOptions* p = analysis_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MotionAnalysisOptions&>(
      ::mediapipe::_MotionAnalysisOptions_default_instance_);
}
inline const ::mediapipe::MotionAnalysisOptions& MotionAnalysisCalculatorOptions::analysis_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisCalculatorOptions.analysis_options)
  return _internal_analysis_options();
}
inline void MotionAnalysisCalculatorOptions::unsafe_arena_set_allocated_analysis_options(
    ::mediapipe::MotionAnalysisOptions* analysis_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_options_);
  }
  analysis_options_ = analysis_options;
  if (analysis_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionAnalysisCalculatorOptions.analysis_options)
}
inline ::mediapipe::MotionAnalysisOptions* MotionAnalysisCalculatorOptions::release_analysis_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::MotionAnalysisOptions* temp = analysis_options_;
  analysis_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MotionAnalysisOptions* MotionAnalysisCalculatorOptions::unsafe_arena_release_analysis_options() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionAnalysisCalculatorOptions.analysis_options)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::MotionAnalysisOptions* temp = analysis_options_;
  analysis_options_ = nullptr;
  return temp;
}
inline ::mediapipe::MotionAnalysisOptions* MotionAnalysisCalculatorOptions::_internal_mutable_analysis_options() {
  _has_bits_[0] |= 0x00000001u;
  if (analysis_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MotionAnalysisOptions>(GetArena());
    analysis_options_ = p;
  }
  return analysis_options_;
}
inline ::mediapipe::MotionAnalysisOptions* MotionAnalysisCalculatorOptions::mutable_analysis_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionAnalysisCalculatorOptions.analysis_options)
  return _internal_mutable_analysis_options();
}
inline void MotionAnalysisCalculatorOptions::set_allocated_analysis_options(::mediapipe::MotionAnalysisOptions* analysis_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_options_);
  }
  if (analysis_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_options)->GetArena();
    if (message_arena != submessage_arena) {
      analysis_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analysis_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  analysis_options_ = analysis_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionAnalysisCalculatorOptions.analysis_options)
}

// optional .mediapipe.MotionAnalysisCalculatorOptions.SelectionAnalysis selection_analysis = 4 [default = ANALYSIS_WITH_SEED];
inline bool MotionAnalysisCalculatorOptions::_internal_has_selection_analysis() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MotionAnalysisCalculatorOptions::has_selection_analysis() const {
  return _internal_has_selection_analysis();
}
inline void MotionAnalysisCalculatorOptions::clear_selection_analysis() {
  selection_analysis_ = 4;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::_internal_selection_analysis() const {
  return static_cast< ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis >(selection_analysis_);
}
inline ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis MotionAnalysisCalculatorOptions::selection_analysis() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisCalculatorOptions.selection_analysis)
  return _internal_selection_analysis();
}
inline void MotionAnalysisCalculatorOptions::_internal_set_selection_analysis(::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis value) {
  assert(::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  selection_analysis_ = value;
}
inline void MotionAnalysisCalculatorOptions::set_selection_analysis(::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis value) {
  _internal_set_selection_analysis(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisCalculatorOptions.selection_analysis)
}

// optional bool hybrid_selection_camera = 5 [default = false];
inline bool MotionAnalysisCalculatorOptions::_internal_has_hybrid_selection_camera() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionAnalysisCalculatorOptions::has_hybrid_selection_camera() const {
  return _internal_has_hybrid_selection_camera();
}
inline void MotionAnalysisCalculatorOptions::clear_hybrid_selection_camera() {
  hybrid_selection_camera_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MotionAnalysisCalculatorOptions::_internal_hybrid_selection_camera() const {
  return hybrid_selection_camera_;
}
inline bool MotionAnalysisCalculatorOptions::hybrid_selection_camera() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisCalculatorOptions.hybrid_selection_camera)
  return _internal_hybrid_selection_camera();
}
inline void MotionAnalysisCalculatorOptions::_internal_set_hybrid_selection_camera(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hybrid_selection_camera_ = value;
}
inline void MotionAnalysisCalculatorOptions::set_hybrid_selection_camera(bool value) {
  _internal_set_hybrid_selection_camera(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisCalculatorOptions.hybrid_selection_camera)
}

// optional .mediapipe.MotionAnalysisCalculatorOptions.MetaAnalysis meta_analysis = 8 [default = META_ANALYSIS_USE_META];
inline bool MotionAnalysisCalculatorOptions::_internal_has_meta_analysis() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MotionAnalysisCalculatorOptions::has_meta_analysis() const {
  return _internal_has_meta_analysis();
}
inline void MotionAnalysisCalculatorOptions::clear_meta_analysis() {
  meta_analysis_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions::_internal_meta_analysis() const {
  return static_cast< ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis >(meta_analysis_);
}
inline ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis MotionAnalysisCalculatorOptions::meta_analysis() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisCalculatorOptions.meta_analysis)
  return _internal_meta_analysis();
}
inline void MotionAnalysisCalculatorOptions::_internal_set_meta_analysis(::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis value) {
  assert(::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  meta_analysis_ = value;
}
inline void MotionAnalysisCalculatorOptions::set_meta_analysis(::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis value) {
  _internal_set_meta_analysis(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisCalculatorOptions.meta_analysis)
}

// optional int32 meta_models_per_frame = 6 [default = 1];
inline bool MotionAnalysisCalculatorOptions::_internal_has_meta_models_per_frame() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MotionAnalysisCalculatorOptions::has_meta_models_per_frame() const {
  return _internal_has_meta_models_per_frame();
}
inline void MotionAnalysisCalculatorOptions::clear_meta_models_per_frame() {
  meta_models_per_frame_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisCalculatorOptions::_internal_meta_models_per_frame() const {
  return meta_models_per_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisCalculatorOptions::meta_models_per_frame() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisCalculatorOptions.meta_models_per_frame)
  return _internal_meta_models_per_frame();
}
inline void MotionAnalysisCalculatorOptions::_internal_set_meta_models_per_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  meta_models_per_frame_ = value;
}
inline void MotionAnalysisCalculatorOptions::set_meta_models_per_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_meta_models_per_frame(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisCalculatorOptions.meta_models_per_frame)
}

// optional float meta_outlier_domain_ratio = 9 [default = 0.0015];
inline bool MotionAnalysisCalculatorOptions::_internal_has_meta_outlier_domain_ratio() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MotionAnalysisCalculatorOptions::has_meta_outlier_domain_ratio() const {
  return _internal_has_meta_outlier_domain_ratio();
}
inline void MotionAnalysisCalculatorOptions::clear_meta_outlier_domain_ratio() {
  meta_outlier_domain_ratio_ = 0.0015f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float MotionAnalysisCalculatorOptions::_internal_meta_outlier_domain_ratio() const {
  return meta_outlier_domain_ratio_;
}
inline float MotionAnalysisCalculatorOptions::meta_outlier_domain_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisCalculatorOptions.meta_outlier_domain_ratio)
  return _internal_meta_outlier_domain_ratio();
}
inline void MotionAnalysisCalculatorOptions::_internal_set_meta_outlier_domain_ratio(float value) {
  _has_bits_[0] |= 0x00000040u;
  meta_outlier_domain_ratio_ = value;
}
inline void MotionAnalysisCalculatorOptions::set_meta_outlier_domain_ratio(float value) {
  _internal_set_meta_outlier_domain_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisCalculatorOptions.meta_outlier_domain_ratio)
}

// optional bool bypass_mode = 7 [default = false];
inline bool MotionAnalysisCalculatorOptions::_internal_has_bypass_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionAnalysisCalculatorOptions::has_bypass_mode() const {
  return _internal_has_bypass_mode();
}
inline void MotionAnalysisCalculatorOptions::clear_bypass_mode() {
  bypass_mode_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MotionAnalysisCalculatorOptions::_internal_bypass_mode() const {
  return bypass_mode_;
}
inline bool MotionAnalysisCalculatorOptions::bypass_mode() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisCalculatorOptions.bypass_mode)
  return _internal_bypass_mode();
}
inline void MotionAnalysisCalculatorOptions::_internal_set_bypass_mode(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bypass_mode_ = value;
}
inline void MotionAnalysisCalculatorOptions::set_bypass_mode(bool value) {
  _internal_set_bypass_mode(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisCalculatorOptions.bypass_mode)
}

// -------------------------------------------------------------------

// HomographyData

// repeated float motion_homography_data = 1 [packed = true];
inline int HomographyData::_internal_motion_homography_data_size() const {
  return motion_homography_data_.size();
}
inline int HomographyData::motion_homography_data_size() const {
  return _internal_motion_homography_data_size();
}
inline void HomographyData::clear_motion_homography_data() {
  motion_homography_data_.Clear();
}
inline float HomographyData::_internal_motion_homography_data(int index) const {
  return motion_homography_data_.Get(index);
}
inline float HomographyData::motion_homography_data(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.HomographyData.motion_homography_data)
  return _internal_motion_homography_data(index);
}
inline void HomographyData::set_motion_homography_data(int index, float value) {
  motion_homography_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.HomographyData.motion_homography_data)
}
inline void HomographyData::_internal_add_motion_homography_data(float value) {
  motion_homography_data_.Add(value);
}
inline void HomographyData::add_motion_homography_data(float value) {
  _internal_add_motion_homography_data(value);
  // @@protoc_insertion_point(field_add:mediapipe.HomographyData.motion_homography_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HomographyData::_internal_motion_homography_data() const {
  return motion_homography_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HomographyData::motion_homography_data() const {
  // @@protoc_insertion_point(field_list:mediapipe.HomographyData.motion_homography_data)
  return _internal_motion_homography_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HomographyData::_internal_mutable_motion_homography_data() {
  return &motion_homography_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HomographyData::mutable_motion_homography_data() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.HomographyData.motion_homography_data)
  return _internal_mutable_motion_homography_data();
}

// repeated uint32 histogram_count_data = 2 [packed = true];
inline int HomographyData::_internal_histogram_count_data_size() const {
  return histogram_count_data_.size();
}
inline int HomographyData::histogram_count_data_size() const {
  return _internal_histogram_count_data_size();
}
inline void HomographyData::clear_histogram_count_data() {
  histogram_count_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HomographyData::_internal_histogram_count_data(int index) const {
  return histogram_count_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HomographyData::histogram_count_data(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.HomographyData.histogram_count_data)
  return _internal_histogram_count_data(index);
}
inline void HomographyData::set_histogram_count_data(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  histogram_count_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.HomographyData.histogram_count_data)
}
inline void HomographyData::_internal_add_histogram_count_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  histogram_count_data_.Add(value);
}
inline void HomographyData::add_histogram_count_data(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_histogram_count_data(value);
  // @@protoc_insertion_point(field_add:mediapipe.HomographyData.histogram_count_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HomographyData::_internal_histogram_count_data() const {
  return histogram_count_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HomographyData::histogram_count_data() const {
  // @@protoc_insertion_point(field_list:mediapipe.HomographyData.histogram_count_data)
  return _internal_histogram_count_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HomographyData::_internal_mutable_histogram_count_data() {
  return &histogram_count_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HomographyData::mutable_histogram_count_data() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.HomographyData.histogram_count_data)
  return _internal_mutable_histogram_count_data();
}

// optional int32 frame_width = 3;
inline bool HomographyData::_internal_has_frame_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HomographyData::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void HomographyData::clear_frame_width() {
  frame_width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HomographyData::_internal_frame_width() const {
  return frame_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HomographyData::frame_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.HomographyData.frame_width)
  return _internal_frame_width();
}
inline void HomographyData::_internal_set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  frame_width_ = value;
}
inline void HomographyData::set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.HomographyData.frame_width)
}

// optional int32 frame_height = 4;
inline bool HomographyData::_internal_has_frame_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HomographyData::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void HomographyData::clear_frame_height() {
  frame_height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HomographyData::_internal_frame_height() const {
  return frame_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HomographyData::frame_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.HomographyData.frame_height)
  return _internal_frame_height();
}
inline void HomographyData::_internal_set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_height_ = value;
}
inline void HomographyData::set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.HomographyData.frame_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis>() {
  return ::mediapipe::MotionAnalysisCalculatorOptions_SelectionAnalysis_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis>() {
  return ::mediapipe::MotionAnalysisCalculatorOptions_MetaAnalysis_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fvideo_2fmotion_5fanalysis_5fcalculator_2eproto
