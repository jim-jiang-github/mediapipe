// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/packet_factory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fpacket_5ffactory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fpacket_5ffactory_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fpacket_5ffactory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fpacket_5ffactory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fpacket_5ffactory_2eproto;
namespace mediapipe {
class PacketFactoryConfig;
struct PacketFactoryConfigDefaultTypeInternal;
extern PacketFactoryConfigDefaultTypeInternal _PacketFactoryConfig_default_instance_;
class PacketFactoryOptions;
struct PacketFactoryOptionsDefaultTypeInternal;
extern PacketFactoryOptionsDefaultTypeInternal _PacketFactoryOptions_default_instance_;
class PacketManagerConfig;
struct PacketManagerConfigDefaultTypeInternal;
extern PacketManagerConfigDefaultTypeInternal _PacketManagerConfig_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::PacketFactoryConfig* Arena::CreateMaybeMessage<::mediapipe::PacketFactoryConfig>(Arena*);
template<> ::mediapipe::PacketFactoryOptions* Arena::CreateMaybeMessage<::mediapipe::PacketFactoryOptions>(Arena*);
template<> ::mediapipe::PacketManagerConfig* Arena::CreateMaybeMessage<::mediapipe::PacketManagerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class PacketFactoryOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.PacketFactoryOptions) */ {
 public:
  inline PacketFactoryOptions() : PacketFactoryOptions(nullptr) {}
  ~PacketFactoryOptions() override;
  explicit constexpr PacketFactoryOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketFactoryOptions(const PacketFactoryOptions& from);
  PacketFactoryOptions(PacketFactoryOptions&& from) noexcept
    : PacketFactoryOptions() {
    *this = ::std::move(from);
  }

  inline PacketFactoryOptions& operator=(const PacketFactoryOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketFactoryOptions& operator=(PacketFactoryOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketFactoryOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketFactoryOptions* internal_default_instance() {
    return reinterpret_cast<const PacketFactoryOptions*>(
               &_PacketFactoryOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketFactoryOptions& a, PacketFactoryOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketFactoryOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketFactoryOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketFactoryOptions* New() const final {
    return CreateMaybeMessage<PacketFactoryOptions>(nullptr);
  }

  PacketFactoryOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketFactoryOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketFactoryOptions& from);
  void MergeFrom(const PacketFactoryOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketFactoryOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.PacketFactoryOptions";
  }
  protected:
  explicit PacketFactoryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(PacketFactoryOptions)
  // @@protoc_insertion_point(class_scope:mediapipe.PacketFactoryOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fpacket_5ffactory_2eproto;
};
// -------------------------------------------------------------------

class PacketFactoryConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.PacketFactoryConfig) */ {
 public:
  inline PacketFactoryConfig() : PacketFactoryConfig(nullptr) {}
  ~PacketFactoryConfig() override;
  explicit constexpr PacketFactoryConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketFactoryConfig(const PacketFactoryConfig& from);
  PacketFactoryConfig(PacketFactoryConfig&& from) noexcept
    : PacketFactoryConfig() {
    *this = ::std::move(from);
  }

  inline PacketFactoryConfig& operator=(const PacketFactoryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketFactoryConfig& operator=(PacketFactoryConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketFactoryConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketFactoryConfig* internal_default_instance() {
    return reinterpret_cast<const PacketFactoryConfig*>(
               &_PacketFactoryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PacketFactoryConfig& a, PacketFactoryConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketFactoryConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketFactoryConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketFactoryConfig* New() const final {
    return CreateMaybeMessage<PacketFactoryConfig>(nullptr);
  }

  PacketFactoryConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketFactoryConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketFactoryConfig& from);
  void MergeFrom(const PacketFactoryConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketFactoryConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.PacketFactoryConfig";
  }
  protected:
  explicit PacketFactoryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketFactoryFieldNumber = 1,
    kOutputSidePacketFieldNumber = 2,
    kExternalOutputFieldNumber = 1002,
    kOptionsFieldNumber = 3,
  };
  // optional string packet_factory = 1;
  bool has_packet_factory() const;
  private:
  bool _internal_has_packet_factory() const;
  public:
  void clear_packet_factory();
  const std::string& packet_factory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packet_factory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packet_factory();
  std::string* release_packet_factory();
  void set_allocated_packet_factory(std::string* packet_factory);
  private:
  const std::string& _internal_packet_factory() const;
  void _internal_set_packet_factory(const std::string& value);
  std::string* _internal_mutable_packet_factory();
  public:

  // optional string output_side_packet = 2;
  bool has_output_side_packet() const;
  private:
  bool _internal_has_output_side_packet() const;
  public:
  void clear_output_side_packet();
  const std::string& output_side_packet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_side_packet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_side_packet();
  std::string* release_output_side_packet();
  void set_allocated_output_side_packet(std::string* output_side_packet);
  private:
  const std::string& _internal_output_side_packet() const;
  void _internal_set_output_side_packet(const std::string& value);
  std::string* _internal_mutable_output_side_packet();
  public:

  // optional string external_output = 1002;
  bool has_external_output() const;
  private:
  bool _internal_has_external_output() const;
  public:
  void clear_external_output();
  const std::string& external_output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_external_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_external_output();
  std::string* release_external_output();
  void set_allocated_external_output(std::string* external_output);
  private:
  const std::string& _internal_external_output() const;
  void _internal_set_external_output(const std::string& value);
  std::string* _internal_mutable_external_output();
  public:

  // optional .mediapipe.PacketFactoryOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::mediapipe::PacketFactoryOptions& options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::PacketFactoryOptions* release_options();
  ::mediapipe::PacketFactoryOptions* mutable_options();
  void set_allocated_options(::mediapipe::PacketFactoryOptions* options);
  private:
  const ::mediapipe::PacketFactoryOptions& _internal_options() const;
  ::mediapipe::PacketFactoryOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::mediapipe::PacketFactoryOptions* options);
  ::mediapipe::PacketFactoryOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:mediapipe.PacketFactoryConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_factory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_side_packet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_output_;
  ::mediapipe::PacketFactoryOptions* options_;
  friend struct ::TableStruct_mediapipe_2fframework_2fpacket_5ffactory_2eproto;
};
// -------------------------------------------------------------------

class PacketManagerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.PacketManagerConfig) */ {
 public:
  inline PacketManagerConfig() : PacketManagerConfig(nullptr) {}
  ~PacketManagerConfig() override;
  explicit constexpr PacketManagerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketManagerConfig(const PacketManagerConfig& from);
  PacketManagerConfig(PacketManagerConfig&& from) noexcept
    : PacketManagerConfig() {
    *this = ::std::move(from);
  }

  inline PacketManagerConfig& operator=(const PacketManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketManagerConfig& operator=(PacketManagerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketManagerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketManagerConfig* internal_default_instance() {
    return reinterpret_cast<const PacketManagerConfig*>(
               &_PacketManagerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PacketManagerConfig& a, PacketManagerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketManagerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketManagerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketManagerConfig* New() const final {
    return CreateMaybeMessage<PacketManagerConfig>(nullptr);
  }

  PacketManagerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketManagerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketManagerConfig& from);
  void MergeFrom(const PacketManagerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketManagerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.PacketManagerConfig";
  }
  protected:
  explicit PacketManagerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketFieldNumber = 1,
  };
  // repeated .mediapipe.PacketFactoryConfig packet = 1;
  int packet_size() const;
  private:
  int _internal_packet_size() const;
  public:
  void clear_packet();
  ::mediapipe::PacketFactoryConfig* mutable_packet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >*
      mutable_packet();
  private:
  const ::mediapipe::PacketFactoryConfig& _internal_packet(int index) const;
  ::mediapipe::PacketFactoryConfig* _internal_add_packet();
  public:
  const ::mediapipe::PacketFactoryConfig& packet(int index) const;
  ::mediapipe::PacketFactoryConfig* add_packet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >&
      packet() const;

  // @@protoc_insertion_point(class_scope:mediapipe.PacketManagerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig > packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fframework_2fpacket_5ffactory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketFactoryOptions

// -------------------------------------------------------------------

// PacketFactoryConfig

// optional string packet_factory = 1;
inline bool PacketFactoryConfig::_internal_has_packet_factory() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PacketFactoryConfig::has_packet_factory() const {
  return _internal_has_packet_factory();
}
inline void PacketFactoryConfig::clear_packet_factory() {
  packet_factory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PacketFactoryConfig::packet_factory() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketFactoryConfig.packet_factory)
  return _internal_packet_factory();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PacketFactoryConfig::set_packet_factory(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 packet_factory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.PacketFactoryConfig.packet_factory)
}
inline std::string* PacketFactoryConfig::mutable_packet_factory() {
  // @@protoc_insertion_point(field_mutable:mediapipe.PacketFactoryConfig.packet_factory)
  return _internal_mutable_packet_factory();
}
inline const std::string& PacketFactoryConfig::_internal_packet_factory() const {
  return packet_factory_.Get();
}
inline void PacketFactoryConfig::_internal_set_packet_factory(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  packet_factory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PacketFactoryConfig::_internal_mutable_packet_factory() {
  _has_bits_[0] |= 0x00000001u;
  return packet_factory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PacketFactoryConfig::release_packet_factory() {
  // @@protoc_insertion_point(field_release:mediapipe.PacketFactoryConfig.packet_factory)
  if (!_internal_has_packet_factory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return packet_factory_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PacketFactoryConfig::set_allocated_packet_factory(std::string* packet_factory) {
  if (packet_factory != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  packet_factory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_factory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.PacketFactoryConfig.packet_factory)
}

// optional string output_side_packet = 2;
inline bool PacketFactoryConfig::_internal_has_output_side_packet() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PacketFactoryConfig::has_output_side_packet() const {
  return _internal_has_output_side_packet();
}
inline void PacketFactoryConfig::clear_output_side_packet() {
  output_side_packet_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PacketFactoryConfig::output_side_packet() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketFactoryConfig.output_side_packet)
  return _internal_output_side_packet();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PacketFactoryConfig::set_output_side_packet(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 output_side_packet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.PacketFactoryConfig.output_side_packet)
}
inline std::string* PacketFactoryConfig::mutable_output_side_packet() {
  // @@protoc_insertion_point(field_mutable:mediapipe.PacketFactoryConfig.output_side_packet)
  return _internal_mutable_output_side_packet();
}
inline const std::string& PacketFactoryConfig::_internal_output_side_packet() const {
  return output_side_packet_.Get();
}
inline void PacketFactoryConfig::_internal_set_output_side_packet(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  output_side_packet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PacketFactoryConfig::_internal_mutable_output_side_packet() {
  _has_bits_[0] |= 0x00000002u;
  return output_side_packet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PacketFactoryConfig::release_output_side_packet() {
  // @@protoc_insertion_point(field_release:mediapipe.PacketFactoryConfig.output_side_packet)
  if (!_internal_has_output_side_packet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return output_side_packet_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PacketFactoryConfig::set_allocated_output_side_packet(std::string* output_side_packet) {
  if (output_side_packet != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_side_packet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_side_packet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.PacketFactoryConfig.output_side_packet)
}

// optional string external_output = 1002;
inline bool PacketFactoryConfig::_internal_has_external_output() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PacketFactoryConfig::has_external_output() const {
  return _internal_has_external_output();
}
inline void PacketFactoryConfig::clear_external_output() {
  external_output_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PacketFactoryConfig::external_output() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketFactoryConfig.external_output)
  return _internal_external_output();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PacketFactoryConfig::set_external_output(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 external_output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.PacketFactoryConfig.external_output)
}
inline std::string* PacketFactoryConfig::mutable_external_output() {
  // @@protoc_insertion_point(field_mutable:mediapipe.PacketFactoryConfig.external_output)
  return _internal_mutable_external_output();
}
inline const std::string& PacketFactoryConfig::_internal_external_output() const {
  return external_output_.Get();
}
inline void PacketFactoryConfig::_internal_set_external_output(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  external_output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PacketFactoryConfig::_internal_mutable_external_output() {
  _has_bits_[0] |= 0x00000004u;
  return external_output_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PacketFactoryConfig::release_external_output() {
  // @@protoc_insertion_point(field_release:mediapipe.PacketFactoryConfig.external_output)
  if (!_internal_has_external_output()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return external_output_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PacketFactoryConfig::set_allocated_external_output(std::string* external_output) {
  if (external_output != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  external_output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_output,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.PacketFactoryConfig.external_output)
}

// optional .mediapipe.PacketFactoryOptions options = 3;
inline bool PacketFactoryConfig::_internal_has_options() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || options_ != nullptr);
  return value;
}
inline bool PacketFactoryConfig::has_options() const {
  return _internal_has_options();
}
inline void PacketFactoryConfig::clear_options() {
  if (options_ != nullptr) options_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mediapipe::PacketFactoryOptions& PacketFactoryConfig::_internal_options() const {
  const ::mediapipe::PacketFactoryOptions* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::PacketFactoryOptions&>(
      ::mediapipe::_PacketFactoryOptions_default_instance_);
}
inline const ::mediapipe::PacketFactoryOptions& PacketFactoryConfig::options() const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketFactoryConfig.options)
  return _internal_options();
}
inline void PacketFactoryConfig::unsafe_arena_set_allocated_options(
    ::mediapipe::PacketFactoryOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.PacketFactoryConfig.options)
}
inline ::mediapipe::PacketFactoryOptions* PacketFactoryConfig::release_options() {
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::PacketFactoryOptions* temp = options_;
  options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::PacketFactoryOptions* PacketFactoryConfig::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:mediapipe.PacketFactoryConfig.options)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::PacketFactoryOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::mediapipe::PacketFactoryOptions* PacketFactoryConfig::_internal_mutable_options() {
  _has_bits_[0] |= 0x00000008u;
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::PacketFactoryOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::mediapipe::PacketFactoryOptions* PacketFactoryConfig::mutable_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.PacketFactoryConfig.options)
  return _internal_mutable_options();
}
inline void PacketFactoryConfig::set_allocated_options(::mediapipe::PacketFactoryOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.PacketFactoryConfig.options)
}

// -------------------------------------------------------------------

// PacketManagerConfig

// repeated .mediapipe.PacketFactoryConfig packet = 1;
inline int PacketManagerConfig::_internal_packet_size() const {
  return packet_.size();
}
inline int PacketManagerConfig::packet_size() const {
  return _internal_packet_size();
}
inline void PacketManagerConfig::clear_packet() {
  packet_.Clear();
}
inline ::mediapipe::PacketFactoryConfig* PacketManagerConfig::mutable_packet(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.PacketManagerConfig.packet)
  return packet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >*
PacketManagerConfig::mutable_packet() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.PacketManagerConfig.packet)
  return &packet_;
}
inline const ::mediapipe::PacketFactoryConfig& PacketManagerConfig::_internal_packet(int index) const {
  return packet_.Get(index);
}
inline const ::mediapipe::PacketFactoryConfig& PacketManagerConfig::packet(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.PacketManagerConfig.packet)
  return _internal_packet(index);
}
inline ::mediapipe::PacketFactoryConfig* PacketManagerConfig::_internal_add_packet() {
  return packet_.Add();
}
inline ::mediapipe::PacketFactoryConfig* PacketManagerConfig::add_packet() {
  // @@protoc_insertion_point(field_add:mediapipe.PacketManagerConfig.packet)
  return _internal_add_packet();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::PacketFactoryConfig >&
PacketManagerConfig::packet() const {
  // @@protoc_insertion_point(field_list:mediapipe.PacketManagerConfig.packet)
  return packet_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fpacket_5ffactory_2eproto
