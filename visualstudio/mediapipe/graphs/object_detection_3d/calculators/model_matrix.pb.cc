// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/graphs/object_detection_3d/calculators/model_matrix.proto

#include "mediapipe/graphs/object_detection_3d/calculators/model_matrix.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr TimedModelMatrixProto::TimedModelMatrixProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_entries_()
  , time_msec_(PROTOBUF_LONGLONG(0))
  , id_(-1){}
struct TimedModelMatrixProtoDefaultTypeInternal {
  constexpr TimedModelMatrixProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimedModelMatrixProtoDefaultTypeInternal() {}
  union {
    TimedModelMatrixProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimedModelMatrixProtoDefaultTypeInternal _TimedModelMatrixProto_default_instance_;
constexpr TimedModelMatrixProtoList::TimedModelMatrixProtoList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_matrix_(){}
struct TimedModelMatrixProtoListDefaultTypeInternal {
  constexpr TimedModelMatrixProtoListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimedModelMatrixProtoListDefaultTypeInternal() {}
  union {
    TimedModelMatrixProtoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimedModelMatrixProtoListDefaultTypeInternal _TimedModelMatrixProtoList_default_instance_;
constexpr TimedVectorProto::TimedVectorProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vector_entries_()
  , time_msec_(PROTOBUF_LONGLONG(0))
  , id_(-1){}
struct TimedVectorProtoDefaultTypeInternal {
  constexpr TimedVectorProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimedVectorProtoDefaultTypeInternal() {}
  union {
    TimedVectorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimedVectorProtoDefaultTypeInternal _TimedVectorProto_default_instance_;
constexpr TimedVectorProtoList::TimedVectorProtoList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vector_list_(){}
struct TimedVectorProtoListDefaultTypeInternal {
  constexpr TimedVectorProtoListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimedVectorProtoListDefaultTypeInternal() {}
  union {
    TimedVectorProtoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimedVectorProtoListDefaultTypeInternal _TimedVectorProtoList_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedModelMatrixProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedModelMatrixProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedModelMatrixProto, matrix_entries_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedModelMatrixProto, time_msec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedModelMatrixProto, id_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedModelMatrixProtoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedModelMatrixProtoList, model_matrix_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedVectorProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedVectorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedVectorProto, vector_entries_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedVectorProto, time_msec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedVectorProto, id_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedVectorProtoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedVectorProtoList, vector_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::TimedModelMatrixProto)},
  { 11, -1, sizeof(::mediapipe::TimedModelMatrixProtoList)},
  { 17, 25, sizeof(::mediapipe::TimedVectorProto)},
  { 28, -1, sizeof(::mediapipe::TimedVectorProtoList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TimedModelMatrixProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TimedModelMatrixProtoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TimedVectorProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TimedVectorProtoList_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nCmediapipe/graphs/object_detection_3d/c"
  "alculators/model_matrix.proto\022\tmediapipe"
  "\"Y\n\025TimedModelMatrixProto\022\032\n\016matrix_entr"
  "ies\030\001 \003(\002B\002\020\001\022\024\n\ttime_msec\030\002 \001(\003:\0010\022\016\n\002i"
  "d\030\003 \001(\005:\002-1\"S\n\031TimedModelMatrixProtoList"
  "\0226\n\014model_matrix\030\001 \003(\0132 .mediapipe.Timed"
  "ModelMatrixProto\"T\n\020TimedVectorProto\022\032\n\016"
  "vector_entries\030\001 \003(\002B\002\020\001\022\024\n\ttime_msec\030\002 "
  "\001(\003:\0010\022\016\n\002id\030\003 \001(\005:\002-1\"H\n\024TimedVectorPro"
  "toList\0220\n\013vector_list\030\001 \003(\0132\033.mediapipe."
  "TimedVectorProto"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto = {
  false, false, 416, descriptor_table_protodef_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto, "mediapipe/graphs/object_detection_3d/calculators/model_matrix.proto", 
  &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto::offsets,
  file_level_metadata_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto, file_level_enum_descriptors_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto, file_level_service_descriptors_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_getter() {
  return &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto(&descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto);
namespace mediapipe {

// ===================================================================

class TimedModelMatrixProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TimedModelMatrixProto>()._has_bits_);
  static void set_has_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimedModelMatrixProto::TimedModelMatrixProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TimedModelMatrixProto)
}
TimedModelMatrixProto::TimedModelMatrixProto(const TimedModelMatrixProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matrix_entries_(from.matrix_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_msec_, &from.time_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_msec_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TimedModelMatrixProto)
}

void TimedModelMatrixProto::SharedCtor() {
time_msec_ = PROTOBUF_LONGLONG(0);
id_ = -1;
}

TimedModelMatrixProto::~TimedModelMatrixProto() {
  // @@protoc_insertion_point(destructor:mediapipe.TimedModelMatrixProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimedModelMatrixProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimedModelMatrixProto::ArenaDtor(void* object) {
  TimedModelMatrixProto* _this = reinterpret_cast< TimedModelMatrixProto* >(object);
  (void)_this;
}
void TimedModelMatrixProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimedModelMatrixProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimedModelMatrixProto::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TimedModelMatrixProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    time_msec_ = PROTOBUF_LONGLONG(0);
    id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedModelMatrixProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float matrix_entries = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_matrix_entries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_matrix_entries(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 time_msec = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_msec(&has_bits);
          time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedModelMatrixProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TimedModelMatrixProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float matrix_entries = 1 [packed = true];
  if (this->_internal_matrix_entries_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_matrix_entries(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 time_msec = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_msec(), target);
  }

  // optional int32 id = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TimedModelMatrixProto)
  return target;
}

size_t TimedModelMatrixProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TimedModelMatrixProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float matrix_entries = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_entries_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 time_msec = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_msec());
    }

    // optional int32 id = 3 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedModelMatrixProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TimedModelMatrixProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedModelMatrixProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedModelMatrixProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TimedModelMatrixProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TimedModelMatrixProto)
    MergeFrom(*source);
  }
}

void TimedModelMatrixProto::MergeFrom(const TimedModelMatrixProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TimedModelMatrixProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_entries_.MergeFrom(from.matrix_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimedModelMatrixProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TimedModelMatrixProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedModelMatrixProto::CopyFrom(const TimedModelMatrixProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TimedModelMatrixProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedModelMatrixProto::IsInitialized() const {
  return true;
}

void TimedModelMatrixProto::InternalSwap(TimedModelMatrixProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matrix_entries_.InternalSwap(&other->matrix_entries_);
  swap(time_msec_, other->time_msec_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedModelMatrixProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_getter, &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_once,
      file_level_metadata_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto[0]);
}

// ===================================================================

class TimedModelMatrixProtoList::_Internal {
 public:
};

TimedModelMatrixProtoList::TimedModelMatrixProtoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  model_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TimedModelMatrixProtoList)
}
TimedModelMatrixProtoList::TimedModelMatrixProtoList(const TimedModelMatrixProtoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_matrix_(from.model_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.TimedModelMatrixProtoList)
}

void TimedModelMatrixProtoList::SharedCtor() {
}

TimedModelMatrixProtoList::~TimedModelMatrixProtoList() {
  // @@protoc_insertion_point(destructor:mediapipe.TimedModelMatrixProtoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimedModelMatrixProtoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimedModelMatrixProtoList::ArenaDtor(void* object) {
  TimedModelMatrixProtoList* _this = reinterpret_cast< TimedModelMatrixProtoList* >(object);
  (void)_this;
}
void TimedModelMatrixProtoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimedModelMatrixProtoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimedModelMatrixProtoList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TimedModelMatrixProtoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_matrix_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedModelMatrixProtoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.TimedModelMatrixProto model_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_matrix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedModelMatrixProtoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TimedModelMatrixProtoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.TimedModelMatrixProto model_matrix = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_matrix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_model_matrix(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TimedModelMatrixProtoList)
  return target;
}

size_t TimedModelMatrixProtoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TimedModelMatrixProtoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.TimedModelMatrixProto model_matrix = 1;
  total_size += 1UL * this->_internal_model_matrix_size();
  for (const auto& msg : this->model_matrix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedModelMatrixProtoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TimedModelMatrixProtoList)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedModelMatrixProtoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedModelMatrixProtoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TimedModelMatrixProtoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TimedModelMatrixProtoList)
    MergeFrom(*source);
  }
}

void TimedModelMatrixProtoList::MergeFrom(const TimedModelMatrixProtoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TimedModelMatrixProtoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_matrix_.MergeFrom(from.model_matrix_);
}

void TimedModelMatrixProtoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TimedModelMatrixProtoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedModelMatrixProtoList::CopyFrom(const TimedModelMatrixProtoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TimedModelMatrixProtoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedModelMatrixProtoList::IsInitialized() const {
  return true;
}

void TimedModelMatrixProtoList::InternalSwap(TimedModelMatrixProtoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_matrix_.InternalSwap(&other->model_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedModelMatrixProtoList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_getter, &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_once,
      file_level_metadata_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto[1]);
}

// ===================================================================

class TimedVectorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TimedVectorProto>()._has_bits_);
  static void set_has_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TimedVectorProto::TimedVectorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vector_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TimedVectorProto)
}
TimedVectorProto::TimedVectorProto(const TimedVectorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vector_entries_(from.vector_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_msec_, &from.time_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_msec_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TimedVectorProto)
}

void TimedVectorProto::SharedCtor() {
time_msec_ = PROTOBUF_LONGLONG(0);
id_ = -1;
}

TimedVectorProto::~TimedVectorProto() {
  // @@protoc_insertion_point(destructor:mediapipe.TimedVectorProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimedVectorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimedVectorProto::ArenaDtor(void* object) {
  TimedVectorProto* _this = reinterpret_cast< TimedVectorProto* >(object);
  (void)_this;
}
void TimedVectorProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimedVectorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimedVectorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TimedVectorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    time_msec_ = PROTOBUF_LONGLONG(0);
    id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedVectorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float vector_entries = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vector_entries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_vector_entries(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 time_msec = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_msec(&has_bits);
          time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedVectorProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TimedVectorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vector_entries = 1 [packed = true];
  if (this->_internal_vector_entries_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vector_entries(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 time_msec = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_msec(), target);
  }

  // optional int32 id = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TimedVectorProto)
  return target;
}

size_t TimedVectorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TimedVectorProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vector_entries = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vector_entries_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 time_msec = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_msec());
    }

    // optional int32 id = 3 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedVectorProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TimedVectorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedVectorProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedVectorProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TimedVectorProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TimedVectorProto)
    MergeFrom(*source);
  }
}

void TimedVectorProto::MergeFrom(const TimedVectorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TimedVectorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_entries_.MergeFrom(from.vector_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimedVectorProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TimedVectorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedVectorProto::CopyFrom(const TimedVectorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TimedVectorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedVectorProto::IsInitialized() const {
  return true;
}

void TimedVectorProto::InternalSwap(TimedVectorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vector_entries_.InternalSwap(&other->vector_entries_);
  swap(time_msec_, other->time_msec_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedVectorProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_getter, &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_once,
      file_level_metadata_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto[2]);
}

// ===================================================================

class TimedVectorProtoList::_Internal {
 public:
};

TimedVectorProtoList::TimedVectorProtoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vector_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TimedVectorProtoList)
}
TimedVectorProtoList::TimedVectorProtoList(const TimedVectorProtoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vector_list_(from.vector_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.TimedVectorProtoList)
}

void TimedVectorProtoList::SharedCtor() {
}

TimedVectorProtoList::~TimedVectorProtoList() {
  // @@protoc_insertion_point(destructor:mediapipe.TimedVectorProtoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimedVectorProtoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimedVectorProtoList::ArenaDtor(void* object) {
  TimedVectorProtoList* _this = reinterpret_cast< TimedVectorProtoList* >(object);
  (void)_this;
}
void TimedVectorProtoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimedVectorProtoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimedVectorProtoList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TimedVectorProtoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedVectorProtoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.TimedVectorProto vector_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedVectorProtoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TimedVectorProtoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.TimedVectorProto vector_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vector_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TimedVectorProtoList)
  return target;
}

size_t TimedVectorProtoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TimedVectorProtoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.TimedVectorProto vector_list = 1;
  total_size += 1UL * this->_internal_vector_list_size();
  for (const auto& msg : this->vector_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedVectorProtoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TimedVectorProtoList)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedVectorProtoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedVectorProtoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TimedVectorProtoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TimedVectorProtoList)
    MergeFrom(*source);
  }
}

void TimedVectorProtoList::MergeFrom(const TimedVectorProtoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TimedVectorProtoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_list_.MergeFrom(from.vector_list_);
}

void TimedVectorProtoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TimedVectorProtoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedVectorProtoList::CopyFrom(const TimedVectorProtoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TimedVectorProtoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedVectorProtoList::IsInitialized() const {
  return true;
}

void TimedVectorProtoList::InternalSwap(TimedVectorProtoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vector_list_.InternalSwap(&other->vector_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedVectorProtoList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_getter, &descriptor_table_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto_once,
      file_level_metadata_mediapipe_2fgraphs_2fobject_5fdetection_5f3d_2fcalculators_2fmodel_5fmatrix_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::TimedModelMatrixProto* Arena::CreateMaybeMessage< ::mediapipe::TimedModelMatrixProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TimedModelMatrixProto >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TimedModelMatrixProtoList* Arena::CreateMaybeMessage< ::mediapipe::TimedModelMatrixProtoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TimedModelMatrixProtoList >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TimedVectorProto* Arena::CreateMaybeMessage< ::mediapipe::TimedVectorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TimedVectorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TimedVectorProtoList* Arena::CreateMaybeMessage< ::mediapipe::TimedVectorProtoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TimedVectorProtoList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
