// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/objectron/calculators/a_r_capture_metadata.proto

#include "mediapipe/modules/objectron/calculators/a_r_capture_metadata.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr AVCameraCalibrationData::AVCameraCalibrationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intrinsic_matrix_()
  , extrinsic_matrix_()
  , lens_distortion_lookup_values_()
  , inverse_lens_distortion_lookup_values_()
  , intrinsic_matrix_reference_dimension_width_(0)
  , intrinsic_matrix_reference_dimension_height_(0)
  , pixel_size_(0)
  , lens_distortion_center_x_(0)
  , lens_distortion_center_y_(0){}
struct AVCameraCalibrationDataDefaultTypeInternal {
  constexpr AVCameraCalibrationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AVCameraCalibrationDataDefaultTypeInternal() {}
  union {
    AVCameraCalibrationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AVCameraCalibrationDataDefaultTypeInternal _AVCameraCalibrationData_default_instance_;
constexpr AVDepthData::AVDepthData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depth_data_map_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depth_data_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depth_data_map_raw_values_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , camera_calibration_data_(nullptr)
  , depth_data_filtered_(false)
  , depth_data_quality_(0)

  , depth_data_map_original_minimum_value_(0)
  , depth_data_map_original_maximum_value_(0)
  , depth_data_map_width_(0)
  , depth_data_map_height_(0)
  , depth_data_accuracy_(1)
{}
struct AVDepthDataDefaultTypeInternal {
  constexpr AVDepthDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AVDepthDataDefaultTypeInternal() {}
  union {
    AVDepthData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AVDepthDataDefaultTypeInternal _AVDepthData_default_instance_;
constexpr ARLightEstimate_DirectionVector::ARLightEstimate_DirectionVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct ARLightEstimate_DirectionVectorDefaultTypeInternal {
  constexpr ARLightEstimate_DirectionVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARLightEstimate_DirectionVectorDefaultTypeInternal() {}
  union {
    ARLightEstimate_DirectionVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARLightEstimate_DirectionVectorDefaultTypeInternal _ARLightEstimate_DirectionVector_default_instance_;
constexpr ARLightEstimate::ARLightEstimate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spherical_harmonics_coefficients_()
  , primary_light_direction_(nullptr)
  , ambient_intensity_(0)
  , ambient_color_temperature_(0)
  , primary_light_intensity_(0){}
struct ARLightEstimateDefaultTypeInternal {
  constexpr ARLightEstimateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARLightEstimateDefaultTypeInternal() {}
  union {
    ARLightEstimate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARLightEstimateDefaultTypeInternal _ARLightEstimate_default_instance_;
constexpr ARCamera_EulerAngles::ARCamera_EulerAngles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_(0)
  , pitch_(0)
  , yaw_(0){}
struct ARCamera_EulerAnglesDefaultTypeInternal {
  constexpr ARCamera_EulerAnglesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARCamera_EulerAnglesDefaultTypeInternal() {}
  union {
    ARCamera_EulerAngles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARCamera_EulerAnglesDefaultTypeInternal _ARCamera_EulerAngles_default_instance_;
constexpr ARCamera::ARCamera(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_()
  , intrinsics_()
  , projection_matrix_()
  , view_matrix_()
  , euler_angles_(nullptr)
  , image_resolution_width_(0)
  , image_resolution_height_(0)
  , tracking_state_(1)

  , tracking_state_reason_(1)
{}
struct ARCameraDefaultTypeInternal {
  constexpr ARCameraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARCameraDefaultTypeInternal() {}
  union {
    ARCamera _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARCameraDefaultTypeInternal _ARCamera_default_instance_;
constexpr ARFaceGeometry_Vertex::ARFaceGeometry_Vertex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct ARFaceGeometry_VertexDefaultTypeInternal {
  constexpr ARFaceGeometry_VertexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARFaceGeometry_VertexDefaultTypeInternal() {}
  union {
    ARFaceGeometry_Vertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARFaceGeometry_VertexDefaultTypeInternal _ARFaceGeometry_Vertex_default_instance_;
constexpr ARFaceGeometry_TextureCoordinate::ARFaceGeometry_TextureCoordinate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u_(0)
  , v_(0){}
struct ARFaceGeometry_TextureCoordinateDefaultTypeInternal {
  constexpr ARFaceGeometry_TextureCoordinateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARFaceGeometry_TextureCoordinateDefaultTypeInternal() {}
  union {
    ARFaceGeometry_TextureCoordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARFaceGeometry_TextureCoordinateDefaultTypeInternal _ARFaceGeometry_TextureCoordinate_default_instance_;
constexpr ARFaceGeometry::ARFaceGeometry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_()
  , texture_coordinates_()
  , triangle_indices_()
  , _triangle_indices_cached_byte_size_()
  , vertex_count_(0)
  , texture_coordinate_count_(0)
  , triangle_count_(0){}
struct ARFaceGeometryDefaultTypeInternal {
  constexpr ARFaceGeometryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARFaceGeometryDefaultTypeInternal() {}
  union {
    ARFaceGeometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARFaceGeometryDefaultTypeInternal _ARFaceGeometry_default_instance_;
constexpr ARBlendShapeMap_MapEntry::ARBlendShapeMap_MapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blend_shape_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blend_shape_coefficient_(0){}
struct ARBlendShapeMap_MapEntryDefaultTypeInternal {
  constexpr ARBlendShapeMap_MapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARBlendShapeMap_MapEntryDefaultTypeInternal() {}
  union {
    ARBlendShapeMap_MapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARBlendShapeMap_MapEntryDefaultTypeInternal _ARBlendShapeMap_MapEntry_default_instance_;
constexpr ARBlendShapeMap::ARBlendShapeMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct ARBlendShapeMapDefaultTypeInternal {
  constexpr ARBlendShapeMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARBlendShapeMapDefaultTypeInternal() {}
  union {
    ARBlendShapeMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARBlendShapeMapDefaultTypeInternal _ARBlendShapeMap_default_instance_;
constexpr ARFaceAnchor::ARFaceAnchor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_()
  , geometry_(nullptr)
  , blend_shapes_(nullptr)
  , is_tracked_(false){}
struct ARFaceAnchorDefaultTypeInternal {
  constexpr ARFaceAnchorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARFaceAnchorDefaultTypeInternal() {}
  union {
    ARFaceAnchor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARFaceAnchorDefaultTypeInternal _ARFaceAnchor_default_instance_;
constexpr ARPlaneGeometry_Vertex::ARPlaneGeometry_Vertex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct ARPlaneGeometry_VertexDefaultTypeInternal {
  constexpr ARPlaneGeometry_VertexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPlaneGeometry_VertexDefaultTypeInternal() {}
  union {
    ARPlaneGeometry_Vertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPlaneGeometry_VertexDefaultTypeInternal _ARPlaneGeometry_Vertex_default_instance_;
constexpr ARPlaneGeometry_TextureCoordinate::ARPlaneGeometry_TextureCoordinate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u_(0)
  , v_(0){}
struct ARPlaneGeometry_TextureCoordinateDefaultTypeInternal {
  constexpr ARPlaneGeometry_TextureCoordinateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPlaneGeometry_TextureCoordinateDefaultTypeInternal() {}
  union {
    ARPlaneGeometry_TextureCoordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPlaneGeometry_TextureCoordinateDefaultTypeInternal _ARPlaneGeometry_TextureCoordinate_default_instance_;
constexpr ARPlaneGeometry::ARPlaneGeometry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_()
  , texture_coordinates_()
  , triangle_indices_()
  , _triangle_indices_cached_byte_size_()
  , boundary_vertices_()
  , vertex_count_(0)
  , texture_coordinate_count_(0)
  , triangle_count_(0)
  , boundary_vertex_count_(0){}
struct ARPlaneGeometryDefaultTypeInternal {
  constexpr ARPlaneGeometryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPlaneGeometryDefaultTypeInternal() {}
  union {
    ARPlaneGeometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPlaneGeometryDefaultTypeInternal _ARPlaneGeometry_default_instance_;
constexpr ARPlaneAnchor_PlaneVector::ARPlaneAnchor_PlaneVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct ARPlaneAnchor_PlaneVectorDefaultTypeInternal {
  constexpr ARPlaneAnchor_PlaneVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPlaneAnchor_PlaneVectorDefaultTypeInternal() {}
  union {
    ARPlaneAnchor_PlaneVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPlaneAnchor_PlaneVectorDefaultTypeInternal _ARPlaneAnchor_PlaneVector_default_instance_;
constexpr ARPlaneAnchor::ARPlaneAnchor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_()
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , geometry_(nullptr)
  , center_(nullptr)
  , extent_(nullptr)
  , alignment_(0)

  , classification_supported_(false)
  , classification_(0)

  , classification_status_(0)
{}
struct ARPlaneAnchorDefaultTypeInternal {
  constexpr ARPlaneAnchorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPlaneAnchorDefaultTypeInternal() {}
  union {
    ARPlaneAnchor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPlaneAnchorDefaultTypeInternal _ARPlaneAnchor_default_instance_;
constexpr ARPointCloud_Point::ARPointCloud_Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct ARPointCloud_PointDefaultTypeInternal {
  constexpr ARPointCloud_PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPointCloud_PointDefaultTypeInternal() {}
  union {
    ARPointCloud_Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPointCloud_PointDefaultTypeInternal _ARPointCloud_Point_default_instance_;
constexpr ARPointCloud::ARPointCloud(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_()
  , identifier_()
  , _identifier_cached_byte_size_()
  , count_(0){}
struct ARPointCloudDefaultTypeInternal {
  constexpr ARPointCloudDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARPointCloudDefaultTypeInternal() {}
  union {
    ARPointCloud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARPointCloudDefaultTypeInternal _ARPointCloud_default_instance_;
constexpr ARFrame::ARFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plane_anchor_()
  , depth_data_(nullptr)
  , camera_(nullptr)
  , light_estimate_(nullptr)
  , face_anchor_(nullptr)
  , raw_feature_points_(nullptr)
  , timestamp_(0)
  , depth_data_timestamp_(0){}
struct ARFrameDefaultTypeInternal {
  constexpr ARFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ARFrameDefaultTypeInternal() {}
  union {
    ARFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ARFrameDefaultTypeInternal _ARFrame_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, intrinsic_matrix_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, intrinsic_matrix_reference_dimension_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, intrinsic_matrix_reference_dimension_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, extrinsic_matrix_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, pixel_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, lens_distortion_lookup_values_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, inverse_lens_distortion_lookup_values_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, lens_distortion_center_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVCameraCalibrationData, lens_distortion_center_y_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_map_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_accuracy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_filtered_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_quality_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, camera_calibration_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_map_original_minimum_value_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_map_original_maximum_value_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_map_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_map_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AVDepthData, depth_data_map_raw_values_),
  0,
  1,
  10,
  4,
  5,
  3,
  6,
  7,
  8,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate_DirectionVector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate_DirectionVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate_DirectionVector, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate_DirectionVector, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate_DirectionVector, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate, ambient_intensity_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate, ambient_color_temperature_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate, spherical_harmonics_coefficients_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate, primary_light_direction_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARLightEstimate, primary_light_intensity_),
  1,
  2,
  ~0u,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera_EulerAngles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera_EulerAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera_EulerAngles, roll_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera_EulerAngles, pitch_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera_EulerAngles, yaw_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, tracking_state_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, tracking_state_reason_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, transform_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, euler_angles_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, image_resolution_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, image_resolution_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, intrinsics_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, projection_matrix_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARCamera, view_matrix_),
  3,
  4,
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_Vertex, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_Vertex, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_Vertex, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_Vertex, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_TextureCoordinate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_TextureCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_TextureCoordinate, u_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry_TextureCoordinate, v_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, vertices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, vertex_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, texture_coordinates_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, texture_coordinate_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, triangle_indices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceGeometry, triangle_count_),
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARBlendShapeMap_MapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARBlendShapeMap_MapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARBlendShapeMap_MapEntry, blend_shape_location_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARBlendShapeMap_MapEntry, blend_shape_coefficient_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARBlendShapeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARBlendShapeMap, entries_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceAnchor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceAnchor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceAnchor, geometry_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceAnchor, blend_shapes_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceAnchor, transform_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFaceAnchor, is_tracked_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_Vertex, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_Vertex, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_Vertex, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_Vertex, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_TextureCoordinate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_TextureCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_TextureCoordinate, u_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry_TextureCoordinate, v_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, vertices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, vertex_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, texture_coordinates_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, texture_coordinate_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, triangle_indices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, triangle_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, boundary_vertices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneGeometry, boundary_vertex_count_),
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor_PlaneVector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor_PlaneVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor_PlaneVector, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor_PlaneVector, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor_PlaneVector, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, identifier_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, transform_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, alignment_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, geometry_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, center_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, extent_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, classification_supported_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, classification_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPlaneAnchor, classification_status_),
  0,
  ~0u,
  4,
  1,
  2,
  3,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud_Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud_Point, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud_Point, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud_Point, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud, count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud, point_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARPointCloud, identifier_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, depth_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, depth_data_timestamp_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, camera_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, light_estimate_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, face_anchor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, plane_anchor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ARFrame, raw_feature_points_),
  5,
  0,
  6,
  1,
  2,
  3,
  ~0u,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::mediapipe::AVCameraCalibrationData)},
  { 23, 39, sizeof(::mediapipe::AVDepthData)},
  { 50, 58, sizeof(::mediapipe::ARLightEstimate_DirectionVector)},
  { 61, 71, sizeof(::mediapipe::ARLightEstimate)},
  { 76, 84, sizeof(::mediapipe::ARCamera_EulerAngles)},
  { 87, 101, sizeof(::mediapipe::ARCamera)},
  { 110, 118, sizeof(::mediapipe::ARFaceGeometry_Vertex)},
  { 121, 128, sizeof(::mediapipe::ARFaceGeometry_TextureCoordinate)},
  { 130, 141, sizeof(::mediapipe::ARFaceGeometry)},
  { 147, 154, sizeof(::mediapipe::ARBlendShapeMap_MapEntry)},
  { 156, -1, sizeof(::mediapipe::ARBlendShapeMap)},
  { 162, 171, sizeof(::mediapipe::ARFaceAnchor)},
  { 175, 183, sizeof(::mediapipe::ARPlaneGeometry_Vertex)},
  { 186, 193, sizeof(::mediapipe::ARPlaneGeometry_TextureCoordinate)},
  { 195, 208, sizeof(::mediapipe::ARPlaneGeometry)},
  { 216, 224, sizeof(::mediapipe::ARPlaneAnchor_PlaneVector)},
  { 227, 241, sizeof(::mediapipe::ARPlaneAnchor)},
  { 250, 258, sizeof(::mediapipe::ARPointCloud_Point)},
  { 261, 269, sizeof(::mediapipe::ARPointCloud)},
  { 272, 285, sizeof(::mediapipe::ARFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_AVCameraCalibrationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_AVDepthData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARLightEstimate_DirectionVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARLightEstimate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARCamera_EulerAngles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARCamera_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARFaceGeometry_Vertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARFaceGeometry_TextureCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARFaceGeometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARBlendShapeMap_MapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARBlendShapeMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARFaceAnchor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARPlaneGeometry_Vertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARPlaneGeometry_TextureCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARPlaneGeometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARPlaneAnchor_PlaneVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARPlaneAnchor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARPointCloud_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARPointCloud_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ARFrame_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nBmediapipe/modules/objectron/calculator"
  "s/a_r_capture_metadata.proto\022\tmediapipe\""
  "\364\002\n\027AVCameraCalibrationData\022\034\n\020intrinsic"
  "_matrix\030\001 \003(\002B\002\020\001\0222\n*intrinsic_matrix_re"
  "ference_dimension_width\030\002 \001(\002\0223\n+intrins"
  "ic_matrix_reference_dimension_height\030\003 \001"
  "(\002\022\034\n\020extrinsic_matrix\030\004 \003(\002B\002\020\001\022\022\n\npixe"
  "l_size\030\005 \001(\002\022)\n\035lens_distortion_lookup_v"
  "alues\030\006 \003(\002B\002\020\001\0221\n%inverse_lens_distorti"
  "on_lookup_values\030\007 \003(\002B\002\020\001\022 \n\030lens_disto"
  "rtion_center_x\030\010 \001(\002\022 \n\030lens_distortion_"
  "center_y\030\t \001(\002\"\327\004\n\013AVDepthData\022\026\n\016depth_"
  "data_map\030\001 \001(\014\022\027\n\017depth_data_type\030\002 \001(\t\022"
  "F\n\023depth_data_accuracy\030\003 \001(\0162\037.mediapipe"
  ".AVDepthData.Accuracy:\010RELATIVE\022\033\n\023depth"
  "_data_filtered\030\004 \001(\010\022:\n\022depth_data_quali"
  "ty\030\005 \001(\0162\036.mediapipe.AVDepthData.Quality"
  "\022C\n\027camera_calibration_data\030\006 \001(\0132\".medi"
  "apipe.AVCameraCalibrationData\022-\n%depth_d"
  "ata_map_original_minimum_value\030\007 \001(\002\022-\n%"
  "depth_data_map_original_maximum_value\030\010 "
  "\001(\002\022\034\n\024depth_data_map_width\030\t \001(\005\022\035\n\025dep"
  "th_data_map_height\030\n \001(\005\022!\n\031depth_data_m"
  "ap_raw_values\030\013 \001(\014\">\n\010Accuracy\022\026\n\022UNDEF"
  "INED_ACCURACY\020\000\022\014\n\010RELATIVE\020\001\022\014\n\010ABSOLUT"
  "E\020\002\"3\n\007Quality\022\025\n\021UNDEFINED_QUALITY\020\000\022\010\n"
  "\004HIGH\020\001\022\007\n\003LOW\020\002\"\237\002\n\017ARLightEstimate\022\031\n\021"
  "ambient_intensity\030\001 \001(\001\022!\n\031ambient_color"
  "_temperature\030\002 \001(\001\022,\n spherical_harmonic"
  "s_coefficients\030\003 \003(\002B\002\020\001\022K\n\027primary_ligh"
  "t_direction\030\004 \001(\0132*.mediapipe.ARLightEst"
  "imate.DirectionVector\022\037\n\027primary_light_i"
  "ntensity\030\005 \001(\002\0322\n\017DirectionVector\022\t\n\001x\030\001"
  " \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\255\005\n\010ARCamera\022"
  "F\n\016tracking_state\030\001 \001(\0162!.mediapipe.ARCa"
  "mera.TrackingState:\013UNAVAILABLE\022L\n\025track"
  "ing_state_reason\030\002 \001(\0162\'.mediapipe.ARCam"
  "era.TrackingStateReason:\004NONE\022\025\n\ttransfo"
  "rm\030\003 \003(\002B\002\020\001\0225\n\014euler_angles\030\004 \001(\0132\037.med"
  "iapipe.ARCamera.EulerAngles\022\036\n\026image_res"
  "olution_width\030\005 \001(\005\022\037\n\027image_resolution_"
  "height\030\006 \001(\005\022\026\n\nintrinsics\030\007 \003(\002B\002\020\001\022\035\n\021"
  "projection_matrix\030\010 \003(\002B\002\020\001\022\027\n\013view_matr"
  "ix\030\t \003(\002B\002\020\001\0327\n\013EulerAngles\022\014\n\004roll\030\001 \001("
  "\002\022\r\n\005pitch\030\002 \001(\002\022\013\n\003yaw\030\003 \001(\002\"W\n\rTrackin"
  "gState\022\034\n\030UNDEFINED_TRACKING_STATE\020\000\022\017\n\013"
  "UNAVAILABLE\020\001\022\013\n\007LIMITED\020\002\022\n\n\006NORMAL\020\003\"\231"
  "\001\n\023TrackingStateReason\022#\n\037UNDEFINED_TRAC"
  "KING_STATE_REASON\020\000\022\010\n\004NONE\020\001\022\020\n\014INITIAL"
  "IZING\020\002\022\024\n\020EXCESSIVE_MOTION\020\003\022\031\n\025INSUFFI"
  "CIENT_FEATURES\020\004\022\020\n\014RELOCALIZING\020\005\"\322\002\n\016A"
  "RFaceGeometry\0222\n\010vertices\030\001 \003(\0132 .mediap"
  "ipe.ARFaceGeometry.Vertex\022\024\n\014vertex_coun"
  "t\030\002 \001(\005\022H\n\023texture_coordinates\030\003 \003(\0132+.m"
  "ediapipe.ARFaceGeometry.TextureCoordinat"
  "e\022 \n\030texture_coordinate_count\030\004 \001(\005\022\034\n\020t"
  "riangle_indices\030\005 \003(\005B\002\020\001\022\026\n\016triangle_co"
  "unt\030\006 \001(\005\032)\n\006Vertex\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
  "\002\022\t\n\001z\030\003 \001(\002\032)\n\021TextureCoordinate\022\t\n\001u\030\001"
  " \001(\002\022\t\n\001v\030\002 \001(\002\"\222\001\n\017ARBlendShapeMap\0224\n\007e"
  "ntries\030\001 \003(\0132#.mediapipe.ARBlendShapeMap"
  ".MapEntry\032I\n\010MapEntry\022\034\n\024blend_shape_loc"
  "ation\030\001 \001(\t\022\037\n\027blend_shape_coefficient\030\002"
  " \001(\002\"\224\001\n\014ARFaceAnchor\022+\n\010geometry\030\001 \001(\0132"
  "\031.mediapipe.ARFaceGeometry\0220\n\014blend_shap"
  "es\030\002 \001(\0132\032.mediapipe.ARBlendShapeMap\022\021\n\t"
  "transform\030\003 \003(\002\022\022\n\nis_tracked\030\004 \001(\010\"\262\003\n\017"
  "ARPlaneGeometry\0223\n\010vertices\030\001 \003(\0132!.medi"
  "apipe.ARPlaneGeometry.Vertex\022\024\n\014vertex_c"
  "ount\030\002 \001(\005\022I\n\023texture_coordinates\030\003 \003(\0132"
  ",.mediapipe.ARPlaneGeometry.TextureCoord"
  "inate\022 \n\030texture_coordinate_count\030\004 \001(\005\022"
  "\034\n\020triangle_indices\030\005 \003(\005B\002\020\001\022\026\n\016triangl"
  "e_count\030\006 \001(\005\022<\n\021boundary_vertices\030\007 \003(\013"
  "2!.mediapipe.ARPlaneGeometry.Vertex\022\035\n\025b"
  "oundary_vertex_count\030\010 \001(\005\032)\n\006Vertex\022\t\n\001"
  "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\032)\n\021Texture"
  "Coordinate\022\t\n\001u\030\001 \001(\002\022\t\n\001v\030\002 \001(\002\"\334\005\n\rARP"
  "laneAnchor\022\022\n\nidentifier\030\001 \001(\t\022\021\n\ttransf"
  "orm\030\002 \003(\002\0225\n\talignment\030\003 \001(\0162\".mediapipe"
  ".ARPlaneAnchor.Alignment\022,\n\010geometry\030\004 \001"
  "(\0132\032.mediapipe.ARPlaneGeometry\0224\n\006center"
  "\030\005 \001(\0132$.mediapipe.ARPlaneAnchor.PlaneVe"
  "ctor\0224\n\006extent\030\006 \001(\0132$.mediapipe.ARPlane"
  "Anchor.PlaneVector\022 \n\030classification_sup"
  "ported\030\007 \001(\010\022D\n\016classification\030\010 \001(\0162,.m"
  "ediapipe.ARPlaneAnchor.PlaneClassificati"
  "on\022Q\n\025classification_status\030\t \001(\01622.medi"
  "apipe.ARPlaneAnchor.PlaneClassificationS"
  "tatus\032.\n\013PlaneVector\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
  "(\002\022\t\n\001z\030\003 \001(\002\"8\n\tAlignment\022\r\n\tUNDEFINED\020"
  "\000\022\016\n\nHORIZONTAL\020\001\022\014\n\010VERTICAL\020\002\"V\n\023Plane"
  "Classification\022\010\n\004NONE\020\000\022\010\n\004WALL\020\001\022\t\n\005FL"
  "OOR\020\002\022\013\n\007CEILING\020\003\022\t\n\005TABLE\020\004\022\010\n\004SEAT\020\005\""
  "V\n\031PlaneClassificationStatus\022\013\n\007UNKNOWN\020"
  "\000\022\017\n\013UNAVAILABLE\020\001\022\020\n\014UNDETERMINED\020\002\022\t\n\005"
  "KNOWN\020\003\"\215\001\n\014ARPointCloud\022\r\n\005count\030\001 \001(\005\022"
  ",\n\005point\030\002 \003(\0132\035.mediapipe.ARPointCloud."
  "Point\022\026\n\nidentifier\030\003 \003(\003B\002\020\001\032(\n\005Point\022\t"
  "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\322\002\n\007ARFr"
  "ame\022\021\n\ttimestamp\030\001 \001(\001\022*\n\ndepth_data\030\002 \001"
  "(\0132\026.mediapipe.AVDepthData\022\034\n\024depth_data"
  "_timestamp\030\003 \001(\001\022#\n\006camera\030\004 \001(\0132\023.media"
  "pipe.ARCamera\0222\n\016light_estimate\030\005 \001(\0132\032."
  "mediapipe.ARLightEstimate\022,\n\013face_anchor"
  "\030\006 \001(\0132\027.mediapipe.ARFaceAnchor\022.\n\014plane"
  "_anchor\030\007 \003(\0132\030.mediapipe.ARPlaneAnchor\022"
  "3\n\022raw_feature_points\030\010 \001(\0132\027.mediapipe."
  "ARPointCloud"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto = {
  false, false, 4332, descriptor_table_protodef_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto, "mediapipe/modules/objectron/calculators/a_r_capture_metadata.proto", 
  &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto::offsets,
  file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto, file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto, file_level_service_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter() {
  return &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AVDepthData_Accuracy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[0];
}
bool AVDepthData_Accuracy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AVDepthData_Accuracy AVDepthData::UNDEFINED_ACCURACY;
constexpr AVDepthData_Accuracy AVDepthData::RELATIVE;
constexpr AVDepthData_Accuracy AVDepthData::ABSOLUTE;
constexpr AVDepthData_Accuracy AVDepthData::Accuracy_MIN;
constexpr AVDepthData_Accuracy AVDepthData::Accuracy_MAX;
constexpr int AVDepthData::Accuracy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AVDepthData_Quality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[1];
}
bool AVDepthData_Quality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AVDepthData_Quality AVDepthData::UNDEFINED_QUALITY;
constexpr AVDepthData_Quality AVDepthData::HIGH;
constexpr AVDepthData_Quality AVDepthData::LOW;
constexpr AVDepthData_Quality AVDepthData::Quality_MIN;
constexpr AVDepthData_Quality AVDepthData::Quality_MAX;
constexpr int AVDepthData::Quality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ARCamera_TrackingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[2];
}
bool ARCamera_TrackingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ARCamera_TrackingState ARCamera::UNDEFINED_TRACKING_STATE;
constexpr ARCamera_TrackingState ARCamera::UNAVAILABLE;
constexpr ARCamera_TrackingState ARCamera::LIMITED;
constexpr ARCamera_TrackingState ARCamera::NORMAL;
constexpr ARCamera_TrackingState ARCamera::TrackingState_MIN;
constexpr ARCamera_TrackingState ARCamera::TrackingState_MAX;
constexpr int ARCamera::TrackingState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ARCamera_TrackingStateReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[3];
}
bool ARCamera_TrackingStateReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ARCamera_TrackingStateReason ARCamera::UNDEFINED_TRACKING_STATE_REASON;
constexpr ARCamera_TrackingStateReason ARCamera::NONE;
constexpr ARCamera_TrackingStateReason ARCamera::INITIALIZING;
constexpr ARCamera_TrackingStateReason ARCamera::EXCESSIVE_MOTION;
constexpr ARCamera_TrackingStateReason ARCamera::INSUFFICIENT_FEATURES;
constexpr ARCamera_TrackingStateReason ARCamera::RELOCALIZING;
constexpr ARCamera_TrackingStateReason ARCamera::TrackingStateReason_MIN;
constexpr ARCamera_TrackingStateReason ARCamera::TrackingStateReason_MAX;
constexpr int ARCamera::TrackingStateReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ARPlaneAnchor_Alignment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[4];
}
bool ARPlaneAnchor_Alignment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ARPlaneAnchor_Alignment ARPlaneAnchor::UNDEFINED;
constexpr ARPlaneAnchor_Alignment ARPlaneAnchor::HORIZONTAL;
constexpr ARPlaneAnchor_Alignment ARPlaneAnchor::VERTICAL;
constexpr ARPlaneAnchor_Alignment ARPlaneAnchor::Alignment_MIN;
constexpr ARPlaneAnchor_Alignment ARPlaneAnchor::Alignment_MAX;
constexpr int ARPlaneAnchor::Alignment_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ARPlaneAnchor_PlaneClassification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[5];
}
bool ARPlaneAnchor_PlaneClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::NONE;
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::WALL;
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::FLOOR;
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::CEILING;
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::TABLE;
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::SEAT;
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::PlaneClassification_MIN;
constexpr ARPlaneAnchor_PlaneClassification ARPlaneAnchor::PlaneClassification_MAX;
constexpr int ARPlaneAnchor::PlaneClassification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ARPlaneAnchor_PlaneClassificationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[6];
}
bool ARPlaneAnchor_PlaneClassificationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ARPlaneAnchor_PlaneClassificationStatus ARPlaneAnchor::UNKNOWN;
constexpr ARPlaneAnchor_PlaneClassificationStatus ARPlaneAnchor::UNAVAILABLE;
constexpr ARPlaneAnchor_PlaneClassificationStatus ARPlaneAnchor::UNDETERMINED;
constexpr ARPlaneAnchor_PlaneClassificationStatus ARPlaneAnchor::KNOWN;
constexpr ARPlaneAnchor_PlaneClassificationStatus ARPlaneAnchor::PlaneClassificationStatus_MIN;
constexpr ARPlaneAnchor_PlaneClassificationStatus ARPlaneAnchor::PlaneClassificationStatus_MAX;
constexpr int ARPlaneAnchor::PlaneClassificationStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AVCameraCalibrationData::_Internal {
 public:
  using HasBits = decltype(std::declval<AVCameraCalibrationData>()._has_bits_);
  static void set_has_intrinsic_matrix_reference_dimension_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_intrinsic_matrix_reference_dimension_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pixel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lens_distortion_center_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lens_distortion_center_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AVCameraCalibrationData::AVCameraCalibrationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  intrinsic_matrix_(arena),
  extrinsic_matrix_(arena),
  lens_distortion_lookup_values_(arena),
  inverse_lens_distortion_lookup_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.AVCameraCalibrationData)
}
AVCameraCalibrationData::AVCameraCalibrationData(const AVCameraCalibrationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      intrinsic_matrix_(from.intrinsic_matrix_),
      extrinsic_matrix_(from.extrinsic_matrix_),
      lens_distortion_lookup_values_(from.lens_distortion_lookup_values_),
      inverse_lens_distortion_lookup_values_(from.inverse_lens_distortion_lookup_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&intrinsic_matrix_reference_dimension_width_, &from.intrinsic_matrix_reference_dimension_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&lens_distortion_center_y_) -
    reinterpret_cast<char*>(&intrinsic_matrix_reference_dimension_width_)) + sizeof(lens_distortion_center_y_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.AVCameraCalibrationData)
}

void AVCameraCalibrationData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intrinsic_matrix_reference_dimension_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lens_distortion_center_y_) -
    reinterpret_cast<char*>(&intrinsic_matrix_reference_dimension_width_)) + sizeof(lens_distortion_center_y_));
}

AVCameraCalibrationData::~AVCameraCalibrationData() {
  // @@protoc_insertion_point(destructor:mediapipe.AVCameraCalibrationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AVCameraCalibrationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AVCameraCalibrationData::ArenaDtor(void* object) {
  AVCameraCalibrationData* _this = reinterpret_cast< AVCameraCalibrationData* >(object);
  (void)_this;
}
void AVCameraCalibrationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AVCameraCalibrationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AVCameraCalibrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.AVCameraCalibrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intrinsic_matrix_.Clear();
  extrinsic_matrix_.Clear();
  lens_distortion_lookup_values_.Clear();
  inverse_lens_distortion_lookup_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&intrinsic_matrix_reference_dimension_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lens_distortion_center_y_) -
        reinterpret_cast<char*>(&intrinsic_matrix_reference_dimension_width_)) + sizeof(lens_distortion_center_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AVCameraCalibrationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float intrinsic_matrix = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intrinsic_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_intrinsic_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float intrinsic_matrix_reference_dimension_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_intrinsic_matrix_reference_dimension_width(&has_bits);
          intrinsic_matrix_reference_dimension_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float intrinsic_matrix_reference_dimension_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_intrinsic_matrix_reference_dimension_height(&has_bits);
          intrinsic_matrix_reference_dimension_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float extrinsic_matrix = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_extrinsic_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_extrinsic_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pixel_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pixel_size(&has_bits);
          pixel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float lens_distortion_lookup_values = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_lens_distortion_lookup_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_lens_distortion_lookup_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float inverse_lens_distortion_lookup_values = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_inverse_lens_distortion_lookup_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_inverse_lens_distortion_lookup_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lens_distortion_center_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_lens_distortion_center_x(&has_bits);
          lens_distortion_center_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lens_distortion_center_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_lens_distortion_center_y(&has_bits);
          lens_distortion_center_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AVCameraCalibrationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.AVCameraCalibrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float intrinsic_matrix = 1 [packed = true];
  if (this->_internal_intrinsic_matrix_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_intrinsic_matrix(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float intrinsic_matrix_reference_dimension_width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_intrinsic_matrix_reference_dimension_width(), target);
  }

  // optional float intrinsic_matrix_reference_dimension_height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_intrinsic_matrix_reference_dimension_height(), target);
  }

  // repeated float extrinsic_matrix = 4 [packed = true];
  if (this->_internal_extrinsic_matrix_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_extrinsic_matrix(), target);
  }

  // optional float pixel_size = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pixel_size(), target);
  }

  // repeated float lens_distortion_lookup_values = 6 [packed = true];
  if (this->_internal_lens_distortion_lookup_values_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_lens_distortion_lookup_values(), target);
  }

  // repeated float inverse_lens_distortion_lookup_values = 7 [packed = true];
  if (this->_internal_inverse_lens_distortion_lookup_values_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_inverse_lens_distortion_lookup_values(), target);
  }

  // optional float lens_distortion_center_x = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_lens_distortion_center_x(), target);
  }

  // optional float lens_distortion_center_y = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_lens_distortion_center_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.AVCameraCalibrationData)
  return target;
}

size_t AVCameraCalibrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.AVCameraCalibrationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float intrinsic_matrix = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intrinsic_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float extrinsic_matrix = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_extrinsic_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float lens_distortion_lookup_values = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lens_distortion_lookup_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float inverse_lens_distortion_lookup_values = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inverse_lens_distortion_lookup_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float intrinsic_matrix_reference_dimension_width = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float intrinsic_matrix_reference_dimension_height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pixel_size = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float lens_distortion_center_x = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float lens_distortion_center_y = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVCameraCalibrationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.AVCameraCalibrationData)
  GOOGLE_DCHECK_NE(&from, this);
  const AVCameraCalibrationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AVCameraCalibrationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.AVCameraCalibrationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.AVCameraCalibrationData)
    MergeFrom(*source);
  }
}

void AVCameraCalibrationData::MergeFrom(const AVCameraCalibrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.AVCameraCalibrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intrinsic_matrix_.MergeFrom(from.intrinsic_matrix_);
  extrinsic_matrix_.MergeFrom(from.extrinsic_matrix_);
  lens_distortion_lookup_values_.MergeFrom(from.lens_distortion_lookup_values_);
  inverse_lens_distortion_lookup_values_.MergeFrom(from.inverse_lens_distortion_lookup_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      intrinsic_matrix_reference_dimension_width_ = from.intrinsic_matrix_reference_dimension_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      intrinsic_matrix_reference_dimension_height_ = from.intrinsic_matrix_reference_dimension_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      pixel_size_ = from.pixel_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      lens_distortion_center_x_ = from.lens_distortion_center_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      lens_distortion_center_y_ = from.lens_distortion_center_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AVCameraCalibrationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.AVCameraCalibrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVCameraCalibrationData::CopyFrom(const AVCameraCalibrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.AVCameraCalibrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVCameraCalibrationData::IsInitialized() const {
  return true;
}

void AVCameraCalibrationData::InternalSwap(AVCameraCalibrationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intrinsic_matrix_.InternalSwap(&other->intrinsic_matrix_);
  extrinsic_matrix_.InternalSwap(&other->extrinsic_matrix_);
  lens_distortion_lookup_values_.InternalSwap(&other->lens_distortion_lookup_values_);
  inverse_lens_distortion_lookup_values_.InternalSwap(&other->inverse_lens_distortion_lookup_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AVCameraCalibrationData, lens_distortion_center_y_)
      + sizeof(AVCameraCalibrationData::lens_distortion_center_y_)
      - PROTOBUF_FIELD_OFFSET(AVCameraCalibrationData, intrinsic_matrix_reference_dimension_width_)>(
          reinterpret_cast<char*>(&intrinsic_matrix_reference_dimension_width_),
          reinterpret_cast<char*>(&other->intrinsic_matrix_reference_dimension_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AVCameraCalibrationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[0]);
}

// ===================================================================

class AVDepthData::_Internal {
 public:
  using HasBits = decltype(std::declval<AVDepthData>()._has_bits_);
  static void set_has_depth_data_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_depth_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depth_data_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_depth_data_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_depth_data_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mediapipe::AVCameraCalibrationData& camera_calibration_data(const AVDepthData* msg);
  static void set_has_camera_calibration_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_depth_data_map_original_minimum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_depth_data_map_original_maximum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_depth_data_map_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_depth_data_map_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_depth_data_map_raw_values(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::AVCameraCalibrationData&
AVDepthData::_Internal::camera_calibration_data(const AVDepthData* msg) {
  return *msg->camera_calibration_data_;
}
AVDepthData::AVDepthData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.AVDepthData)
}
AVDepthData::AVDepthData(const AVDepthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  depth_data_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_depth_data_map()) {
    depth_data_map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depth_data_map(), 
      GetArena());
  }
  depth_data_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_depth_data_type()) {
    depth_data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depth_data_type(), 
      GetArena());
  }
  depth_data_map_raw_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_depth_data_map_raw_values()) {
    depth_data_map_raw_values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depth_data_map_raw_values(), 
      GetArena());
  }
  if (from._internal_has_camera_calibration_data()) {
    camera_calibration_data_ = new ::mediapipe::AVCameraCalibrationData(*from.camera_calibration_data_);
  } else {
    camera_calibration_data_ = nullptr;
  }
  ::memcpy(&depth_data_filtered_, &from.depth_data_filtered_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_data_accuracy_) -
    reinterpret_cast<char*>(&depth_data_filtered_)) + sizeof(depth_data_accuracy_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.AVDepthData)
}

void AVDepthData::SharedCtor() {
depth_data_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
depth_data_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
depth_data_map_raw_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&camera_calibration_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&depth_data_map_height_) -
    reinterpret_cast<char*>(&camera_calibration_data_)) + sizeof(depth_data_map_height_));
depth_data_accuracy_ = 1;
}

AVDepthData::~AVDepthData() {
  // @@protoc_insertion_point(destructor:mediapipe.AVDepthData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AVDepthData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  depth_data_map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depth_data_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depth_data_map_raw_values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_calibration_data_;
}

void AVDepthData::ArenaDtor(void* object) {
  AVDepthData* _this = reinterpret_cast< AVDepthData* >(object);
  (void)_this;
}
void AVDepthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AVDepthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AVDepthData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.AVDepthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      depth_data_map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      depth_data_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      depth_data_map_raw_values_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(camera_calibration_data_ != nullptr);
      camera_calibration_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&depth_data_filtered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_data_map_original_maximum_value_) -
        reinterpret_cast<char*>(&depth_data_filtered_)) + sizeof(depth_data_map_original_maximum_value_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&depth_data_map_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_data_map_height_) -
        reinterpret_cast<char*>(&depth_data_map_width_)) + sizeof(depth_data_map_height_));
    depth_data_accuracy_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AVDepthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes depth_data_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_depth_data_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string depth_data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_depth_data_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.AVDepthData.depth_data_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.AVDepthData.Accuracy depth_data_accuracy = 3 [default = RELATIVE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::AVDepthData_Accuracy_IsValid(val))) {
            _internal_set_depth_data_accuracy(static_cast<::mediapipe::AVDepthData_Accuracy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool depth_data_filtered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_depth_data_filtered(&has_bits);
          depth_data_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.AVDepthData.Quality depth_data_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::AVDepthData_Quality_IsValid(val))) {
            _internal_set_depth_data_quality(static_cast<::mediapipe::AVDepthData_Quality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.AVCameraCalibrationData camera_calibration_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_calibration_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float depth_data_map_original_minimum_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_depth_data_map_original_minimum_value(&has_bits);
          depth_data_map_original_minimum_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float depth_data_map_original_maximum_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_depth_data_map_original_maximum_value(&has_bits);
          depth_data_map_original_maximum_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 depth_data_map_width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_depth_data_map_width(&has_bits);
          depth_data_map_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 depth_data_map_height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_depth_data_map_height(&has_bits);
          depth_data_map_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes depth_data_map_raw_values = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_depth_data_map_raw_values();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AVDepthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.AVDepthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes depth_data_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_depth_data_map(), target);
  }

  // optional string depth_data_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_depth_data_type().data(), static_cast<int>(this->_internal_depth_data_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.AVDepthData.depth_data_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_depth_data_type(), target);
  }

  // optional .mediapipe.AVDepthData.Accuracy depth_data_accuracy = 3 [default = RELATIVE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_depth_data_accuracy(), target);
  }

  // optional bool depth_data_filtered = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_depth_data_filtered(), target);
  }

  // optional .mediapipe.AVDepthData.Quality depth_data_quality = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_depth_data_quality(), target);
  }

  // optional .mediapipe.AVCameraCalibrationData camera_calibration_data = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::camera_calibration_data(this), target, stream);
  }

  // optional float depth_data_map_original_minimum_value = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_depth_data_map_original_minimum_value(), target);
  }

  // optional float depth_data_map_original_maximum_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_depth_data_map_original_maximum_value(), target);
  }

  // optional int32 depth_data_map_width = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_depth_data_map_width(), target);
  }

  // optional int32 depth_data_map_height = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_depth_data_map_height(), target);
  }

  // optional bytes depth_data_map_raw_values = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_depth_data_map_raw_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.AVDepthData)
  return target;
}

size_t AVDepthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.AVDepthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes depth_data_map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_depth_data_map());
    }

    // optional string depth_data_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_depth_data_type());
    }

    // optional bytes depth_data_map_raw_values = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_depth_data_map_raw_values());
    }

    // optional .mediapipe.AVCameraCalibrationData camera_calibration_data = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_calibration_data_);
    }

    // optional bool depth_data_filtered = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.AVDepthData.Quality depth_data_quality = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_depth_data_quality());
    }

    // optional float depth_data_map_original_minimum_value = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float depth_data_map_original_maximum_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 depth_data_map_width = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_depth_data_map_width());
    }

    // optional int32 depth_data_map_height = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_depth_data_map_height());
    }

    // optional .mediapipe.AVDepthData.Accuracy depth_data_accuracy = 3 [default = RELATIVE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_depth_data_accuracy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVDepthData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.AVDepthData)
  GOOGLE_DCHECK_NE(&from, this);
  const AVDepthData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AVDepthData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.AVDepthData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.AVDepthData)
    MergeFrom(*source);
  }
}

void AVDepthData::MergeFrom(const AVDepthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.AVDepthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_depth_data_map(from._internal_depth_data_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_depth_data_type(from._internal_depth_data_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_depth_data_map_raw_values(from._internal_depth_data_map_raw_values());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_camera_calibration_data()->::mediapipe::AVCameraCalibrationData::MergeFrom(from._internal_camera_calibration_data());
    }
    if (cached_has_bits & 0x00000010u) {
      depth_data_filtered_ = from.depth_data_filtered_;
    }
    if (cached_has_bits & 0x00000020u) {
      depth_data_quality_ = from.depth_data_quality_;
    }
    if (cached_has_bits & 0x00000040u) {
      depth_data_map_original_minimum_value_ = from.depth_data_map_original_minimum_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      depth_data_map_original_maximum_value_ = from.depth_data_map_original_maximum_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      depth_data_map_width_ = from.depth_data_map_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      depth_data_map_height_ = from.depth_data_map_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      depth_data_accuracy_ = from.depth_data_accuracy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AVDepthData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.AVDepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVDepthData::CopyFrom(const AVDepthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.AVDepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVDepthData::IsInitialized() const {
  return true;
}

void AVDepthData::InternalSwap(AVDepthData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  depth_data_map_.Swap(&other->depth_data_map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  depth_data_type_.Swap(&other->depth_data_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  depth_data_map_raw_values_.Swap(&other->depth_data_map_raw_values_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AVDepthData, depth_data_map_height_)
      + sizeof(AVDepthData::depth_data_map_height_)
      - PROTOBUF_FIELD_OFFSET(AVDepthData, camera_calibration_data_)>(
          reinterpret_cast<char*>(&camera_calibration_data_),
          reinterpret_cast<char*>(&other->camera_calibration_data_));
  swap(depth_data_accuracy_, other->depth_data_accuracy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AVDepthData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[1]);
}

// ===================================================================

class ARLightEstimate_DirectionVector::_Internal {
 public:
  using HasBits = decltype(std::declval<ARLightEstimate_DirectionVector>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ARLightEstimate_DirectionVector::ARLightEstimate_DirectionVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARLightEstimate.DirectionVector)
}
ARLightEstimate_DirectionVector::ARLightEstimate_DirectionVector(const ARLightEstimate_DirectionVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARLightEstimate.DirectionVector)
}

void ARLightEstimate_DirectionVector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ARLightEstimate_DirectionVector::~ARLightEstimate_DirectionVector() {
  // @@protoc_insertion_point(destructor:mediapipe.ARLightEstimate.DirectionVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARLightEstimate_DirectionVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARLightEstimate_DirectionVector::ArenaDtor(void* object) {
  ARLightEstimate_DirectionVector* _this = reinterpret_cast< ARLightEstimate_DirectionVector* >(object);
  (void)_this;
}
void ARLightEstimate_DirectionVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARLightEstimate_DirectionVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARLightEstimate_DirectionVector::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARLightEstimate.DirectionVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARLightEstimate_DirectionVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARLightEstimate_DirectionVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARLightEstimate.DirectionVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARLightEstimate.DirectionVector)
  return target;
}

size_t ARLightEstimate_DirectionVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARLightEstimate.DirectionVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARLightEstimate_DirectionVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARLightEstimate.DirectionVector)
  GOOGLE_DCHECK_NE(&from, this);
  const ARLightEstimate_DirectionVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARLightEstimate_DirectionVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARLightEstimate.DirectionVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARLightEstimate.DirectionVector)
    MergeFrom(*source);
  }
}

void ARLightEstimate_DirectionVector::MergeFrom(const ARLightEstimate_DirectionVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARLightEstimate.DirectionVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARLightEstimate_DirectionVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARLightEstimate.DirectionVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARLightEstimate_DirectionVector::CopyFrom(const ARLightEstimate_DirectionVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARLightEstimate.DirectionVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARLightEstimate_DirectionVector::IsInitialized() const {
  return true;
}

void ARLightEstimate_DirectionVector::InternalSwap(ARLightEstimate_DirectionVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARLightEstimate_DirectionVector, z_)
      + sizeof(ARLightEstimate_DirectionVector::z_)
      - PROTOBUF_FIELD_OFFSET(ARLightEstimate_DirectionVector, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARLightEstimate_DirectionVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[2]);
}

// ===================================================================

class ARLightEstimate::_Internal {
 public:
  using HasBits = decltype(std::declval<ARLightEstimate>()._has_bits_);
  static void set_has_ambient_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ambient_color_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::ARLightEstimate_DirectionVector& primary_light_direction(const ARLightEstimate* msg);
  static void set_has_primary_light_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primary_light_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mediapipe::ARLightEstimate_DirectionVector&
ARLightEstimate::_Internal::primary_light_direction(const ARLightEstimate* msg) {
  return *msg->primary_light_direction_;
}
ARLightEstimate::ARLightEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spherical_harmonics_coefficients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARLightEstimate)
}
ARLightEstimate::ARLightEstimate(const ARLightEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      spherical_harmonics_coefficients_(from.spherical_harmonics_coefficients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primary_light_direction()) {
    primary_light_direction_ = new ::mediapipe::ARLightEstimate_DirectionVector(*from.primary_light_direction_);
  } else {
    primary_light_direction_ = nullptr;
  }
  ::memcpy(&ambient_intensity_, &from.ambient_intensity_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_light_intensity_) -
    reinterpret_cast<char*>(&ambient_intensity_)) + sizeof(primary_light_intensity_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARLightEstimate)
}

void ARLightEstimate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&primary_light_direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&primary_light_intensity_) -
    reinterpret_cast<char*>(&primary_light_direction_)) + sizeof(primary_light_intensity_));
}

ARLightEstimate::~ARLightEstimate() {
  // @@protoc_insertion_point(destructor:mediapipe.ARLightEstimate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARLightEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete primary_light_direction_;
}

void ARLightEstimate::ArenaDtor(void* object) {
  ARLightEstimate* _this = reinterpret_cast< ARLightEstimate* >(object);
  (void)_this;
}
void ARLightEstimate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARLightEstimate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARLightEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARLightEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spherical_harmonics_coefficients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(primary_light_direction_ != nullptr);
    primary_light_direction_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&ambient_intensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_light_intensity_) -
        reinterpret_cast<char*>(&ambient_intensity_)) + sizeof(primary_light_intensity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARLightEstimate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double ambient_intensity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ambient_intensity(&has_bits);
          ambient_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ambient_color_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ambient_color_temperature(&has_bits);
          ambient_color_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float spherical_harmonics_coefficients = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spherical_harmonics_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_spherical_harmonics_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARLightEstimate.DirectionVector primary_light_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary_light_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float primary_light_intensity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_primary_light_intensity(&has_bits);
          primary_light_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARLightEstimate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARLightEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ambient_intensity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ambient_intensity(), target);
  }

  // optional double ambient_color_temperature = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ambient_color_temperature(), target);
  }

  // repeated float spherical_harmonics_coefficients = 3 [packed = true];
  if (this->_internal_spherical_harmonics_coefficients_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_spherical_harmonics_coefficients(), target);
  }

  // optional .mediapipe.ARLightEstimate.DirectionVector primary_light_direction = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::primary_light_direction(this), target, stream);
  }

  // optional float primary_light_intensity = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_primary_light_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARLightEstimate)
  return target;
}

size_t ARLightEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARLightEstimate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float spherical_harmonics_coefficients = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spherical_harmonics_coefficients_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mediapipe.ARLightEstimate.DirectionVector primary_light_direction = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *primary_light_direction_);
    }

    // optional double ambient_intensity = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ambient_color_temperature = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float primary_light_intensity = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARLightEstimate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARLightEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const ARLightEstimate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARLightEstimate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARLightEstimate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARLightEstimate)
    MergeFrom(*source);
  }
}

void ARLightEstimate::MergeFrom(const ARLightEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARLightEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spherical_harmonics_coefficients_.MergeFrom(from.spherical_harmonics_coefficients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_primary_light_direction()->::mediapipe::ARLightEstimate_DirectionVector::MergeFrom(from._internal_primary_light_direction());
    }
    if (cached_has_bits & 0x00000002u) {
      ambient_intensity_ = from.ambient_intensity_;
    }
    if (cached_has_bits & 0x00000004u) {
      ambient_color_temperature_ = from.ambient_color_temperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      primary_light_intensity_ = from.primary_light_intensity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARLightEstimate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARLightEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARLightEstimate::CopyFrom(const ARLightEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARLightEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARLightEstimate::IsInitialized() const {
  return true;
}

void ARLightEstimate::InternalSwap(ARLightEstimate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  spherical_harmonics_coefficients_.InternalSwap(&other->spherical_harmonics_coefficients_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARLightEstimate, primary_light_intensity_)
      + sizeof(ARLightEstimate::primary_light_intensity_)
      - PROTOBUF_FIELD_OFFSET(ARLightEstimate, primary_light_direction_)>(
          reinterpret_cast<char*>(&primary_light_direction_),
          reinterpret_cast<char*>(&other->primary_light_direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARLightEstimate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[3]);
}

// ===================================================================

class ARCamera_EulerAngles::_Internal {
 public:
  using HasBits = decltype(std::declval<ARCamera_EulerAngles>()._has_bits_);
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ARCamera_EulerAngles::ARCamera_EulerAngles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARCamera.EulerAngles)
}
ARCamera_EulerAngles::ARCamera_EulerAngles(const ARCamera_EulerAngles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARCamera.EulerAngles)
}

void ARCamera_EulerAngles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

ARCamera_EulerAngles::~ARCamera_EulerAngles() {
  // @@protoc_insertion_point(destructor:mediapipe.ARCamera.EulerAngles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARCamera_EulerAngles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARCamera_EulerAngles::ArenaDtor(void* object) {
  ARCamera_EulerAngles* _this = reinterpret_cast< ARCamera_EulerAngles* >(object);
  (void)_this;
}
void ARCamera_EulerAngles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARCamera_EulerAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARCamera_EulerAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARCamera.EulerAngles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&roll_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARCamera_EulerAngles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARCamera_EulerAngles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARCamera.EulerAngles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float roll = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll(), target);
  }

  // optional float pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // optional float yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARCamera.EulerAngles)
  return target;
}

size_t ARCamera_EulerAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARCamera.EulerAngles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float roll = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float pitch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float yaw = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARCamera_EulerAngles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARCamera.EulerAngles)
  GOOGLE_DCHECK_NE(&from, this);
  const ARCamera_EulerAngles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARCamera_EulerAngles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARCamera.EulerAngles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARCamera.EulerAngles)
    MergeFrom(*source);
  }
}

void ARCamera_EulerAngles::MergeFrom(const ARCamera_EulerAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARCamera.EulerAngles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000002u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARCamera_EulerAngles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARCamera.EulerAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARCamera_EulerAngles::CopyFrom(const ARCamera_EulerAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARCamera.EulerAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARCamera_EulerAngles::IsInitialized() const {
  return true;
}

void ARCamera_EulerAngles::InternalSwap(ARCamera_EulerAngles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARCamera_EulerAngles, yaw_)
      + sizeof(ARCamera_EulerAngles::yaw_)
      - PROTOBUF_FIELD_OFFSET(ARCamera_EulerAngles, roll_)>(
          reinterpret_cast<char*>(&roll_),
          reinterpret_cast<char*>(&other->roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARCamera_EulerAngles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[4]);
}

// ===================================================================

class ARCamera::_Internal {
 public:
  using HasBits = decltype(std::declval<ARCamera>()._has_bits_);
  static void set_has_tracking_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tracking_state_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mediapipe::ARCamera_EulerAngles& euler_angles(const ARCamera* msg);
  static void set_has_euler_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_resolution_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_resolution_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::ARCamera_EulerAngles&
ARCamera::_Internal::euler_angles(const ARCamera* msg) {
  return *msg->euler_angles_;
}
ARCamera::ARCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transform_(arena),
  intrinsics_(arena),
  projection_matrix_(arena),
  view_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARCamera)
}
ARCamera::ARCamera(const ARCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      transform_(from.transform_),
      intrinsics_(from.intrinsics_),
      projection_matrix_(from.projection_matrix_),
      view_matrix_(from.view_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_euler_angles()) {
    euler_angles_ = new ::mediapipe::ARCamera_EulerAngles(*from.euler_angles_);
  } else {
    euler_angles_ = nullptr;
  }
  ::memcpy(&image_resolution_width_, &from.image_resolution_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracking_state_reason_) -
    reinterpret_cast<char*>(&image_resolution_width_)) + sizeof(tracking_state_reason_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARCamera)
}

void ARCamera::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&euler_angles_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_resolution_height_) -
    reinterpret_cast<char*>(&euler_angles_)) + sizeof(image_resolution_height_));
tracking_state_ = 1;
tracking_state_reason_ = 1;
}

ARCamera::~ARCamera() {
  // @@protoc_insertion_point(destructor:mediapipe.ARCamera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARCamera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete euler_angles_;
}

void ARCamera::ArenaDtor(void* object) {
  ARCamera* _this = reinterpret_cast< ARCamera* >(object);
  (void)_this;
}
void ARCamera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARCamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_.Clear();
  intrinsics_.Clear();
  projection_matrix_.Clear();
  view_matrix_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(euler_angles_ != nullptr);
    euler_angles_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&image_resolution_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_resolution_height_) -
        reinterpret_cast<char*>(&image_resolution_width_)) + sizeof(image_resolution_height_));
    tracking_state_ = 1;
    tracking_state_reason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARCamera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.ARCamera.TrackingState tracking_state = 1 [default = UNAVAILABLE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ARCamera_TrackingState_IsValid(val))) {
            _internal_set_tracking_state(static_cast<::mediapipe::ARCamera_TrackingState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARCamera.TrackingStateReason tracking_state_reason = 2 [default = NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ARCamera_TrackingStateReason_IsValid(val))) {
            _internal_set_tracking_state_reason(static_cast<::mediapipe::ARCamera_TrackingStateReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated float transform = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_transform(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_transform(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARCamera.EulerAngles euler_angles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 image_resolution_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_image_resolution_width(&has_bits);
          image_resolution_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 image_resolution_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_image_resolution_height(&has_bits);
          image_resolution_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float intrinsics = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intrinsics(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_intrinsics(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float projection_matrix = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_projection_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_projection_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float view_matrix = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_view_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_view_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARCamera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.ARCamera.TrackingState tracking_state = 1 [default = UNAVAILABLE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tracking_state(), target);
  }

  // optional .mediapipe.ARCamera.TrackingStateReason tracking_state_reason = 2 [default = NONE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tracking_state_reason(), target);
  }

  // repeated float transform = 3 [packed = true];
  if (this->_internal_transform_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_transform(), target);
  }

  // optional .mediapipe.ARCamera.EulerAngles euler_angles = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::euler_angles(this), target, stream);
  }

  // optional int32 image_resolution_width = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_image_resolution_width(), target);
  }

  // optional int32 image_resolution_height = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_image_resolution_height(), target);
  }

  // repeated float intrinsics = 7 [packed = true];
  if (this->_internal_intrinsics_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_intrinsics(), target);
  }

  // repeated float projection_matrix = 8 [packed = true];
  if (this->_internal_projection_matrix_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_projection_matrix(), target);
  }

  // repeated float view_matrix = 9 [packed = true];
  if (this->_internal_view_matrix_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_view_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARCamera)
  return target;
}

size_t ARCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARCamera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float transform = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float intrinsics = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intrinsics_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float projection_matrix = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_projection_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float view_matrix = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_view_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .mediapipe.ARCamera.EulerAngles euler_angles = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *euler_angles_);
    }

    // optional int32 image_resolution_width = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_image_resolution_width());
    }

    // optional int32 image_resolution_height = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_image_resolution_height());
    }

    // optional .mediapipe.ARCamera.TrackingState tracking_state = 1 [default = UNAVAILABLE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tracking_state());
    }

    // optional .mediapipe.ARCamera.TrackingStateReason tracking_state_reason = 2 [default = NONE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tracking_state_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARCamera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const ARCamera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARCamera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARCamera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARCamera)
    MergeFrom(*source);
  }
}

void ARCamera::MergeFrom(const ARCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transform_.MergeFrom(from.transform_);
  intrinsics_.MergeFrom(from.intrinsics_);
  projection_matrix_.MergeFrom(from.projection_matrix_);
  view_matrix_.MergeFrom(from.view_matrix_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_euler_angles()->::mediapipe::ARCamera_EulerAngles::MergeFrom(from._internal_euler_angles());
    }
    if (cached_has_bits & 0x00000002u) {
      image_resolution_width_ = from.image_resolution_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      image_resolution_height_ = from.image_resolution_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracking_state_ = from.tracking_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      tracking_state_reason_ = from.tracking_state_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARCamera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARCamera::CopyFrom(const ARCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARCamera::IsInitialized() const {
  return true;
}

void ARCamera::InternalSwap(ARCamera* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transform_.InternalSwap(&other->transform_);
  intrinsics_.InternalSwap(&other->intrinsics_);
  projection_matrix_.InternalSwap(&other->projection_matrix_);
  view_matrix_.InternalSwap(&other->view_matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARCamera, image_resolution_height_)
      + sizeof(ARCamera::image_resolution_height_)
      - PROTOBUF_FIELD_OFFSET(ARCamera, euler_angles_)>(
          reinterpret_cast<char*>(&euler_angles_),
          reinterpret_cast<char*>(&other->euler_angles_));
  swap(tracking_state_, other->tracking_state_);
  swap(tracking_state_reason_, other->tracking_state_reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ARCamera::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[5]);
}

// ===================================================================

class ARFaceGeometry_Vertex::_Internal {
 public:
  using HasBits = decltype(std::declval<ARFaceGeometry_Vertex>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ARFaceGeometry_Vertex::ARFaceGeometry_Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARFaceGeometry.Vertex)
}
ARFaceGeometry_Vertex::ARFaceGeometry_Vertex(const ARFaceGeometry_Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARFaceGeometry.Vertex)
}

void ARFaceGeometry_Vertex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ARFaceGeometry_Vertex::~ARFaceGeometry_Vertex() {
  // @@protoc_insertion_point(destructor:mediapipe.ARFaceGeometry.Vertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARFaceGeometry_Vertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARFaceGeometry_Vertex::ArenaDtor(void* object) {
  ARFaceGeometry_Vertex* _this = reinterpret_cast< ARFaceGeometry_Vertex* >(object);
  (void)_this;
}
void ARFaceGeometry_Vertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARFaceGeometry_Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARFaceGeometry_Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARFaceGeometry.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARFaceGeometry_Vertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARFaceGeometry_Vertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARFaceGeometry.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARFaceGeometry.Vertex)
  return target;
}

size_t ARFaceGeometry_Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARFaceGeometry.Vertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARFaceGeometry_Vertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARFaceGeometry.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const ARFaceGeometry_Vertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARFaceGeometry_Vertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARFaceGeometry.Vertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARFaceGeometry.Vertex)
    MergeFrom(*source);
  }
}

void ARFaceGeometry_Vertex::MergeFrom(const ARFaceGeometry_Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARFaceGeometry.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARFaceGeometry_Vertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARFaceGeometry.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARFaceGeometry_Vertex::CopyFrom(const ARFaceGeometry_Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARFaceGeometry.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARFaceGeometry_Vertex::IsInitialized() const {
  return true;
}

void ARFaceGeometry_Vertex::InternalSwap(ARFaceGeometry_Vertex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARFaceGeometry_Vertex, z_)
      + sizeof(ARFaceGeometry_Vertex::z_)
      - PROTOBUF_FIELD_OFFSET(ARFaceGeometry_Vertex, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARFaceGeometry_Vertex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[6]);
}

// ===================================================================

class ARFaceGeometry_TextureCoordinate::_Internal {
 public:
  using HasBits = decltype(std::declval<ARFaceGeometry_TextureCoordinate>()._has_bits_);
  static void set_has_u(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ARFaceGeometry_TextureCoordinate::ARFaceGeometry_TextureCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARFaceGeometry.TextureCoordinate)
}
ARFaceGeometry_TextureCoordinate::ARFaceGeometry_TextureCoordinate(const ARFaceGeometry_TextureCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&u_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARFaceGeometry.TextureCoordinate)
}

void ARFaceGeometry_TextureCoordinate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&u_)) + sizeof(v_));
}

ARFaceGeometry_TextureCoordinate::~ARFaceGeometry_TextureCoordinate() {
  // @@protoc_insertion_point(destructor:mediapipe.ARFaceGeometry.TextureCoordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARFaceGeometry_TextureCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARFaceGeometry_TextureCoordinate::ArenaDtor(void* object) {
  ARFaceGeometry_TextureCoordinate* _this = reinterpret_cast< ARFaceGeometry_TextureCoordinate* >(object);
  (void)_this;
}
void ARFaceGeometry_TextureCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARFaceGeometry_TextureCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARFaceGeometry_TextureCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARFaceGeometry.TextureCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&u_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_) -
        reinterpret_cast<char*>(&u_)) + sizeof(v_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARFaceGeometry_TextureCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float u = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_u(&has_bits);
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARFaceGeometry_TextureCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARFaceGeometry.TextureCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float u = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_u(), target);
  }

  // optional float v = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARFaceGeometry.TextureCoordinate)
  return target;
}

size_t ARFaceGeometry_TextureCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARFaceGeometry.TextureCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float u = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float v = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARFaceGeometry_TextureCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARFaceGeometry.TextureCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const ARFaceGeometry_TextureCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARFaceGeometry_TextureCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARFaceGeometry.TextureCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARFaceGeometry.TextureCoordinate)
    MergeFrom(*source);
  }
}

void ARFaceGeometry_TextureCoordinate::MergeFrom(const ARFaceGeometry_TextureCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARFaceGeometry.TextureCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      u_ = from.u_;
    }
    if (cached_has_bits & 0x00000002u) {
      v_ = from.v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARFaceGeometry_TextureCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARFaceGeometry.TextureCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARFaceGeometry_TextureCoordinate::CopyFrom(const ARFaceGeometry_TextureCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARFaceGeometry.TextureCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARFaceGeometry_TextureCoordinate::IsInitialized() const {
  return true;
}

void ARFaceGeometry_TextureCoordinate::InternalSwap(ARFaceGeometry_TextureCoordinate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARFaceGeometry_TextureCoordinate, v_)
      + sizeof(ARFaceGeometry_TextureCoordinate::v_)
      - PROTOBUF_FIELD_OFFSET(ARFaceGeometry_TextureCoordinate, u_)>(
          reinterpret_cast<char*>(&u_),
          reinterpret_cast<char*>(&other->u_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARFaceGeometry_TextureCoordinate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[7]);
}

// ===================================================================

class ARFaceGeometry::_Internal {
 public:
  using HasBits = decltype(std::declval<ARFaceGeometry>()._has_bits_);
  static void set_has_vertex_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_texture_coordinate_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_triangle_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ARFaceGeometry::ARFaceGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena),
  texture_coordinates_(arena),
  triangle_indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARFaceGeometry)
}
ARFaceGeometry::ARFaceGeometry(const ARFaceGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vertices_(from.vertices_),
      texture_coordinates_(from.texture_coordinates_),
      triangle_indices_(from.triangle_indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vertex_count_, &from.vertex_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&triangle_count_) -
    reinterpret_cast<char*>(&vertex_count_)) + sizeof(triangle_count_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARFaceGeometry)
}

void ARFaceGeometry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vertex_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&triangle_count_) -
    reinterpret_cast<char*>(&vertex_count_)) + sizeof(triangle_count_));
}

ARFaceGeometry::~ARFaceGeometry() {
  // @@protoc_insertion_point(destructor:mediapipe.ARFaceGeometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARFaceGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARFaceGeometry::ArenaDtor(void* object) {
  ARFaceGeometry* _this = reinterpret_cast< ARFaceGeometry* >(object);
  (void)_this;
}
void ARFaceGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARFaceGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARFaceGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARFaceGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  texture_coordinates_.Clear();
  triangle_indices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&vertex_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&triangle_count_) -
        reinterpret_cast<char*>(&vertex_count_)) + sizeof(triangle_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARFaceGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.ARFaceGeometry.Vertex vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 vertex_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vertex_count(&has_bits);
          vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.ARFaceGeometry.TextureCoordinate texture_coordinates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texture_coordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 texture_coordinate_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_texture_coordinate_count(&has_bits);
          texture_coordinate_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 triangle_indices = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_triangle_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_triangle_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 triangle_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_triangle_count(&has_bits);
          triangle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARFaceGeometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARFaceGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.ARFaceGeometry.Vertex vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 vertex_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vertex_count(), target);
  }

  // repeated .mediapipe.ARFaceGeometry.TextureCoordinate texture_coordinates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_texture_coordinates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_texture_coordinates(i), target, stream);
  }

  // optional int32 texture_coordinate_count = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_texture_coordinate_count(), target);
  }

  // repeated int32 triangle_indices = 5 [packed = true];
  {
    int byte_size = _triangle_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_triangle_indices(), byte_size, target);
    }
  }

  // optional int32 triangle_count = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_triangle_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARFaceGeometry)
  return target;
}

size_t ARFaceGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARFaceGeometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.ARFaceGeometry.Vertex vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mediapipe.ARFaceGeometry.TextureCoordinate texture_coordinates = 3;
  total_size += 1UL * this->_internal_texture_coordinates_size();
  for (const auto& msg : this->texture_coordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 triangle_indices = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->triangle_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _triangle_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 vertex_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vertex_count());
    }

    // optional int32 texture_coordinate_count = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_texture_coordinate_count());
    }

    // optional int32 triangle_count = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_triangle_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARFaceGeometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARFaceGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const ARFaceGeometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARFaceGeometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARFaceGeometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARFaceGeometry)
    MergeFrom(*source);
  }
}

void ARFaceGeometry::MergeFrom(const ARFaceGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARFaceGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  texture_coordinates_.MergeFrom(from.texture_coordinates_);
  triangle_indices_.MergeFrom(from.triangle_indices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      vertex_count_ = from.vertex_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      texture_coordinate_count_ = from.texture_coordinate_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      triangle_count_ = from.triangle_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARFaceGeometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARFaceGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARFaceGeometry::CopyFrom(const ARFaceGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARFaceGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARFaceGeometry::IsInitialized() const {
  return true;
}

void ARFaceGeometry::InternalSwap(ARFaceGeometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vertices_.InternalSwap(&other->vertices_);
  texture_coordinates_.InternalSwap(&other->texture_coordinates_);
  triangle_indices_.InternalSwap(&other->triangle_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARFaceGeometry, triangle_count_)
      + sizeof(ARFaceGeometry::triangle_count_)
      - PROTOBUF_FIELD_OFFSET(ARFaceGeometry, vertex_count_)>(
          reinterpret_cast<char*>(&vertex_count_),
          reinterpret_cast<char*>(&other->vertex_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARFaceGeometry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[8]);
}

// ===================================================================

class ARBlendShapeMap_MapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ARBlendShapeMap_MapEntry>()._has_bits_);
  static void set_has_blend_shape_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blend_shape_coefficient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ARBlendShapeMap_MapEntry::ARBlendShapeMap_MapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARBlendShapeMap.MapEntry)
}
ARBlendShapeMap_MapEntry::ARBlendShapeMap_MapEntry(const ARBlendShapeMap_MapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blend_shape_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_blend_shape_location()) {
    blend_shape_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blend_shape_location(), 
      GetArena());
  }
  blend_shape_coefficient_ = from.blend_shape_coefficient_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARBlendShapeMap.MapEntry)
}

void ARBlendShapeMap_MapEntry::SharedCtor() {
blend_shape_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
blend_shape_coefficient_ = 0;
}

ARBlendShapeMap_MapEntry::~ARBlendShapeMap_MapEntry() {
  // @@protoc_insertion_point(destructor:mediapipe.ARBlendShapeMap.MapEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARBlendShapeMap_MapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blend_shape_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ARBlendShapeMap_MapEntry::ArenaDtor(void* object) {
  ARBlendShapeMap_MapEntry* _this = reinterpret_cast< ARBlendShapeMap_MapEntry* >(object);
  (void)_this;
}
void ARBlendShapeMap_MapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARBlendShapeMap_MapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARBlendShapeMap_MapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARBlendShapeMap.MapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    blend_shape_location_.ClearNonDefaultToEmpty();
  }
  blend_shape_coefficient_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARBlendShapeMap_MapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string blend_shape_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blend_shape_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.ARBlendShapeMap.MapEntry.blend_shape_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float blend_shape_coefficient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_blend_shape_coefficient(&has_bits);
          blend_shape_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARBlendShapeMap_MapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARBlendShapeMap.MapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string blend_shape_location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_blend_shape_location().data(), static_cast<int>(this->_internal_blend_shape_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.ARBlendShapeMap.MapEntry.blend_shape_location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blend_shape_location(), target);
  }

  // optional float blend_shape_coefficient = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_blend_shape_coefficient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARBlendShapeMap.MapEntry)
  return target;
}

size_t ARBlendShapeMap_MapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARBlendShapeMap.MapEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string blend_shape_location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_blend_shape_location());
    }

    // optional float blend_shape_coefficient = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARBlendShapeMap_MapEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARBlendShapeMap.MapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ARBlendShapeMap_MapEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARBlendShapeMap_MapEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARBlendShapeMap.MapEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARBlendShapeMap.MapEntry)
    MergeFrom(*source);
  }
}

void ARBlendShapeMap_MapEntry::MergeFrom(const ARBlendShapeMap_MapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARBlendShapeMap.MapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_blend_shape_location(from._internal_blend_shape_location());
    }
    if (cached_has_bits & 0x00000002u) {
      blend_shape_coefficient_ = from.blend_shape_coefficient_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARBlendShapeMap_MapEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARBlendShapeMap.MapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARBlendShapeMap_MapEntry::CopyFrom(const ARBlendShapeMap_MapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARBlendShapeMap.MapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARBlendShapeMap_MapEntry::IsInitialized() const {
  return true;
}

void ARBlendShapeMap_MapEntry::InternalSwap(ARBlendShapeMap_MapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blend_shape_location_.Swap(&other->blend_shape_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(blend_shape_coefficient_, other->blend_shape_coefficient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ARBlendShapeMap_MapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[9]);
}

// ===================================================================

class ARBlendShapeMap::_Internal {
 public:
};

ARBlendShapeMap::ARBlendShapeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARBlendShapeMap)
}
ARBlendShapeMap::ARBlendShapeMap(const ARBlendShapeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARBlendShapeMap)
}

void ARBlendShapeMap::SharedCtor() {
}

ARBlendShapeMap::~ARBlendShapeMap() {
  // @@protoc_insertion_point(destructor:mediapipe.ARBlendShapeMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARBlendShapeMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARBlendShapeMap::ArenaDtor(void* object) {
  ARBlendShapeMap* _this = reinterpret_cast< ARBlendShapeMap* >(object);
  (void)_this;
}
void ARBlendShapeMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARBlendShapeMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARBlendShapeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARBlendShapeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARBlendShapeMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.ARBlendShapeMap.MapEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARBlendShapeMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARBlendShapeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.ARBlendShapeMap.MapEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARBlendShapeMap)
  return target;
}

size_t ARBlendShapeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARBlendShapeMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.ARBlendShapeMap.MapEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARBlendShapeMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARBlendShapeMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ARBlendShapeMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARBlendShapeMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARBlendShapeMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARBlendShapeMap)
    MergeFrom(*source);
  }
}

void ARBlendShapeMap::MergeFrom(const ARBlendShapeMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARBlendShapeMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void ARBlendShapeMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARBlendShapeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARBlendShapeMap::CopyFrom(const ARBlendShapeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARBlendShapeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARBlendShapeMap::IsInitialized() const {
  return true;
}

void ARBlendShapeMap::InternalSwap(ARBlendShapeMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ARBlendShapeMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[10]);
}

// ===================================================================

class ARFaceAnchor::_Internal {
 public:
  using HasBits = decltype(std::declval<ARFaceAnchor>()._has_bits_);
  static const ::mediapipe::ARFaceGeometry& geometry(const ARFaceAnchor* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::ARBlendShapeMap& blend_shapes(const ARFaceAnchor* msg);
  static void set_has_blend_shapes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_tracked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::ARFaceGeometry&
ARFaceAnchor::_Internal::geometry(const ARFaceAnchor* msg) {
  return *msg->geometry_;
}
const ::mediapipe::ARBlendShapeMap&
ARFaceAnchor::_Internal::blend_shapes(const ARFaceAnchor* msg) {
  return *msg->blend_shapes_;
}
ARFaceAnchor::ARFaceAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transform_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARFaceAnchor)
}
ARFaceAnchor::ARFaceAnchor(const ARFaceAnchor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      transform_(from.transform_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geometry()) {
    geometry_ = new ::mediapipe::ARFaceGeometry(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from._internal_has_blend_shapes()) {
    blend_shapes_ = new ::mediapipe::ARBlendShapeMap(*from.blend_shapes_);
  } else {
    blend_shapes_ = nullptr;
  }
  is_tracked_ = from.is_tracked_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARFaceAnchor)
}

void ARFaceAnchor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geometry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_tracked_) -
    reinterpret_cast<char*>(&geometry_)) + sizeof(is_tracked_));
}

ARFaceAnchor::~ARFaceAnchor() {
  // @@protoc_insertion_point(destructor:mediapipe.ARFaceAnchor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARFaceAnchor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete blend_shapes_;
}

void ARFaceAnchor::ArenaDtor(void* object) {
  ARFaceAnchor* _this = reinterpret_cast< ARFaceAnchor* >(object);
  (void)_this;
}
void ARFaceAnchor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARFaceAnchor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARFaceAnchor::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARFaceAnchor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(geometry_ != nullptr);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(blend_shapes_ != nullptr);
      blend_shapes_->Clear();
    }
  }
  is_tracked_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARFaceAnchor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.ARFaceGeometry geometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARBlendShapeMap blend_shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blend_shapes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_transform(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_transform(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_tracked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_tracked(&has_bits);
          is_tracked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARFaceAnchor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARFaceAnchor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.ARFaceGeometry geometry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geometry(this), target, stream);
  }

  // optional .mediapipe.ARBlendShapeMap blend_shapes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blend_shapes(this), target, stream);
  }

  // repeated float transform = 3;
  for (int i = 0, n = this->_internal_transform_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_transform(i), target);
  }

  // optional bool is_tracked = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_tracked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARFaceAnchor)
  return target;
}

size_t ARFaceAnchor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARFaceAnchor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float transform = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_transform_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mediapipe.ARFaceGeometry geometry = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .mediapipe.ARBlendShapeMap blend_shapes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blend_shapes_);
    }

    // optional bool is_tracked = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARFaceAnchor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARFaceAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  const ARFaceAnchor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARFaceAnchor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARFaceAnchor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARFaceAnchor)
    MergeFrom(*source);
  }
}

void ARFaceAnchor::MergeFrom(const ARFaceAnchor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARFaceAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transform_.MergeFrom(from.transform_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_geometry()->::mediapipe::ARFaceGeometry::MergeFrom(from._internal_geometry());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_blend_shapes()->::mediapipe::ARBlendShapeMap::MergeFrom(from._internal_blend_shapes());
    }
    if (cached_has_bits & 0x00000004u) {
      is_tracked_ = from.is_tracked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARFaceAnchor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARFaceAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARFaceAnchor::CopyFrom(const ARFaceAnchor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARFaceAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARFaceAnchor::IsInitialized() const {
  return true;
}

void ARFaceAnchor::InternalSwap(ARFaceAnchor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transform_.InternalSwap(&other->transform_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARFaceAnchor, is_tracked_)
      + sizeof(ARFaceAnchor::is_tracked_)
      - PROTOBUF_FIELD_OFFSET(ARFaceAnchor, geometry_)>(
          reinterpret_cast<char*>(&geometry_),
          reinterpret_cast<char*>(&other->geometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARFaceAnchor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[11]);
}

// ===================================================================

class ARPlaneGeometry_Vertex::_Internal {
 public:
  using HasBits = decltype(std::declval<ARPlaneGeometry_Vertex>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ARPlaneGeometry_Vertex::ARPlaneGeometry_Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARPlaneGeometry.Vertex)
}
ARPlaneGeometry_Vertex::ARPlaneGeometry_Vertex(const ARPlaneGeometry_Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARPlaneGeometry.Vertex)
}

void ARPlaneGeometry_Vertex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ARPlaneGeometry_Vertex::~ARPlaneGeometry_Vertex() {
  // @@protoc_insertion_point(destructor:mediapipe.ARPlaneGeometry.Vertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARPlaneGeometry_Vertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARPlaneGeometry_Vertex::ArenaDtor(void* object) {
  ARPlaneGeometry_Vertex* _this = reinterpret_cast< ARPlaneGeometry_Vertex* >(object);
  (void)_this;
}
void ARPlaneGeometry_Vertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPlaneGeometry_Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPlaneGeometry_Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARPlaneGeometry.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPlaneGeometry_Vertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARPlaneGeometry_Vertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARPlaneGeometry.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARPlaneGeometry.Vertex)
  return target;
}

size_t ARPlaneGeometry_Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARPlaneGeometry.Vertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARPlaneGeometry_Vertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARPlaneGeometry.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const ARPlaneGeometry_Vertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARPlaneGeometry_Vertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARPlaneGeometry.Vertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARPlaneGeometry.Vertex)
    MergeFrom(*source);
  }
}

void ARPlaneGeometry_Vertex::MergeFrom(const ARPlaneGeometry_Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARPlaneGeometry.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARPlaneGeometry_Vertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARPlaneGeometry.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARPlaneGeometry_Vertex::CopyFrom(const ARPlaneGeometry_Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARPlaneGeometry.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPlaneGeometry_Vertex::IsInitialized() const {
  return true;
}

void ARPlaneGeometry_Vertex::InternalSwap(ARPlaneGeometry_Vertex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARPlaneGeometry_Vertex, z_)
      + sizeof(ARPlaneGeometry_Vertex::z_)
      - PROTOBUF_FIELD_OFFSET(ARPlaneGeometry_Vertex, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPlaneGeometry_Vertex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[12]);
}

// ===================================================================

class ARPlaneGeometry_TextureCoordinate::_Internal {
 public:
  using HasBits = decltype(std::declval<ARPlaneGeometry_TextureCoordinate>()._has_bits_);
  static void set_has_u(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ARPlaneGeometry_TextureCoordinate::ARPlaneGeometry_TextureCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARPlaneGeometry.TextureCoordinate)
}
ARPlaneGeometry_TextureCoordinate::ARPlaneGeometry_TextureCoordinate(const ARPlaneGeometry_TextureCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&u_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARPlaneGeometry.TextureCoordinate)
}

void ARPlaneGeometry_TextureCoordinate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&u_)) + sizeof(v_));
}

ARPlaneGeometry_TextureCoordinate::~ARPlaneGeometry_TextureCoordinate() {
  // @@protoc_insertion_point(destructor:mediapipe.ARPlaneGeometry.TextureCoordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARPlaneGeometry_TextureCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARPlaneGeometry_TextureCoordinate::ArenaDtor(void* object) {
  ARPlaneGeometry_TextureCoordinate* _this = reinterpret_cast< ARPlaneGeometry_TextureCoordinate* >(object);
  (void)_this;
}
void ARPlaneGeometry_TextureCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPlaneGeometry_TextureCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPlaneGeometry_TextureCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARPlaneGeometry.TextureCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&u_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_) -
        reinterpret_cast<char*>(&u_)) + sizeof(v_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPlaneGeometry_TextureCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float u = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_u(&has_bits);
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARPlaneGeometry_TextureCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARPlaneGeometry.TextureCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float u = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_u(), target);
  }

  // optional float v = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARPlaneGeometry.TextureCoordinate)
  return target;
}

size_t ARPlaneGeometry_TextureCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARPlaneGeometry.TextureCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float u = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float v = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARPlaneGeometry_TextureCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARPlaneGeometry.TextureCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const ARPlaneGeometry_TextureCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARPlaneGeometry_TextureCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARPlaneGeometry.TextureCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARPlaneGeometry.TextureCoordinate)
    MergeFrom(*source);
  }
}

void ARPlaneGeometry_TextureCoordinate::MergeFrom(const ARPlaneGeometry_TextureCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARPlaneGeometry.TextureCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      u_ = from.u_;
    }
    if (cached_has_bits & 0x00000002u) {
      v_ = from.v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARPlaneGeometry_TextureCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARPlaneGeometry.TextureCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARPlaneGeometry_TextureCoordinate::CopyFrom(const ARPlaneGeometry_TextureCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARPlaneGeometry.TextureCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPlaneGeometry_TextureCoordinate::IsInitialized() const {
  return true;
}

void ARPlaneGeometry_TextureCoordinate::InternalSwap(ARPlaneGeometry_TextureCoordinate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARPlaneGeometry_TextureCoordinate, v_)
      + sizeof(ARPlaneGeometry_TextureCoordinate::v_)
      - PROTOBUF_FIELD_OFFSET(ARPlaneGeometry_TextureCoordinate, u_)>(
          reinterpret_cast<char*>(&u_),
          reinterpret_cast<char*>(&other->u_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPlaneGeometry_TextureCoordinate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[13]);
}

// ===================================================================

class ARPlaneGeometry::_Internal {
 public:
  using HasBits = decltype(std::declval<ARPlaneGeometry>()._has_bits_);
  static void set_has_vertex_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_texture_coordinate_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_triangle_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boundary_vertex_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ARPlaneGeometry::ARPlaneGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena),
  texture_coordinates_(arena),
  triangle_indices_(arena),
  boundary_vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARPlaneGeometry)
}
ARPlaneGeometry::ARPlaneGeometry(const ARPlaneGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vertices_(from.vertices_),
      texture_coordinates_(from.texture_coordinates_),
      triangle_indices_(from.triangle_indices_),
      boundary_vertices_(from.boundary_vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vertex_count_, &from.vertex_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&boundary_vertex_count_) -
    reinterpret_cast<char*>(&vertex_count_)) + sizeof(boundary_vertex_count_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARPlaneGeometry)
}

void ARPlaneGeometry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vertex_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&boundary_vertex_count_) -
    reinterpret_cast<char*>(&vertex_count_)) + sizeof(boundary_vertex_count_));
}

ARPlaneGeometry::~ARPlaneGeometry() {
  // @@protoc_insertion_point(destructor:mediapipe.ARPlaneGeometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARPlaneGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARPlaneGeometry::ArenaDtor(void* object) {
  ARPlaneGeometry* _this = reinterpret_cast< ARPlaneGeometry* >(object);
  (void)_this;
}
void ARPlaneGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPlaneGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPlaneGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARPlaneGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  texture_coordinates_.Clear();
  triangle_indices_.Clear();
  boundary_vertices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&vertex_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boundary_vertex_count_) -
        reinterpret_cast<char*>(&vertex_count_)) + sizeof(boundary_vertex_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPlaneGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.ARPlaneGeometry.Vertex vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 vertex_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vertex_count(&has_bits);
          vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.ARPlaneGeometry.TextureCoordinate texture_coordinates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texture_coordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 texture_coordinate_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_texture_coordinate_count(&has_bits);
          texture_coordinate_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 triangle_indices = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_triangle_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_triangle_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 triangle_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_triangle_count(&has_bits);
          triangle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.ARPlaneGeometry.Vertex boundary_vertices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 boundary_vertex_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_boundary_vertex_count(&has_bits);
          boundary_vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARPlaneGeometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARPlaneGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.ARPlaneGeometry.Vertex vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 vertex_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vertex_count(), target);
  }

  // repeated .mediapipe.ARPlaneGeometry.TextureCoordinate texture_coordinates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_texture_coordinates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_texture_coordinates(i), target, stream);
  }

  // optional int32 texture_coordinate_count = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_texture_coordinate_count(), target);
  }

  // repeated int32 triangle_indices = 5 [packed = true];
  {
    int byte_size = _triangle_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_triangle_indices(), byte_size, target);
    }
  }

  // optional int32 triangle_count = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_triangle_count(), target);
  }

  // repeated .mediapipe.ARPlaneGeometry.Vertex boundary_vertices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boundary_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_boundary_vertices(i), target, stream);
  }

  // optional int32 boundary_vertex_count = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_boundary_vertex_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARPlaneGeometry)
  return target;
}

size_t ARPlaneGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARPlaneGeometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.ARPlaneGeometry.Vertex vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mediapipe.ARPlaneGeometry.TextureCoordinate texture_coordinates = 3;
  total_size += 1UL * this->_internal_texture_coordinates_size();
  for (const auto& msg : this->texture_coordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 triangle_indices = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->triangle_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _triangle_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .mediapipe.ARPlaneGeometry.Vertex boundary_vertices = 7;
  total_size += 1UL * this->_internal_boundary_vertices_size();
  for (const auto& msg : this->boundary_vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 vertex_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vertex_count());
    }

    // optional int32 texture_coordinate_count = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_texture_coordinate_count());
    }

    // optional int32 triangle_count = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_triangle_count());
    }

    // optional int32 boundary_vertex_count = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_boundary_vertex_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARPlaneGeometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARPlaneGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  const ARPlaneGeometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARPlaneGeometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARPlaneGeometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARPlaneGeometry)
    MergeFrom(*source);
  }
}

void ARPlaneGeometry::MergeFrom(const ARPlaneGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARPlaneGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  texture_coordinates_.MergeFrom(from.texture_coordinates_);
  triangle_indices_.MergeFrom(from.triangle_indices_);
  boundary_vertices_.MergeFrom(from.boundary_vertices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      vertex_count_ = from.vertex_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      texture_coordinate_count_ = from.texture_coordinate_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      triangle_count_ = from.triangle_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_vertex_count_ = from.boundary_vertex_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARPlaneGeometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARPlaneGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARPlaneGeometry::CopyFrom(const ARPlaneGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARPlaneGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPlaneGeometry::IsInitialized() const {
  return true;
}

void ARPlaneGeometry::InternalSwap(ARPlaneGeometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vertices_.InternalSwap(&other->vertices_);
  texture_coordinates_.InternalSwap(&other->texture_coordinates_);
  triangle_indices_.InternalSwap(&other->triangle_indices_);
  boundary_vertices_.InternalSwap(&other->boundary_vertices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARPlaneGeometry, boundary_vertex_count_)
      + sizeof(ARPlaneGeometry::boundary_vertex_count_)
      - PROTOBUF_FIELD_OFFSET(ARPlaneGeometry, vertex_count_)>(
          reinterpret_cast<char*>(&vertex_count_),
          reinterpret_cast<char*>(&other->vertex_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPlaneGeometry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[14]);
}

// ===================================================================

class ARPlaneAnchor_PlaneVector::_Internal {
 public:
  using HasBits = decltype(std::declval<ARPlaneAnchor_PlaneVector>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ARPlaneAnchor_PlaneVector::ARPlaneAnchor_PlaneVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARPlaneAnchor.PlaneVector)
}
ARPlaneAnchor_PlaneVector::ARPlaneAnchor_PlaneVector(const ARPlaneAnchor_PlaneVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARPlaneAnchor.PlaneVector)
}

void ARPlaneAnchor_PlaneVector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ARPlaneAnchor_PlaneVector::~ARPlaneAnchor_PlaneVector() {
  // @@protoc_insertion_point(destructor:mediapipe.ARPlaneAnchor.PlaneVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARPlaneAnchor_PlaneVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARPlaneAnchor_PlaneVector::ArenaDtor(void* object) {
  ARPlaneAnchor_PlaneVector* _this = reinterpret_cast< ARPlaneAnchor_PlaneVector* >(object);
  (void)_this;
}
void ARPlaneAnchor_PlaneVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPlaneAnchor_PlaneVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPlaneAnchor_PlaneVector::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARPlaneAnchor.PlaneVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPlaneAnchor_PlaneVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARPlaneAnchor_PlaneVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARPlaneAnchor.PlaneVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARPlaneAnchor.PlaneVector)
  return target;
}

size_t ARPlaneAnchor_PlaneVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARPlaneAnchor.PlaneVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARPlaneAnchor_PlaneVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARPlaneAnchor.PlaneVector)
  GOOGLE_DCHECK_NE(&from, this);
  const ARPlaneAnchor_PlaneVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARPlaneAnchor_PlaneVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARPlaneAnchor.PlaneVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARPlaneAnchor.PlaneVector)
    MergeFrom(*source);
  }
}

void ARPlaneAnchor_PlaneVector::MergeFrom(const ARPlaneAnchor_PlaneVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARPlaneAnchor.PlaneVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARPlaneAnchor_PlaneVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARPlaneAnchor.PlaneVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARPlaneAnchor_PlaneVector::CopyFrom(const ARPlaneAnchor_PlaneVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARPlaneAnchor.PlaneVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPlaneAnchor_PlaneVector::IsInitialized() const {
  return true;
}

void ARPlaneAnchor_PlaneVector::InternalSwap(ARPlaneAnchor_PlaneVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARPlaneAnchor_PlaneVector, z_)
      + sizeof(ARPlaneAnchor_PlaneVector::z_)
      - PROTOBUF_FIELD_OFFSET(ARPlaneAnchor_PlaneVector, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPlaneAnchor_PlaneVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[15]);
}

// ===================================================================

class ARPlaneAnchor::_Internal {
 public:
  using HasBits = decltype(std::declval<ARPlaneAnchor>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mediapipe::ARPlaneGeometry& geometry(const ARPlaneAnchor* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::ARPlaneAnchor_PlaneVector& center(const ARPlaneAnchor* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::ARPlaneAnchor_PlaneVector& extent(const ARPlaneAnchor* msg);
  static void set_has_extent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_classification_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_classification_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mediapipe::ARPlaneGeometry&
ARPlaneAnchor::_Internal::geometry(const ARPlaneAnchor* msg) {
  return *msg->geometry_;
}
const ::mediapipe::ARPlaneAnchor_PlaneVector&
ARPlaneAnchor::_Internal::center(const ARPlaneAnchor* msg) {
  return *msg->center_;
}
const ::mediapipe::ARPlaneAnchor_PlaneVector&
ARPlaneAnchor::_Internal::extent(const ARPlaneAnchor* msg) {
  return *msg->extent_;
}
ARPlaneAnchor::ARPlaneAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transform_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARPlaneAnchor)
}
ARPlaneAnchor::ARPlaneAnchor(const ARPlaneAnchor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      transform_(from.transform_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  if (from._internal_has_geometry()) {
    geometry_ = new ::mediapipe::ARPlaneGeometry(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  if (from._internal_has_center()) {
    center_ = new ::mediapipe::ARPlaneAnchor_PlaneVector(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_extent()) {
    extent_ = new ::mediapipe::ARPlaneAnchor_PlaneVector(*from.extent_);
  } else {
    extent_ = nullptr;
  }
  ::memcpy(&alignment_, &from.alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_status_) -
    reinterpret_cast<char*>(&alignment_)) + sizeof(classification_status_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARPlaneAnchor)
}

void ARPlaneAnchor::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geometry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&classification_status_) -
    reinterpret_cast<char*>(&geometry_)) + sizeof(classification_status_));
}

ARPlaneAnchor::~ARPlaneAnchor() {
  // @@protoc_insertion_point(destructor:mediapipe.ARPlaneAnchor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARPlaneAnchor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete extent_;
}

void ARPlaneAnchor::ArenaDtor(void* object) {
  ARPlaneAnchor* _this = reinterpret_cast< ARPlaneAnchor* >(object);
  (void)_this;
}
void ARPlaneAnchor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPlaneAnchor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPlaneAnchor::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARPlaneAnchor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(geometry_ != nullptr);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(extent_ != nullptr);
      extent_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classification_status_) -
        reinterpret_cast<char*>(&alignment_)) + sizeof(classification_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPlaneAnchor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.ARPlaneAnchor.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_transform(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_transform(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARPlaneAnchor.Alignment alignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ARPlaneAnchor_Alignment_IsValid(val))) {
            _internal_set_alignment(static_cast<::mediapipe::ARPlaneAnchor_Alignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARPlaneGeometry geometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARPlaneAnchor.PlaneVector center = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARPlaneAnchor.PlaneVector extent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool classification_supported = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_classification_supported(&has_bits);
          classification_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARPlaneAnchor.PlaneClassification classification = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ARPlaneAnchor_PlaneClassification_IsValid(val))) {
            _internal_set_classification(static_cast<::mediapipe::ARPlaneAnchor_PlaneClassification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARPlaneAnchor.PlaneClassificationStatus classification_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ARPlaneAnchor_PlaneClassificationStatus_IsValid(val))) {
            _internal_set_classification_status(static_cast<::mediapipe::ARPlaneAnchor_PlaneClassificationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARPlaneAnchor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARPlaneAnchor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.ARPlaneAnchor.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // repeated float transform = 2;
  for (int i = 0, n = this->_internal_transform_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_transform(i), target);
  }

  // optional .mediapipe.ARPlaneAnchor.Alignment alignment = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_alignment(), target);
  }

  // optional .mediapipe.ARPlaneGeometry geometry = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::geometry(this), target, stream);
  }

  // optional .mediapipe.ARPlaneAnchor.PlaneVector center = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::center(this), target, stream);
  }

  // optional .mediapipe.ARPlaneAnchor.PlaneVector extent = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::extent(this), target, stream);
  }

  // optional bool classification_supported = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_classification_supported(), target);
  }

  // optional .mediapipe.ARPlaneAnchor.PlaneClassification classification = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_classification(), target);
  }

  // optional .mediapipe.ARPlaneAnchor.PlaneClassificationStatus classification_status = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_classification_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARPlaneAnchor)
  return target;
}

size_t ARPlaneAnchor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARPlaneAnchor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float transform = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_transform_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_transform_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional .mediapipe.ARPlaneGeometry geometry = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .mediapipe.ARPlaneAnchor.PlaneVector center = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_);
    }

    // optional .mediapipe.ARPlaneAnchor.PlaneVector extent = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extent_);
    }

    // optional .mediapipe.ARPlaneAnchor.Alignment alignment = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alignment());
    }

    // optional bool classification_supported = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.ARPlaneAnchor.PlaneClassification classification = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_classification());
    }

    // optional .mediapipe.ARPlaneAnchor.PlaneClassificationStatus classification_status = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_classification_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARPlaneAnchor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARPlaneAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  const ARPlaneAnchor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARPlaneAnchor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARPlaneAnchor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARPlaneAnchor)
    MergeFrom(*source);
  }
}

void ARPlaneAnchor::MergeFrom(const ARPlaneAnchor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARPlaneAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transform_.MergeFrom(from.transform_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_geometry()->::mediapipe::ARPlaneGeometry::MergeFrom(from._internal_geometry());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_center()->::mediapipe::ARPlaneAnchor_PlaneVector::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_extent()->::mediapipe::ARPlaneAnchor_PlaneVector::MergeFrom(from._internal_extent());
    }
    if (cached_has_bits & 0x00000010u) {
      alignment_ = from.alignment_;
    }
    if (cached_has_bits & 0x00000020u) {
      classification_supported_ = from.classification_supported_;
    }
    if (cached_has_bits & 0x00000040u) {
      classification_ = from.classification_;
    }
    if (cached_has_bits & 0x00000080u) {
      classification_status_ = from.classification_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARPlaneAnchor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARPlaneAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARPlaneAnchor::CopyFrom(const ARPlaneAnchor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARPlaneAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPlaneAnchor::IsInitialized() const {
  return true;
}

void ARPlaneAnchor::InternalSwap(ARPlaneAnchor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transform_.InternalSwap(&other->transform_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARPlaneAnchor, classification_status_)
      + sizeof(ARPlaneAnchor::classification_status_)
      - PROTOBUF_FIELD_OFFSET(ARPlaneAnchor, geometry_)>(
          reinterpret_cast<char*>(&geometry_),
          reinterpret_cast<char*>(&other->geometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPlaneAnchor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[16]);
}

// ===================================================================

class ARPointCloud_Point::_Internal {
 public:
  using HasBits = decltype(std::declval<ARPointCloud_Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ARPointCloud_Point::ARPointCloud_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARPointCloud.Point)
}
ARPointCloud_Point::ARPointCloud_Point(const ARPointCloud_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARPointCloud.Point)
}

void ARPointCloud_Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ARPointCloud_Point::~ARPointCloud_Point() {
  // @@protoc_insertion_point(destructor:mediapipe.ARPointCloud.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARPointCloud_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARPointCloud_Point::ArenaDtor(void* object) {
  ARPointCloud_Point* _this = reinterpret_cast< ARPointCloud_Point* >(object);
  (void)_this;
}
void ARPointCloud_Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPointCloud_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPointCloud_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARPointCloud.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPointCloud_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARPointCloud_Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARPointCloud.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARPointCloud.Point)
  return target;
}

size_t ARPointCloud_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARPointCloud.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARPointCloud_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARPointCloud.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const ARPointCloud_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARPointCloud_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARPointCloud.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARPointCloud.Point)
    MergeFrom(*source);
  }
}

void ARPointCloud_Point::MergeFrom(const ARPointCloud_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARPointCloud.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARPointCloud_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARPointCloud.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARPointCloud_Point::CopyFrom(const ARPointCloud_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARPointCloud.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPointCloud_Point::IsInitialized() const {
  return true;
}

void ARPointCloud_Point::InternalSwap(ARPointCloud_Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARPointCloud_Point, z_)
      + sizeof(ARPointCloud_Point::z_)
      - PROTOBUF_FIELD_OFFSET(ARPointCloud_Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPointCloud_Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[17]);
}

// ===================================================================

class ARPointCloud::_Internal {
 public:
  using HasBits = decltype(std::declval<ARPointCloud>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ARPointCloud::ARPointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_(arena),
  identifier_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARPointCloud)
}
ARPointCloud::ARPointCloud(const ARPointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      point_(from.point_),
      identifier_(from.identifier_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARPointCloud)
}

void ARPointCloud::SharedCtor() {
count_ = 0;
}

ARPointCloud::~ARPointCloud() {
  // @@protoc_insertion_point(destructor:mediapipe.ARPointCloud)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARPointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ARPointCloud::ArenaDtor(void* object) {
  ARPointCloud* _this = reinterpret_cast< ARPointCloud* >(object);
  (void)_this;
}
void ARPointCloud::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARPointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARPointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  identifier_.Clear();
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARPointCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.ARPointCloud.Point point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int64 identifier = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_identifier(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARPointCloud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARPointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .mediapipe.ARPointCloud.Point point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_point(i), target, stream);
  }

  // repeated int64 identifier = 3 [packed = true];
  {
    int byte_size = _identifier_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_identifier(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARPointCloud)
  return target;
}

size_t ARPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARPointCloud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.ARPointCloud.Point point = 2;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 identifier = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->identifier_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _identifier_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional int32 count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARPointCloud::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const ARPointCloud* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARPointCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARPointCloud)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARPointCloud)
    MergeFrom(*source);
  }
}

void ARPointCloud::MergeFrom(const ARPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  identifier_.MergeFrom(from.identifier_);
  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void ARPointCloud::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARPointCloud::CopyFrom(const ARPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARPointCloud::IsInitialized() const {
  return true;
}

void ARPointCloud::InternalSwap(ARPointCloud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_.InternalSwap(&other->point_);
  identifier_.InternalSwap(&other->identifier_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ARPointCloud::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[18]);
}

// ===================================================================

class ARFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<ARFrame>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mediapipe::AVDepthData& depth_data(const ARFrame* msg);
  static void set_has_depth_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_depth_data_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mediapipe::ARCamera& camera(const ARFrame* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::ARLightEstimate& light_estimate(const ARFrame* msg);
  static void set_has_light_estimate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::ARFaceAnchor& face_anchor(const ARFrame* msg);
  static void set_has_face_anchor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mediapipe::ARPointCloud& raw_feature_points(const ARFrame* msg);
  static void set_has_raw_feature_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mediapipe::AVDepthData&
ARFrame::_Internal::depth_data(const ARFrame* msg) {
  return *msg->depth_data_;
}
const ::mediapipe::ARCamera&
ARFrame::_Internal::camera(const ARFrame* msg) {
  return *msg->camera_;
}
const ::mediapipe::ARLightEstimate&
ARFrame::_Internal::light_estimate(const ARFrame* msg) {
  return *msg->light_estimate_;
}
const ::mediapipe::ARFaceAnchor&
ARFrame::_Internal::face_anchor(const ARFrame* msg) {
  return *msg->face_anchor_;
}
const ::mediapipe::ARPointCloud&
ARFrame::_Internal::raw_feature_points(const ARFrame* msg) {
  return *msg->raw_feature_points_;
}
ARFrame::ARFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  plane_anchor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ARFrame)
}
ARFrame::ARFrame(const ARFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      plane_anchor_(from.plane_anchor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_depth_data()) {
    depth_data_ = new ::mediapipe::AVDepthData(*from.depth_data_);
  } else {
    depth_data_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::mediapipe::ARCamera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  if (from._internal_has_light_estimate()) {
    light_estimate_ = new ::mediapipe::ARLightEstimate(*from.light_estimate_);
  } else {
    light_estimate_ = nullptr;
  }
  if (from._internal_has_face_anchor()) {
    face_anchor_ = new ::mediapipe::ARFaceAnchor(*from.face_anchor_);
  } else {
    face_anchor_ = nullptr;
  }
  if (from._internal_has_raw_feature_points()) {
    raw_feature_points_ = new ::mediapipe::ARPointCloud(*from.raw_feature_points_);
  } else {
    raw_feature_points_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_data_timestamp_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(depth_data_timestamp_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ARFrame)
}

void ARFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&depth_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&depth_data_timestamp_) -
    reinterpret_cast<char*>(&depth_data_)) + sizeof(depth_data_timestamp_));
}

ARFrame::~ARFrame() {
  // @@protoc_insertion_point(destructor:mediapipe.ARFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ARFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete depth_data_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete light_estimate_;
  if (this != internal_default_instance()) delete face_anchor_;
  if (this != internal_default_instance()) delete raw_feature_points_;
}

void ARFrame::ArenaDtor(void* object) {
  ARFrame* _this = reinterpret_cast< ARFrame* >(object);
  (void)_this;
}
void ARFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ARFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ARFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ARFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plane_anchor_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(depth_data_ != nullptr);
      depth_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(camera_ != nullptr);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(light_estimate_ != nullptr);
      light_estimate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(face_anchor_ != nullptr);
      face_anchor_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(raw_feature_points_ != nullptr);
      raw_feature_points_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depth_data_timestamp_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(depth_data_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.AVDepthData depth_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double depth_data_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_depth_data_timestamp(&has_bits);
          depth_data_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARCamera camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARLightEstimate light_estimate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_estimate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARFaceAnchor face_anchor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_face_anchor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.ARPlaneAnchor plane_anchor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plane_anchor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ARPointCloud raw_feature_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_feature_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ARFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ARFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional .mediapipe.AVDepthData depth_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::depth_data(this), target, stream);
  }

  // optional double depth_data_timestamp = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_depth_data_timestamp(), target);
  }

  // optional .mediapipe.ARCamera camera = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::camera(this), target, stream);
  }

  // optional .mediapipe.ARLightEstimate light_estimate = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::light_estimate(this), target, stream);
  }

  // optional .mediapipe.ARFaceAnchor face_anchor = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::face_anchor(this), target, stream);
  }

  // repeated .mediapipe.ARPlaneAnchor plane_anchor = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plane_anchor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_plane_anchor(i), target, stream);
  }

  // optional .mediapipe.ARPointCloud raw_feature_points = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::raw_feature_points(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ARFrame)
  return target;
}

size_t ARFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ARFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.ARPlaneAnchor plane_anchor = 7;
  total_size += 1UL * this->_internal_plane_anchor_size();
  for (const auto& msg : this->plane_anchor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .mediapipe.AVDepthData depth_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *depth_data_);
    }

    // optional .mediapipe.ARCamera camera = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_);
    }

    // optional .mediapipe.ARLightEstimate light_estimate = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_estimate_);
    }

    // optional .mediapipe.ARFaceAnchor face_anchor = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *face_anchor_);
    }

    // optional .mediapipe.ARPointCloud raw_feature_points = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *raw_feature_points_);
    }

    // optional double timestamp = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double depth_data_timestamp = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ARFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ARFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ARFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ARFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ARFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ARFrame)
    MergeFrom(*source);
  }
}

void ARFrame::MergeFrom(const ARFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ARFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plane_anchor_.MergeFrom(from.plane_anchor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_depth_data()->::mediapipe::AVDepthData::MergeFrom(from._internal_depth_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_camera()->::mediapipe::ARCamera::MergeFrom(from._internal_camera());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_light_estimate()->::mediapipe::ARLightEstimate::MergeFrom(from._internal_light_estimate());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_face_anchor()->::mediapipe::ARFaceAnchor::MergeFrom(from._internal_face_anchor());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_raw_feature_points()->::mediapipe::ARPointCloud::MergeFrom(from._internal_raw_feature_points());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      depth_data_timestamp_ = from.depth_data_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ARFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ARFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARFrame::CopyFrom(const ARFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ARFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARFrame::IsInitialized() const {
  return true;
}

void ARFrame::InternalSwap(ARFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plane_anchor_.InternalSwap(&other->plane_anchor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ARFrame, depth_data_timestamp_)
      + sizeof(ARFrame::depth_data_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ARFrame, depth_data_)>(
          reinterpret_cast<char*>(&depth_data_),
          reinterpret_cast<char*>(&other->depth_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ARFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fa_5fr_5fcapture_5fmetadata_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::AVCameraCalibrationData* Arena::CreateMaybeMessage< ::mediapipe::AVCameraCalibrationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::AVCameraCalibrationData >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::AVDepthData* Arena::CreateMaybeMessage< ::mediapipe::AVDepthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::AVDepthData >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARLightEstimate_DirectionVector* Arena::CreateMaybeMessage< ::mediapipe::ARLightEstimate_DirectionVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARLightEstimate_DirectionVector >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARLightEstimate* Arena::CreateMaybeMessage< ::mediapipe::ARLightEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARLightEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARCamera_EulerAngles* Arena::CreateMaybeMessage< ::mediapipe::ARCamera_EulerAngles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARCamera_EulerAngles >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARCamera* Arena::CreateMaybeMessage< ::mediapipe::ARCamera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARCamera >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARFaceGeometry_Vertex* Arena::CreateMaybeMessage< ::mediapipe::ARFaceGeometry_Vertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARFaceGeometry_Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARFaceGeometry_TextureCoordinate* Arena::CreateMaybeMessage< ::mediapipe::ARFaceGeometry_TextureCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARFaceGeometry_TextureCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARFaceGeometry* Arena::CreateMaybeMessage< ::mediapipe::ARFaceGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARFaceGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARBlendShapeMap_MapEntry* Arena::CreateMaybeMessage< ::mediapipe::ARBlendShapeMap_MapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARBlendShapeMap_MapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARBlendShapeMap* Arena::CreateMaybeMessage< ::mediapipe::ARBlendShapeMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARBlendShapeMap >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARFaceAnchor* Arena::CreateMaybeMessage< ::mediapipe::ARFaceAnchor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARFaceAnchor >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARPlaneGeometry_Vertex* Arena::CreateMaybeMessage< ::mediapipe::ARPlaneGeometry_Vertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARPlaneGeometry_Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARPlaneGeometry_TextureCoordinate* Arena::CreateMaybeMessage< ::mediapipe::ARPlaneGeometry_TextureCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARPlaneGeometry_TextureCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARPlaneGeometry* Arena::CreateMaybeMessage< ::mediapipe::ARPlaneGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARPlaneGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARPlaneAnchor_PlaneVector* Arena::CreateMaybeMessage< ::mediapipe::ARPlaneAnchor_PlaneVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARPlaneAnchor_PlaneVector >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARPlaneAnchor* Arena::CreateMaybeMessage< ::mediapipe::ARPlaneAnchor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARPlaneAnchor >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARPointCloud_Point* Arena::CreateMaybeMessage< ::mediapipe::ARPointCloud_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARPointCloud_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARPointCloud* Arena::CreateMaybeMessage< ::mediapipe::ARPointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARPointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ARFrame* Arena::CreateMaybeMessage< ::mediapipe::ARFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ARFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
