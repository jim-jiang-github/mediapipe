// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/objectron/calculators/annotation_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/modules/objectron/calculators/a_r_capture_metadata.pb.h"
#include "mediapipe/modules/objectron/calculators/object.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto;
namespace mediapipe {
class AnnotatedKeyPoint;
struct AnnotatedKeyPointDefaultTypeInternal;
extern AnnotatedKeyPointDefaultTypeInternal _AnnotatedKeyPoint_default_instance_;
class FrameAnnotation;
struct FrameAnnotationDefaultTypeInternal;
extern FrameAnnotationDefaultTypeInternal _FrameAnnotation_default_instance_;
class NormalizedPoint2D;
struct NormalizedPoint2DDefaultTypeInternal;
extern NormalizedPoint2DDefaultTypeInternal _NormalizedPoint2D_default_instance_;
class ObjectAnnotation;
struct ObjectAnnotationDefaultTypeInternal;
extern ObjectAnnotationDefaultTypeInternal _ObjectAnnotation_default_instance_;
class Point3D;
struct Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class Sequence;
struct SequenceDefaultTypeInternal;
extern SequenceDefaultTypeInternal _Sequence_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::AnnotatedKeyPoint* Arena::CreateMaybeMessage<::mediapipe::AnnotatedKeyPoint>(Arena*);
template<> ::mediapipe::FrameAnnotation* Arena::CreateMaybeMessage<::mediapipe::FrameAnnotation>(Arena*);
template<> ::mediapipe::NormalizedPoint2D* Arena::CreateMaybeMessage<::mediapipe::NormalizedPoint2D>(Arena*);
template<> ::mediapipe::ObjectAnnotation* Arena::CreateMaybeMessage<::mediapipe::ObjectAnnotation>(Arena*);
template<> ::mediapipe::Point3D* Arena::CreateMaybeMessage<::mediapipe::Point3D>(Arena*);
template<> ::mediapipe::Sequence* Arena::CreateMaybeMessage<::mediapipe::Sequence>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class NormalizedPoint2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedPoint2D) */ {
 public:
  inline NormalizedPoint2D() : NormalizedPoint2D(nullptr) {}
  ~NormalizedPoint2D() override;
  explicit constexpr NormalizedPoint2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NormalizedPoint2D(const NormalizedPoint2D& from);
  NormalizedPoint2D(NormalizedPoint2D&& from) noexcept
    : NormalizedPoint2D() {
    *this = ::std::move(from);
  }

  inline NormalizedPoint2D& operator=(const NormalizedPoint2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedPoint2D& operator=(NormalizedPoint2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NormalizedPoint2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalizedPoint2D* internal_default_instance() {
    return reinterpret_cast<const NormalizedPoint2D*>(
               &_NormalizedPoint2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NormalizedPoint2D& a, NormalizedPoint2D& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedPoint2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedPoint2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedPoint2D* New() const final {
    return CreateMaybeMessage<NormalizedPoint2D>(nullptr);
  }

  NormalizedPoint2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedPoint2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedPoint2D& from);
  void MergeFrom(const NormalizedPoint2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedPoint2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.NormalizedPoint2D";
  }
  protected:
  explicit NormalizedPoint2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float depth = 3;
  void clear_depth();
  float depth() const;
  void set_depth(float value);
  private:
  float _internal_depth() const;
  void _internal_set_depth(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.NormalizedPoint2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Point3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {}
  ~Point3D() override;
  explicit constexpr Point3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point3D(const Point3D& from);
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3D* New() const final {
    return CreateMaybeMessage<Point3D>(nullptr);
  }

  Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Point3D";
  }
  protected:
  explicit Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Point3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AnnotatedKeyPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.AnnotatedKeyPoint) */ {
 public:
  inline AnnotatedKeyPoint() : AnnotatedKeyPoint(nullptr) {}
  ~AnnotatedKeyPoint() override;
  explicit constexpr AnnotatedKeyPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotatedKeyPoint(const AnnotatedKeyPoint& from);
  AnnotatedKeyPoint(AnnotatedKeyPoint&& from) noexcept
    : AnnotatedKeyPoint() {
    *this = ::std::move(from);
  }

  inline AnnotatedKeyPoint& operator=(const AnnotatedKeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotatedKeyPoint& operator=(AnnotatedKeyPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotatedKeyPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotatedKeyPoint* internal_default_instance() {
    return reinterpret_cast<const AnnotatedKeyPoint*>(
               &_AnnotatedKeyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnnotatedKeyPoint& a, AnnotatedKeyPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotatedKeyPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotatedKeyPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotatedKeyPoint* New() const final {
    return CreateMaybeMessage<AnnotatedKeyPoint>(nullptr);
  }

  AnnotatedKeyPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotatedKeyPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotatedKeyPoint& from);
  void MergeFrom(const AnnotatedKeyPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotatedKeyPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.AnnotatedKeyPoint";
  }
  protected:
  explicit AnnotatedKeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoint3DFieldNumber = 2,
    kPoint2DFieldNumber = 3,
    kIdFieldNumber = 1,
    kHiddenFieldNumber = 4,
  };
  // .mediapipe.Point3D point_3d = 2;
  bool has_point_3d() const;
  private:
  bool _internal_has_point_3d() const;
  public:
  void clear_point_3d();
  const ::mediapipe::Point3D& point_3d() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::Point3D* release_point_3d();
  ::mediapipe::Point3D* mutable_point_3d();
  void set_allocated_point_3d(::mediapipe::Point3D* point_3d);
  private:
  const ::mediapipe::Point3D& _internal_point_3d() const;
  ::mediapipe::Point3D* _internal_mutable_point_3d();
  public:
  void unsafe_arena_set_allocated_point_3d(
      ::mediapipe::Point3D* point_3d);
  ::mediapipe::Point3D* unsafe_arena_release_point_3d();

  // .mediapipe.NormalizedPoint2D point_2d = 3;
  bool has_point_2d() const;
  private:
  bool _internal_has_point_2d() const;
  public:
  void clear_point_2d();
  const ::mediapipe::NormalizedPoint2D& point_2d() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::NormalizedPoint2D* release_point_2d();
  ::mediapipe::NormalizedPoint2D* mutable_point_2d();
  void set_allocated_point_2d(::mediapipe::NormalizedPoint2D* point_2d);
  private:
  const ::mediapipe::NormalizedPoint2D& _internal_point_2d() const;
  ::mediapipe::NormalizedPoint2D* _internal_mutable_point_2d();
  public:
  void unsafe_arena_set_allocated_point_2d(
      ::mediapipe::NormalizedPoint2D* point_2d);
  ::mediapipe::NormalizedPoint2D* unsafe_arena_release_point_2d();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool hidden = 4;
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.AnnotatedKeyPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mediapipe::Point3D* point_3d_;
  ::mediapipe::NormalizedPoint2D* point_2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool hidden_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ObjectAnnotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ObjectAnnotation) */ {
 public:
  inline ObjectAnnotation() : ObjectAnnotation(nullptr) {}
  ~ObjectAnnotation() override;
  explicit constexpr ObjectAnnotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectAnnotation(const ObjectAnnotation& from);
  ObjectAnnotation(ObjectAnnotation&& from) noexcept
    : ObjectAnnotation() {
    *this = ::std::move(from);
  }

  inline ObjectAnnotation& operator=(const ObjectAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAnnotation& operator=(ObjectAnnotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectAnnotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectAnnotation* internal_default_instance() {
    return reinterpret_cast<const ObjectAnnotation*>(
               &_ObjectAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectAnnotation& a, ObjectAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAnnotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAnnotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectAnnotation* New() const final {
    return CreateMaybeMessage<ObjectAnnotation>(nullptr);
  }

  ObjectAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectAnnotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectAnnotation& from);
  void MergeFrom(const ObjectAnnotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAnnotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ObjectAnnotation";
  }
  protected:
  explicit ObjectAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsFieldNumber = 2,
    kRotationFieldNumber = 4,
    kTranslationFieldNumber = 5,
    kScaleFieldNumber = 6,
    kObjectIdFieldNumber = 1,
    kVisibilityFieldNumber = 3,
  };
  // repeated .mediapipe.AnnotatedKeyPoint keypoints = 2;
  int keypoints_size() const;
  private:
  int _internal_keypoints_size() const;
  public:
  void clear_keypoints();
  ::mediapipe::AnnotatedKeyPoint* mutable_keypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AnnotatedKeyPoint >*
      mutable_keypoints();
  private:
  const ::mediapipe::AnnotatedKeyPoint& _internal_keypoints(int index) const;
  ::mediapipe::AnnotatedKeyPoint* _internal_add_keypoints();
  public:
  const ::mediapipe::AnnotatedKeyPoint& keypoints(int index) const;
  ::mediapipe::AnnotatedKeyPoint* add_keypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AnnotatedKeyPoint >&
      keypoints() const;

  // repeated float rotation = 4;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  float _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotation() const;
  void _internal_add_rotation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotation();
  public:
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotation();

  // repeated float translation = 5;
  int translation_size() const;
  private:
  int _internal_translation_size() const;
  public:
  void clear_translation();
  private:
  float _internal_translation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_translation() const;
  void _internal_add_translation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_translation();
  public:
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      translation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_translation();

  // repeated float scale = 6;
  int scale_size() const;
  private:
  int _internal_scale_size() const;
  public:
  void clear_scale();
  private:
  float _internal_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scale() const;
  void _internal_add_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scale();
  public:
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scale();

  // int32 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int32 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float visibility = 3;
  void clear_visibility();
  float visibility() const;
  void set_visibility(float value);
  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ObjectAnnotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AnnotatedKeyPoint > keypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > translation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_id_;
  float visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class FrameAnnotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FrameAnnotation) */ {
 public:
  inline FrameAnnotation() : FrameAnnotation(nullptr) {}
  ~FrameAnnotation() override;
  explicit constexpr FrameAnnotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameAnnotation(const FrameAnnotation& from);
  FrameAnnotation(FrameAnnotation&& from) noexcept
    : FrameAnnotation() {
    *this = ::std::move(from);
  }

  inline FrameAnnotation& operator=(const FrameAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameAnnotation& operator=(FrameAnnotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameAnnotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameAnnotation* internal_default_instance() {
    return reinterpret_cast<const FrameAnnotation*>(
               &_FrameAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FrameAnnotation& a, FrameAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameAnnotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameAnnotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameAnnotation* New() const final {
    return CreateMaybeMessage<FrameAnnotation>(nullptr);
  }

  FrameAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameAnnotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameAnnotation& from);
  void MergeFrom(const FrameAnnotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameAnnotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FrameAnnotation";
  }
  protected:
  explicit FrameAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 2,
    kPlaneCenterFieldNumber = 5,
    kPlaneNormalFieldNumber = 6,
    kCameraFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kFrameIdFieldNumber = 1,
  };
  // repeated .mediapipe.ObjectAnnotation annotations = 2;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::mediapipe::ObjectAnnotation* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ObjectAnnotation >*
      mutable_annotations();
  private:
  const ::mediapipe::ObjectAnnotation& _internal_annotations(int index) const;
  ::mediapipe::ObjectAnnotation* _internal_add_annotations();
  public:
  const ::mediapipe::ObjectAnnotation& annotations(int index) const;
  ::mediapipe::ObjectAnnotation* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ObjectAnnotation >&
      annotations() const;

  // repeated float plane_center = 5;
  int plane_center_size() const;
  private:
  int _internal_plane_center_size() const;
  public:
  void clear_plane_center();
  private:
  float _internal_plane_center(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_plane_center() const;
  void _internal_add_plane_center(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_plane_center();
  public:
  float plane_center(int index) const;
  void set_plane_center(int index, float value);
  void add_plane_center(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      plane_center() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_plane_center();

  // repeated float plane_normal = 6;
  int plane_normal_size() const;
  private:
  int _internal_plane_normal_size() const;
  public:
  void clear_plane_normal();
  private:
  float _internal_plane_normal(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_plane_normal() const;
  void _internal_add_plane_normal(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_plane_normal();
  public:
  float plane_normal(int index) const;
  void set_plane_normal(int index, float value);
  void add_plane_normal(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      plane_normal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_plane_normal();

  // .mediapipe.ARCamera camera = 3;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::mediapipe::ARCamera& camera() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::ARCamera* release_camera();
  ::mediapipe::ARCamera* mutable_camera();
  void set_allocated_camera(::mediapipe::ARCamera* camera);
  private:
  const ::mediapipe::ARCamera& _internal_camera() const;
  ::mediapipe::ARCamera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::mediapipe::ARCamera* camera);
  ::mediapipe::ARCamera* unsafe_arena_release_camera();

  // double timestamp = 4;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.FrameAnnotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ObjectAnnotation > annotations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > plane_center_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > plane_normal_;
  ::mediapipe::ARCamera* camera_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Sequence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Sequence) */ {
 public:
  inline Sequence() : Sequence(nullptr) {}
  ~Sequence() override;
  explicit constexpr Sequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sequence(const Sequence& from);
  Sequence(Sequence&& from) noexcept
    : Sequence() {
    *this = ::std::move(from);
  }

  inline Sequence& operator=(const Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sequence& operator=(Sequence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sequence* internal_default_instance() {
    return reinterpret_cast<const Sequence*>(
               &_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Sequence& a, Sequence& b) {
    a.Swap(&b);
  }
  inline void Swap(Sequence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sequence* New() const final {
    return CreateMaybeMessage<Sequence>(nullptr);
  }

  Sequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sequence& from);
  void MergeFrom(const Sequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Sequence";
  }
  protected:
  explicit Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
    kFrameAnnotationsFieldNumber = 2,
  };
  // repeated .mediapipe.Object objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::mediapipe::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Object >*
      mutable_objects();
  private:
  const ::mediapipe::Object& _internal_objects(int index) const;
  ::mediapipe::Object* _internal_add_objects();
  public:
  const ::mediapipe::Object& objects(int index) const;
  ::mediapipe::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Object >&
      objects() const;

  // repeated .mediapipe.FrameAnnotation frame_annotations = 2;
  int frame_annotations_size() const;
  private:
  int _internal_frame_annotations_size() const;
  public:
  void clear_frame_annotations();
  ::mediapipe::FrameAnnotation* mutable_frame_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameAnnotation >*
      mutable_frame_annotations();
  private:
  const ::mediapipe::FrameAnnotation& _internal_frame_annotations(int index) const;
  ::mediapipe::FrameAnnotation* _internal_add_frame_annotations();
  public:
  const ::mediapipe::FrameAnnotation& frame_annotations(int index) const;
  ::mediapipe::FrameAnnotation* add_frame_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameAnnotation >&
      frame_annotations() const;

  // @@protoc_insertion_point(class_scope:mediapipe.Sequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Object > objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameAnnotation > frame_annotations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NormalizedPoint2D

// float x = 1;
inline void NormalizedPoint2D::clear_x() {
  x_ = 0;
}
inline float NormalizedPoint2D::_internal_x() const {
  return x_;
}
inline float NormalizedPoint2D::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedPoint2D.x)
  return _internal_x();
}
inline void NormalizedPoint2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void NormalizedPoint2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedPoint2D.x)
}

// float y = 2;
inline void NormalizedPoint2D::clear_y() {
  y_ = 0;
}
inline float NormalizedPoint2D::_internal_y() const {
  return y_;
}
inline float NormalizedPoint2D::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedPoint2D.y)
  return _internal_y();
}
inline void NormalizedPoint2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void NormalizedPoint2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedPoint2D.y)
}

// float depth = 3;
inline void NormalizedPoint2D::clear_depth() {
  depth_ = 0;
}
inline float NormalizedPoint2D::_internal_depth() const {
  return depth_;
}
inline float NormalizedPoint2D::depth() const {
  // @@protoc_insertion_point(field_get:mediapipe.NormalizedPoint2D.depth)
  return _internal_depth();
}
inline void NormalizedPoint2D::_internal_set_depth(float value) {
  
  depth_ = value;
}
inline void NormalizedPoint2D::set_depth(float value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:mediapipe.NormalizedPoint2D.depth)
}

// -------------------------------------------------------------------

// Point3D

// float x = 1;
inline void Point3D::clear_x() {
  x_ = 0;
}
inline float Point3D::_internal_x() const {
  return x_;
}
inline float Point3D::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.Point3D.x)
  return _internal_x();
}
inline void Point3D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.Point3D.x)
}

// float y = 2;
inline void Point3D::clear_y() {
  y_ = 0;
}
inline float Point3D::_internal_y() const {
  return y_;
}
inline float Point3D::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.Point3D.y)
  return _internal_y();
}
inline void Point3D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.Point3D.y)
}

// float z = 3;
inline void Point3D::clear_z() {
  z_ = 0;
}
inline float Point3D::_internal_z() const {
  return z_;
}
inline float Point3D::z() const {
  // @@protoc_insertion_point(field_get:mediapipe.Point3D.z)
  return _internal_z();
}
inline void Point3D::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mediapipe.Point3D.z)
}

// -------------------------------------------------------------------

// AnnotatedKeyPoint

// int32 id = 1;
inline void AnnotatedKeyPoint::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnnotatedKeyPoint::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnnotatedKeyPoint::id() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotatedKeyPoint.id)
  return _internal_id();
}
inline void AnnotatedKeyPoint::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void AnnotatedKeyPoint::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.AnnotatedKeyPoint.id)
}

// .mediapipe.Point3D point_3d = 2;
inline bool AnnotatedKeyPoint::_internal_has_point_3d() const {
  return this != internal_default_instance() && point_3d_ != nullptr;
}
inline bool AnnotatedKeyPoint::has_point_3d() const {
  return _internal_has_point_3d();
}
inline void AnnotatedKeyPoint::clear_point_3d() {
  if (GetArena() == nullptr && point_3d_ != nullptr) {
    delete point_3d_;
  }
  point_3d_ = nullptr;
}
inline const ::mediapipe::Point3D& AnnotatedKeyPoint::_internal_point_3d() const {
  const ::mediapipe::Point3D* p = point_3d_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::Point3D&>(
      ::mediapipe::_Point3D_default_instance_);
}
inline const ::mediapipe::Point3D& AnnotatedKeyPoint::point_3d() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotatedKeyPoint.point_3d)
  return _internal_point_3d();
}
inline void AnnotatedKeyPoint::unsafe_arena_set_allocated_point_3d(
    ::mediapipe::Point3D* point_3d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_3d_);
  }
  point_3d_ = point_3d;
  if (point_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.AnnotatedKeyPoint.point_3d)
}
inline ::mediapipe::Point3D* AnnotatedKeyPoint::release_point_3d() {
  
  ::mediapipe::Point3D* temp = point_3d_;
  point_3d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::Point3D* AnnotatedKeyPoint::unsafe_arena_release_point_3d() {
  // @@protoc_insertion_point(field_release:mediapipe.AnnotatedKeyPoint.point_3d)
  
  ::mediapipe::Point3D* temp = point_3d_;
  point_3d_ = nullptr;
  return temp;
}
inline ::mediapipe::Point3D* AnnotatedKeyPoint::_internal_mutable_point_3d() {
  
  if (point_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::Point3D>(GetArena());
    point_3d_ = p;
  }
  return point_3d_;
}
inline ::mediapipe::Point3D* AnnotatedKeyPoint::mutable_point_3d() {
  // @@protoc_insertion_point(field_mutable:mediapipe.AnnotatedKeyPoint.point_3d)
  return _internal_mutable_point_3d();
}
inline void AnnotatedKeyPoint::set_allocated_point_3d(::mediapipe::Point3D* point_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_3d_;
  }
  if (point_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point_3d);
    if (message_arena != submessage_arena) {
      point_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_3d, submessage_arena);
    }
    
  } else {
    
  }
  point_3d_ = point_3d;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.AnnotatedKeyPoint.point_3d)
}

// .mediapipe.NormalizedPoint2D point_2d = 3;
inline bool AnnotatedKeyPoint::_internal_has_point_2d() const {
  return this != internal_default_instance() && point_2d_ != nullptr;
}
inline bool AnnotatedKeyPoint::has_point_2d() const {
  return _internal_has_point_2d();
}
inline void AnnotatedKeyPoint::clear_point_2d() {
  if (GetArena() == nullptr && point_2d_ != nullptr) {
    delete point_2d_;
  }
  point_2d_ = nullptr;
}
inline const ::mediapipe::NormalizedPoint2D& AnnotatedKeyPoint::_internal_point_2d() const {
  const ::mediapipe::NormalizedPoint2D* p = point_2d_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::NormalizedPoint2D&>(
      ::mediapipe::_NormalizedPoint2D_default_instance_);
}
inline const ::mediapipe::NormalizedPoint2D& AnnotatedKeyPoint::point_2d() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotatedKeyPoint.point_2d)
  return _internal_point_2d();
}
inline void AnnotatedKeyPoint::unsafe_arena_set_allocated_point_2d(
    ::mediapipe::NormalizedPoint2D* point_2d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_2d_);
  }
  point_2d_ = point_2d;
  if (point_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.AnnotatedKeyPoint.point_2d)
}
inline ::mediapipe::NormalizedPoint2D* AnnotatedKeyPoint::release_point_2d() {
  
  ::mediapipe::NormalizedPoint2D* temp = point_2d_;
  point_2d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::NormalizedPoint2D* AnnotatedKeyPoint::unsafe_arena_release_point_2d() {
  // @@protoc_insertion_point(field_release:mediapipe.AnnotatedKeyPoint.point_2d)
  
  ::mediapipe::NormalizedPoint2D* temp = point_2d_;
  point_2d_ = nullptr;
  return temp;
}
inline ::mediapipe::NormalizedPoint2D* AnnotatedKeyPoint::_internal_mutable_point_2d() {
  
  if (point_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::NormalizedPoint2D>(GetArena());
    point_2d_ = p;
  }
  return point_2d_;
}
inline ::mediapipe::NormalizedPoint2D* AnnotatedKeyPoint::mutable_point_2d() {
  // @@protoc_insertion_point(field_mutable:mediapipe.AnnotatedKeyPoint.point_2d)
  return _internal_mutable_point_2d();
}
inline void AnnotatedKeyPoint::set_allocated_point_2d(::mediapipe::NormalizedPoint2D* point_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_2d_;
  }
  if (point_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point_2d);
    if (message_arena != submessage_arena) {
      point_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_2d, submessage_arena);
    }
    
  } else {
    
  }
  point_2d_ = point_2d;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.AnnotatedKeyPoint.point_2d)
}

// bool hidden = 4;
inline void AnnotatedKeyPoint::clear_hidden() {
  hidden_ = false;
}
inline bool AnnotatedKeyPoint::_internal_hidden() const {
  return hidden_;
}
inline bool AnnotatedKeyPoint::hidden() const {
  // @@protoc_insertion_point(field_get:mediapipe.AnnotatedKeyPoint.hidden)
  return _internal_hidden();
}
inline void AnnotatedKeyPoint::_internal_set_hidden(bool value) {
  
  hidden_ = value;
}
inline void AnnotatedKeyPoint::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:mediapipe.AnnotatedKeyPoint.hidden)
}

// -------------------------------------------------------------------

// ObjectAnnotation

// int32 object_id = 1;
inline void ObjectAnnotation::clear_object_id() {
  object_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectAnnotation::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectAnnotation::object_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.ObjectAnnotation.object_id)
  return _internal_object_id();
}
inline void ObjectAnnotation::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  object_id_ = value;
}
inline void ObjectAnnotation::set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.ObjectAnnotation.object_id)
}

// repeated .mediapipe.AnnotatedKeyPoint keypoints = 2;
inline int ObjectAnnotation::_internal_keypoints_size() const {
  return keypoints_.size();
}
inline int ObjectAnnotation::keypoints_size() const {
  return _internal_keypoints_size();
}
inline void ObjectAnnotation::clear_keypoints() {
  keypoints_.Clear();
}
inline ::mediapipe::AnnotatedKeyPoint* ObjectAnnotation::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.ObjectAnnotation.keypoints)
  return keypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AnnotatedKeyPoint >*
ObjectAnnotation::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.ObjectAnnotation.keypoints)
  return &keypoints_;
}
inline const ::mediapipe::AnnotatedKeyPoint& ObjectAnnotation::_internal_keypoints(int index) const {
  return keypoints_.Get(index);
}
inline const ::mediapipe::AnnotatedKeyPoint& ObjectAnnotation::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.ObjectAnnotation.keypoints)
  return _internal_keypoints(index);
}
inline ::mediapipe::AnnotatedKeyPoint* ObjectAnnotation::_internal_add_keypoints() {
  return keypoints_.Add();
}
inline ::mediapipe::AnnotatedKeyPoint* ObjectAnnotation::add_keypoints() {
  // @@protoc_insertion_point(field_add:mediapipe.ObjectAnnotation.keypoints)
  return _internal_add_keypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AnnotatedKeyPoint >&
ObjectAnnotation::keypoints() const {
  // @@protoc_insertion_point(field_list:mediapipe.ObjectAnnotation.keypoints)
  return keypoints_;
}

// float visibility = 3;
inline void ObjectAnnotation::clear_visibility() {
  visibility_ = 0;
}
inline float ObjectAnnotation::_internal_visibility() const {
  return visibility_;
}
inline float ObjectAnnotation::visibility() const {
  // @@protoc_insertion_point(field_get:mediapipe.ObjectAnnotation.visibility)
  return _internal_visibility();
}
inline void ObjectAnnotation::_internal_set_visibility(float value) {
  
  visibility_ = value;
}
inline void ObjectAnnotation::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:mediapipe.ObjectAnnotation.visibility)
}

// repeated float rotation = 4;
inline int ObjectAnnotation::_internal_rotation_size() const {
  return rotation_.size();
}
inline int ObjectAnnotation::rotation_size() const {
  return _internal_rotation_size();
}
inline void ObjectAnnotation::clear_rotation() {
  rotation_.Clear();
}
inline float ObjectAnnotation::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline float ObjectAnnotation::rotation(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.ObjectAnnotation.rotation)
  return _internal_rotation(index);
}
inline void ObjectAnnotation::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.ObjectAnnotation.rotation)
}
inline void ObjectAnnotation::_internal_add_rotation(float value) {
  rotation_.Add(value);
}
inline void ObjectAnnotation::add_rotation(float value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:mediapipe.ObjectAnnotation.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectAnnotation::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectAnnotation::rotation() const {
  // @@protoc_insertion_point(field_list:mediapipe.ObjectAnnotation.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectAnnotation::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectAnnotation::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.ObjectAnnotation.rotation)
  return _internal_mutable_rotation();
}

// repeated float translation = 5;
inline int ObjectAnnotation::_internal_translation_size() const {
  return translation_.size();
}
inline int ObjectAnnotation::translation_size() const {
  return _internal_translation_size();
}
inline void ObjectAnnotation::clear_translation() {
  translation_.Clear();
}
inline float ObjectAnnotation::_internal_translation(int index) const {
  return translation_.Get(index);
}
inline float ObjectAnnotation::translation(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.ObjectAnnotation.translation)
  return _internal_translation(index);
}
inline void ObjectAnnotation::set_translation(int index, float value) {
  translation_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.ObjectAnnotation.translation)
}
inline void ObjectAnnotation::_internal_add_translation(float value) {
  translation_.Add(value);
}
inline void ObjectAnnotation::add_translation(float value) {
  _internal_add_translation(value);
  // @@protoc_insertion_point(field_add:mediapipe.ObjectAnnotation.translation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectAnnotation::_internal_translation() const {
  return translation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectAnnotation::translation() const {
  // @@protoc_insertion_point(field_list:mediapipe.ObjectAnnotation.translation)
  return _internal_translation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectAnnotation::_internal_mutable_translation() {
  return &translation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectAnnotation::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.ObjectAnnotation.translation)
  return _internal_mutable_translation();
}

// repeated float scale = 6;
inline int ObjectAnnotation::_internal_scale_size() const {
  return scale_.size();
}
inline int ObjectAnnotation::scale_size() const {
  return _internal_scale_size();
}
inline void ObjectAnnotation::clear_scale() {
  scale_.Clear();
}
inline float ObjectAnnotation::_internal_scale(int index) const {
  return scale_.Get(index);
}
inline float ObjectAnnotation::scale(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.ObjectAnnotation.scale)
  return _internal_scale(index);
}
inline void ObjectAnnotation::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.ObjectAnnotation.scale)
}
inline void ObjectAnnotation::_internal_add_scale(float value) {
  scale_.Add(value);
}
inline void ObjectAnnotation::add_scale(float value) {
  _internal_add_scale(value);
  // @@protoc_insertion_point(field_add:mediapipe.ObjectAnnotation.scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectAnnotation::_internal_scale() const {
  return scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectAnnotation::scale() const {
  // @@protoc_insertion_point(field_list:mediapipe.ObjectAnnotation.scale)
  return _internal_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectAnnotation::_internal_mutable_scale() {
  return &scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectAnnotation::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.ObjectAnnotation.scale)
  return _internal_mutable_scale();
}

// -------------------------------------------------------------------

// FrameAnnotation

// int32 frame_id = 1;
inline void FrameAnnotation::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAnnotation::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameAnnotation::frame_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameAnnotation.frame_id)
  return _internal_frame_id();
}
inline void FrameAnnotation::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void FrameAnnotation::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameAnnotation.frame_id)
}

// repeated .mediapipe.ObjectAnnotation annotations = 2;
inline int FrameAnnotation::_internal_annotations_size() const {
  return annotations_.size();
}
inline int FrameAnnotation::annotations_size() const {
  return _internal_annotations_size();
}
inline void FrameAnnotation::clear_annotations() {
  annotations_.Clear();
}
inline ::mediapipe::ObjectAnnotation* FrameAnnotation::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.FrameAnnotation.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ObjectAnnotation >*
FrameAnnotation::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.FrameAnnotation.annotations)
  return &annotations_;
}
inline const ::mediapipe::ObjectAnnotation& FrameAnnotation::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::mediapipe::ObjectAnnotation& FrameAnnotation::annotations(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameAnnotation.annotations)
  return _internal_annotations(index);
}
inline ::mediapipe::ObjectAnnotation* FrameAnnotation::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::mediapipe::ObjectAnnotation* FrameAnnotation::add_annotations() {
  // @@protoc_insertion_point(field_add:mediapipe.FrameAnnotation.annotations)
  return _internal_add_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ObjectAnnotation >&
FrameAnnotation::annotations() const {
  // @@protoc_insertion_point(field_list:mediapipe.FrameAnnotation.annotations)
  return annotations_;
}

// .mediapipe.ARCamera camera = 3;
inline bool FrameAnnotation::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool FrameAnnotation::has_camera() const {
  return _internal_has_camera();
}
inline const ::mediapipe::ARCamera& FrameAnnotation::_internal_camera() const {
  const ::mediapipe::ARCamera* p = camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ARCamera&>(
      ::mediapipe::_ARCamera_default_instance_);
}
inline const ::mediapipe::ARCamera& FrameAnnotation::camera() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameAnnotation.camera)
  return _internal_camera();
}
inline void FrameAnnotation::unsafe_arena_set_allocated_camera(
    ::mediapipe::ARCamera* camera) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.FrameAnnotation.camera)
}
inline ::mediapipe::ARCamera* FrameAnnotation::release_camera() {
  
  ::mediapipe::ARCamera* temp = camera_;
  camera_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::ARCamera* FrameAnnotation::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:mediapipe.FrameAnnotation.camera)
  
  ::mediapipe::ARCamera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::mediapipe::ARCamera* FrameAnnotation::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ARCamera>(GetArena());
    camera_ = p;
  }
  return camera_;
}
inline ::mediapipe::ARCamera* FrameAnnotation::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:mediapipe.FrameAnnotation.camera)
  return _internal_mutable_camera();
}
inline void FrameAnnotation::set_allocated_camera(::mediapipe::ARCamera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera)->GetArena();
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.FrameAnnotation.camera)
}

// double timestamp = 4;
inline void FrameAnnotation::clear_timestamp() {
  timestamp_ = 0;
}
inline double FrameAnnotation::_internal_timestamp() const {
  return timestamp_;
}
inline double FrameAnnotation::timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameAnnotation.timestamp)
  return _internal_timestamp();
}
inline void FrameAnnotation::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void FrameAnnotation::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameAnnotation.timestamp)
}

// repeated float plane_center = 5;
inline int FrameAnnotation::_internal_plane_center_size() const {
  return plane_center_.size();
}
inline int FrameAnnotation::plane_center_size() const {
  return _internal_plane_center_size();
}
inline void FrameAnnotation::clear_plane_center() {
  plane_center_.Clear();
}
inline float FrameAnnotation::_internal_plane_center(int index) const {
  return plane_center_.Get(index);
}
inline float FrameAnnotation::plane_center(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameAnnotation.plane_center)
  return _internal_plane_center(index);
}
inline void FrameAnnotation::set_plane_center(int index, float value) {
  plane_center_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameAnnotation.plane_center)
}
inline void FrameAnnotation::_internal_add_plane_center(float value) {
  plane_center_.Add(value);
}
inline void FrameAnnotation::add_plane_center(float value) {
  _internal_add_plane_center(value);
  // @@protoc_insertion_point(field_add:mediapipe.FrameAnnotation.plane_center)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FrameAnnotation::_internal_plane_center() const {
  return plane_center_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FrameAnnotation::plane_center() const {
  // @@protoc_insertion_point(field_list:mediapipe.FrameAnnotation.plane_center)
  return _internal_plane_center();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FrameAnnotation::_internal_mutable_plane_center() {
  return &plane_center_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FrameAnnotation::mutable_plane_center() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.FrameAnnotation.plane_center)
  return _internal_mutable_plane_center();
}

// repeated float plane_normal = 6;
inline int FrameAnnotation::_internal_plane_normal_size() const {
  return plane_normal_.size();
}
inline int FrameAnnotation::plane_normal_size() const {
  return _internal_plane_normal_size();
}
inline void FrameAnnotation::clear_plane_normal() {
  plane_normal_.Clear();
}
inline float FrameAnnotation::_internal_plane_normal(int index) const {
  return plane_normal_.Get(index);
}
inline float FrameAnnotation::plane_normal(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameAnnotation.plane_normal)
  return _internal_plane_normal(index);
}
inline void FrameAnnotation::set_plane_normal(int index, float value) {
  plane_normal_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameAnnotation.plane_normal)
}
inline void FrameAnnotation::_internal_add_plane_normal(float value) {
  plane_normal_.Add(value);
}
inline void FrameAnnotation::add_plane_normal(float value) {
  _internal_add_plane_normal(value);
  // @@protoc_insertion_point(field_add:mediapipe.FrameAnnotation.plane_normal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FrameAnnotation::_internal_plane_normal() const {
  return plane_normal_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FrameAnnotation::plane_normal() const {
  // @@protoc_insertion_point(field_list:mediapipe.FrameAnnotation.plane_normal)
  return _internal_plane_normal();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FrameAnnotation::_internal_mutable_plane_normal() {
  return &plane_normal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FrameAnnotation::mutable_plane_normal() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.FrameAnnotation.plane_normal)
  return _internal_mutable_plane_normal();
}

// -------------------------------------------------------------------

// Sequence

// repeated .mediapipe.Object objects = 1;
inline int Sequence::_internal_objects_size() const {
  return objects_.size();
}
inline int Sequence::objects_size() const {
  return _internal_objects_size();
}
inline ::mediapipe::Object* Sequence::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Sequence.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Object >*
Sequence::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Sequence.objects)
  return &objects_;
}
inline const ::mediapipe::Object& Sequence::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::mediapipe::Object& Sequence::objects(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Sequence.objects)
  return _internal_objects(index);
}
inline ::mediapipe::Object* Sequence::_internal_add_objects() {
  return objects_.Add();
}
inline ::mediapipe::Object* Sequence::add_objects() {
  // @@protoc_insertion_point(field_add:mediapipe.Sequence.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Object >&
Sequence::objects() const {
  // @@protoc_insertion_point(field_list:mediapipe.Sequence.objects)
  return objects_;
}

// repeated .mediapipe.FrameAnnotation frame_annotations = 2;
inline int Sequence::_internal_frame_annotations_size() const {
  return frame_annotations_.size();
}
inline int Sequence::frame_annotations_size() const {
  return _internal_frame_annotations_size();
}
inline void Sequence::clear_frame_annotations() {
  frame_annotations_.Clear();
}
inline ::mediapipe::FrameAnnotation* Sequence::mutable_frame_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Sequence.frame_annotations)
  return frame_annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameAnnotation >*
Sequence::mutable_frame_annotations() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Sequence.frame_annotations)
  return &frame_annotations_;
}
inline const ::mediapipe::FrameAnnotation& Sequence::_internal_frame_annotations(int index) const {
  return frame_annotations_.Get(index);
}
inline const ::mediapipe::FrameAnnotation& Sequence::frame_annotations(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Sequence.frame_annotations)
  return _internal_frame_annotations(index);
}
inline ::mediapipe::FrameAnnotation* Sequence::_internal_add_frame_annotations() {
  return frame_annotations_.Add();
}
inline ::mediapipe::FrameAnnotation* Sequence::add_frame_annotations() {
  // @@protoc_insertion_point(field_add:mediapipe.Sequence.frame_annotations)
  return _internal_add_frame_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameAnnotation >&
Sequence::frame_annotations() const {
  // @@protoc_insertion_point(field_list:mediapipe.Sequence.frame_annotations)
  return frame_annotations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fannotation_5fdata_2eproto
