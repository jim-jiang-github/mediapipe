// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/objectron/calculators/camera_parameters.proto

#include "mediapipe/modules/objectron/calculators/camera_parameters.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr CameraParametersProto::CameraParametersProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_orientation_(0)

  , projection_sphere_radius_(100)
  , height_above_ground_(100)
  , portrait_width_(1.0103f)
  , portrait_height_(1.3435f)
  , projection_mode_(1)
{}
struct CameraParametersProtoDefaultTypeInternal {
  constexpr CameraParametersProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraParametersProtoDefaultTypeInternal() {}
  union {
    CameraParametersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraParametersProtoDefaultTypeInternal _CameraParametersProto_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, height_above_ground_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, portrait_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, portrait_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, image_orientation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, projection_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraParametersProto, projection_sphere_radius_),
  2,
  3,
  4,
  0,
  5,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mediapipe::CameraParametersProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_CameraParametersProto_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?mediapipe/modules/objectron/calculator"
  "s/camera_parameters.proto\022\tmediapipe\"\347\003\n"
  "\025CameraParametersProto\022 \n\023height_above_g"
  "round\030\001 \001(\002:\003100\022\036\n\016portrait_width\030\002 \001(\002"
  ":\0061.0103\022\037\n\017portrait_height\030\003 \001(\002:\0061.343"
  "5\022b\n\021image_orientation\030\004 \001(\01621.mediapipe"
  ".CameraParametersProto.ImageOrientation:"
  "\024PORTRAIT_ORIENTATION\022V\n\017projection_mode"
  "\030\005 \001(\0162/.mediapipe.CameraParametersProto"
  ".ProjectionMode:\014GROUND_PLANE\022%\n\030project"
  "ion_sphere_radius\030\006 \001(\002:\003100\"G\n\020ImageOri"
  "entation\022\030\n\024PORTRAIT_ORIENTATION\020\000\022\031\n\025LA"
  "NDSCAPE_ORIENTATION\020\001\"\?\n\016ProjectionMode\022"
  "\017\n\013UNSPECIFIED\020\000\022\020\n\014GROUND_PLANE\020\001\022\n\n\006SP"
  "HERE\020\002"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto = {
  false, false, 566, descriptor_table_protodef_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto, "mediapipe/modules/objectron/calculators/camera_parameters.proto", 
  &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto::offsets,
  file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto, file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto, file_level_service_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto_getter() {
  return &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraParametersProto_ImageOrientation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto[0];
}
bool CameraParametersProto_ImageOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraParametersProto_ImageOrientation CameraParametersProto::PORTRAIT_ORIENTATION;
constexpr CameraParametersProto_ImageOrientation CameraParametersProto::LANDSCAPE_ORIENTATION;
constexpr CameraParametersProto_ImageOrientation CameraParametersProto::ImageOrientation_MIN;
constexpr CameraParametersProto_ImageOrientation CameraParametersProto::ImageOrientation_MAX;
constexpr int CameraParametersProto::ImageOrientation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraParametersProto_ProjectionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto[1];
}
bool CameraParametersProto_ProjectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraParametersProto_ProjectionMode CameraParametersProto::UNSPECIFIED;
constexpr CameraParametersProto_ProjectionMode CameraParametersProto::GROUND_PLANE;
constexpr CameraParametersProto_ProjectionMode CameraParametersProto::SPHERE;
constexpr CameraParametersProto_ProjectionMode CameraParametersProto::ProjectionMode_MIN;
constexpr CameraParametersProto_ProjectionMode CameraParametersProto::ProjectionMode_MAX;
constexpr int CameraParametersProto::ProjectionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CameraParametersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraParametersProto>()._has_bits_);
  static void set_has_height_above_ground(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_portrait_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_portrait_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_image_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_projection_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_projection_sphere_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CameraParametersProto::CameraParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.CameraParametersProto)
}
CameraParametersProto::CameraParametersProto(const CameraParametersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&image_orientation_, &from.image_orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&projection_mode_) -
    reinterpret_cast<char*>(&image_orientation_)) + sizeof(projection_mode_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.CameraParametersProto)
}

void CameraParametersProto::SharedCtor() {
image_orientation_ = 0;
projection_sphere_radius_ = 100;
height_above_ground_ = 100;
portrait_width_ = 1.0103f;
portrait_height_ = 1.3435f;
projection_mode_ = 1;
}

CameraParametersProto::~CameraParametersProto() {
  // @@protoc_insertion_point(destructor:mediapipe.CameraParametersProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraParametersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraParametersProto::ArenaDtor(void* object) {
  CameraParametersProto* _this = reinterpret_cast< CameraParametersProto* >(object);
  (void)_this;
}
void CameraParametersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraParametersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.CameraParametersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    image_orientation_ = 0;
    projection_sphere_radius_ = 100;
    height_above_ground_ = 100;
    portrait_width_ = 1.0103f;
    portrait_height_ = 1.3435f;
    projection_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraParametersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float height_above_ground = 1 [default = 100];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_height_above_ground(&has_bits);
          height_above_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float portrait_width = 2 [default = 1.0103];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_portrait_width(&has_bits);
          portrait_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float portrait_height = 3 [default = 1.3435];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_portrait_height(&has_bits);
          portrait_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.CameraParametersProto.ImageOrientation image_orientation = 4 [default = PORTRAIT_ORIENTATION];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::CameraParametersProto_ImageOrientation_IsValid(val))) {
            _internal_set_image_orientation(static_cast<::mediapipe::CameraParametersProto_ImageOrientation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.CameraParametersProto.ProjectionMode projection_mode = 5 [default = GROUND_PLANE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::CameraParametersProto_ProjectionMode_IsValid(val))) {
            _internal_set_projection_mode(static_cast<::mediapipe::CameraParametersProto_ProjectionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float projection_sphere_radius = 6 [default = 100];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_projection_sphere_radius(&has_bits);
          projection_sphere_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraParametersProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.CameraParametersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float height_above_ground = 1 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_height_above_ground(), target);
  }

  // optional float portrait_width = 2 [default = 1.0103];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_portrait_width(), target);
  }

  // optional float portrait_height = 3 [default = 1.3435];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_portrait_height(), target);
  }

  // optional .mediapipe.CameraParametersProto.ImageOrientation image_orientation = 4 [default = PORTRAIT_ORIENTATION];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_image_orientation(), target);
  }

  // optional .mediapipe.CameraParametersProto.ProjectionMode projection_mode = 5 [default = GROUND_PLANE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_projection_mode(), target);
  }

  // optional float projection_sphere_radius = 6 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_projection_sphere_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.CameraParametersProto)
  return target;
}

size_t CameraParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.CameraParametersProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .mediapipe.CameraParametersProto.ImageOrientation image_orientation = 4 [default = PORTRAIT_ORIENTATION];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_orientation());
    }

    // optional float projection_sphere_radius = 6 [default = 100];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float height_above_ground = 1 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float portrait_width = 2 [default = 1.0103];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float portrait_height = 3 [default = 1.3435];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .mediapipe.CameraParametersProto.ProjectionMode projection_mode = 5 [default = GROUND_PLANE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_projection_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraParametersProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.CameraParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParametersProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraParametersProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.CameraParametersProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.CameraParametersProto)
    MergeFrom(*source);
  }
}

void CameraParametersProto::MergeFrom(const CameraParametersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.CameraParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      image_orientation_ = from.image_orientation_;
    }
    if (cached_has_bits & 0x00000002u) {
      projection_sphere_radius_ = from.projection_sphere_radius_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_above_ground_ = from.height_above_ground_;
    }
    if (cached_has_bits & 0x00000008u) {
      portrait_width_ = from.portrait_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      portrait_height_ = from.portrait_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      projection_mode_ = from.projection_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraParametersProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.CameraParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParametersProto::CopyFrom(const CameraParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.CameraParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParametersProto::IsInitialized() const {
  return true;
}

void CameraParametersProto::InternalSwap(CameraParametersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(image_orientation_, other->image_orientation_);
  swap(projection_sphere_radius_, other->projection_sphere_radius_);
  swap(height_above_ground_, other->height_above_ground_);
  swap(portrait_width_, other->portrait_width_);
  swap(portrait_height_, other->portrait_height_);
  swap(projection_mode_, other->projection_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraParametersProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::CameraParametersProto* Arena::CreateMaybeMessage< ::mediapipe::CameraParametersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::CameraParametersProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
