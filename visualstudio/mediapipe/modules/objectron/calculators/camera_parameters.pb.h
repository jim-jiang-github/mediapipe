// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/objectron/calculators/camera_parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto;
namespace mediapipe {
class CameraParametersProto;
struct CameraParametersProtoDefaultTypeInternal;
extern CameraParametersProtoDefaultTypeInternal _CameraParametersProto_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::CameraParametersProto* Arena::CreateMaybeMessage<::mediapipe::CameraParametersProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum CameraParametersProto_ImageOrientation : int {
  CameraParametersProto_ImageOrientation_PORTRAIT_ORIENTATION = 0,
  CameraParametersProto_ImageOrientation_LANDSCAPE_ORIENTATION = 1
};
bool CameraParametersProto_ImageOrientation_IsValid(int value);
constexpr CameraParametersProto_ImageOrientation CameraParametersProto_ImageOrientation_ImageOrientation_MIN = CameraParametersProto_ImageOrientation_PORTRAIT_ORIENTATION;
constexpr CameraParametersProto_ImageOrientation CameraParametersProto_ImageOrientation_ImageOrientation_MAX = CameraParametersProto_ImageOrientation_LANDSCAPE_ORIENTATION;
constexpr int CameraParametersProto_ImageOrientation_ImageOrientation_ARRAYSIZE = CameraParametersProto_ImageOrientation_ImageOrientation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraParametersProto_ImageOrientation_descriptor();
template<typename T>
inline const std::string& CameraParametersProto_ImageOrientation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraParametersProto_ImageOrientation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraParametersProto_ImageOrientation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraParametersProto_ImageOrientation_descriptor(), enum_t_value);
}
inline bool CameraParametersProto_ImageOrientation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraParametersProto_ImageOrientation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraParametersProto_ImageOrientation>(
    CameraParametersProto_ImageOrientation_descriptor(), name, value);
}
enum CameraParametersProto_ProjectionMode : int {
  CameraParametersProto_ProjectionMode_UNSPECIFIED = 0,
  CameraParametersProto_ProjectionMode_GROUND_PLANE = 1,
  CameraParametersProto_ProjectionMode_SPHERE = 2
};
bool CameraParametersProto_ProjectionMode_IsValid(int value);
constexpr CameraParametersProto_ProjectionMode CameraParametersProto_ProjectionMode_ProjectionMode_MIN = CameraParametersProto_ProjectionMode_UNSPECIFIED;
constexpr CameraParametersProto_ProjectionMode CameraParametersProto_ProjectionMode_ProjectionMode_MAX = CameraParametersProto_ProjectionMode_SPHERE;
constexpr int CameraParametersProto_ProjectionMode_ProjectionMode_ARRAYSIZE = CameraParametersProto_ProjectionMode_ProjectionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraParametersProto_ProjectionMode_descriptor();
template<typename T>
inline const std::string& CameraParametersProto_ProjectionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraParametersProto_ProjectionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraParametersProto_ProjectionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraParametersProto_ProjectionMode_descriptor(), enum_t_value);
}
inline bool CameraParametersProto_ProjectionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraParametersProto_ProjectionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraParametersProto_ProjectionMode>(
    CameraParametersProto_ProjectionMode_descriptor(), name, value);
}
// ===================================================================

class CameraParametersProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.CameraParametersProto) */ {
 public:
  inline CameraParametersProto() : CameraParametersProto(nullptr) {}
  ~CameraParametersProto() override;
  explicit constexpr CameraParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraParametersProto(const CameraParametersProto& from);
  CameraParametersProto(CameraParametersProto&& from) noexcept
    : CameraParametersProto() {
    *this = ::std::move(from);
  }

  inline CameraParametersProto& operator=(const CameraParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParametersProto& operator=(CameraParametersProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraParametersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraParametersProto* internal_default_instance() {
    return reinterpret_cast<const CameraParametersProto*>(
               &_CameraParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraParametersProto& a, CameraParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraParametersProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraParametersProto* New() const final {
    return CreateMaybeMessage<CameraParametersProto>(nullptr);
  }

  CameraParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraParametersProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraParametersProto& from);
  void MergeFrom(const CameraParametersProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParametersProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.CameraParametersProto";
  }
  protected:
  explicit CameraParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraParametersProto_ImageOrientation ImageOrientation;
  static constexpr ImageOrientation PORTRAIT_ORIENTATION =
    CameraParametersProto_ImageOrientation_PORTRAIT_ORIENTATION;
  static constexpr ImageOrientation LANDSCAPE_ORIENTATION =
    CameraParametersProto_ImageOrientation_LANDSCAPE_ORIENTATION;
  static inline bool ImageOrientation_IsValid(int value) {
    return CameraParametersProto_ImageOrientation_IsValid(value);
  }
  static constexpr ImageOrientation ImageOrientation_MIN =
    CameraParametersProto_ImageOrientation_ImageOrientation_MIN;
  static constexpr ImageOrientation ImageOrientation_MAX =
    CameraParametersProto_ImageOrientation_ImageOrientation_MAX;
  static constexpr int ImageOrientation_ARRAYSIZE =
    CameraParametersProto_ImageOrientation_ImageOrientation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImageOrientation_descriptor() {
    return CameraParametersProto_ImageOrientation_descriptor();
  }
  template<typename T>
  static inline const std::string& ImageOrientation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageOrientation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageOrientation_Name.");
    return CameraParametersProto_ImageOrientation_Name(enum_t_value);
  }
  static inline bool ImageOrientation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageOrientation* value) {
    return CameraParametersProto_ImageOrientation_Parse(name, value);
  }

  typedef CameraParametersProto_ProjectionMode ProjectionMode;
  static constexpr ProjectionMode UNSPECIFIED =
    CameraParametersProto_ProjectionMode_UNSPECIFIED;
  static constexpr ProjectionMode GROUND_PLANE =
    CameraParametersProto_ProjectionMode_GROUND_PLANE;
  static constexpr ProjectionMode SPHERE =
    CameraParametersProto_ProjectionMode_SPHERE;
  static inline bool ProjectionMode_IsValid(int value) {
    return CameraParametersProto_ProjectionMode_IsValid(value);
  }
  static constexpr ProjectionMode ProjectionMode_MIN =
    CameraParametersProto_ProjectionMode_ProjectionMode_MIN;
  static constexpr ProjectionMode ProjectionMode_MAX =
    CameraParametersProto_ProjectionMode_ProjectionMode_MAX;
  static constexpr int ProjectionMode_ARRAYSIZE =
    CameraParametersProto_ProjectionMode_ProjectionMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProjectionMode_descriptor() {
    return CameraParametersProto_ProjectionMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ProjectionMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProjectionMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProjectionMode_Name.");
    return CameraParametersProto_ProjectionMode_Name(enum_t_value);
  }
  static inline bool ProjectionMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProjectionMode* value) {
    return CameraParametersProto_ProjectionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImageOrientationFieldNumber = 4,
    kProjectionSphereRadiusFieldNumber = 6,
    kHeightAboveGroundFieldNumber = 1,
    kPortraitWidthFieldNumber = 2,
    kPortraitHeightFieldNumber = 3,
    kProjectionModeFieldNumber = 5,
  };
  // optional .mediapipe.CameraParametersProto.ImageOrientation image_orientation = 4 [default = PORTRAIT_ORIENTATION];
  bool has_image_orientation() const;
  private:
  bool _internal_has_image_orientation() const;
  public:
  void clear_image_orientation();
  ::mediapipe::CameraParametersProto_ImageOrientation image_orientation() const;
  void set_image_orientation(::mediapipe::CameraParametersProto_ImageOrientation value);
  private:
  ::mediapipe::CameraParametersProto_ImageOrientation _internal_image_orientation() const;
  void _internal_set_image_orientation(::mediapipe::CameraParametersProto_ImageOrientation value);
  public:

  // optional float projection_sphere_radius = 6 [default = 100];
  bool has_projection_sphere_radius() const;
  private:
  bool _internal_has_projection_sphere_radius() const;
  public:
  void clear_projection_sphere_radius();
  float projection_sphere_radius() const;
  void set_projection_sphere_radius(float value);
  private:
  float _internal_projection_sphere_radius() const;
  void _internal_set_projection_sphere_radius(float value);
  public:

  // optional float height_above_ground = 1 [default = 100];
  bool has_height_above_ground() const;
  private:
  bool _internal_has_height_above_ground() const;
  public:
  void clear_height_above_ground();
  float height_above_ground() const;
  void set_height_above_ground(float value);
  private:
  float _internal_height_above_ground() const;
  void _internal_set_height_above_ground(float value);
  public:

  // optional float portrait_width = 2 [default = 1.0103];
  bool has_portrait_width() const;
  private:
  bool _internal_has_portrait_width() const;
  public:
  void clear_portrait_width();
  float portrait_width() const;
  void set_portrait_width(float value);
  private:
  float _internal_portrait_width() const;
  void _internal_set_portrait_width(float value);
  public:

  // optional float portrait_height = 3 [default = 1.3435];
  bool has_portrait_height() const;
  private:
  bool _internal_has_portrait_height() const;
  public:
  void clear_portrait_height();
  float portrait_height() const;
  void set_portrait_height(float value);
  private:
  float _internal_portrait_height() const;
  void _internal_set_portrait_height(float value);
  public:

  // optional .mediapipe.CameraParametersProto.ProjectionMode projection_mode = 5 [default = GROUND_PLANE];
  bool has_projection_mode() const;
  private:
  bool _internal_has_projection_mode() const;
  public:
  void clear_projection_mode();
  ::mediapipe::CameraParametersProto_ProjectionMode projection_mode() const;
  void set_projection_mode(::mediapipe::CameraParametersProto_ProjectionMode value);
  private:
  ::mediapipe::CameraParametersProto_ProjectionMode _internal_projection_mode() const;
  void _internal_set_projection_mode(::mediapipe::CameraParametersProto_ProjectionMode value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.CameraParametersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int image_orientation_;
  float projection_sphere_radius_;
  float height_above_ground_;
  float portrait_width_;
  float portrait_height_;
  int projection_mode_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraParametersProto

// optional float height_above_ground = 1 [default = 100];
inline bool CameraParametersProto::_internal_has_height_above_ground() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraParametersProto::has_height_above_ground() const {
  return _internal_has_height_above_ground();
}
inline void CameraParametersProto::clear_height_above_ground() {
  height_above_ground_ = 100;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CameraParametersProto::_internal_height_above_ground() const {
  return height_above_ground_;
}
inline float CameraParametersProto::height_above_ground() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraParametersProto.height_above_ground)
  return _internal_height_above_ground();
}
inline void CameraParametersProto::_internal_set_height_above_ground(float value) {
  _has_bits_[0] |= 0x00000004u;
  height_above_ground_ = value;
}
inline void CameraParametersProto::set_height_above_ground(float value) {
  _internal_set_height_above_ground(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraParametersProto.height_above_ground)
}

// optional float portrait_width = 2 [default = 1.0103];
inline bool CameraParametersProto::_internal_has_portrait_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CameraParametersProto::has_portrait_width() const {
  return _internal_has_portrait_width();
}
inline void CameraParametersProto::clear_portrait_width() {
  portrait_width_ = 1.0103f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CameraParametersProto::_internal_portrait_width() const {
  return portrait_width_;
}
inline float CameraParametersProto::portrait_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraParametersProto.portrait_width)
  return _internal_portrait_width();
}
inline void CameraParametersProto::_internal_set_portrait_width(float value) {
  _has_bits_[0] |= 0x00000008u;
  portrait_width_ = value;
}
inline void CameraParametersProto::set_portrait_width(float value) {
  _internal_set_portrait_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraParametersProto.portrait_width)
}

// optional float portrait_height = 3 [default = 1.3435];
inline bool CameraParametersProto::_internal_has_portrait_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraParametersProto::has_portrait_height() const {
  return _internal_has_portrait_height();
}
inline void CameraParametersProto::clear_portrait_height() {
  portrait_height_ = 1.3435f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CameraParametersProto::_internal_portrait_height() const {
  return portrait_height_;
}
inline float CameraParametersProto::portrait_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraParametersProto.portrait_height)
  return _internal_portrait_height();
}
inline void CameraParametersProto::_internal_set_portrait_height(float value) {
  _has_bits_[0] |= 0x00000010u;
  portrait_height_ = value;
}
inline void CameraParametersProto::set_portrait_height(float value) {
  _internal_set_portrait_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraParametersProto.portrait_height)
}

// optional .mediapipe.CameraParametersProto.ImageOrientation image_orientation = 4 [default = PORTRAIT_ORIENTATION];
inline bool CameraParametersProto::_internal_has_image_orientation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraParametersProto::has_image_orientation() const {
  return _internal_has_image_orientation();
}
inline void CameraParametersProto::clear_image_orientation() {
  image_orientation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::mediapipe::CameraParametersProto_ImageOrientation CameraParametersProto::_internal_image_orientation() const {
  return static_cast< ::mediapipe::CameraParametersProto_ImageOrientation >(image_orientation_);
}
inline ::mediapipe::CameraParametersProto_ImageOrientation CameraParametersProto::image_orientation() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraParametersProto.image_orientation)
  return _internal_image_orientation();
}
inline void CameraParametersProto::_internal_set_image_orientation(::mediapipe::CameraParametersProto_ImageOrientation value) {
  assert(::mediapipe::CameraParametersProto_ImageOrientation_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  image_orientation_ = value;
}
inline void CameraParametersProto::set_image_orientation(::mediapipe::CameraParametersProto_ImageOrientation value) {
  _internal_set_image_orientation(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraParametersProto.image_orientation)
}

// optional .mediapipe.CameraParametersProto.ProjectionMode projection_mode = 5 [default = GROUND_PLANE];
inline bool CameraParametersProto::_internal_has_projection_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CameraParametersProto::has_projection_mode() const {
  return _internal_has_projection_mode();
}
inline void CameraParametersProto::clear_projection_mode() {
  projection_mode_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::mediapipe::CameraParametersProto_ProjectionMode CameraParametersProto::_internal_projection_mode() const {
  return static_cast< ::mediapipe::CameraParametersProto_ProjectionMode >(projection_mode_);
}
inline ::mediapipe::CameraParametersProto_ProjectionMode CameraParametersProto::projection_mode() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraParametersProto.projection_mode)
  return _internal_projection_mode();
}
inline void CameraParametersProto::_internal_set_projection_mode(::mediapipe::CameraParametersProto_ProjectionMode value) {
  assert(::mediapipe::CameraParametersProto_ProjectionMode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  projection_mode_ = value;
}
inline void CameraParametersProto::set_projection_mode(::mediapipe::CameraParametersProto_ProjectionMode value) {
  _internal_set_projection_mode(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraParametersProto.projection_mode)
}

// optional float projection_sphere_radius = 6 [default = 100];
inline bool CameraParametersProto::_internal_has_projection_sphere_radius() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraParametersProto::has_projection_sphere_radius() const {
  return _internal_has_projection_sphere_radius();
}
inline void CameraParametersProto::clear_projection_sphere_radius() {
  projection_sphere_radius_ = 100;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CameraParametersProto::_internal_projection_sphere_radius() const {
  return projection_sphere_radius_;
}
inline float CameraParametersProto::projection_sphere_radius() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraParametersProto.projection_sphere_radius)
  return _internal_projection_sphere_radius();
}
inline void CameraParametersProto::_internal_set_projection_sphere_radius(float value) {
  _has_bits_[0] |= 0x00000002u;
  projection_sphere_radius_ = value;
}
inline void CameraParametersProto::set_projection_sphere_radius(float value) {
  _internal_set_projection_sphere_radius(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraParametersProto.projection_sphere_radius)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::CameraParametersProto_ImageOrientation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::CameraParametersProto_ImageOrientation>() {
  return ::mediapipe::CameraParametersProto_ImageOrientation_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::CameraParametersProto_ProjectionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::CameraParametersProto_ProjectionMode>() {
  return ::mediapipe::CameraParametersProto_ProjectionMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fcamera_5fparameters_2eproto
