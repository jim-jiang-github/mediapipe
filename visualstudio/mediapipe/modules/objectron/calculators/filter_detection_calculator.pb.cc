// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/objectron/calculators/filter_detection_calculator.proto

#include "mediapipe/modules/objectron/calculators/filter_detection_calculator.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr FilterDetectionCalculatorOptions::FilterDetectionCalculatorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_score_(0)
  , max_score_(0)
  , fail_on_empty_labels_(false)
  , empty_allowed_labels_means_allow_everything_(false)
  , use_detection_vector_(false)
  , use_allowed_labels_csv_(false){}
struct FilterDetectionCalculatorOptionsDefaultTypeInternal {
  constexpr FilterDetectionCalculatorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterDetectionCalculatorOptionsDefaultTypeInternal() {}
  union {
    FilterDetectionCalculatorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterDetectionCalculatorOptionsDefaultTypeInternal _FilterDetectionCalculatorOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, min_score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, max_score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, fail_on_empty_labels_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, empty_allowed_labels_means_allow_everything_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, use_detection_vector_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FilterDetectionCalculatorOptions, use_allowed_labels_csv_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mediapipe::FilterDetectionCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_FilterDetectionCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nImediapipe/modules/objectron/calculator"
  "s/filter_detection_calculator.proto\022\tmed"
  "iapipe\032$mediapipe/framework/calculator.p"
  "roto\"\313\002\n FilterDetectionCalculatorOption"
  "s\022\021\n\tmin_score\030\001 \001(\002\022\021\n\tmax_score\030\002 \001(\002\022"
  "#\n\024fail_on_empty_labels\030\003 \001(\010:\005false\022:\n+"
  "empty_allowed_labels_means_allow_everyth"
  "ing\030\006 \001(\010:\005false\022 \n\024use_detection_vector"
  "\030\004 \001(\010B\002\030\001\022\"\n\026use_allowed_labels_csv\030\005 \001"
  "(\010B\002\030\0012Z\n\003ext\022\034.mediapipe.CalculatorOpti"
  "ons\030\213\300\366\241\001 \001(\0132+.mediapipe.FilterDetectio"
  "nCalculatorOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto = {
  false, false, 458, descriptor_table_protodef_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto, "mediapipe/modules/objectron/calculators/filter_detection_calculator.proto", 
  &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto, file_level_enum_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto_getter() {
  return &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto(&descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto);
namespace mediapipe {

// ===================================================================

class FilterDetectionCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterDetectionCalculatorOptions>()._has_bits_);
  static void set_has_min_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fail_on_empty_labels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_empty_allowed_labels_means_allow_everything(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_detection_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_allowed_labels_csv(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

FilterDetectionCalculatorOptions::FilterDetectionCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.FilterDetectionCalculatorOptions)
}
FilterDetectionCalculatorOptions::FilterDetectionCalculatorOptions(const FilterDetectionCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_score_, &from.min_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_allowed_labels_csv_) -
    reinterpret_cast<char*>(&min_score_)) + sizeof(use_allowed_labels_csv_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.FilterDetectionCalculatorOptions)
}

void FilterDetectionCalculatorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_allowed_labels_csv_) -
    reinterpret_cast<char*>(&min_score_)) + sizeof(use_allowed_labels_csv_));
}

FilterDetectionCalculatorOptions::~FilterDetectionCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.FilterDetectionCalculatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterDetectionCalculatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilterDetectionCalculatorOptions::ArenaDtor(void* object) {
  FilterDetectionCalculatorOptions* _this = reinterpret_cast< FilterDetectionCalculatorOptions* >(object);
  (void)_this;
}
void FilterDetectionCalculatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterDetectionCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterDetectionCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.FilterDetectionCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&min_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_allowed_labels_csv_) -
        reinterpret_cast<char*>(&min_score_)) + sizeof(use_allowed_labels_csv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterDetectionCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_score(&has_bits);
          min_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_score(&has_bits);
          max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool fail_on_empty_labels = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fail_on_empty_labels(&has_bits);
          fail_on_empty_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_detection_vector = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_detection_vector(&has_bits);
          use_detection_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_allowed_labels_csv = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_allowed_labels_csv(&has_bits);
          use_allowed_labels_csv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool empty_allowed_labels_means_allow_everything = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_empty_allowed_labels_means_allow_everything(&has_bits);
          empty_allowed_labels_means_allow_everything_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterDetectionCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.FilterDetectionCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_score(), target);
  }

  // optional float max_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_score(), target);
  }

  // optional bool fail_on_empty_labels = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_fail_on_empty_labels(), target);
  }

  // optional bool use_detection_vector = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_detection_vector(), target);
  }

  // optional bool use_allowed_labels_csv = 5 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_allowed_labels_csv(), target);
  }

  // optional bool empty_allowed_labels_means_allow_everything = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_empty_allowed_labels_means_allow_everything(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.FilterDetectionCalculatorOptions)
  return target;
}

size_t FilterDetectionCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.FilterDetectionCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float min_score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool fail_on_empty_labels = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool empty_allowed_labels_means_allow_everything = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool use_detection_vector = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_allowed_labels_csv = 5 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterDetectionCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.FilterDetectionCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterDetectionCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterDetectionCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.FilterDetectionCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.FilterDetectionCalculatorOptions)
    MergeFrom(*source);
  }
}

void FilterDetectionCalculatorOptions::MergeFrom(const FilterDetectionCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.FilterDetectionCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      min_score_ = from.min_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_score_ = from.max_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      fail_on_empty_labels_ = from.fail_on_empty_labels_;
    }
    if (cached_has_bits & 0x00000008u) {
      empty_allowed_labels_means_allow_everything_ = from.empty_allowed_labels_means_allow_everything_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_detection_vector_ = from.use_detection_vector_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_allowed_labels_csv_ = from.use_allowed_labels_csv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FilterDetectionCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.FilterDetectionCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterDetectionCalculatorOptions::CopyFrom(const FilterDetectionCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.FilterDetectionCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterDetectionCalculatorOptions::IsInitialized() const {
  return true;
}

void FilterDetectionCalculatorOptions::InternalSwap(FilterDetectionCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterDetectionCalculatorOptions, use_allowed_labels_csv_)
      + sizeof(FilterDetectionCalculatorOptions::use_allowed_labels_csv_)
      - PROTOBUF_FIELD_OFFSET(FilterDetectionCalculatorOptions, min_score_)>(
          reinterpret_cast<char*>(&min_score_),
          reinterpret_cast<char*>(&other->min_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterDetectionCalculatorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fobjectron_2fcalculators_2ffilter_5fdetection_5fcalculator_2eproto[0]);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterDetectionCalculatorOptions::kExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::FilterDetectionCalculatorOptions >, 11, false >
  FilterDetectionCalculatorOptions::ext(kExtFieldNumber, ::mediapipe::FilterDetectionCalculatorOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::FilterDetectionCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::FilterDetectionCalculatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::FilterDetectionCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
