// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/objectron/calculators/object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto;
namespace mediapipe {
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class KeyPoint;
struct KeyPointDefaultTypeInternal;
extern KeyPointDefaultTypeInternal _KeyPoint_default_instance_;
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Skeleton;
struct SkeletonDefaultTypeInternal;
extern SkeletonDefaultTypeInternal _Skeleton_default_instance_;
class Skeletons;
struct SkeletonsDefaultTypeInternal;
extern SkeletonsDefaultTypeInternal _Skeletons_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::Edge* Arena::CreateMaybeMessage<::mediapipe::Edge>(Arena*);
template<> ::mediapipe::KeyPoint* Arena::CreateMaybeMessage<::mediapipe::KeyPoint>(Arena*);
template<> ::mediapipe::Object* Arena::CreateMaybeMessage<::mediapipe::Object>(Arena*);
template<> ::mediapipe::Skeleton* Arena::CreateMaybeMessage<::mediapipe::Skeleton>(Arena*);
template<> ::mediapipe::Skeletons* Arena::CreateMaybeMessage<::mediapipe::Skeletons>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum Object_Type : int {
  Object_Type_UNDEFINED_TYPE = 0,
  Object_Type_BOUNDING_BOX = 1,
  Object_Type_SKELETON = 2,
  Object_Type_Object_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Object_Type_Object_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Object_Type_IsValid(int value);
constexpr Object_Type Object_Type_Type_MIN = Object_Type_UNDEFINED_TYPE;
constexpr Object_Type Object_Type_Type_MAX = Object_Type_SKELETON;
constexpr int Object_Type_Type_ARRAYSIZE = Object_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_Type_descriptor();
template<typename T>
inline const std::string& Object_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Object_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Object_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Object_Type_descriptor(), enum_t_value);
}
inline bool Object_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Object_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Object_Type>(
    Object_Type_descriptor(), name, value);
}
enum Object_Method : int {
  Object_Method_UNKNOWN_METHOD = 0,
  Object_Method_ANNOTATION = 1,
  Object_Method_AUGMENTATION = 2,
  Object_Method_Object_Method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Object_Method_Object_Method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Object_Method_IsValid(int value);
constexpr Object_Method Object_Method_Method_MIN = Object_Method_UNKNOWN_METHOD;
constexpr Object_Method Object_Method_Method_MAX = Object_Method_AUGMENTATION;
constexpr int Object_Method_Method_ARRAYSIZE = Object_Method_Method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_Method_descriptor();
template<typename T>
inline const std::string& Object_Method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Object_Method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Object_Method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Object_Method_descriptor(), enum_t_value);
}
inline bool Object_Method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Object_Method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Object_Method>(
    Object_Method_descriptor(), name, value);
}
// ===================================================================

class KeyPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.KeyPoint) */ {
 public:
  inline KeyPoint() : KeyPoint(nullptr) {}
  ~KeyPoint() override;
  explicit constexpr KeyPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyPoint(const KeyPoint& from);
  KeyPoint(KeyPoint&& from) noexcept
    : KeyPoint() {
    *this = ::std::move(from);
  }

  inline KeyPoint& operator=(const KeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPoint& operator=(KeyPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyPoint* internal_default_instance() {
    return reinterpret_cast<const KeyPoint*>(
               &_KeyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyPoint& a, KeyPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPoint* New() const final {
    return CreateMaybeMessage<KeyPoint>(nullptr);
  }

  KeyPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyPoint& from);
  void MergeFrom(const KeyPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.KeyPoint";
  }
  protected:
  explicit KeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kConfidenceRadiusFieldNumber = 4,
    kHiddenFieldNumber = 6,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float confidence_radius = 4;
  void clear_confidence_radius();
  float confidence_radius() const;
  void set_confidence_radius(float value);
  private:
  float _internal_confidence_radius() const;
  void _internal_set_confidence_radius(float value);
  public:

  // bool hidden = 6;
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.KeyPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float x_;
  float y_;
  float z_;
  float confidence_radius_;
  bool hidden_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto;
};
// -------------------------------------------------------------------

class Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  ~Object() override;
  explicit constexpr Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Object_Type Type;
  static constexpr Type UNDEFINED_TYPE =
    Object_Type_UNDEFINED_TYPE;
  static constexpr Type BOUNDING_BOX =
    Object_Type_BOUNDING_BOX;
  static constexpr Type SKELETON =
    Object_Type_SKELETON;
  static inline bool Type_IsValid(int value) {
    return Object_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Object_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Object_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Object_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Object_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Object_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Object_Type_Parse(name, value);
  }

  typedef Object_Method Method;
  static constexpr Method UNKNOWN_METHOD =
    Object_Method_UNKNOWN_METHOD;
  static constexpr Method ANNOTATION =
    Object_Method_ANNOTATION;
  static constexpr Method AUGMENTATION =
    Object_Method_AUGMENTATION;
  static inline bool Method_IsValid(int value) {
    return Object_Method_IsValid(value);
  }
  static constexpr Method Method_MIN =
    Object_Method_Method_MIN;
  static constexpr Method Method_MAX =
    Object_Method_Method_MAX;
  static constexpr int Method_ARRAYSIZE =
    Object_Method_Method_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Method_descriptor() {
    return Object_Method_descriptor();
  }
  template<typename T>
  static inline const std::string& Method_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Method>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Method_Name.");
    return Object_Method_Name(enum_t_value);
  }
  static inline bool Method_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Method* value) {
    return Object_Method_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 4,
    kTranslationFieldNumber = 5,
    kScaleFieldNumber = 6,
    kKeypointsFieldNumber = 7,
    kCategoryFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kMethodFieldNumber = 8,
  };
  // repeated float rotation = 4;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  float _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotation() const;
  void _internal_add_rotation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotation();
  public:
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotation();

  // repeated float translation = 5;
  int translation_size() const;
  private:
  int _internal_translation_size() const;
  public:
  void clear_translation();
  private:
  float _internal_translation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_translation() const;
  void _internal_add_translation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_translation();
  public:
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      translation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_translation();

  // repeated float scale = 6;
  int scale_size() const;
  private:
  int _internal_scale_size() const;
  public:
  void clear_scale();
  private:
  float _internal_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scale() const;
  void _internal_add_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scale();
  public:
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scale();

  // repeated .mediapipe.KeyPoint keypoints = 7;
  int keypoints_size() const;
  private:
  int _internal_keypoints_size() const;
  public:
  void clear_keypoints();
  ::mediapipe::KeyPoint* mutable_keypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >*
      mutable_keypoints();
  private:
  const ::mediapipe::KeyPoint& _internal_keypoints(int index) const;
  ::mediapipe::KeyPoint* _internal_add_keypoints();
  public:
  const ::mediapipe::KeyPoint& keypoints(int index) const;
  ::mediapipe::KeyPoint* add_keypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >&
      keypoints() const;

  // string category = 2;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .mediapipe.Object.Type type = 3;
  void clear_type();
  ::mediapipe::Object_Type type() const;
  void set_type(::mediapipe::Object_Type value);
  private:
  ::mediapipe::Object_Type _internal_type() const;
  void _internal_set_type(::mediapipe::Object_Type value);
  public:

  // .mediapipe.Object.Method method = 8;
  void clear_method();
  ::mediapipe::Object_Method method() const;
  void set_method(::mediapipe::Object_Method value);
  private:
  ::mediapipe::Object_Method _internal_method() const;
  void _internal_set_method(::mediapipe::Object_Method value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > translation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scale_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint > keypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto;
};
// -------------------------------------------------------------------

class Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit constexpr Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kSinkFieldNumber = 2,
  };
  // int32 source = 1;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sink = 2;
  void clear_sink();
  ::PROTOBUF_NAMESPACE_ID::int32 sink() const;
  void set_sink(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sink() const;
  void _internal_set_sink(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  ::PROTOBUF_NAMESPACE_ID::int32 sink_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto;
};
// -------------------------------------------------------------------

class Skeleton PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Skeleton) */ {
 public:
  inline Skeleton() : Skeleton(nullptr) {}
  ~Skeleton() override;
  explicit constexpr Skeleton(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Skeleton(const Skeleton& from);
  Skeleton(Skeleton&& from) noexcept
    : Skeleton() {
    *this = ::std::move(from);
  }

  inline Skeleton& operator=(const Skeleton& from) {
    CopyFrom(from);
    return *this;
  }
  inline Skeleton& operator=(Skeleton&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Skeleton& default_instance() {
    return *internal_default_instance();
  }
  static inline const Skeleton* internal_default_instance() {
    return reinterpret_cast<const Skeleton*>(
               &_Skeleton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Skeleton& a, Skeleton& b) {
    a.Swap(&b);
  }
  inline void Swap(Skeleton* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Skeleton* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Skeleton* New() const final {
    return CreateMaybeMessage<Skeleton>(nullptr);
  }

  Skeleton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Skeleton>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Skeleton& from);
  void MergeFrom(const Skeleton& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Skeleton* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Skeleton";
  }
  protected:
  explicit Skeleton(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsFieldNumber = 3,
    kEdgesFieldNumber = 4,
    kCategoryFieldNumber = 2,
    kReferenceKeypointFieldNumber = 1,
  };
  // repeated .mediapipe.KeyPoint keypoints = 3;
  int keypoints_size() const;
  private:
  int _internal_keypoints_size() const;
  public:
  void clear_keypoints();
  ::mediapipe::KeyPoint* mutable_keypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >*
      mutable_keypoints();
  private:
  const ::mediapipe::KeyPoint& _internal_keypoints(int index) const;
  ::mediapipe::KeyPoint* _internal_add_keypoints();
  public:
  const ::mediapipe::KeyPoint& keypoints(int index) const;
  ::mediapipe::KeyPoint* add_keypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >&
      keypoints() const;

  // repeated .mediapipe.Edge edges = 4;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::mediapipe::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Edge >*
      mutable_edges();
  private:
  const ::mediapipe::Edge& _internal_edges(int index) const;
  ::mediapipe::Edge* _internal_add_edges();
  public:
  const ::mediapipe::Edge& edges(int index) const;
  ::mediapipe::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Edge >&
      edges() const;

  // string category = 2;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // int32 reference_keypoint = 1;
  void clear_reference_keypoint();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_keypoint() const;
  void set_reference_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reference_keypoint() const;
  void _internal_set_reference_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Skeleton)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint > keypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_keypoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto;
};
// -------------------------------------------------------------------

class Skeletons PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Skeletons) */ {
 public:
  inline Skeletons() : Skeletons(nullptr) {}
  ~Skeletons() override;
  explicit constexpr Skeletons(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Skeletons(const Skeletons& from);
  Skeletons(Skeletons&& from) noexcept
    : Skeletons() {
    *this = ::std::move(from);
  }

  inline Skeletons& operator=(const Skeletons& from) {
    CopyFrom(from);
    return *this;
  }
  inline Skeletons& operator=(Skeletons&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Skeletons& default_instance() {
    return *internal_default_instance();
  }
  static inline const Skeletons* internal_default_instance() {
    return reinterpret_cast<const Skeletons*>(
               &_Skeletons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Skeletons& a, Skeletons& b) {
    a.Swap(&b);
  }
  inline void Swap(Skeletons* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Skeletons* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Skeletons* New() const final {
    return CreateMaybeMessage<Skeletons>(nullptr);
  }

  Skeletons* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Skeletons>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Skeletons& from);
  void MergeFrom(const Skeletons& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Skeletons* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Skeletons";
  }
  protected:
  explicit Skeletons(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // repeated .mediapipe.Skeleton object = 1;
  int object_size() const;
  private:
  int _internal_object_size() const;
  public:
  void clear_object();
  ::mediapipe::Skeleton* mutable_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Skeleton >*
      mutable_object();
  private:
  const ::mediapipe::Skeleton& _internal_object(int index) const;
  ::mediapipe::Skeleton* _internal_add_object();
  public:
  const ::mediapipe::Skeleton& object(int index) const;
  ::mediapipe::Skeleton* add_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Skeleton >&
      object() const;

  // @@protoc_insertion_point(class_scope:mediapipe.Skeletons)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Skeleton > object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyPoint

// float x = 1;
inline void KeyPoint::clear_x() {
  x_ = 0;
}
inline float KeyPoint::_internal_x() const {
  return x_;
}
inline float KeyPoint::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.KeyPoint.x)
  return _internal_x();
}
inline void KeyPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void KeyPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.KeyPoint.x)
}

// float y = 2;
inline void KeyPoint::clear_y() {
  y_ = 0;
}
inline float KeyPoint::_internal_y() const {
  return y_;
}
inline float KeyPoint::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.KeyPoint.y)
  return _internal_y();
}
inline void KeyPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void KeyPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.KeyPoint.y)
}

// float z = 3;
inline void KeyPoint::clear_z() {
  z_ = 0;
}
inline float KeyPoint::_internal_z() const {
  return z_;
}
inline float KeyPoint::z() const {
  // @@protoc_insertion_point(field_get:mediapipe.KeyPoint.z)
  return _internal_z();
}
inline void KeyPoint::_internal_set_z(float value) {
  
  z_ = value;
}
inline void KeyPoint::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mediapipe.KeyPoint.z)
}

// float confidence_radius = 4;
inline void KeyPoint::clear_confidence_radius() {
  confidence_radius_ = 0;
}
inline float KeyPoint::_internal_confidence_radius() const {
  return confidence_radius_;
}
inline float KeyPoint::confidence_radius() const {
  // @@protoc_insertion_point(field_get:mediapipe.KeyPoint.confidence_radius)
  return _internal_confidence_radius();
}
inline void KeyPoint::_internal_set_confidence_radius(float value) {
  
  confidence_radius_ = value;
}
inline void KeyPoint::set_confidence_radius(float value) {
  _internal_set_confidence_radius(value);
  // @@protoc_insertion_point(field_set:mediapipe.KeyPoint.confidence_radius)
}

// string name = 5;
inline void KeyPoint::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& KeyPoint::name() const {
  // @@protoc_insertion_point(field_get:mediapipe.KeyPoint.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void KeyPoint::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.KeyPoint.name)
}
inline std::string* KeyPoint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mediapipe.KeyPoint.name)
  return _internal_mutable_name();
}
inline const std::string& KeyPoint::_internal_name() const {
  return name_.Get();
}
inline void KeyPoint::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* KeyPoint::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyPoint::release_name() {
  // @@protoc_insertion_point(field_release:mediapipe.KeyPoint.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyPoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.KeyPoint.name)
}

// bool hidden = 6;
inline void KeyPoint::clear_hidden() {
  hidden_ = false;
}
inline bool KeyPoint::_internal_hidden() const {
  return hidden_;
}
inline bool KeyPoint::hidden() const {
  // @@protoc_insertion_point(field_get:mediapipe.KeyPoint.hidden)
  return _internal_hidden();
}
inline void KeyPoint::_internal_set_hidden(bool value) {
  
  hidden_ = value;
}
inline void KeyPoint::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:mediapipe.KeyPoint.hidden)
}

// -------------------------------------------------------------------

// Object

// int32 id = 1;
inline void Object::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.id)
  return _internal_id();
}
inline void Object::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Object::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.Object.id)
}

// string category = 2;
inline void Object::clear_category() {
  category_.ClearToEmpty();
}
inline const std::string& Object::category() const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Object::set_category(ArgT0&& arg0, ArgT... args) {
 
 category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.Object.category)
}
inline std::string* Object::mutable_category() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Object.category)
  return _internal_mutable_category();
}
inline const std::string& Object::_internal_category() const {
  return category_.Get();
}
inline void Object::_internal_set_category(const std::string& value) {
  
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Object::_internal_mutable_category() {
  
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_category() {
  // @@protoc_insertion_point(field_release:mediapipe.Object.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Object.category)
}

// .mediapipe.Object.Type type = 3;
inline void Object::clear_type() {
  type_ = 0;
}
inline ::mediapipe::Object_Type Object::_internal_type() const {
  return static_cast< ::mediapipe::Object_Type >(type_);
}
inline ::mediapipe::Object_Type Object::type() const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.type)
  return _internal_type();
}
inline void Object::_internal_set_type(::mediapipe::Object_Type value) {
  
  type_ = value;
}
inline void Object::set_type(::mediapipe::Object_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.Object.type)
}

// repeated float rotation = 4;
inline int Object::_internal_rotation_size() const {
  return rotation_.size();
}
inline int Object::rotation_size() const {
  return _internal_rotation_size();
}
inline void Object::clear_rotation() {
  rotation_.Clear();
}
inline float Object::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline float Object::rotation(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.rotation)
  return _internal_rotation(index);
}
inline void Object::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.Object.rotation)
}
inline void Object::_internal_add_rotation(float value) {
  rotation_.Add(value);
}
inline void Object::add_rotation(float value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:mediapipe.Object.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Object::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Object::rotation() const {
  // @@protoc_insertion_point(field_list:mediapipe.Object.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Object::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Object::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Object.rotation)
  return _internal_mutable_rotation();
}

// repeated float translation = 5;
inline int Object::_internal_translation_size() const {
  return translation_.size();
}
inline int Object::translation_size() const {
  return _internal_translation_size();
}
inline void Object::clear_translation() {
  translation_.Clear();
}
inline float Object::_internal_translation(int index) const {
  return translation_.Get(index);
}
inline float Object::translation(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.translation)
  return _internal_translation(index);
}
inline void Object::set_translation(int index, float value) {
  translation_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.Object.translation)
}
inline void Object::_internal_add_translation(float value) {
  translation_.Add(value);
}
inline void Object::add_translation(float value) {
  _internal_add_translation(value);
  // @@protoc_insertion_point(field_add:mediapipe.Object.translation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Object::_internal_translation() const {
  return translation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Object::translation() const {
  // @@protoc_insertion_point(field_list:mediapipe.Object.translation)
  return _internal_translation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Object::_internal_mutable_translation() {
  return &translation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Object::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Object.translation)
  return _internal_mutable_translation();
}

// repeated float scale = 6;
inline int Object::_internal_scale_size() const {
  return scale_.size();
}
inline int Object::scale_size() const {
  return _internal_scale_size();
}
inline void Object::clear_scale() {
  scale_.Clear();
}
inline float Object::_internal_scale(int index) const {
  return scale_.Get(index);
}
inline float Object::scale(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.scale)
  return _internal_scale(index);
}
inline void Object::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.Object.scale)
}
inline void Object::_internal_add_scale(float value) {
  scale_.Add(value);
}
inline void Object::add_scale(float value) {
  _internal_add_scale(value);
  // @@protoc_insertion_point(field_add:mediapipe.Object.scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Object::_internal_scale() const {
  return scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Object::scale() const {
  // @@protoc_insertion_point(field_list:mediapipe.Object.scale)
  return _internal_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Object::_internal_mutable_scale() {
  return &scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Object::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Object.scale)
  return _internal_mutable_scale();
}

// repeated .mediapipe.KeyPoint keypoints = 7;
inline int Object::_internal_keypoints_size() const {
  return keypoints_.size();
}
inline int Object::keypoints_size() const {
  return _internal_keypoints_size();
}
inline void Object::clear_keypoints() {
  keypoints_.Clear();
}
inline ::mediapipe::KeyPoint* Object::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Object.keypoints)
  return keypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >*
Object::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Object.keypoints)
  return &keypoints_;
}
inline const ::mediapipe::KeyPoint& Object::_internal_keypoints(int index) const {
  return keypoints_.Get(index);
}
inline const ::mediapipe::KeyPoint& Object::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.keypoints)
  return _internal_keypoints(index);
}
inline ::mediapipe::KeyPoint* Object::_internal_add_keypoints() {
  return keypoints_.Add();
}
inline ::mediapipe::KeyPoint* Object::add_keypoints() {
  // @@protoc_insertion_point(field_add:mediapipe.Object.keypoints)
  return _internal_add_keypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >&
Object::keypoints() const {
  // @@protoc_insertion_point(field_list:mediapipe.Object.keypoints)
  return keypoints_;
}

// .mediapipe.Object.Method method = 8;
inline void Object::clear_method() {
  method_ = 0;
}
inline ::mediapipe::Object_Method Object::_internal_method() const {
  return static_cast< ::mediapipe::Object_Method >(method_);
}
inline ::mediapipe::Object_Method Object::method() const {
  // @@protoc_insertion_point(field_get:mediapipe.Object.method)
  return _internal_method();
}
inline void Object::_internal_set_method(::mediapipe::Object_Method value) {
  
  method_ = value;
}
inline void Object::set_method(::mediapipe::Object_Method value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:mediapipe.Object.method)
}

// -------------------------------------------------------------------

// Edge

// int32 source = 1;
inline void Edge::clear_source() {
  source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Edge::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Edge::source() const {
  // @@protoc_insertion_point(field_get:mediapipe.Edge.source)
  return _internal_source();
}
inline void Edge::_internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_ = value;
}
inline void Edge::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:mediapipe.Edge.source)
}

// int32 sink = 2;
inline void Edge::clear_sink() {
  sink_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Edge::_internal_sink() const {
  return sink_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Edge::sink() const {
  // @@protoc_insertion_point(field_get:mediapipe.Edge.sink)
  return _internal_sink();
}
inline void Edge::_internal_set_sink(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sink_ = value;
}
inline void Edge::set_sink(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sink(value);
  // @@protoc_insertion_point(field_set:mediapipe.Edge.sink)
}

// -------------------------------------------------------------------

// Skeleton

// int32 reference_keypoint = 1;
inline void Skeleton::clear_reference_keypoint() {
  reference_keypoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Skeleton::_internal_reference_keypoint() const {
  return reference_keypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Skeleton::reference_keypoint() const {
  // @@protoc_insertion_point(field_get:mediapipe.Skeleton.reference_keypoint)
  return _internal_reference_keypoint();
}
inline void Skeleton::_internal_set_reference_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reference_keypoint_ = value;
}
inline void Skeleton::set_reference_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reference_keypoint(value);
  // @@protoc_insertion_point(field_set:mediapipe.Skeleton.reference_keypoint)
}

// string category = 2;
inline void Skeleton::clear_category() {
  category_.ClearToEmpty();
}
inline const std::string& Skeleton::category() const {
  // @@protoc_insertion_point(field_get:mediapipe.Skeleton.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Skeleton::set_category(ArgT0&& arg0, ArgT... args) {
 
 category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.Skeleton.category)
}
inline std::string* Skeleton::mutable_category() {
  // @@protoc_insertion_point(field_mutable:mediapipe.Skeleton.category)
  return _internal_mutable_category();
}
inline const std::string& Skeleton::_internal_category() const {
  return category_.Get();
}
inline void Skeleton::_internal_set_category(const std::string& value) {
  
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Skeleton::_internal_mutable_category() {
  
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Skeleton::release_category() {
  // @@protoc_insertion_point(field_release:mediapipe.Skeleton.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Skeleton::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.Skeleton.category)
}

// repeated .mediapipe.KeyPoint keypoints = 3;
inline int Skeleton::_internal_keypoints_size() const {
  return keypoints_.size();
}
inline int Skeleton::keypoints_size() const {
  return _internal_keypoints_size();
}
inline void Skeleton::clear_keypoints() {
  keypoints_.Clear();
}
inline ::mediapipe::KeyPoint* Skeleton::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Skeleton.keypoints)
  return keypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >*
Skeleton::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Skeleton.keypoints)
  return &keypoints_;
}
inline const ::mediapipe::KeyPoint& Skeleton::_internal_keypoints(int index) const {
  return keypoints_.Get(index);
}
inline const ::mediapipe::KeyPoint& Skeleton::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Skeleton.keypoints)
  return _internal_keypoints(index);
}
inline ::mediapipe::KeyPoint* Skeleton::_internal_add_keypoints() {
  return keypoints_.Add();
}
inline ::mediapipe::KeyPoint* Skeleton::add_keypoints() {
  // @@protoc_insertion_point(field_add:mediapipe.Skeleton.keypoints)
  return _internal_add_keypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::KeyPoint >&
Skeleton::keypoints() const {
  // @@protoc_insertion_point(field_list:mediapipe.Skeleton.keypoints)
  return keypoints_;
}

// repeated .mediapipe.Edge edges = 4;
inline int Skeleton::_internal_edges_size() const {
  return edges_.size();
}
inline int Skeleton::edges_size() const {
  return _internal_edges_size();
}
inline void Skeleton::clear_edges() {
  edges_.Clear();
}
inline ::mediapipe::Edge* Skeleton::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Skeleton.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Edge >*
Skeleton::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Skeleton.edges)
  return &edges_;
}
inline const ::mediapipe::Edge& Skeleton::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::mediapipe::Edge& Skeleton::edges(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Skeleton.edges)
  return _internal_edges(index);
}
inline ::mediapipe::Edge* Skeleton::_internal_add_edges() {
  return edges_.Add();
}
inline ::mediapipe::Edge* Skeleton::add_edges() {
  // @@protoc_insertion_point(field_add:mediapipe.Skeleton.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Edge >&
Skeleton::edges() const {
  // @@protoc_insertion_point(field_list:mediapipe.Skeleton.edges)
  return edges_;
}

// -------------------------------------------------------------------

// Skeletons

// repeated .mediapipe.Skeleton object = 1;
inline int Skeletons::_internal_object_size() const {
  return object_.size();
}
inline int Skeletons::object_size() const {
  return _internal_object_size();
}
inline void Skeletons::clear_object() {
  object_.Clear();
}
inline ::mediapipe::Skeleton* Skeletons::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.Skeletons.object)
  return object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Skeleton >*
Skeletons::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.Skeletons.object)
  return &object_;
}
inline const ::mediapipe::Skeleton& Skeletons::_internal_object(int index) const {
  return object_.Get(index);
}
inline const ::mediapipe::Skeleton& Skeletons::object(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.Skeletons.object)
  return _internal_object(index);
}
inline ::mediapipe::Skeleton* Skeletons::_internal_add_object() {
  return object_.Add();
}
inline ::mediapipe::Skeleton* Skeletons::add_object() {
  // @@protoc_insertion_point(field_add:mediapipe.Skeletons.object)
  return _internal_add_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Skeleton >&
Skeletons::object() const {
  // @@protoc_insertion_point(field_list:mediapipe.Skeletons.object)
  return object_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::Object_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::Object_Type>() {
  return ::mediapipe::Object_Type_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::Object_Method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::Object_Method>() {
  return ::mediapipe::Object_Method_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2fobject_2eproto
