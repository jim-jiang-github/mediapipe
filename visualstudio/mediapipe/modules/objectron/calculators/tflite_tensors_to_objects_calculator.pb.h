// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/objectron/calculators/tflite_tensors_to_objects_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2ftflite_5ftensors_5fto_5fobjects_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2ftflite_5ftensors_5fto_5fobjects_5fcalculator_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
#include "mediapipe/modules/objectron/calculators/belief_decoder_config.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fobjectron_2fcalculators_2ftflite_5ftensors_5fto_5fobjects_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2ftflite_5ftensors_5fto_5fobjects_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fobjectron_2fcalculators_2ftflite_5ftensors_5fto_5fobjects_5fcalculator_2eproto;
namespace mediapipe {
class TfLiteTensorsToObjectsCalculatorOptions;
struct TfLiteTensorsToObjectsCalculatorOptionsDefaultTypeInternal;
extern TfLiteTensorsToObjectsCalculatorOptionsDefaultTypeInternal _TfLiteTensorsToObjectsCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::TfLiteTensorsToObjectsCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::TfLiteTensorsToObjectsCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class TfLiteTensorsToObjectsCalculatorOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TfLiteTensorsToObjectsCalculatorOptions) */ {
 public:
  inline TfLiteTensorsToObjectsCalculatorOptions() : TfLiteTensorsToObjectsCalculatorOptions(nullptr) {}
  ~TfLiteTensorsToObjectsCalculatorOptions() override;
  explicit constexpr TfLiteTensorsToObjectsCalculatorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfLiteTensorsToObjectsCalculatorOptions(const TfLiteTensorsToObjectsCalculatorOptions& from);
  TfLiteTensorsToObjectsCalculatorOptions(TfLiteTensorsToObjectsCalculatorOptions&& from) noexcept
    : TfLiteTensorsToObjectsCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline TfLiteTensorsToObjectsCalculatorOptions& operator=(const TfLiteTensorsToObjectsCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfLiteTensorsToObjectsCalculatorOptions& operator=(TfLiteTensorsToObjectsCalculatorOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfLiteTensorsToObjectsCalculatorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfLiteTensorsToObjectsCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const TfLiteTensorsToObjectsCalculatorOptions*>(
               &_TfLiteTensorsToObjectsCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfLiteTensorsToObjectsCalculatorOptions& a, TfLiteTensorsToObjectsCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TfLiteTensorsToObjectsCalculatorOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfLiteTensorsToObjectsCalculatorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TfLiteTensorsToObjectsCalculatorOptions* New() const final {
    return CreateMaybeMessage<TfLiteTensorsToObjectsCalculatorOptions>(nullptr);
  }

  TfLiteTensorsToObjectsCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TfLiteTensorsToObjectsCalculatorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TfLiteTensorsToObjectsCalculatorOptions& from);
  void MergeFrom(const TfLiteTensorsToObjectsCalculatorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfLiteTensorsToObjectsCalculatorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TfLiteTensorsToObjectsCalculatorOptions";
  }
  protected:
  explicit TfLiteTensorsToObjectsCalculatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecoderConfigFieldNumber = 4,
    kNumClassesFieldNumber = 1,
    kNumKeypointsFieldNumber = 2,
    kNormalizedPrincipalPointXFieldNumber = 7,
    kNormalizedPrincipalPointYFieldNumber = 8,
    kNormalizedFocalYFieldNumber = 6,
    kNumValuesPerKeypointFieldNumber = 3,
    kNormalizedFocalXFieldNumber = 5,
  };
  // optional .mediapipe.BeliefDecoderConfig decoder_config = 4;
  bool has_decoder_config() const;
  private:
  bool _internal_has_decoder_config() const;
  public:
  void clear_decoder_config();
  const ::mediapipe::BeliefDecoderConfig& decoder_config() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::BeliefDecoderConfig* release_decoder_config();
  ::mediapipe::BeliefDecoderConfig* mutable_decoder_config();
  void set_allocated_decoder_config(::mediapipe::BeliefDecoderConfig* decoder_config);
  private:
  const ::mediapipe::BeliefDecoderConfig& _internal_decoder_config() const;
  ::mediapipe::BeliefDecoderConfig* _internal_mutable_decoder_config();
  public:
  void unsafe_arena_set_allocated_decoder_config(
      ::mediapipe::BeliefDecoderConfig* decoder_config);
  ::mediapipe::BeliefDecoderConfig* unsafe_arena_release_decoder_config();

  // optional int32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes() const;
  void set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_classes() const;
  void _internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_keypoints = 2;
  bool has_num_keypoints() const;
  private:
  bool _internal_has_num_keypoints() const;
  public:
  void clear_num_keypoints();
  ::PROTOBUF_NAMESPACE_ID::int32 num_keypoints() const;
  void set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_keypoints() const;
  void _internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float normalized_principal_point_x = 7 [default = 0];
  bool has_normalized_principal_point_x() const;
  private:
  bool _internal_has_normalized_principal_point_x() const;
  public:
  void clear_normalized_principal_point_x();
  float normalized_principal_point_x() const;
  void set_normalized_principal_point_x(float value);
  private:
  float _internal_normalized_principal_point_x() const;
  void _internal_set_normalized_principal_point_x(float value);
  public:

  // optional float normalized_principal_point_y = 8 [default = 0];
  bool has_normalized_principal_point_y() const;
  private:
  bool _internal_has_normalized_principal_point_y() const;
  public:
  void clear_normalized_principal_point_y();
  float normalized_principal_point_y() const;
  void set_normalized_principal_point_y(float value);
  private:
  float _internal_normalized_principal_point_y() const;
  void _internal_set_normalized_principal_point_y(float value);
  public:

  // optional float normalized_focal_y = 6 [default = 1];
  bool has_normalized_focal_y() const;
  private:
  bool _internal_has_normalized_focal_y() const;
  public:
  void clear_normalized_focal_y();
  float normalized_focal_y() const;
  void set_normalized_focal_y(float value);
  private:
  float _internal_normalized_focal_y() const;
  void _internal_set_normalized_focal_y(float value);
  public:

  // optional int32 num_values_per_keypoint = 3 [default = 2];
  bool has_num_values_per_keypoint() const;
  private:
  bool _internal_has_num_values_per_keypoint() const;
  public:
  void clear_num_values_per_keypoint();
  ::PROTOBUF_NAMESPACE_ID::int32 num_values_per_keypoint() const;
  void set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_values_per_keypoint() const;
  void _internal_set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float normalized_focal_x = 5 [default = 1];
  bool has_normalized_focal_x() const;
  private:
  bool _internal_has_normalized_focal_x() const;
  public:
  void clear_normalized_focal_x();
  float normalized_focal_x() const;
  void set_normalized_focal_x(float value);
  private:
  float _internal_normalized_focal_x() const;
  void _internal_set_normalized_focal_x(float value);
  public:

  static const int kExtFieldNumber = 263667646;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::TfLiteTensorsToObjectsCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.TfLiteTensorsToObjectsCalculatorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::BeliefDecoderConfig* decoder_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_classes_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_keypoints_;
  float normalized_principal_point_x_;
  float normalized_principal_point_y_;
  float normalized_focal_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_values_per_keypoint_;
  float normalized_focal_x_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fobjectron_2fcalculators_2ftflite_5ftensors_5fto_5fobjects_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfLiteTensorsToObjectsCalculatorOptions

// optional int32 num_classes = 1;
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_num_classes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::clear_num_classes() {
  num_classes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToObjectsCalculatorOptions::_internal_num_classes() const {
  return num_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToObjectsCalculatorOptions::num_classes() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.num_classes)
  return _internal_num_classes();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::_internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_classes_ = value;
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_num_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.num_classes)
}

// optional int32 num_keypoints = 2;
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_num_keypoints() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_num_keypoints() const {
  return _internal_has_num_keypoints();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::clear_num_keypoints() {
  num_keypoints_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToObjectsCalculatorOptions::_internal_num_keypoints() const {
  return num_keypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToObjectsCalculatorOptions::num_keypoints() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.num_keypoints)
  return _internal_num_keypoints();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::_internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_keypoints_ = value;
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_num_keypoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_keypoints(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.num_keypoints)
}

// optional int32 num_values_per_keypoint = 3 [default = 2];
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_num_values_per_keypoint() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_num_values_per_keypoint() const {
  return _internal_has_num_values_per_keypoint();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::clear_num_values_per_keypoint() {
  num_values_per_keypoint_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToObjectsCalculatorOptions::_internal_num_values_per_keypoint() const {
  return num_values_per_keypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TfLiteTensorsToObjectsCalculatorOptions::num_values_per_keypoint() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.num_values_per_keypoint)
  return _internal_num_values_per_keypoint();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::_internal_set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_values_per_keypoint_ = value;
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_num_values_per_keypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_values_per_keypoint(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.num_values_per_keypoint)
}

// optional .mediapipe.BeliefDecoderConfig decoder_config = 4;
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_decoder_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || decoder_config_ != nullptr);
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_decoder_config() const {
  return _internal_has_decoder_config();
}
inline const ::mediapipe::BeliefDecoderConfig& TfLiteTensorsToObjectsCalculatorOptions::_internal_decoder_config() const {
  const ::mediapipe::BeliefDecoderConfig* p = decoder_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::BeliefDecoderConfig&>(
      ::mediapipe::_BeliefDecoderConfig_default_instance_);
}
inline const ::mediapipe::BeliefDecoderConfig& TfLiteTensorsToObjectsCalculatorOptions::decoder_config() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.decoder_config)
  return _internal_decoder_config();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::unsafe_arena_set_allocated_decoder_config(
    ::mediapipe::BeliefDecoderConfig* decoder_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_config_);
  }
  decoder_config_ = decoder_config;
  if (decoder_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.decoder_config)
}
inline ::mediapipe::BeliefDecoderConfig* TfLiteTensorsToObjectsCalculatorOptions::release_decoder_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::BeliefDecoderConfig* temp = decoder_config_;
  decoder_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::BeliefDecoderConfig* TfLiteTensorsToObjectsCalculatorOptions::unsafe_arena_release_decoder_config() {
  // @@protoc_insertion_point(field_release:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.decoder_config)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::BeliefDecoderConfig* temp = decoder_config_;
  decoder_config_ = nullptr;
  return temp;
}
inline ::mediapipe::BeliefDecoderConfig* TfLiteTensorsToObjectsCalculatorOptions::_internal_mutable_decoder_config() {
  _has_bits_[0] |= 0x00000001u;
  if (decoder_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::BeliefDecoderConfig>(GetArena());
    decoder_config_ = p;
  }
  return decoder_config_;
}
inline ::mediapipe::BeliefDecoderConfig* TfLiteTensorsToObjectsCalculatorOptions::mutable_decoder_config() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.decoder_config)
  return _internal_mutable_decoder_config();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_allocated_decoder_config(::mediapipe::BeliefDecoderConfig* decoder_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_config_);
  }
  if (decoder_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_config)->GetArena();
    if (message_arena != submessage_arena) {
      decoder_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decoder_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  decoder_config_ = decoder_config;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.decoder_config)
}

// optional float normalized_focal_x = 5 [default = 1];
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_normalized_focal_x() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_normalized_focal_x() const {
  return _internal_has_normalized_focal_x();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::clear_normalized_focal_x() {
  normalized_focal_x_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::_internal_normalized_focal_x() const {
  return normalized_focal_x_;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::normalized_focal_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_focal_x)
  return _internal_normalized_focal_x();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::_internal_set_normalized_focal_x(float value) {
  _has_bits_[0] |= 0x00000080u;
  normalized_focal_x_ = value;
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_normalized_focal_x(float value) {
  _internal_set_normalized_focal_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_focal_x)
}

// optional float normalized_focal_y = 6 [default = 1];
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_normalized_focal_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_normalized_focal_y() const {
  return _internal_has_normalized_focal_y();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::clear_normalized_focal_y() {
  normalized_focal_y_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::_internal_normalized_focal_y() const {
  return normalized_focal_y_;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::normalized_focal_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_focal_y)
  return _internal_normalized_focal_y();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::_internal_set_normalized_focal_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  normalized_focal_y_ = value;
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_normalized_focal_y(float value) {
  _internal_set_normalized_focal_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_focal_y)
}

// optional float normalized_principal_point_x = 7 [default = 0];
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_normalized_principal_point_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_normalized_principal_point_x() const {
  return _internal_has_normalized_principal_point_x();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::clear_normalized_principal_point_x() {
  normalized_principal_point_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::_internal_normalized_principal_point_x() const {
  return normalized_principal_point_x_;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::normalized_principal_point_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_principal_point_x)
  return _internal_normalized_principal_point_x();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::_internal_set_normalized_principal_point_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  normalized_principal_point_x_ = value;
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_normalized_principal_point_x(float value) {
  _internal_set_normalized_principal_point_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_principal_point_x)
}

// optional float normalized_principal_point_y = 8 [default = 0];
inline bool TfLiteTensorsToObjectsCalculatorOptions::_internal_has_normalized_principal_point_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TfLiteTensorsToObjectsCalculatorOptions::has_normalized_principal_point_y() const {
  return _internal_has_normalized_principal_point_y();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::clear_normalized_principal_point_y() {
  normalized_principal_point_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::_internal_normalized_principal_point_y() const {
  return normalized_principal_point_y_;
}
inline float TfLiteTensorsToObjectsCalculatorOptions::normalized_principal_point_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_principal_point_y)
  return _internal_normalized_principal_point_y();
}
inline void TfLiteTensorsToObjectsCalculatorOptions::_internal_set_normalized_principal_point_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  normalized_principal_point_y_ = value;
}
inline void TfLiteTensorsToObjectsCalculatorOptions::set_normalized_principal_point_y(float value) {
  _internal_set_normalized_principal_point_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.TfLiteTensorsToObjectsCalculatorOptions.normalized_principal_point_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fobjectron_2fcalculators_2ftflite_5ftensors_5fto_5fobjects_5fcalculator_2eproto
