// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/box_detector.proto

#include "mediapipe/util/tracking/box_detector.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr BoxDetectorOptions_ImageQuerySettings::BoxDetectorOptions_ImageQuerySettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pyramid_bottom_size_(640)
  , pyramid_scale_factor_(1.2f)
  , max_pyramid_levels_(4)
  , max_features_(500){}
struct BoxDetectorOptions_ImageQuerySettingsDefaultTypeInternal {
  constexpr BoxDetectorOptions_ImageQuerySettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxDetectorOptions_ImageQuerySettingsDefaultTypeInternal() {}
  union {
    BoxDetectorOptions_ImageQuerySettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxDetectorOptions_ImageQuerySettingsDefaultTypeInternal _BoxDetectorOptions_ImageQuerySettings_default_instance_;
constexpr BoxDetectorOptions::BoxDetectorOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_query_settings_(nullptr)
  , detect_every_n_frame_(0)
  , detect_out_of_fov_(false)
  , index_type_(1)

  , descriptor_dims_(40)
  , min_num_correspondence_(5)
  , ransac_reprojection_threshold_(0.005f)
  , max_match_distance_(0.9f)
  , max_perspective_factor_(0.1f){}
struct BoxDetectorOptionsDefaultTypeInternal {
  constexpr BoxDetectorOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxDetectorOptionsDefaultTypeInternal() {}
  union {
    BoxDetectorOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxDetectorOptionsDefaultTypeInternal _BoxDetectorOptions_default_instance_;
constexpr BoxDetectorIndex_BoxEntry_FrameEntry::BoxDetectorIndex_BoxEntry_FrameEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keypoints_()
  , descriptors_()
  , box_(nullptr){}
struct BoxDetectorIndex_BoxEntry_FrameEntryDefaultTypeInternal {
  constexpr BoxDetectorIndex_BoxEntry_FrameEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxDetectorIndex_BoxEntry_FrameEntryDefaultTypeInternal() {}
  union {
    BoxDetectorIndex_BoxEntry_FrameEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxDetectorIndex_BoxEntry_FrameEntryDefaultTypeInternal _BoxDetectorIndex_BoxEntry_FrameEntry_default_instance_;
constexpr BoxDetectorIndex_BoxEntry::BoxDetectorIndex_BoxEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_entry_(){}
struct BoxDetectorIndex_BoxEntryDefaultTypeInternal {
  constexpr BoxDetectorIndex_BoxEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxDetectorIndex_BoxEntryDefaultTypeInternal() {}
  union {
    BoxDetectorIndex_BoxEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxDetectorIndex_BoxEntryDefaultTypeInternal _BoxDetectorIndex_BoxEntry_default_instance_;
constexpr BoxDetectorIndex::BoxDetectorIndex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : box_entry_(){}
struct BoxDetectorIndexDefaultTypeInternal {
  constexpr BoxDetectorIndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxDetectorIndexDefaultTypeInternal() {}
  union {
    BoxDetectorIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxDetectorIndexDefaultTypeInternal _BoxDetectorIndex_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions_ImageQuerySettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions_ImageQuerySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions_ImageQuerySettings, pyramid_bottom_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions_ImageQuerySettings, pyramid_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions_ImageQuerySettings, max_pyramid_levels_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions_ImageQuerySettings, max_features_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, index_type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, detect_every_n_frame_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, detect_out_of_fov_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, image_query_settings_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, descriptor_dims_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, min_num_correspondence_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, ransac_reprojection_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, max_match_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorOptions, max_perspective_factor_),
  3,
  1,
  2,
  0,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry, box_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry, keypoints_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry, descriptors_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex_BoxEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex_BoxEntry, frame_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxDetectorIndex, box_entry_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mediapipe::BoxDetectorOptions_ImageQuerySettings)},
  { 13, 27, sizeof(::mediapipe::BoxDetectorOptions)},
  { 36, 44, sizeof(::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry)},
  { 47, -1, sizeof(::mediapipe::BoxDetectorIndex_BoxEntry)},
  { 53, -1, sizeof(::mediapipe::BoxDetectorIndex)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BoxDetectorOptions_ImageQuerySettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BoxDetectorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BoxDetectorIndex_BoxEntry_FrameEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BoxDetectorIndex_BoxEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BoxDetectorIndex_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*mediapipe/util/tracking/box_detector.p"
  "roto\022\tmediapipe\032)mediapipe/util/tracking"
  "/box_tracker.proto\032)mediapipe/util/track"
  "ing/region_flow.proto\"\354\004\n\022BoxDetectorOpt"
  "ions\022F\n\nindex_type\030\001 \001(\0162\'.mediapipe.Box"
  "DetectorOptions.IndexType:\tOPENCV_BF\022\037\n\024"
  "detect_every_n_frame\030\002 \001(\005:\0010\022 \n\021detect_"
  "out_of_fov\030\004 \001(\010:\005false\022N\n\024image_query_s"
  "ettings\030\003 \001(\01320.mediapipe.BoxDetectorOpt"
  "ions.ImageQuerySettings\022\033\n\017descriptor_di"
  "ms\030\005 \001(\005:\00240\022!\n\026min_num_correspondence\030\006"
  " \001(\005:\0015\022,\n\035ransac_reprojection_threshold"
  "\030\007 \001(\002:\0050.005\022\037\n\022max_match_distance\030\010 \001("
  "\002:\0030.9\022#\n\026max_perspective_factor\030\t \001(\002:\003"
  "0.1\032\223\001\n\022ImageQuerySettings\022 \n\023pyramid_bo"
  "ttom_size\030\001 \001(\005:\003640\022!\n\024pyramid_scale_fa"
  "ctor\030\002 \001(\002:\0031.2\022\035\n\022max_pyramid_levels\030\003 "
  "\001(\005:\0014\022\031\n\014max_features\030\004 \001(\005:\003500\"1\n\tInd"
  "exType\022\025\n\021INDEX_UNSPECIFIED\020\000\022\r\n\tOPENCV_"
  "BF\020\001\"\237\002\n\020BoxDetectorIndex\0227\n\tbox_entry\030\001"
  " \003(\0132$.mediapipe.BoxDetectorIndex.BoxEnt"
  "ry\032\321\001\n\010BoxEntry\022D\n\013frame_entry\030\001 \003(\0132/.m"
  "ediapipe.BoxDetectorIndex.BoxEntry.Frame"
  "Entry\032\177\n\nFrameEntry\022%\n\003box\030\001 \001(\0132\030.media"
  "pipe.TimedBoxProto\022\021\n\tkeypoints\030\002 \003(\002\0227\n"
  "\013descriptors\030\003 \003(\0132\".mediapipe.BinaryFea"
  "tureDescriptorB1\n\035com.google.mediapipe.t"
  "rackingB\020BoxDetectorProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto,
  &::descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto = {
  false, false, 1105, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto, "mediapipe/util/tracking/box_detector.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoxDetectorOptions_IndexType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[0];
}
bool BoxDetectorOptions_IndexType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BoxDetectorOptions_IndexType BoxDetectorOptions::INDEX_UNSPECIFIED;
constexpr BoxDetectorOptions_IndexType BoxDetectorOptions::OPENCV_BF;
constexpr BoxDetectorOptions_IndexType BoxDetectorOptions::IndexType_MIN;
constexpr BoxDetectorOptions_IndexType BoxDetectorOptions::IndexType_MAX;
constexpr int BoxDetectorOptions::IndexType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class BoxDetectorOptions_ImageQuerySettings::_Internal {
 public:
  using HasBits = decltype(std::declval<BoxDetectorOptions_ImageQuerySettings>()._has_bits_);
  static void set_has_pyramid_bottom_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pyramid_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_pyramid_levels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_features(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BoxDetectorOptions_ImageQuerySettings::BoxDetectorOptions_ImageQuerySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BoxDetectorOptions.ImageQuerySettings)
}
BoxDetectorOptions_ImageQuerySettings::BoxDetectorOptions_ImageQuerySettings(const BoxDetectorOptions_ImageQuerySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pyramid_bottom_size_, &from.pyramid_bottom_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_features_) -
    reinterpret_cast<char*>(&pyramid_bottom_size_)) + sizeof(max_features_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.BoxDetectorOptions.ImageQuerySettings)
}

void BoxDetectorOptions_ImageQuerySettings::SharedCtor() {
pyramid_bottom_size_ = 640;
pyramid_scale_factor_ = 1.2f;
max_pyramid_levels_ = 4;
max_features_ = 500;
}

BoxDetectorOptions_ImageQuerySettings::~BoxDetectorOptions_ImageQuerySettings() {
  // @@protoc_insertion_point(destructor:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxDetectorOptions_ImageQuerySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoxDetectorOptions_ImageQuerySettings::ArenaDtor(void* object) {
  BoxDetectorOptions_ImageQuerySettings* _this = reinterpret_cast< BoxDetectorOptions_ImageQuerySettings* >(object);
  (void)_this;
}
void BoxDetectorOptions_ImageQuerySettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxDetectorOptions_ImageQuerySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxDetectorOptions_ImageQuerySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    pyramid_bottom_size_ = 640;
    pyramid_scale_factor_ = 1.2f;
    max_pyramid_levels_ = 4;
    max_features_ = 500;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxDetectorOptions_ImageQuerySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pyramid_bottom_size = 1 [default = 640];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pyramid_bottom_size(&has_bits);
          pyramid_bottom_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pyramid_scale_factor = 2 [default = 1.2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pyramid_scale_factor(&has_bits);
          pyramid_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_pyramid_levels = 3 [default = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_pyramid_levels(&has_bits);
          max_pyramid_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_features = 4 [default = 500];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_features(&has_bits);
          max_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxDetectorOptions_ImageQuerySettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pyramid_bottom_size = 1 [default = 640];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pyramid_bottom_size(), target);
  }

  // optional float pyramid_scale_factor = 2 [default = 1.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pyramid_scale_factor(), target);
  }

  // optional int32 max_pyramid_levels = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_pyramid_levels(), target);
  }

  // optional int32 max_features = 4 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_features(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  return target;
}

size_t BoxDetectorOptions_ImageQuerySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 pyramid_bottom_size = 1 [default = 640];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pyramid_bottom_size());
    }

    // optional float pyramid_scale_factor = 2 [default = 1.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 max_pyramid_levels = 3 [default = 4];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_pyramid_levels());
    }

    // optional int32 max_features = 4 [default = 500];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_features());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxDetectorOptions_ImageQuerySettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxDetectorOptions_ImageQuerySettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxDetectorOptions_ImageQuerySettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BoxDetectorOptions.ImageQuerySettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BoxDetectorOptions.ImageQuerySettings)
    MergeFrom(*source);
  }
}

void BoxDetectorOptions_ImageQuerySettings::MergeFrom(const BoxDetectorOptions_ImageQuerySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pyramid_bottom_size_ = from.pyramid_bottom_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      pyramid_scale_factor_ = from.pyramid_scale_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_pyramid_levels_ = from.max_pyramid_levels_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_features_ = from.max_features_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoxDetectorOptions_ImageQuerySettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDetectorOptions_ImageQuerySettings::CopyFrom(const BoxDetectorOptions_ImageQuerySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BoxDetectorOptions.ImageQuerySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDetectorOptions_ImageQuerySettings::IsInitialized() const {
  return true;
}

void BoxDetectorOptions_ImageQuerySettings::InternalSwap(BoxDetectorOptions_ImageQuerySettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pyramid_bottom_size_, other->pyramid_bottom_size_);
  swap(pyramid_scale_factor_, other->pyramid_scale_factor_);
  swap(max_pyramid_levels_, other->max_pyramid_levels_);
  swap(max_features_, other->max_features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxDetectorOptions_ImageQuerySettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[0]);
}

// ===================================================================

class BoxDetectorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BoxDetectorOptions>()._has_bits_);
  static void set_has_index_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_detect_every_n_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detect_out_of_fov(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::BoxDetectorOptions_ImageQuerySettings& image_query_settings(const BoxDetectorOptions* msg);
  static void set_has_image_query_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_descriptor_dims(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_num_correspondence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ransac_reprojection_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_match_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_perspective_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::mediapipe::BoxDetectorOptions_ImageQuerySettings&
BoxDetectorOptions::_Internal::image_query_settings(const BoxDetectorOptions* msg) {
  return *msg->image_query_settings_;
}
BoxDetectorOptions::BoxDetectorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BoxDetectorOptions)
}
BoxDetectorOptions::BoxDetectorOptions(const BoxDetectorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_query_settings()) {
    image_query_settings_ = new ::mediapipe::BoxDetectorOptions_ImageQuerySettings(*from.image_query_settings_);
  } else {
    image_query_settings_ = nullptr;
  }
  ::memcpy(&detect_every_n_frame_, &from.detect_every_n_frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_perspective_factor_) -
    reinterpret_cast<char*>(&detect_every_n_frame_)) + sizeof(max_perspective_factor_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.BoxDetectorOptions)
}

void BoxDetectorOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_query_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detect_out_of_fov_) -
    reinterpret_cast<char*>(&image_query_settings_)) + sizeof(detect_out_of_fov_));
index_type_ = 1;
descriptor_dims_ = 40;
min_num_correspondence_ = 5;
ransac_reprojection_threshold_ = 0.005f;
max_match_distance_ = 0.9f;
max_perspective_factor_ = 0.1f;
}

BoxDetectorOptions::~BoxDetectorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.BoxDetectorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxDetectorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_query_settings_;
}

void BoxDetectorOptions::ArenaDtor(void* object) {
  BoxDetectorOptions* _this = reinterpret_cast< BoxDetectorOptions* >(object);
  (void)_this;
}
void BoxDetectorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxDetectorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxDetectorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BoxDetectorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(image_query_settings_ != nullptr);
    image_query_settings_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&detect_every_n_frame_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&detect_out_of_fov_) -
        reinterpret_cast<char*>(&detect_every_n_frame_)) + sizeof(detect_out_of_fov_));
    index_type_ = 1;
    descriptor_dims_ = 40;
    min_num_correspondence_ = 5;
    ransac_reprojection_threshold_ = 0.005f;
    max_match_distance_ = 0.9f;
  }
  max_perspective_factor_ = 0.1f;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxDetectorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.BoxDetectorOptions.IndexType index_type = 1 [default = OPENCV_BF];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::BoxDetectorOptions_IndexType_IsValid(val))) {
            _internal_set_index_type(static_cast<::mediapipe::BoxDetectorOptions_IndexType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 detect_every_n_frame = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_detect_every_n_frame(&has_bits);
          detect_every_n_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.BoxDetectorOptions.ImageQuerySettings image_query_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_query_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool detect_out_of_fov = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_detect_out_of_fov(&has_bits);
          detect_out_of_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 descriptor_dims = 5 [default = 40];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_descriptor_dims(&has_bits);
          descriptor_dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_num_correspondence = 6 [default = 5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_min_num_correspondence(&has_bits);
          min_num_correspondence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ransac_reprojection_threshold = 7 [default = 0.005];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ransac_reprojection_threshold(&has_bits);
          ransac_reprojection_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_match_distance = 8 [default = 0.9];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_max_match_distance(&has_bits);
          max_match_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_perspective_factor = 9 [default = 0.1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_max_perspective_factor(&has_bits);
          max_perspective_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxDetectorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BoxDetectorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.BoxDetectorOptions.IndexType index_type = 1 [default = OPENCV_BF];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index_type(), target);
  }

  // optional int32 detect_every_n_frame = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_detect_every_n_frame(), target);
  }

  // optional .mediapipe.BoxDetectorOptions.ImageQuerySettings image_query_settings = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image_query_settings(this), target, stream);
  }

  // optional bool detect_out_of_fov = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_detect_out_of_fov(), target);
  }

  // optional int32 descriptor_dims = 5 [default = 40];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_descriptor_dims(), target);
  }

  // optional int32 min_num_correspondence = 6 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_min_num_correspondence(), target);
  }

  // optional float ransac_reprojection_threshold = 7 [default = 0.005];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_ransac_reprojection_threshold(), target);
  }

  // optional float max_match_distance = 8 [default = 0.9];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_max_match_distance(), target);
  }

  // optional float max_perspective_factor = 9 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_max_perspective_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BoxDetectorOptions)
  return target;
}

size_t BoxDetectorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BoxDetectorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.BoxDetectorOptions.ImageQuerySettings image_query_settings = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_query_settings_);
    }

    // optional int32 detect_every_n_frame = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_detect_every_n_frame());
    }

    // optional bool detect_out_of_fov = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.BoxDetectorOptions.IndexType index_type = 1 [default = OPENCV_BF];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index_type());
    }

    // optional int32 descriptor_dims = 5 [default = 40];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_descriptor_dims());
    }

    // optional int32 min_num_correspondence = 6 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_num_correspondence());
    }

    // optional float ransac_reprojection_threshold = 7 [default = 0.005];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float max_match_distance = 8 [default = 0.9];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float max_perspective_factor = 9 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxDetectorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BoxDetectorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxDetectorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxDetectorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BoxDetectorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BoxDetectorOptions)
    MergeFrom(*source);
  }
}

void BoxDetectorOptions::MergeFrom(const BoxDetectorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BoxDetectorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_image_query_settings()->::mediapipe::BoxDetectorOptions_ImageQuerySettings::MergeFrom(from._internal_image_query_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      detect_every_n_frame_ = from.detect_every_n_frame_;
    }
    if (cached_has_bits & 0x00000004u) {
      detect_out_of_fov_ = from.detect_out_of_fov_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_type_ = from.index_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      descriptor_dims_ = from.descriptor_dims_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_num_correspondence_ = from.min_num_correspondence_;
    }
    if (cached_has_bits & 0x00000040u) {
      ransac_reprojection_threshold_ = from.ransac_reprojection_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_match_distance_ = from.max_match_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_max_perspective_factor(from._internal_max_perspective_factor());
  }
}

void BoxDetectorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BoxDetectorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDetectorOptions::CopyFrom(const BoxDetectorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BoxDetectorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDetectorOptions::IsInitialized() const {
  return true;
}

void BoxDetectorOptions::InternalSwap(BoxDetectorOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoxDetectorOptions, detect_out_of_fov_)
      + sizeof(BoxDetectorOptions::detect_out_of_fov_)
      - PROTOBUF_FIELD_OFFSET(BoxDetectorOptions, image_query_settings_)>(
          reinterpret_cast<char*>(&image_query_settings_),
          reinterpret_cast<char*>(&other->image_query_settings_));
  swap(index_type_, other->index_type_);
  swap(descriptor_dims_, other->descriptor_dims_);
  swap(min_num_correspondence_, other->min_num_correspondence_);
  swap(ransac_reprojection_threshold_, other->ransac_reprojection_threshold_);
  swap(max_match_distance_, other->max_match_distance_);
  swap(max_perspective_factor_, other->max_perspective_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxDetectorOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[1]);
}

// ===================================================================

class BoxDetectorIndex_BoxEntry_FrameEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<BoxDetectorIndex_BoxEntry_FrameEntry>()._has_bits_);
  static const ::mediapipe::TimedBoxProto& box(const BoxDetectorIndex_BoxEntry_FrameEntry* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mediapipe::TimedBoxProto&
BoxDetectorIndex_BoxEntry_FrameEntry::_Internal::box(const BoxDetectorIndex_BoxEntry_FrameEntry* msg) {
  return *msg->box_;
}
void BoxDetectorIndex_BoxEntry_FrameEntry::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BoxDetectorIndex_BoxEntry_FrameEntry::clear_descriptors() {
  descriptors_.Clear();
}
BoxDetectorIndex_BoxEntry_FrameEntry::BoxDetectorIndex_BoxEntry_FrameEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keypoints_(arena),
  descriptors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
}
BoxDetectorIndex_BoxEntry_FrameEntry::BoxDetectorIndex_BoxEntry_FrameEntry(const BoxDetectorIndex_BoxEntry_FrameEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keypoints_(from.keypoints_),
      descriptors_(from.descriptors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_box()) {
    box_ = new ::mediapipe::TimedBoxProto(*from.box_);
  } else {
    box_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
}

void BoxDetectorIndex_BoxEntry_FrameEntry::SharedCtor() {
box_ = nullptr;
}

BoxDetectorIndex_BoxEntry_FrameEntry::~BoxDetectorIndex_BoxEntry_FrameEntry() {
  // @@protoc_insertion_point(destructor:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxDetectorIndex_BoxEntry_FrameEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete box_;
}

void BoxDetectorIndex_BoxEntry_FrameEntry::ArenaDtor(void* object) {
  BoxDetectorIndex_BoxEntry_FrameEntry* _this = reinterpret_cast< BoxDetectorIndex_BoxEntry_FrameEntry* >(object);
  (void)_this;
}
void BoxDetectorIndex_BoxEntry_FrameEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxDetectorIndex_BoxEntry_FrameEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxDetectorIndex_BoxEntry_FrameEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints_.Clear();
  descriptors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(box_ != nullptr);
    box_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxDetectorIndex_BoxEntry_FrameEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.TimedBoxProto box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float keypoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keypoints(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_keypoints(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.BinaryFeatureDescriptor descriptors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxDetectorIndex_BoxEntry_FrameEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.TimedBoxProto box = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  // repeated float keypoints = 2;
  for (int i = 0, n = this->_internal_keypoints_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_keypoints(i), target);
  }

  // repeated .mediapipe.BinaryFeatureDescriptor descriptors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_descriptors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  return target;
}

size_t BoxDetectorIndex_BoxEntry_FrameEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float keypoints = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_keypoints_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keypoints_size());
    total_size += data_size;
  }

  // repeated .mediapipe.BinaryFeatureDescriptor descriptors = 3;
  total_size += 1UL * this->_internal_descriptors_size();
  for (const auto& msg : this->descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mediapipe.TimedBoxProto box = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxDetectorIndex_BoxEntry_FrameEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxDetectorIndex_BoxEntry_FrameEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxDetectorIndex_BoxEntry_FrameEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
    MergeFrom(*source);
  }
}

void BoxDetectorIndex_BoxEntry_FrameEntry::MergeFrom(const BoxDetectorIndex_BoxEntry_FrameEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoints_.MergeFrom(from.keypoints_);
  descriptors_.MergeFrom(from.descriptors_);
  if (from._internal_has_box()) {
    _internal_mutable_box()->::mediapipe::TimedBoxProto::MergeFrom(from._internal_box());
  }
}

void BoxDetectorIndex_BoxEntry_FrameEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDetectorIndex_BoxEntry_FrameEntry::CopyFrom(const BoxDetectorIndex_BoxEntry_FrameEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDetectorIndex_BoxEntry_FrameEntry::IsInitialized() const {
  return true;
}

void BoxDetectorIndex_BoxEntry_FrameEntry::InternalSwap(BoxDetectorIndex_BoxEntry_FrameEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keypoints_.InternalSwap(&other->keypoints_);
  descriptors_.InternalSwap(&other->descriptors_);
  swap(box_, other->box_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxDetectorIndex_BoxEntry_FrameEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[2]);
}

// ===================================================================

class BoxDetectorIndex_BoxEntry::_Internal {
 public:
};

BoxDetectorIndex_BoxEntry::BoxDetectorIndex_BoxEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frame_entry_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BoxDetectorIndex.BoxEntry)
}
BoxDetectorIndex_BoxEntry::BoxDetectorIndex_BoxEntry(const BoxDetectorIndex_BoxEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frame_entry_(from.frame_entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.BoxDetectorIndex.BoxEntry)
}

void BoxDetectorIndex_BoxEntry::SharedCtor() {
}

BoxDetectorIndex_BoxEntry::~BoxDetectorIndex_BoxEntry() {
  // @@protoc_insertion_point(destructor:mediapipe.BoxDetectorIndex.BoxEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxDetectorIndex_BoxEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoxDetectorIndex_BoxEntry::ArenaDtor(void* object) {
  BoxDetectorIndex_BoxEntry* _this = reinterpret_cast< BoxDetectorIndex_BoxEntry* >(object);
  (void)_this;
}
void BoxDetectorIndex_BoxEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxDetectorIndex_BoxEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxDetectorIndex_BoxEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BoxDetectorIndex.BoxEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxDetectorIndex_BoxEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry frame_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxDetectorIndex_BoxEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BoxDetectorIndex.BoxEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry frame_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frame_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frame_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BoxDetectorIndex.BoxEntry)
  return target;
}

size_t BoxDetectorIndex_BoxEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BoxDetectorIndex.BoxEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry frame_entry = 1;
  total_size += 1UL * this->_internal_frame_entry_size();
  for (const auto& msg : this->frame_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxDetectorIndex_BoxEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BoxDetectorIndex.BoxEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxDetectorIndex_BoxEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxDetectorIndex_BoxEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BoxDetectorIndex.BoxEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BoxDetectorIndex.BoxEntry)
    MergeFrom(*source);
  }
}

void BoxDetectorIndex_BoxEntry::MergeFrom(const BoxDetectorIndex_BoxEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BoxDetectorIndex.BoxEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_entry_.MergeFrom(from.frame_entry_);
}

void BoxDetectorIndex_BoxEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BoxDetectorIndex.BoxEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDetectorIndex_BoxEntry::CopyFrom(const BoxDetectorIndex_BoxEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BoxDetectorIndex.BoxEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDetectorIndex_BoxEntry::IsInitialized() const {
  return true;
}

void BoxDetectorIndex_BoxEntry::InternalSwap(BoxDetectorIndex_BoxEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  frame_entry_.InternalSwap(&other->frame_entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxDetectorIndex_BoxEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[3]);
}

// ===================================================================

class BoxDetectorIndex::_Internal {
 public:
};

BoxDetectorIndex::BoxDetectorIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  box_entry_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BoxDetectorIndex)
}
BoxDetectorIndex::BoxDetectorIndex(const BoxDetectorIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      box_entry_(from.box_entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.BoxDetectorIndex)
}

void BoxDetectorIndex::SharedCtor() {
}

BoxDetectorIndex::~BoxDetectorIndex() {
  // @@protoc_insertion_point(destructor:mediapipe.BoxDetectorIndex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxDetectorIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoxDetectorIndex::ArenaDtor(void* object) {
  BoxDetectorIndex* _this = reinterpret_cast< BoxDetectorIndex* >(object);
  (void)_this;
}
void BoxDetectorIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxDetectorIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxDetectorIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BoxDetectorIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxDetectorIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.BoxDetectorIndex.BoxEntry box_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_box_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxDetectorIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BoxDetectorIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.BoxDetectorIndex.BoxEntry box_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_box_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_box_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BoxDetectorIndex)
  return target;
}

size_t BoxDetectorIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BoxDetectorIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.BoxDetectorIndex.BoxEntry box_entry = 1;
  total_size += 1UL * this->_internal_box_entry_size();
  for (const auto& msg : this->box_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxDetectorIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BoxDetectorIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxDetectorIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxDetectorIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BoxDetectorIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BoxDetectorIndex)
    MergeFrom(*source);
  }
}

void BoxDetectorIndex::MergeFrom(const BoxDetectorIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BoxDetectorIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_entry_.MergeFrom(from.box_entry_);
}

void BoxDetectorIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BoxDetectorIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDetectorIndex::CopyFrom(const BoxDetectorIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BoxDetectorIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDetectorIndex::IsInitialized() const {
  return true;
}

void BoxDetectorIndex::InternalSwap(BoxDetectorIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  box_entry_.InternalSwap(&other->box_entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxDetectorIndex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::BoxDetectorOptions_ImageQuerySettings* Arena::CreateMaybeMessage< ::mediapipe::BoxDetectorOptions_ImageQuerySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BoxDetectorOptions_ImageQuerySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::BoxDetectorOptions* Arena::CreateMaybeMessage< ::mediapipe::BoxDetectorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BoxDetectorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* Arena::CreateMaybeMessage< ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::BoxDetectorIndex_BoxEntry* Arena::CreateMaybeMessage< ::mediapipe::BoxDetectorIndex_BoxEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BoxDetectorIndex_BoxEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::BoxDetectorIndex* Arena::CreateMaybeMessage< ::mediapipe::BoxDetectorIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BoxDetectorIndex >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
