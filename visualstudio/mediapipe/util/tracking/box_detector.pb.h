// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/box_detector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/box_tracker.pb.h"
#include "mediapipe/util/tracking/region_flow.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto;
namespace mediapipe {
class BoxDetectorIndex;
struct BoxDetectorIndexDefaultTypeInternal;
extern BoxDetectorIndexDefaultTypeInternal _BoxDetectorIndex_default_instance_;
class BoxDetectorIndex_BoxEntry;
struct BoxDetectorIndex_BoxEntryDefaultTypeInternal;
extern BoxDetectorIndex_BoxEntryDefaultTypeInternal _BoxDetectorIndex_BoxEntry_default_instance_;
class BoxDetectorIndex_BoxEntry_FrameEntry;
struct BoxDetectorIndex_BoxEntry_FrameEntryDefaultTypeInternal;
extern BoxDetectorIndex_BoxEntry_FrameEntryDefaultTypeInternal _BoxDetectorIndex_BoxEntry_FrameEntry_default_instance_;
class BoxDetectorOptions;
struct BoxDetectorOptionsDefaultTypeInternal;
extern BoxDetectorOptionsDefaultTypeInternal _BoxDetectorOptions_default_instance_;
class BoxDetectorOptions_ImageQuerySettings;
struct BoxDetectorOptions_ImageQuerySettingsDefaultTypeInternal;
extern BoxDetectorOptions_ImageQuerySettingsDefaultTypeInternal _BoxDetectorOptions_ImageQuerySettings_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::BoxDetectorIndex* Arena::CreateMaybeMessage<::mediapipe::BoxDetectorIndex>(Arena*);
template<> ::mediapipe::BoxDetectorIndex_BoxEntry* Arena::CreateMaybeMessage<::mediapipe::BoxDetectorIndex_BoxEntry>(Arena*);
template<> ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* Arena::CreateMaybeMessage<::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry>(Arena*);
template<> ::mediapipe::BoxDetectorOptions* Arena::CreateMaybeMessage<::mediapipe::BoxDetectorOptions>(Arena*);
template<> ::mediapipe::BoxDetectorOptions_ImageQuerySettings* Arena::CreateMaybeMessage<::mediapipe::BoxDetectorOptions_ImageQuerySettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum BoxDetectorOptions_IndexType : int {
  BoxDetectorOptions_IndexType_INDEX_UNSPECIFIED = 0,
  BoxDetectorOptions_IndexType_OPENCV_BF = 1
};
bool BoxDetectorOptions_IndexType_IsValid(int value);
constexpr BoxDetectorOptions_IndexType BoxDetectorOptions_IndexType_IndexType_MIN = BoxDetectorOptions_IndexType_INDEX_UNSPECIFIED;
constexpr BoxDetectorOptions_IndexType BoxDetectorOptions_IndexType_IndexType_MAX = BoxDetectorOptions_IndexType_OPENCV_BF;
constexpr int BoxDetectorOptions_IndexType_IndexType_ARRAYSIZE = BoxDetectorOptions_IndexType_IndexType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoxDetectorOptions_IndexType_descriptor();
template<typename T>
inline const std::string& BoxDetectorOptions_IndexType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoxDetectorOptions_IndexType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoxDetectorOptions_IndexType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoxDetectorOptions_IndexType_descriptor(), enum_t_value);
}
inline bool BoxDetectorOptions_IndexType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoxDetectorOptions_IndexType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoxDetectorOptions_IndexType>(
    BoxDetectorOptions_IndexType_descriptor(), name, value);
}
// ===================================================================

class BoxDetectorOptions_ImageQuerySettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BoxDetectorOptions.ImageQuerySettings) */ {
 public:
  inline BoxDetectorOptions_ImageQuerySettings() : BoxDetectorOptions_ImageQuerySettings(nullptr) {}
  ~BoxDetectorOptions_ImageQuerySettings() override;
  explicit constexpr BoxDetectorOptions_ImageQuerySettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxDetectorOptions_ImageQuerySettings(const BoxDetectorOptions_ImageQuerySettings& from);
  BoxDetectorOptions_ImageQuerySettings(BoxDetectorOptions_ImageQuerySettings&& from) noexcept
    : BoxDetectorOptions_ImageQuerySettings() {
    *this = ::std::move(from);
  }

  inline BoxDetectorOptions_ImageQuerySettings& operator=(const BoxDetectorOptions_ImageQuerySettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxDetectorOptions_ImageQuerySettings& operator=(BoxDetectorOptions_ImageQuerySettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxDetectorOptions_ImageQuerySettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxDetectorOptions_ImageQuerySettings* internal_default_instance() {
    return reinterpret_cast<const BoxDetectorOptions_ImageQuerySettings*>(
               &_BoxDetectorOptions_ImageQuerySettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoxDetectorOptions_ImageQuerySettings& a, BoxDetectorOptions_ImageQuerySettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxDetectorOptions_ImageQuerySettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxDetectorOptions_ImageQuerySettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxDetectorOptions_ImageQuerySettings* New() const final {
    return CreateMaybeMessage<BoxDetectorOptions_ImageQuerySettings>(nullptr);
  }

  BoxDetectorOptions_ImageQuerySettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxDetectorOptions_ImageQuerySettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxDetectorOptions_ImageQuerySettings& from);
  void MergeFrom(const BoxDetectorOptions_ImageQuerySettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDetectorOptions_ImageQuerySettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BoxDetectorOptions.ImageQuerySettings";
  }
  protected:
  explicit BoxDetectorOptions_ImageQuerySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPyramidBottomSizeFieldNumber = 1,
    kPyramidScaleFactorFieldNumber = 2,
    kMaxPyramidLevelsFieldNumber = 3,
    kMaxFeaturesFieldNumber = 4,
  };
  // optional int32 pyramid_bottom_size = 1 [default = 640];
  bool has_pyramid_bottom_size() const;
  private:
  bool _internal_has_pyramid_bottom_size() const;
  public:
  void clear_pyramid_bottom_size();
  ::PROTOBUF_NAMESPACE_ID::int32 pyramid_bottom_size() const;
  void set_pyramid_bottom_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pyramid_bottom_size() const;
  void _internal_set_pyramid_bottom_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float pyramid_scale_factor = 2 [default = 1.2];
  bool has_pyramid_scale_factor() const;
  private:
  bool _internal_has_pyramid_scale_factor() const;
  public:
  void clear_pyramid_scale_factor();
  float pyramid_scale_factor() const;
  void set_pyramid_scale_factor(float value);
  private:
  float _internal_pyramid_scale_factor() const;
  void _internal_set_pyramid_scale_factor(float value);
  public:

  // optional int32 max_pyramid_levels = 3 [default = 4];
  bool has_max_pyramid_levels() const;
  private:
  bool _internal_has_max_pyramid_levels() const;
  public:
  void clear_max_pyramid_levels();
  ::PROTOBUF_NAMESPACE_ID::int32 max_pyramid_levels() const;
  void set_max_pyramid_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_pyramid_levels() const;
  void _internal_set_max_pyramid_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_features = 4 [default = 500];
  bool has_max_features() const;
  private:
  bool _internal_has_max_features() const;
  public:
  void clear_max_features();
  ::PROTOBUF_NAMESPACE_ID::int32 max_features() const;
  void set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_features() const;
  void _internal_set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.BoxDetectorOptions.ImageQuerySettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pyramid_bottom_size_;
  float pyramid_scale_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_pyramid_levels_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_features_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto;
};
// -------------------------------------------------------------------

class BoxDetectorOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BoxDetectorOptions) */ {
 public:
  inline BoxDetectorOptions() : BoxDetectorOptions(nullptr) {}
  ~BoxDetectorOptions() override;
  explicit constexpr BoxDetectorOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxDetectorOptions(const BoxDetectorOptions& from);
  BoxDetectorOptions(BoxDetectorOptions&& from) noexcept
    : BoxDetectorOptions() {
    *this = ::std::move(from);
  }

  inline BoxDetectorOptions& operator=(const BoxDetectorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxDetectorOptions& operator=(BoxDetectorOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxDetectorOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxDetectorOptions* internal_default_instance() {
    return reinterpret_cast<const BoxDetectorOptions*>(
               &_BoxDetectorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoxDetectorOptions& a, BoxDetectorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxDetectorOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxDetectorOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxDetectorOptions* New() const final {
    return CreateMaybeMessage<BoxDetectorOptions>(nullptr);
  }

  BoxDetectorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxDetectorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxDetectorOptions& from);
  void MergeFrom(const BoxDetectorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDetectorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BoxDetectorOptions";
  }
  protected:
  explicit BoxDetectorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BoxDetectorOptions_ImageQuerySettings ImageQuerySettings;

  typedef BoxDetectorOptions_IndexType IndexType;
  static constexpr IndexType INDEX_UNSPECIFIED =
    BoxDetectorOptions_IndexType_INDEX_UNSPECIFIED;
  static constexpr IndexType OPENCV_BF =
    BoxDetectorOptions_IndexType_OPENCV_BF;
  static inline bool IndexType_IsValid(int value) {
    return BoxDetectorOptions_IndexType_IsValid(value);
  }
  static constexpr IndexType IndexType_MIN =
    BoxDetectorOptions_IndexType_IndexType_MIN;
  static constexpr IndexType IndexType_MAX =
    BoxDetectorOptions_IndexType_IndexType_MAX;
  static constexpr int IndexType_ARRAYSIZE =
    BoxDetectorOptions_IndexType_IndexType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IndexType_descriptor() {
    return BoxDetectorOptions_IndexType_descriptor();
  }
  template<typename T>
  static inline const std::string& IndexType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IndexType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IndexType_Name.");
    return BoxDetectorOptions_IndexType_Name(enum_t_value);
  }
  static inline bool IndexType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IndexType* value) {
    return BoxDetectorOptions_IndexType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImageQuerySettingsFieldNumber = 3,
    kDetectEveryNFrameFieldNumber = 2,
    kDetectOutOfFovFieldNumber = 4,
    kIndexTypeFieldNumber = 1,
    kDescriptorDimsFieldNumber = 5,
    kMinNumCorrespondenceFieldNumber = 6,
    kRansacReprojectionThresholdFieldNumber = 7,
    kMaxMatchDistanceFieldNumber = 8,
    kMaxPerspectiveFactorFieldNumber = 9,
  };
  // optional .mediapipe.BoxDetectorOptions.ImageQuerySettings image_query_settings = 3;
  bool has_image_query_settings() const;
  private:
  bool _internal_has_image_query_settings() const;
  public:
  void clear_image_query_settings();
  const ::mediapipe::BoxDetectorOptions_ImageQuerySettings& image_query_settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::BoxDetectorOptions_ImageQuerySettings* release_image_query_settings();
  ::mediapipe::BoxDetectorOptions_ImageQuerySettings* mutable_image_query_settings();
  void set_allocated_image_query_settings(::mediapipe::BoxDetectorOptions_ImageQuerySettings* image_query_settings);
  private:
  const ::mediapipe::BoxDetectorOptions_ImageQuerySettings& _internal_image_query_settings() const;
  ::mediapipe::BoxDetectorOptions_ImageQuerySettings* _internal_mutable_image_query_settings();
  public:
  void unsafe_arena_set_allocated_image_query_settings(
      ::mediapipe::BoxDetectorOptions_ImageQuerySettings* image_query_settings);
  ::mediapipe::BoxDetectorOptions_ImageQuerySettings* unsafe_arena_release_image_query_settings();

  // optional int32 detect_every_n_frame = 2 [default = 0];
  bool has_detect_every_n_frame() const;
  private:
  bool _internal_has_detect_every_n_frame() const;
  public:
  void clear_detect_every_n_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 detect_every_n_frame() const;
  void set_detect_every_n_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_detect_every_n_frame() const;
  void _internal_set_detect_every_n_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool detect_out_of_fov = 4 [default = false];
  bool has_detect_out_of_fov() const;
  private:
  bool _internal_has_detect_out_of_fov() const;
  public:
  void clear_detect_out_of_fov();
  bool detect_out_of_fov() const;
  void set_detect_out_of_fov(bool value);
  private:
  bool _internal_detect_out_of_fov() const;
  void _internal_set_detect_out_of_fov(bool value);
  public:

  // optional .mediapipe.BoxDetectorOptions.IndexType index_type = 1 [default = OPENCV_BF];
  bool has_index_type() const;
  private:
  bool _internal_has_index_type() const;
  public:
  void clear_index_type();
  ::mediapipe::BoxDetectorOptions_IndexType index_type() const;
  void set_index_type(::mediapipe::BoxDetectorOptions_IndexType value);
  private:
  ::mediapipe::BoxDetectorOptions_IndexType _internal_index_type() const;
  void _internal_set_index_type(::mediapipe::BoxDetectorOptions_IndexType value);
  public:

  // optional int32 descriptor_dims = 5 [default = 40];
  bool has_descriptor_dims() const;
  private:
  bool _internal_has_descriptor_dims() const;
  public:
  void clear_descriptor_dims();
  ::PROTOBUF_NAMESPACE_ID::int32 descriptor_dims() const;
  void set_descriptor_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_descriptor_dims() const;
  void _internal_set_descriptor_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 min_num_correspondence = 6 [default = 5];
  bool has_min_num_correspondence() const;
  private:
  bool _internal_has_min_num_correspondence() const;
  public:
  void clear_min_num_correspondence();
  ::PROTOBUF_NAMESPACE_ID::int32 min_num_correspondence() const;
  void set_min_num_correspondence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_num_correspondence() const;
  void _internal_set_min_num_correspondence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float ransac_reprojection_threshold = 7 [default = 0.005];
  bool has_ransac_reprojection_threshold() const;
  private:
  bool _internal_has_ransac_reprojection_threshold() const;
  public:
  void clear_ransac_reprojection_threshold();
  float ransac_reprojection_threshold() const;
  void set_ransac_reprojection_threshold(float value);
  private:
  float _internal_ransac_reprojection_threshold() const;
  void _internal_set_ransac_reprojection_threshold(float value);
  public:

  // optional float max_match_distance = 8 [default = 0.9];
  bool has_max_match_distance() const;
  private:
  bool _internal_has_max_match_distance() const;
  public:
  void clear_max_match_distance();
  float max_match_distance() const;
  void set_max_match_distance(float value);
  private:
  float _internal_max_match_distance() const;
  void _internal_set_max_match_distance(float value);
  public:

  // optional float max_perspective_factor = 9 [default = 0.1];
  bool has_max_perspective_factor() const;
  private:
  bool _internal_has_max_perspective_factor() const;
  public:
  void clear_max_perspective_factor();
  float max_perspective_factor() const;
  void set_max_perspective_factor(float value);
  private:
  float _internal_max_perspective_factor() const;
  void _internal_set_max_perspective_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.BoxDetectorOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::BoxDetectorOptions_ImageQuerySettings* image_query_settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 detect_every_n_frame_;
  bool detect_out_of_fov_;
  int index_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 descriptor_dims_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_num_correspondence_;
  float ransac_reprojection_threshold_;
  float max_match_distance_;
  float max_perspective_factor_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto;
};
// -------------------------------------------------------------------

class BoxDetectorIndex_BoxEntry_FrameEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry) */ {
 public:
  inline BoxDetectorIndex_BoxEntry_FrameEntry() : BoxDetectorIndex_BoxEntry_FrameEntry(nullptr) {}
  ~BoxDetectorIndex_BoxEntry_FrameEntry() override;
  explicit constexpr BoxDetectorIndex_BoxEntry_FrameEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxDetectorIndex_BoxEntry_FrameEntry(const BoxDetectorIndex_BoxEntry_FrameEntry& from);
  BoxDetectorIndex_BoxEntry_FrameEntry(BoxDetectorIndex_BoxEntry_FrameEntry&& from) noexcept
    : BoxDetectorIndex_BoxEntry_FrameEntry() {
    *this = ::std::move(from);
  }

  inline BoxDetectorIndex_BoxEntry_FrameEntry& operator=(const BoxDetectorIndex_BoxEntry_FrameEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxDetectorIndex_BoxEntry_FrameEntry& operator=(BoxDetectorIndex_BoxEntry_FrameEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxDetectorIndex_BoxEntry_FrameEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxDetectorIndex_BoxEntry_FrameEntry* internal_default_instance() {
    return reinterpret_cast<const BoxDetectorIndex_BoxEntry_FrameEntry*>(
               &_BoxDetectorIndex_BoxEntry_FrameEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BoxDetectorIndex_BoxEntry_FrameEntry& a, BoxDetectorIndex_BoxEntry_FrameEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxDetectorIndex_BoxEntry_FrameEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxDetectorIndex_BoxEntry_FrameEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxDetectorIndex_BoxEntry_FrameEntry* New() const final {
    return CreateMaybeMessage<BoxDetectorIndex_BoxEntry_FrameEntry>(nullptr);
  }

  BoxDetectorIndex_BoxEntry_FrameEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxDetectorIndex_BoxEntry_FrameEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxDetectorIndex_BoxEntry_FrameEntry& from);
  void MergeFrom(const BoxDetectorIndex_BoxEntry_FrameEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDetectorIndex_BoxEntry_FrameEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry";
  }
  protected:
  explicit BoxDetectorIndex_BoxEntry_FrameEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsFieldNumber = 2,
    kDescriptorsFieldNumber = 3,
    kBoxFieldNumber = 1,
  };
  // repeated float keypoints = 2;
  int keypoints_size() const;
  private:
  int _internal_keypoints_size() const;
  public:
  void clear_keypoints();
  private:
  float _internal_keypoints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_keypoints() const;
  void _internal_add_keypoints(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_keypoints();
  public:
  float keypoints(int index) const;
  void set_keypoints(int index, float value);
  void add_keypoints(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      keypoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_keypoints();

  // repeated .mediapipe.BinaryFeatureDescriptor descriptors = 3;
  int descriptors_size() const;
  private:
  int _internal_descriptors_size() const;
  public:
  void clear_descriptors();
  ::mediapipe::BinaryFeatureDescriptor* mutable_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >*
      mutable_descriptors();
  private:
  const ::mediapipe::BinaryFeatureDescriptor& _internal_descriptors(int index) const;
  ::mediapipe::BinaryFeatureDescriptor* _internal_add_descriptors();
  public:
  const ::mediapipe::BinaryFeatureDescriptor& descriptors(int index) const;
  ::mediapipe::BinaryFeatureDescriptor* add_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >&
      descriptors() const;

  // optional .mediapipe.TimedBoxProto box = 1;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::mediapipe::TimedBoxProto& box() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TimedBoxProto* release_box();
  ::mediapipe::TimedBoxProto* mutable_box();
  void set_allocated_box(::mediapipe::TimedBoxProto* box);
  private:
  const ::mediapipe::TimedBoxProto& _internal_box() const;
  ::mediapipe::TimedBoxProto* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::mediapipe::TimedBoxProto* box);
  ::mediapipe::TimedBoxProto* unsafe_arena_release_box();

  // @@protoc_insertion_point(class_scope:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > keypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor > descriptors_;
  ::mediapipe::TimedBoxProto* box_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto;
};
// -------------------------------------------------------------------

class BoxDetectorIndex_BoxEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BoxDetectorIndex.BoxEntry) */ {
 public:
  inline BoxDetectorIndex_BoxEntry() : BoxDetectorIndex_BoxEntry(nullptr) {}
  ~BoxDetectorIndex_BoxEntry() override;
  explicit constexpr BoxDetectorIndex_BoxEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxDetectorIndex_BoxEntry(const BoxDetectorIndex_BoxEntry& from);
  BoxDetectorIndex_BoxEntry(BoxDetectorIndex_BoxEntry&& from) noexcept
    : BoxDetectorIndex_BoxEntry() {
    *this = ::std::move(from);
  }

  inline BoxDetectorIndex_BoxEntry& operator=(const BoxDetectorIndex_BoxEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxDetectorIndex_BoxEntry& operator=(BoxDetectorIndex_BoxEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxDetectorIndex_BoxEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxDetectorIndex_BoxEntry* internal_default_instance() {
    return reinterpret_cast<const BoxDetectorIndex_BoxEntry*>(
               &_BoxDetectorIndex_BoxEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BoxDetectorIndex_BoxEntry& a, BoxDetectorIndex_BoxEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxDetectorIndex_BoxEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxDetectorIndex_BoxEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxDetectorIndex_BoxEntry* New() const final {
    return CreateMaybeMessage<BoxDetectorIndex_BoxEntry>(nullptr);
  }

  BoxDetectorIndex_BoxEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxDetectorIndex_BoxEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxDetectorIndex_BoxEntry& from);
  void MergeFrom(const BoxDetectorIndex_BoxEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDetectorIndex_BoxEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BoxDetectorIndex.BoxEntry";
  }
  protected:
  explicit BoxDetectorIndex_BoxEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BoxDetectorIndex_BoxEntry_FrameEntry FrameEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kFrameEntryFieldNumber = 1,
  };
  // repeated .mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry frame_entry = 1;
  int frame_entry_size() const;
  private:
  int _internal_frame_entry_size() const;
  public:
  void clear_frame_entry();
  ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* mutable_frame_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry >*
      mutable_frame_entry();
  private:
  const ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry& _internal_frame_entry(int index) const;
  ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* _internal_add_frame_entry();
  public:
  const ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry& frame_entry(int index) const;
  ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* add_frame_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry >&
      frame_entry() const;

  // @@protoc_insertion_point(class_scope:mediapipe.BoxDetectorIndex.BoxEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry > frame_entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto;
};
// -------------------------------------------------------------------

class BoxDetectorIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BoxDetectorIndex) */ {
 public:
  inline BoxDetectorIndex() : BoxDetectorIndex(nullptr) {}
  ~BoxDetectorIndex() override;
  explicit constexpr BoxDetectorIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoxDetectorIndex(const BoxDetectorIndex& from);
  BoxDetectorIndex(BoxDetectorIndex&& from) noexcept
    : BoxDetectorIndex() {
    *this = ::std::move(from);
  }

  inline BoxDetectorIndex& operator=(const BoxDetectorIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxDetectorIndex& operator=(BoxDetectorIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxDetectorIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxDetectorIndex* internal_default_instance() {
    return reinterpret_cast<const BoxDetectorIndex*>(
               &_BoxDetectorIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BoxDetectorIndex& a, BoxDetectorIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxDetectorIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxDetectorIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxDetectorIndex* New() const final {
    return CreateMaybeMessage<BoxDetectorIndex>(nullptr);
  }

  BoxDetectorIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxDetectorIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxDetectorIndex& from);
  void MergeFrom(const BoxDetectorIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxDetectorIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BoxDetectorIndex";
  }
  protected:
  explicit BoxDetectorIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BoxDetectorIndex_BoxEntry BoxEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kBoxEntryFieldNumber = 1,
  };
  // repeated .mediapipe.BoxDetectorIndex.BoxEntry box_entry = 1;
  int box_entry_size() const;
  private:
  int _internal_box_entry_size() const;
  public:
  void clear_box_entry();
  ::mediapipe::BoxDetectorIndex_BoxEntry* mutable_box_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry >*
      mutable_box_entry();
  private:
  const ::mediapipe::BoxDetectorIndex_BoxEntry& _internal_box_entry(int index) const;
  ::mediapipe::BoxDetectorIndex_BoxEntry* _internal_add_box_entry();
  public:
  const ::mediapipe::BoxDetectorIndex_BoxEntry& box_entry(int index) const;
  ::mediapipe::BoxDetectorIndex_BoxEntry* add_box_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry >&
      box_entry() const;

  // @@protoc_insertion_point(class_scope:mediapipe.BoxDetectorIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry > box_entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoxDetectorOptions_ImageQuerySettings

// optional int32 pyramid_bottom_size = 1 [default = 640];
inline bool BoxDetectorOptions_ImageQuerySettings::_internal_has_pyramid_bottom_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoxDetectorOptions_ImageQuerySettings::has_pyramid_bottom_size() const {
  return _internal_has_pyramid_bottom_size();
}
inline void BoxDetectorOptions_ImageQuerySettings::clear_pyramid_bottom_size() {
  pyramid_bottom_size_ = 640;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions_ImageQuerySettings::_internal_pyramid_bottom_size() const {
  return pyramid_bottom_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions_ImageQuerySettings::pyramid_bottom_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.ImageQuerySettings.pyramid_bottom_size)
  return _internal_pyramid_bottom_size();
}
inline void BoxDetectorOptions_ImageQuerySettings::_internal_set_pyramid_bottom_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pyramid_bottom_size_ = value;
}
inline void BoxDetectorOptions_ImageQuerySettings::set_pyramid_bottom_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pyramid_bottom_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.ImageQuerySettings.pyramid_bottom_size)
}

// optional float pyramid_scale_factor = 2 [default = 1.2];
inline bool BoxDetectorOptions_ImageQuerySettings::_internal_has_pyramid_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoxDetectorOptions_ImageQuerySettings::has_pyramid_scale_factor() const {
  return _internal_has_pyramid_scale_factor();
}
inline void BoxDetectorOptions_ImageQuerySettings::clear_pyramid_scale_factor() {
  pyramid_scale_factor_ = 1.2f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float BoxDetectorOptions_ImageQuerySettings::_internal_pyramid_scale_factor() const {
  return pyramid_scale_factor_;
}
inline float BoxDetectorOptions_ImageQuerySettings::pyramid_scale_factor() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.ImageQuerySettings.pyramid_scale_factor)
  return _internal_pyramid_scale_factor();
}
inline void BoxDetectorOptions_ImageQuerySettings::_internal_set_pyramid_scale_factor(float value) {
  _has_bits_[0] |= 0x00000002u;
  pyramid_scale_factor_ = value;
}
inline void BoxDetectorOptions_ImageQuerySettings::set_pyramid_scale_factor(float value) {
  _internal_set_pyramid_scale_factor(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.ImageQuerySettings.pyramid_scale_factor)
}

// optional int32 max_pyramid_levels = 3 [default = 4];
inline bool BoxDetectorOptions_ImageQuerySettings::_internal_has_max_pyramid_levels() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoxDetectorOptions_ImageQuerySettings::has_max_pyramid_levels() const {
  return _internal_has_max_pyramid_levels();
}
inline void BoxDetectorOptions_ImageQuerySettings::clear_max_pyramid_levels() {
  max_pyramid_levels_ = 4;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions_ImageQuerySettings::_internal_max_pyramid_levels() const {
  return max_pyramid_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions_ImageQuerySettings::max_pyramid_levels() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.ImageQuerySettings.max_pyramid_levels)
  return _internal_max_pyramid_levels();
}
inline void BoxDetectorOptions_ImageQuerySettings::_internal_set_max_pyramid_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_pyramid_levels_ = value;
}
inline void BoxDetectorOptions_ImageQuerySettings::set_max_pyramid_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_pyramid_levels(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.ImageQuerySettings.max_pyramid_levels)
}

// optional int32 max_features = 4 [default = 500];
inline bool BoxDetectorOptions_ImageQuerySettings::_internal_has_max_features() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BoxDetectorOptions_ImageQuerySettings::has_max_features() const {
  return _internal_has_max_features();
}
inline void BoxDetectorOptions_ImageQuerySettings::clear_max_features() {
  max_features_ = 500;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions_ImageQuerySettings::_internal_max_features() const {
  return max_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions_ImageQuerySettings::max_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.ImageQuerySettings.max_features)
  return _internal_max_features();
}
inline void BoxDetectorOptions_ImageQuerySettings::_internal_set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_features_ = value;
}
inline void BoxDetectorOptions_ImageQuerySettings::set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.ImageQuerySettings.max_features)
}

// -------------------------------------------------------------------

// BoxDetectorOptions

// optional .mediapipe.BoxDetectorOptions.IndexType index_type = 1 [default = OPENCV_BF];
inline bool BoxDetectorOptions::_internal_has_index_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_index_type() const {
  return _internal_has_index_type();
}
inline void BoxDetectorOptions::clear_index_type() {
  index_type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mediapipe::BoxDetectorOptions_IndexType BoxDetectorOptions::_internal_index_type() const {
  return static_cast< ::mediapipe::BoxDetectorOptions_IndexType >(index_type_);
}
inline ::mediapipe::BoxDetectorOptions_IndexType BoxDetectorOptions::index_type() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.index_type)
  return _internal_index_type();
}
inline void BoxDetectorOptions::_internal_set_index_type(::mediapipe::BoxDetectorOptions_IndexType value) {
  assert(::mediapipe::BoxDetectorOptions_IndexType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  index_type_ = value;
}
inline void BoxDetectorOptions::set_index_type(::mediapipe::BoxDetectorOptions_IndexType value) {
  _internal_set_index_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.index_type)
}

// optional int32 detect_every_n_frame = 2 [default = 0];
inline bool BoxDetectorOptions::_internal_has_detect_every_n_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_detect_every_n_frame() const {
  return _internal_has_detect_every_n_frame();
}
inline void BoxDetectorOptions::clear_detect_every_n_frame() {
  detect_every_n_frame_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions::_internal_detect_every_n_frame() const {
  return detect_every_n_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions::detect_every_n_frame() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.detect_every_n_frame)
  return _internal_detect_every_n_frame();
}
inline void BoxDetectorOptions::_internal_set_detect_every_n_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  detect_every_n_frame_ = value;
}
inline void BoxDetectorOptions::set_detect_every_n_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_detect_every_n_frame(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.detect_every_n_frame)
}

// optional bool detect_out_of_fov = 4 [default = false];
inline bool BoxDetectorOptions::_internal_has_detect_out_of_fov() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_detect_out_of_fov() const {
  return _internal_has_detect_out_of_fov();
}
inline void BoxDetectorOptions::clear_detect_out_of_fov() {
  detect_out_of_fov_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BoxDetectorOptions::_internal_detect_out_of_fov() const {
  return detect_out_of_fov_;
}
inline bool BoxDetectorOptions::detect_out_of_fov() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.detect_out_of_fov)
  return _internal_detect_out_of_fov();
}
inline void BoxDetectorOptions::_internal_set_detect_out_of_fov(bool value) {
  _has_bits_[0] |= 0x00000004u;
  detect_out_of_fov_ = value;
}
inline void BoxDetectorOptions::set_detect_out_of_fov(bool value) {
  _internal_set_detect_out_of_fov(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.detect_out_of_fov)
}

// optional .mediapipe.BoxDetectorOptions.ImageQuerySettings image_query_settings = 3;
inline bool BoxDetectorOptions::_internal_has_image_query_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || image_query_settings_ != nullptr);
  return value;
}
inline bool BoxDetectorOptions::has_image_query_settings() const {
  return _internal_has_image_query_settings();
}
inline void BoxDetectorOptions::clear_image_query_settings() {
  if (image_query_settings_ != nullptr) image_query_settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::BoxDetectorOptions_ImageQuerySettings& BoxDetectorOptions::_internal_image_query_settings() const {
  const ::mediapipe::BoxDetectorOptions_ImageQuerySettings* p = image_query_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::BoxDetectorOptions_ImageQuerySettings&>(
      ::mediapipe::_BoxDetectorOptions_ImageQuerySettings_default_instance_);
}
inline const ::mediapipe::BoxDetectorOptions_ImageQuerySettings& BoxDetectorOptions::image_query_settings() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.image_query_settings)
  return _internal_image_query_settings();
}
inline void BoxDetectorOptions::unsafe_arena_set_allocated_image_query_settings(
    ::mediapipe::BoxDetectorOptions_ImageQuerySettings* image_query_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_query_settings_);
  }
  image_query_settings_ = image_query_settings;
  if (image_query_settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.BoxDetectorOptions.image_query_settings)
}
inline ::mediapipe::BoxDetectorOptions_ImageQuerySettings* BoxDetectorOptions::release_image_query_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::BoxDetectorOptions_ImageQuerySettings* temp = image_query_settings_;
  image_query_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::BoxDetectorOptions_ImageQuerySettings* BoxDetectorOptions::unsafe_arena_release_image_query_settings() {
  // @@protoc_insertion_point(field_release:mediapipe.BoxDetectorOptions.image_query_settings)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::BoxDetectorOptions_ImageQuerySettings* temp = image_query_settings_;
  image_query_settings_ = nullptr;
  return temp;
}
inline ::mediapipe::BoxDetectorOptions_ImageQuerySettings* BoxDetectorOptions::_internal_mutable_image_query_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (image_query_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::BoxDetectorOptions_ImageQuerySettings>(GetArena());
    image_query_settings_ = p;
  }
  return image_query_settings_;
}
inline ::mediapipe::BoxDetectorOptions_ImageQuerySettings* BoxDetectorOptions::mutable_image_query_settings() {
  // @@protoc_insertion_point(field_mutable:mediapipe.BoxDetectorOptions.image_query_settings)
  return _internal_mutable_image_query_settings();
}
inline void BoxDetectorOptions::set_allocated_image_query_settings(::mediapipe::BoxDetectorOptions_ImageQuerySettings* image_query_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_query_settings_;
  }
  if (image_query_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_query_settings);
    if (message_arena != submessage_arena) {
      image_query_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_query_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_query_settings_ = image_query_settings;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.BoxDetectorOptions.image_query_settings)
}

// optional int32 descriptor_dims = 5 [default = 40];
inline bool BoxDetectorOptions::_internal_has_descriptor_dims() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_descriptor_dims() const {
  return _internal_has_descriptor_dims();
}
inline void BoxDetectorOptions::clear_descriptor_dims() {
  descriptor_dims_ = 40;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions::_internal_descriptor_dims() const {
  return descriptor_dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions::descriptor_dims() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.descriptor_dims)
  return _internal_descriptor_dims();
}
inline void BoxDetectorOptions::_internal_set_descriptor_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  descriptor_dims_ = value;
}
inline void BoxDetectorOptions::set_descriptor_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_descriptor_dims(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.descriptor_dims)
}

// optional int32 min_num_correspondence = 6 [default = 5];
inline bool BoxDetectorOptions::_internal_has_min_num_correspondence() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_min_num_correspondence() const {
  return _internal_has_min_num_correspondence();
}
inline void BoxDetectorOptions::clear_min_num_correspondence() {
  min_num_correspondence_ = 5;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions::_internal_min_num_correspondence() const {
  return min_num_correspondence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoxDetectorOptions::min_num_correspondence() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.min_num_correspondence)
  return _internal_min_num_correspondence();
}
inline void BoxDetectorOptions::_internal_set_min_num_correspondence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  min_num_correspondence_ = value;
}
inline void BoxDetectorOptions::set_min_num_correspondence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_num_correspondence(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.min_num_correspondence)
}

// optional float ransac_reprojection_threshold = 7 [default = 0.005];
inline bool BoxDetectorOptions::_internal_has_ransac_reprojection_threshold() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_ransac_reprojection_threshold() const {
  return _internal_has_ransac_reprojection_threshold();
}
inline void BoxDetectorOptions::clear_ransac_reprojection_threshold() {
  ransac_reprojection_threshold_ = 0.005f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float BoxDetectorOptions::_internal_ransac_reprojection_threshold() const {
  return ransac_reprojection_threshold_;
}
inline float BoxDetectorOptions::ransac_reprojection_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.ransac_reprojection_threshold)
  return _internal_ransac_reprojection_threshold();
}
inline void BoxDetectorOptions::_internal_set_ransac_reprojection_threshold(float value) {
  _has_bits_[0] |= 0x00000040u;
  ransac_reprojection_threshold_ = value;
}
inline void BoxDetectorOptions::set_ransac_reprojection_threshold(float value) {
  _internal_set_ransac_reprojection_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.ransac_reprojection_threshold)
}

// optional float max_match_distance = 8 [default = 0.9];
inline bool BoxDetectorOptions::_internal_has_max_match_distance() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_max_match_distance() const {
  return _internal_has_max_match_distance();
}
inline void BoxDetectorOptions::clear_max_match_distance() {
  max_match_distance_ = 0.9f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float BoxDetectorOptions::_internal_max_match_distance() const {
  return max_match_distance_;
}
inline float BoxDetectorOptions::max_match_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.max_match_distance)
  return _internal_max_match_distance();
}
inline void BoxDetectorOptions::_internal_set_max_match_distance(float value) {
  _has_bits_[0] |= 0x00000080u;
  max_match_distance_ = value;
}
inline void BoxDetectorOptions::set_max_match_distance(float value) {
  _internal_set_max_match_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.max_match_distance)
}

// optional float max_perspective_factor = 9 [default = 0.1];
inline bool BoxDetectorOptions::_internal_has_max_perspective_factor() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BoxDetectorOptions::has_max_perspective_factor() const {
  return _internal_has_max_perspective_factor();
}
inline void BoxDetectorOptions::clear_max_perspective_factor() {
  max_perspective_factor_ = 0.1f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float BoxDetectorOptions::_internal_max_perspective_factor() const {
  return max_perspective_factor_;
}
inline float BoxDetectorOptions::max_perspective_factor() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorOptions.max_perspective_factor)
  return _internal_max_perspective_factor();
}
inline void BoxDetectorOptions::_internal_set_max_perspective_factor(float value) {
  _has_bits_[0] |= 0x00000100u;
  max_perspective_factor_ = value;
}
inline void BoxDetectorOptions::set_max_perspective_factor(float value) {
  _internal_set_max_perspective_factor(value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorOptions.max_perspective_factor)
}

// -------------------------------------------------------------------

// BoxDetectorIndex_BoxEntry_FrameEntry

// optional .mediapipe.TimedBoxProto box = 1;
inline bool BoxDetectorIndex_BoxEntry_FrameEntry::_internal_has_box() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || box_ != nullptr);
  return value;
}
inline bool BoxDetectorIndex_BoxEntry_FrameEntry::has_box() const {
  return _internal_has_box();
}
inline const ::mediapipe::TimedBoxProto& BoxDetectorIndex_BoxEntry_FrameEntry::_internal_box() const {
  const ::mediapipe::TimedBoxProto* p = box_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TimedBoxProto&>(
      ::mediapipe::_TimedBoxProto_default_instance_);
}
inline const ::mediapipe::TimedBoxProto& BoxDetectorIndex_BoxEntry_FrameEntry::box() const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.box)
  return _internal_box();
}
inline void BoxDetectorIndex_BoxEntry_FrameEntry::unsafe_arena_set_allocated_box(
    ::mediapipe::TimedBoxProto* box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_);
  }
  box_ = box;
  if (box) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.box)
}
inline ::mediapipe::TimedBoxProto* BoxDetectorIndex_BoxEntry_FrameEntry::release_box() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TimedBoxProto* temp = box_;
  box_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TimedBoxProto* BoxDetectorIndex_BoxEntry_FrameEntry::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.box)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TimedBoxProto* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::mediapipe::TimedBoxProto* BoxDetectorIndex_BoxEntry_FrameEntry::_internal_mutable_box() {
  _has_bits_[0] |= 0x00000001u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TimedBoxProto>(GetArena());
    box_ = p;
  }
  return box_;
}
inline ::mediapipe::TimedBoxProto* BoxDetectorIndex_BoxEntry_FrameEntry::mutable_box() {
  // @@protoc_insertion_point(field_mutable:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.box)
  return _internal_mutable_box();
}
inline void BoxDetectorIndex_BoxEntry_FrameEntry::set_allocated_box(::mediapipe::TimedBoxProto* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box)->GetArena();
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.box)
}

// repeated float keypoints = 2;
inline int BoxDetectorIndex_BoxEntry_FrameEntry::_internal_keypoints_size() const {
  return keypoints_.size();
}
inline int BoxDetectorIndex_BoxEntry_FrameEntry::keypoints_size() const {
  return _internal_keypoints_size();
}
inline void BoxDetectorIndex_BoxEntry_FrameEntry::clear_keypoints() {
  keypoints_.Clear();
}
inline float BoxDetectorIndex_BoxEntry_FrameEntry::_internal_keypoints(int index) const {
  return keypoints_.Get(index);
}
inline float BoxDetectorIndex_BoxEntry_FrameEntry::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.keypoints)
  return _internal_keypoints(index);
}
inline void BoxDetectorIndex_BoxEntry_FrameEntry::set_keypoints(int index, float value) {
  keypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.keypoints)
}
inline void BoxDetectorIndex_BoxEntry_FrameEntry::_internal_add_keypoints(float value) {
  keypoints_.Add(value);
}
inline void BoxDetectorIndex_BoxEntry_FrameEntry::add_keypoints(float value) {
  _internal_add_keypoints(value);
  // @@protoc_insertion_point(field_add:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.keypoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BoxDetectorIndex_BoxEntry_FrameEntry::_internal_keypoints() const {
  return keypoints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BoxDetectorIndex_BoxEntry_FrameEntry::keypoints() const {
  // @@protoc_insertion_point(field_list:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.keypoints)
  return _internal_keypoints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BoxDetectorIndex_BoxEntry_FrameEntry::_internal_mutable_keypoints() {
  return &keypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BoxDetectorIndex_BoxEntry_FrameEntry::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.keypoints)
  return _internal_mutable_keypoints();
}

// repeated .mediapipe.BinaryFeatureDescriptor descriptors = 3;
inline int BoxDetectorIndex_BoxEntry_FrameEntry::_internal_descriptors_size() const {
  return descriptors_.size();
}
inline int BoxDetectorIndex_BoxEntry_FrameEntry::descriptors_size() const {
  return _internal_descriptors_size();
}
inline ::mediapipe::BinaryFeatureDescriptor* BoxDetectorIndex_BoxEntry_FrameEntry::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.descriptors)
  return descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >*
BoxDetectorIndex_BoxEntry_FrameEntry::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.descriptors)
  return &descriptors_;
}
inline const ::mediapipe::BinaryFeatureDescriptor& BoxDetectorIndex_BoxEntry_FrameEntry::_internal_descriptors(int index) const {
  return descriptors_.Get(index);
}
inline const ::mediapipe::BinaryFeatureDescriptor& BoxDetectorIndex_BoxEntry_FrameEntry::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.descriptors)
  return _internal_descriptors(index);
}
inline ::mediapipe::BinaryFeatureDescriptor* BoxDetectorIndex_BoxEntry_FrameEntry::_internal_add_descriptors() {
  return descriptors_.Add();
}
inline ::mediapipe::BinaryFeatureDescriptor* BoxDetectorIndex_BoxEntry_FrameEntry::add_descriptors() {
  // @@protoc_insertion_point(field_add:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.descriptors)
  return _internal_add_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >&
BoxDetectorIndex_BoxEntry_FrameEntry::descriptors() const {
  // @@protoc_insertion_point(field_list:mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry.descriptors)
  return descriptors_;
}

// -------------------------------------------------------------------

// BoxDetectorIndex_BoxEntry

// repeated .mediapipe.BoxDetectorIndex.BoxEntry.FrameEntry frame_entry = 1;
inline int BoxDetectorIndex_BoxEntry::_internal_frame_entry_size() const {
  return frame_entry_.size();
}
inline int BoxDetectorIndex_BoxEntry::frame_entry_size() const {
  return _internal_frame_entry_size();
}
inline void BoxDetectorIndex_BoxEntry::clear_frame_entry() {
  frame_entry_.Clear();
}
inline ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* BoxDetectorIndex_BoxEntry::mutable_frame_entry(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.BoxDetectorIndex.BoxEntry.frame_entry)
  return frame_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry >*
BoxDetectorIndex_BoxEntry::mutable_frame_entry() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.BoxDetectorIndex.BoxEntry.frame_entry)
  return &frame_entry_;
}
inline const ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry& BoxDetectorIndex_BoxEntry::_internal_frame_entry(int index) const {
  return frame_entry_.Get(index);
}
inline const ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry& BoxDetectorIndex_BoxEntry::frame_entry(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorIndex.BoxEntry.frame_entry)
  return _internal_frame_entry(index);
}
inline ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* BoxDetectorIndex_BoxEntry::_internal_add_frame_entry() {
  return frame_entry_.Add();
}
inline ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry* BoxDetectorIndex_BoxEntry::add_frame_entry() {
  // @@protoc_insertion_point(field_add:mediapipe.BoxDetectorIndex.BoxEntry.frame_entry)
  return _internal_add_frame_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry_FrameEntry >&
BoxDetectorIndex_BoxEntry::frame_entry() const {
  // @@protoc_insertion_point(field_list:mediapipe.BoxDetectorIndex.BoxEntry.frame_entry)
  return frame_entry_;
}

// -------------------------------------------------------------------

// BoxDetectorIndex

// repeated .mediapipe.BoxDetectorIndex.BoxEntry box_entry = 1;
inline int BoxDetectorIndex::_internal_box_entry_size() const {
  return box_entry_.size();
}
inline int BoxDetectorIndex::box_entry_size() const {
  return _internal_box_entry_size();
}
inline void BoxDetectorIndex::clear_box_entry() {
  box_entry_.Clear();
}
inline ::mediapipe::BoxDetectorIndex_BoxEntry* BoxDetectorIndex::mutable_box_entry(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.BoxDetectorIndex.box_entry)
  return box_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry >*
BoxDetectorIndex::mutable_box_entry() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.BoxDetectorIndex.box_entry)
  return &box_entry_;
}
inline const ::mediapipe::BoxDetectorIndex_BoxEntry& BoxDetectorIndex::_internal_box_entry(int index) const {
  return box_entry_.Get(index);
}
inline const ::mediapipe::BoxDetectorIndex_BoxEntry& BoxDetectorIndex::box_entry(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.BoxDetectorIndex.box_entry)
  return _internal_box_entry(index);
}
inline ::mediapipe::BoxDetectorIndex_BoxEntry* BoxDetectorIndex::_internal_add_box_entry() {
  return box_entry_.Add();
}
inline ::mediapipe::BoxDetectorIndex_BoxEntry* BoxDetectorIndex::add_box_entry() {
  // @@protoc_insertion_point(field_add:mediapipe.BoxDetectorIndex.box_entry)
  return _internal_add_box_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BoxDetectorIndex_BoxEntry >&
BoxDetectorIndex::box_entry() const {
  // @@protoc_insertion_point(field_list:mediapipe.BoxDetectorIndex.box_entry)
  return box_entry_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::BoxDetectorOptions_IndexType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::BoxDetectorOptions_IndexType>() {
  return ::mediapipe::BoxDetectorOptions_IndexType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fbox_5fdetector_2eproto
