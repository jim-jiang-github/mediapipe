// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/box_tracker.proto

#include "mediapipe/util/tracking/box_tracker.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr BoxTrackerOptions::BoxTrackerOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cache_file_format_(nullptr)
  , track_step_options_(nullptr)
  , record_path_states_(false)
  , read_chunk_timeout_msec_(60000)
  , caching_chunk_size_msec_(2500)
  , num_tracking_workers_(8){}
struct BoxTrackerOptionsDefaultTypeInternal {
  constexpr BoxTrackerOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxTrackerOptionsDefaultTypeInternal() {}
  union {
    BoxTrackerOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxTrackerOptionsDefaultTypeInternal _BoxTrackerOptions_default_instance_;
constexpr TimedBoxProto::TimedBoxProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quad_(nullptr)
  , top_(0)
  , left_(0)
  , bottom_(0)
  , right_(0)
  , time_msec_(PROTOBUF_LONGLONG(0))
  , rotation_(0)
  , confidence_(0)
  , aspect_ratio_(0)
  , reacquisition_(false)
  , request_grouping_(false)
  , id_(-1){}
struct TimedBoxProtoDefaultTypeInternal {
  constexpr TimedBoxProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimedBoxProtoDefaultTypeInternal() {}
  union {
    TimedBoxProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimedBoxProtoDefaultTypeInternal _TimedBoxProto_default_instance_;
constexpr TimedBoxProtoList::TimedBoxProtoList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : box_(){}
struct TimedBoxProtoListDefaultTypeInternal {
  constexpr TimedBoxProtoListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimedBoxProtoListDefaultTypeInternal() {}
  union {
    TimedBoxProtoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimedBoxProtoListDefaultTypeInternal _TimedBoxProtoList_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, caching_chunk_size_msec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, cache_file_format_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, num_tracking_workers_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, read_chunk_timeout_msec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, record_path_states_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BoxTrackerOptions, track_step_options_),
  4,
  0,
  5,
  3,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, top_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, left_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, bottom_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, right_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, quad_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, time_msec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, label_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, confidence_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, reacquisition_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProto, request_grouping_),
  2,
  3,
  4,
  5,
  7,
  1,
  6,
  12,
  0,
  8,
  9,
  10,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProtoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TimedBoxProtoList, box_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mediapipe::BoxTrackerOptions)},
  { 17, 35, sizeof(::mediapipe::TimedBoxProto)},
  { 48, -1, sizeof(::mediapipe::TimedBoxProtoList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BoxTrackerOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TimedBoxProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TimedBoxProtoList_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)mediapipe/util/tracking/box_tracker.pr"
  "oto\022\tmediapipe\032&mediapipe/util/tracking/"
  "tracking.proto\"\206\002\n\021BoxTrackerOptions\022%\n\027"
  "caching_chunk_size_msec\030\001 \001(\005:\0042500\022%\n\021c"
  "ache_file_format\030\002 \001(\t:\nchunk_%04d\022\037\n\024nu"
  "m_tracking_workers\030\003 \001(\005:\0018\022&\n\027read_chun"
  "k_timeout_msec\030\004 \001(\005:\00560000\022!\n\022record_pa"
  "th_states\030\005 \001(\010:\005false\0227\n\022track_step_opt"
  "ions\030\006 \001(\0132\033.mediapipe.TrackStepOptions\""
  "\247\002\n\rTimedBoxProto\022\013\n\003top\030\001 \001(\002\022\014\n\004left\030\002"
  " \001(\002\022\016\n\006bottom\030\003 \001(\002\022\r\n\005right\030\004 \001(\002\022\020\n\010r"
  "otation\030\007 \001(\002\022,\n\004quad\030\t \001(\0132\036.mediapipe."
  "MotionBoxState.Quad\022\024\n\ttime_msec\030\005 \001(\003:\001"
  "0\022\016\n\002id\030\006 \001(\005:\002-1\022\r\n\005label\030\r \001(\t\022\022\n\nconf"
  "idence\030\010 \001(\002\022\024\n\014aspect_ratio\030\n \001(\002\022\034\n\rre"
  "acquisition\030\013 \001(\010:\005false\022\037\n\020request_grou"
  "ping\030\014 \001(\010:\005false\":\n\021TimedBoxProtoList\022%"
  "\n\003box\030\001 \003(\0132\030.mediapipe.TimedBoxProtoB0\n"
  "\035com.google.mediapipe.trackingB\017BoxTrack"
  "erProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto = {
  false, false, 767, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto, "mediapipe/util/tracking/box_tracker.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto);
namespace mediapipe {

// ===================================================================

class BoxTrackerOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BoxTrackerOptions>()._has_bits_);
  static void set_has_caching_chunk_size_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cache_file_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_tracking_workers(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_read_chunk_timeout_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_record_path_states(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::TrackStepOptions& track_step_options(const BoxTrackerOptions* msg);
  static void set_has_track_step_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mediapipe::TrackStepOptions&
BoxTrackerOptions::_Internal::track_step_options(const BoxTrackerOptions* msg) {
  return *msg->track_step_options_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString BoxTrackerOptions::_i_give_permission_to_break_this_code_default_cache_file_format_{{{"chunk_%04d", 10}}, {nullptr}};
void BoxTrackerOptions::clear_track_step_options() {
  if (track_step_options_ != nullptr) track_step_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BoxTrackerOptions::BoxTrackerOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BoxTrackerOptions)
}
BoxTrackerOptions::BoxTrackerOptions(const BoxTrackerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cache_file_format_.UnsafeSetDefault(nullptr);
  if (from._internal_has_cache_file_format()) {
    cache_file_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_cache_file_format(), 
      GetArena());
  }
  if (from._internal_has_track_step_options()) {
    track_step_options_ = new ::mediapipe::TrackStepOptions(*from.track_step_options_);
  } else {
    track_step_options_ = nullptr;
  }
  ::memcpy(&record_path_states_, &from.record_path_states_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_tracking_workers_) -
    reinterpret_cast<char*>(&record_path_states_)) + sizeof(num_tracking_workers_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.BoxTrackerOptions)
}

void BoxTrackerOptions::SharedCtor() {
cache_file_format_.UnsafeSetDefault(nullptr);
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&track_step_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_path_states_) -
    reinterpret_cast<char*>(&track_step_options_)) + sizeof(record_path_states_));
read_chunk_timeout_msec_ = 60000;
caching_chunk_size_msec_ = 2500;
num_tracking_workers_ = 8;
}

BoxTrackerOptions::~BoxTrackerOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.BoxTrackerOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxTrackerOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cache_file_format_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete track_step_options_;
}

void BoxTrackerOptions::ArenaDtor(void* object) {
  BoxTrackerOptions* _this = reinterpret_cast< BoxTrackerOptions* >(object);
  (void)_this;
}
void BoxTrackerOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxTrackerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoxTrackerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BoxTrackerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cache_file_format_.ClearToDefault(::mediapipe::BoxTrackerOptions::_i_give_permission_to_break_this_code_default_cache_file_format_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(track_step_options_ != nullptr);
      track_step_options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    record_path_states_ = false;
    read_chunk_timeout_msec_ = 60000;
    caching_chunk_size_msec_ = 2500;
    num_tracking_workers_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxTrackerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 caching_chunk_size_msec = 1 [default = 2500];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_caching_chunk_size_msec(&has_bits);
          caching_chunk_size_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cache_file_format = 2 [default = "chunk_%04d"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cache_file_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.BoxTrackerOptions.cache_file_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_tracking_workers = 3 [default = 8];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_tracking_workers(&has_bits);
          num_tracking_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 read_chunk_timeout_msec = 4 [default = 60000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_read_chunk_timeout_msec(&has_bits);
          read_chunk_timeout_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool record_path_states = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_record_path_states(&has_bits);
          record_path_states_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackStepOptions track_step_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_step_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxTrackerOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BoxTrackerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 caching_chunk_size_msec = 1 [default = 2500];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_caching_chunk_size_msec(), target);
  }

  // optional string cache_file_format = 2 [default = "chunk_%04d"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cache_file_format().data(), static_cast<int>(this->_internal_cache_file_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.BoxTrackerOptions.cache_file_format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cache_file_format(), target);
  }

  // optional int32 num_tracking_workers = 3 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_tracking_workers(), target);
  }

  // optional int32 read_chunk_timeout_msec = 4 [default = 60000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_read_chunk_timeout_msec(), target);
  }

  // optional bool record_path_states = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_record_path_states(), target);
  }

  // optional .mediapipe.TrackStepOptions track_step_options = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::track_step_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BoxTrackerOptions)
  return target;
}

size_t BoxTrackerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BoxTrackerOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cache_file_format = 2 [default = "chunk_%04d"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cache_file_format());
    }

    // optional .mediapipe.TrackStepOptions track_step_options = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *track_step_options_);
    }

    // optional bool record_path_states = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 read_chunk_timeout_msec = 4 [default = 60000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_read_chunk_timeout_msec());
    }

    // optional int32 caching_chunk_size_msec = 1 [default = 2500];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caching_chunk_size_msec());
    }

    // optional int32 num_tracking_workers = 3 [default = 8];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_tracking_workers());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxTrackerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BoxTrackerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxTrackerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxTrackerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BoxTrackerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BoxTrackerOptions)
    MergeFrom(*source);
  }
}

void BoxTrackerOptions::MergeFrom(const BoxTrackerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BoxTrackerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cache_file_format(from._internal_cache_file_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_track_step_options()->::mediapipe::TrackStepOptions::MergeFrom(from._internal_track_step_options());
    }
    if (cached_has_bits & 0x00000004u) {
      record_path_states_ = from.record_path_states_;
    }
    if (cached_has_bits & 0x00000008u) {
      read_chunk_timeout_msec_ = from.read_chunk_timeout_msec_;
    }
    if (cached_has_bits & 0x00000010u) {
      caching_chunk_size_msec_ = from.caching_chunk_size_msec_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_tracking_workers_ = from.num_tracking_workers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoxTrackerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BoxTrackerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxTrackerOptions::CopyFrom(const BoxTrackerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BoxTrackerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxTrackerOptions::IsInitialized() const {
  return true;
}

void BoxTrackerOptions::InternalSwap(BoxTrackerOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cache_file_format_.Swap(&other->cache_file_format_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoxTrackerOptions, record_path_states_)
      + sizeof(BoxTrackerOptions::record_path_states_)
      - PROTOBUF_FIELD_OFFSET(BoxTrackerOptions, track_step_options_)>(
          reinterpret_cast<char*>(&track_step_options_),
          reinterpret_cast<char*>(&other->track_step_options_));
  swap(read_chunk_timeout_msec_, other->read_chunk_timeout_msec_);
  swap(caching_chunk_size_msec_, other->caching_chunk_size_msec_);
  swap(num_tracking_workers_, other->num_tracking_workers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxTrackerOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto[0]);
}

// ===================================================================

class TimedBoxProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TimedBoxProto>()._has_bits_);
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mediapipe::MotionBoxState_Quad& quad(const TimedBoxProto* msg);
  static void set_has_quad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reacquisition(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_request_grouping(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::mediapipe::MotionBoxState_Quad&
TimedBoxProto::_Internal::quad(const TimedBoxProto* msg) {
  return *msg->quad_;
}
void TimedBoxProto::clear_quad() {
  if (quad_ != nullptr) quad_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TimedBoxProto::TimedBoxProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TimedBoxProto)
}
TimedBoxProto::TimedBoxProto(const TimedBoxProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  if (from._internal_has_quad()) {
    quad_ = new ::mediapipe::MotionBoxState_Quad(*from.quad_);
  } else {
    quad_ = nullptr;
  }
  ::memcpy(&top_, &from.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&top_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TimedBoxProto)
}

void TimedBoxProto::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quad_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_grouping_) -
    reinterpret_cast<char*>(&quad_)) + sizeof(request_grouping_));
id_ = -1;
}

TimedBoxProto::~TimedBoxProto() {
  // @@protoc_insertion_point(destructor:mediapipe.TimedBoxProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimedBoxProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quad_;
}

void TimedBoxProto::ArenaDtor(void* object) {
  TimedBoxProto* _this = reinterpret_cast< TimedBoxProto* >(object);
  (void)_this;
}
void TimedBoxProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimedBoxProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimedBoxProto::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TimedBoxProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quad_ != nullptr);
      quad_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&top_)) + sizeof(rotation_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_grouping_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(request_grouping_));
    id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedBoxProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bottom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 time_msec = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_msec(&has_bits);
          time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionBoxState.Quad quad = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_quad(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float aspect_ratio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_aspect_ratio(&has_bits);
          aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool reacquisition = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_reacquisition(&has_bits);
          reacquisition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool request_grouping = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_request_grouping(&has_bits);
          request_grouping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.TimedBoxProto.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedBoxProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TimedBoxProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float top = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_top(), target);
  }

  // optional float left = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left(), target);
  }

  // optional float bottom = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bottom(), target);
  }

  // optional float right = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_right(), target);
  }

  // optional int64 time_msec = 5 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_time_msec(), target);
  }

  // optional int32 id = 6 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_id(), target);
  }

  // optional float rotation = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rotation(), target);
  }

  // optional float confidence = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_confidence(), target);
  }

  // optional .mediapipe.MotionBoxState.Quad quad = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::quad(this), target, stream);
  }

  // optional float aspect_ratio = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_aspect_ratio(), target);
  }

  // optional bool reacquisition = 11 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_reacquisition(), target);
  }

  // optional bool request_grouping = 12 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_request_grouping(), target);
  }

  // optional string label = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.TimedBoxProto.label");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TimedBoxProto)
  return target;
}

size_t TimedBoxProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TimedBoxProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string label = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .mediapipe.MotionBoxState.Quad quad = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quad_);
    }

    // optional float top = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float left = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float bottom = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float right = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int64 time_msec = 5 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_msec());
    }

    // optional float rotation = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float confidence = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float aspect_ratio = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional bool reacquisition = 11 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool request_grouping = 12 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 id = 6 [default = -1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedBoxProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TimedBoxProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedBoxProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedBoxProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TimedBoxProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TimedBoxProto)
    MergeFrom(*source);
  }
}

void TimedBoxProto::MergeFrom(const TimedBoxProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TimedBoxProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quad()->::mediapipe::MotionBoxState_Quad::MergeFrom(from._internal_quad());
    }
    if (cached_has_bits & 0x00000004u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000010u) {
      bottom_ = from.bottom_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000080u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000200u) {
      aspect_ratio_ = from.aspect_ratio_;
    }
    if (cached_has_bits & 0x00000400u) {
      reacquisition_ = from.reacquisition_;
    }
    if (cached_has_bits & 0x00000800u) {
      request_grouping_ = from.request_grouping_;
    }
    if (cached_has_bits & 0x00001000u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimedBoxProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TimedBoxProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedBoxProto::CopyFrom(const TimedBoxProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TimedBoxProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedBoxProto::IsInitialized() const {
  return true;
}

void TimedBoxProto::InternalSwap(TimedBoxProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimedBoxProto, request_grouping_)
      + sizeof(TimedBoxProto::request_grouping_)
      - PROTOBUF_FIELD_OFFSET(TimedBoxProto, quad_)>(
          reinterpret_cast<char*>(&quad_),
          reinterpret_cast<char*>(&other->quad_));
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedBoxProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto[1]);
}

// ===================================================================

class TimedBoxProtoList::_Internal {
 public:
};

TimedBoxProtoList::TimedBoxProtoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  box_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TimedBoxProtoList)
}
TimedBoxProtoList::TimedBoxProtoList(const TimedBoxProtoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      box_(from.box_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.TimedBoxProtoList)
}

void TimedBoxProtoList::SharedCtor() {
}

TimedBoxProtoList::~TimedBoxProtoList() {
  // @@protoc_insertion_point(destructor:mediapipe.TimedBoxProtoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimedBoxProtoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimedBoxProtoList::ArenaDtor(void* object) {
  TimedBoxProtoList* _this = reinterpret_cast< TimedBoxProtoList* >(object);
  (void)_this;
}
void TimedBoxProtoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimedBoxProtoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimedBoxProtoList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TimedBoxProtoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedBoxProtoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.TimedBoxProto box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimedBoxProtoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TimedBoxProtoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.TimedBoxProto box = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_box_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_box(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TimedBoxProtoList)
  return target;
}

size_t TimedBoxProtoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TimedBoxProtoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.TimedBoxProto box = 1;
  total_size += 1UL * this->_internal_box_size();
  for (const auto& msg : this->box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedBoxProtoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TimedBoxProtoList)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedBoxProtoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimedBoxProtoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TimedBoxProtoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TimedBoxProtoList)
    MergeFrom(*source);
  }
}

void TimedBoxProtoList::MergeFrom(const TimedBoxProtoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TimedBoxProtoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_.MergeFrom(from.box_);
}

void TimedBoxProtoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TimedBoxProtoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedBoxProtoList::CopyFrom(const TimedBoxProtoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TimedBoxProtoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedBoxProtoList::IsInitialized() const {
  return true;
}

void TimedBoxProtoList::InternalSwap(TimedBoxProtoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  box_.InternalSwap(&other->box_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedBoxProtoList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fbox_5ftracker_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::BoxTrackerOptions* Arena::CreateMaybeMessage< ::mediapipe::BoxTrackerOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BoxTrackerOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TimedBoxProto* Arena::CreateMaybeMessage< ::mediapipe::TimedBoxProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TimedBoxProto >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TimedBoxProtoList* Arena::CreateMaybeMessage< ::mediapipe::TimedBoxProtoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TimedBoxProtoList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
