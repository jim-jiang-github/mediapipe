// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/camera_motion.proto

#include "mediapipe/util/tracking/camera_motion.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr CameraMotion::CameraMotion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mixture_inlier_coverage_()
  , overlay_indices_()
  , mixture_homography_spectrum_()
  , translation_(nullptr)
  , similarity_(nullptr)
  , linear_similarity_(nullptr)
  , affine_(nullptr)
  , homography_(nullptr)
  , mixture_homography_(nullptr)
  , type_(0)

  , mixture_row_sigma_(0)
  , average_homography_error_(0)
  , homography_inlier_coverage_(0)
  , rolling_shutter_guess_(0)
  , overridden_type_(0)

  , flags_(0)
  , blur_score_(0)
  , bluriness_(0)
  , homography_strict_inlier_coverage_(0)
  , average_magnitude_(0)
  , translation_variance_(0)
  , timestamp_usec_(PROTOBUF_LONGLONG(0))
  , frac_long_features_rejected_(0)
  , match_frame_(0)
  , similarity_inlier_ratio_(0)
  , similarity_strict_inlier_ratio_(0)
  , frame_width_(0)
  , frame_height_(0)
  , rolling_shutter_motion_index_(-1)
  , overlay_domain_(10){}
struct CameraMotionDefaultTypeInternal {
  constexpr CameraMotionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraMotionDefaultTypeInternal() {}
  union {
    CameraMotion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraMotionDefaultTypeInternal _CameraMotion_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, translation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, similarity_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, linear_similarity_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, affine_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, homography_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, mixture_homography_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, frame_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, frame_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, mixture_homography_spectrum_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, mixture_row_sigma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, average_magnitude_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, translation_variance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, similarity_inlier_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, similarity_strict_inlier_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, average_homography_error_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, homography_inlier_coverage_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, homography_strict_inlier_coverage_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, mixture_inlier_coverage_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, rolling_shutter_guess_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, rolling_shutter_motion_index_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, overlay_indices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, overlay_domain_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, overridden_type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, flags_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, blur_score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, bluriness_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, frac_long_features_rejected_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, timestamp_usec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CameraMotion, match_frame_),
  0,
  1,
  2,
  3,
  4,
  5,
  23,
  24,
  ~0u,
  7,
  16,
  17,
  21,
  22,
  8,
  9,
  15,
  ~0u,
  10,
  25,
  ~0u,
  26,
  6,
  11,
  12,
  13,
  14,
  19,
  18,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 35, sizeof(::mediapipe::CameraMotion)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_CameraMotion_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+mediapipe/util/tracking/camera_motion."
  "proto\022\tmediapipe\032+mediapipe/util/trackin"
  "g/motion_models.proto\"\206\013\n\014CameraMotion\0220"
  "\n\013translation\030\001 \001(\0132\033.mediapipe.Translat"
  "ionModel\022.\n\nsimilarity\030\002 \001(\0132\032.mediapipe"
  ".SimilarityModel\022;\n\021linear_similarity\030\003 "
  "\001(\0132 .mediapipe.LinearSimilarityModel\022&\n"
  "\006affine\030\004 \001(\0132\026.mediapipe.AffineModel\022)\n"
  "\nhomography\030\005 \001(\0132\025.mediapipe.Homography"
  "\0228\n\022mixture_homography\030\010 \001(\0132\034.mediapipe"
  ".MixtureHomography\022\023\n\013frame_width\030\037 \001(\002\022"
  "\024\n\014frame_height\030  \001(\002\022A\n\033mixture_homogra"
  "phy_spectrum\030\027 \003(\0132\034.mediapipe.MixtureHo"
  "mography\022\031\n\021mixture_row_sigma\030\n \001(\002\022\034\n\021a"
  "verage_magnitude\030\030 \001(\002:\0010\022\037\n\024translation"
  "_variance\030\031 \001(\002:\0010\022\"\n\027similarity_inlier_"
  "ratio\030\035 \001(\002:\0010\022)\n\036similarity_strict_inli"
  "er_ratio\030\036 \001(\002:\0010\022 \n\030average_homography_"
  "error\030\013 \001(\002\022\"\n\032homography_inlier_coverag"
  "e\030\014 \001(\002\022)\n!homography_strict_inlier_cove"
  "rage\030\026 \001(\002\022\037\n\027mixture_inlier_coverage\030\r "
  "\003(\002\022\035\n\025rolling_shutter_guess\030\016 \001(\002\022(\n\034ro"
  "lling_shutter_motion_index\030\020 \001(\005:\002-1\022\027\n\017"
  "overlay_indices\030\021 \003(\005\022\032\n\016overlay_domain\030"
  "\022 \001(\005:\00210\0221\n\004type\030\006 \001(\0162\034.mediapipe.Came"
  "raMotion.Type:\005VALID\022<\n\017overridden_type\030"
  "\017 \001(\0162\034.mediapipe.CameraMotion.Type:\005VAL"
  "ID\022\020\n\005flags\030\023 \001(\005:\0010\022\022\n\nblur_score\030\024 \001(\002"
  "\022\024\n\tbluriness\030\025 \001(\002:\0010\022#\n\033frac_long_feat"
  "ures_rejected\030\032 \001(\002\022\031\n\016timestamp_usec\030\033 "
  "\001(\003:\0010\022\026\n\013match_frame\030\034 \001(\005:\0010\"R\n\004Type\022\t"
  "\n\005VALID\020\000\022\022\n\016UNSTABLE_HOMOG\020\001\022\020\n\014UNSTABL"
  "E_SIM\020\002\022\014\n\010UNSTABLE\020\003\022\013\n\007INVALID\020\004\"\303\001\n\005F"
  "lags\022\026\n\022FLAG_SHOT_BOUNDARY\020\001\022\025\n\021FLAG_BLU"
  "RRY_FRAME\020\002\022\026\n\022FLAG_MAJOR_OVERLAY\020\004\022\024\n\020F"
  "LAG_SHARP_FRAME\020\010\022\034\n\030FLAG_SINGULAR_ESTIM"
  "ATION\020\020\022\022\n\016FLAG_SHOT_FADE\020 \022\023\n\017FLAG_DUPL"
  "ICATED\020@\022\026\n\021FLAG_CENTER_FRAME\020\200\001*\004\010\t\020\n"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto = {
  false, false, 1518, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto, "mediapipe/util/tracking/camera_motion.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraMotion_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto[0];
}
bool CameraMotion_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraMotion_Type CameraMotion::VALID;
constexpr CameraMotion_Type CameraMotion::UNSTABLE_HOMOG;
constexpr CameraMotion_Type CameraMotion::UNSTABLE_SIM;
constexpr CameraMotion_Type CameraMotion::UNSTABLE;
constexpr CameraMotion_Type CameraMotion::INVALID;
constexpr CameraMotion_Type CameraMotion::Type_MIN;
constexpr CameraMotion_Type CameraMotion::Type_MAX;
constexpr int CameraMotion::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraMotion_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto[1];
}
bool CameraMotion_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraMotion_Flags CameraMotion::FLAG_SHOT_BOUNDARY;
constexpr CameraMotion_Flags CameraMotion::FLAG_BLURRY_FRAME;
constexpr CameraMotion_Flags CameraMotion::FLAG_MAJOR_OVERLAY;
constexpr CameraMotion_Flags CameraMotion::FLAG_SHARP_FRAME;
constexpr CameraMotion_Flags CameraMotion::FLAG_SINGULAR_ESTIMATION;
constexpr CameraMotion_Flags CameraMotion::FLAG_SHOT_FADE;
constexpr CameraMotion_Flags CameraMotion::FLAG_DUPLICATED;
constexpr CameraMotion_Flags CameraMotion::FLAG_CENTER_FRAME;
constexpr CameraMotion_Flags CameraMotion::Flags_MIN;
constexpr CameraMotion_Flags CameraMotion::Flags_MAX;
constexpr int CameraMotion::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CameraMotion::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraMotion>()._has_bits_);
  static const ::mediapipe::TranslationModel& translation(const CameraMotion* msg);
  static void set_has_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::SimilarityModel& similarity(const CameraMotion* msg);
  static void set_has_similarity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::LinearSimilarityModel& linear_similarity(const CameraMotion* msg);
  static void set_has_linear_similarity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::AffineModel& affine(const CameraMotion* msg);
  static void set_has_affine(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mediapipe::Homography& homography(const CameraMotion* msg);
  static void set_has_homography(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mediapipe::MixtureHomography& mixture_homography(const CameraMotion* msg);
  static void set_has_mixture_homography(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_mixture_row_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_average_magnitude(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_translation_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_similarity_inlier_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_similarity_strict_inlier_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_average_homography_error(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_homography_inlier_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_homography_strict_inlier_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rolling_shutter_guess(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rolling_shutter_motion_index(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_overlay_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_overridden_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_blur_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bluriness(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_frac_long_features_rejected(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_match_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::mediapipe::TranslationModel&
CameraMotion::_Internal::translation(const CameraMotion* msg) {
  return *msg->translation_;
}
const ::mediapipe::SimilarityModel&
CameraMotion::_Internal::similarity(const CameraMotion* msg) {
  return *msg->similarity_;
}
const ::mediapipe::LinearSimilarityModel&
CameraMotion::_Internal::linear_similarity(const CameraMotion* msg) {
  return *msg->linear_similarity_;
}
const ::mediapipe::AffineModel&
CameraMotion::_Internal::affine(const CameraMotion* msg) {
  return *msg->affine_;
}
const ::mediapipe::Homography&
CameraMotion::_Internal::homography(const CameraMotion* msg) {
  return *msg->homography_;
}
const ::mediapipe::MixtureHomography&
CameraMotion::_Internal::mixture_homography(const CameraMotion* msg) {
  return *msg->mixture_homography_;
}
void CameraMotion::clear_translation() {
  if (translation_ != nullptr) translation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CameraMotion::clear_similarity() {
  if (similarity_ != nullptr) similarity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CameraMotion::clear_linear_similarity() {
  if (linear_similarity_ != nullptr) linear_similarity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CameraMotion::clear_affine() {
  if (affine_ != nullptr) affine_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CameraMotion::clear_homography() {
  if (homography_ != nullptr) homography_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CameraMotion::clear_mixture_homography() {
  if (mixture_homography_ != nullptr) mixture_homography_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CameraMotion::clear_mixture_homography_spectrum() {
  mixture_homography_spectrum_.Clear();
}
CameraMotion::CameraMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  mixture_inlier_coverage_(arena),
  overlay_indices_(arena),
  mixture_homography_spectrum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.CameraMotion)
}
CameraMotion::CameraMotion(const CameraMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mixture_inlier_coverage_(from.mixture_inlier_coverage_),
      overlay_indices_(from.overlay_indices_),
      mixture_homography_spectrum_(from.mixture_homography_spectrum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_translation()) {
    translation_ = new ::mediapipe::TranslationModel(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_similarity()) {
    similarity_ = new ::mediapipe::SimilarityModel(*from.similarity_);
  } else {
    similarity_ = nullptr;
  }
  if (from._internal_has_linear_similarity()) {
    linear_similarity_ = new ::mediapipe::LinearSimilarityModel(*from.linear_similarity_);
  } else {
    linear_similarity_ = nullptr;
  }
  if (from._internal_has_affine()) {
    affine_ = new ::mediapipe::AffineModel(*from.affine_);
  } else {
    affine_ = nullptr;
  }
  if (from._internal_has_homography()) {
    homography_ = new ::mediapipe::Homography(*from.homography_);
  } else {
    homography_ = nullptr;
  }
  if (from._internal_has_mixture_homography()) {
    mixture_homography_ = new ::mediapipe::MixtureHomography(*from.mixture_homography_);
  } else {
    mixture_homography_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlay_domain_) -
    reinterpret_cast<char*>(&type_)) + sizeof(overlay_domain_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.CameraMotion)
}

void CameraMotion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_height_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(frame_height_));
rolling_shutter_motion_index_ = -1;
overlay_domain_ = 10;
}

CameraMotion::~CameraMotion() {
  // @@protoc_insertion_point(destructor:mediapipe.CameraMotion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraMotion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete similarity_;
  if (this != internal_default_instance()) delete linear_similarity_;
  if (this != internal_default_instance()) delete affine_;
  if (this != internal_default_instance()) delete homography_;
  if (this != internal_default_instance()) delete mixture_homography_;
}

void CameraMotion::ArenaDtor(void* object) {
  CameraMotion* _this = reinterpret_cast< CameraMotion* >(object);
  (void)_this;
}
void CameraMotion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraMotion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.CameraMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  mixture_inlier_coverage_.Clear();
  overlay_indices_.Clear();
  mixture_homography_spectrum_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(translation_ != nullptr);
      translation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(similarity_ != nullptr);
      similarity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_similarity_ != nullptr);
      linear_similarity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(affine_ != nullptr);
      affine_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(homography_ != nullptr);
      homography_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mixture_homography_ != nullptr);
      mixture_homography_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mixture_row_sigma_) -
        reinterpret_cast<char*>(&type_)) + sizeof(mixture_row_sigma_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&average_homography_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&homography_strict_inlier_coverage_) -
        reinterpret_cast<char*>(&average_homography_error_)) + sizeof(homography_strict_inlier_coverage_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&average_magnitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_width_) -
        reinterpret_cast<char*>(&average_magnitude_)) + sizeof(frame_width_));
  }
  if (cached_has_bits & 0x07000000u) {
    frame_height_ = 0;
    rolling_shutter_motion_index_ = -1;
    overlay_domain_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraMotion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.TranslationModel translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.SimilarityModel similarity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_similarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.LinearSimilarityModel linear_similarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_similarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.AffineModel affine = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_affine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.Homography homography = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_homography(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.CameraMotion.Type type = 6 [default = VALID];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::CameraMotion_Type_IsValid(val))) {
            _internal_set_type(static_cast<::mediapipe::CameraMotion_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MixtureHomography mixture_homography = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixture_homography(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mixture_row_sigma = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_mixture_row_sigma(&has_bits);
          mixture_row_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_homography_error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_average_homography_error(&has_bits);
          average_homography_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float homography_inlier_coverage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_homography_inlier_coverage(&has_bits);
          homography_inlier_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float mixture_inlier_coverage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mixture_inlier_coverage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mixture_inlier_coverage(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rolling_shutter_guess = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_rolling_shutter_guess(&has_bits);
          rolling_shutter_guess_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.CameraMotion.Type overridden_type = 15 [default = VALID];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::CameraMotion_Type_IsValid(val))) {
            _internal_set_overridden_type(static_cast<::mediapipe::CameraMotion_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 rolling_shutter_motion_index = 16 [default = -1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_rolling_shutter_motion_index(&has_bits);
          rolling_shutter_motion_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 overlay_indices = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_overlay_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_overlay_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 overlay_domain = 18 [default = 10];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_overlay_domain(&has_bits);
          overlay_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float blur_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_blur_score(&has_bits);
          blur_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bluriness = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_bluriness(&has_bits);
          bluriness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float homography_strict_inlier_coverage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_homography_strict_inlier_coverage(&has_bits);
          homography_strict_inlier_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.MixtureHomography mixture_homography_spectrum = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mixture_homography_spectrum(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float average_magnitude = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_average_magnitude(&has_bits);
          average_magnitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float translation_variance = 25 [default = 0];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_translation_variance(&has_bits);
          translation_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frac_long_features_rejected = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_frac_long_features_rejected(&has_bits);
          frac_long_features_rejected_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_usec = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_timestamp_usec(&has_bits);
          timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_frame = 28 [default = 0];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_match_frame(&has_bits);
          match_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float similarity_inlier_ratio = 29 [default = 0];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_similarity_inlier_ratio(&has_bits);
          similarity_inlier_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float similarity_strict_inlier_ratio = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_similarity_strict_inlier_ratio(&has_bits);
          similarity_strict_inlier_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frame_width = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_frame_width(&has_bits);
          frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frame_height = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_frame_height(&has_bits);
          frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((72u <= tag && tag < 80u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraMotion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.CameraMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.TranslationModel translation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::translation(this), target, stream);
  }

  // optional .mediapipe.SimilarityModel similarity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::similarity(this), target, stream);
  }

  // optional .mediapipe.LinearSimilarityModel linear_similarity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linear_similarity(this), target, stream);
  }

  // optional .mediapipe.AffineModel affine = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::affine(this), target, stream);
  }

  // optional .mediapipe.Homography homography = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::homography(this), target, stream);
  }

  // optional .mediapipe.CameraMotion.Type type = 6 [default = VALID];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // optional .mediapipe.MixtureHomography mixture_homography = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mixture_homography(this), target, stream);
  }

  // Extension range [9, 10)
  target = _extensions_._InternalSerialize(
      9, 10, target, stream);

  // optional float mixture_row_sigma = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_mixture_row_sigma(), target);
  }

  // optional float average_homography_error = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_average_homography_error(), target);
  }

  // optional float homography_inlier_coverage = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_homography_inlier_coverage(), target);
  }

  // repeated float mixture_inlier_coverage = 13;
  for (int i = 0, n = this->_internal_mixture_inlier_coverage_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_mixture_inlier_coverage(i), target);
  }

  // optional float rolling_shutter_guess = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_rolling_shutter_guess(), target);
  }

  // optional .mediapipe.CameraMotion.Type overridden_type = 15 [default = VALID];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_overridden_type(), target);
  }

  // optional int32 rolling_shutter_motion_index = 16 [default = -1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_rolling_shutter_motion_index(), target);
  }

  // repeated int32 overlay_indices = 17;
  for (int i = 0, n = this->_internal_overlay_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_overlay_indices(i), target);
  }

  // optional int32 overlay_domain = 18 [default = 10];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_overlay_domain(), target);
  }

  // optional int32 flags = 19 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_flags(), target);
  }

  // optional float blur_score = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_blur_score(), target);
  }

  // optional float bluriness = 21 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_bluriness(), target);
  }

  // optional float homography_strict_inlier_coverage = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_homography_strict_inlier_coverage(), target);
  }

  // repeated .mediapipe.MixtureHomography mixture_homography_spectrum = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mixture_homography_spectrum_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_mixture_homography_spectrum(i), target, stream);
  }

  // optional float average_magnitude = 24 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_average_magnitude(), target);
  }

  // optional float translation_variance = 25 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_translation_variance(), target);
  }

  // optional float frac_long_features_rejected = 26;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_frac_long_features_rejected(), target);
  }

  // optional int64 timestamp_usec = 27 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_timestamp_usec(), target);
  }

  // optional int32 match_frame = 28 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_match_frame(), target);
  }

  // optional float similarity_inlier_ratio = 29 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_similarity_inlier_ratio(), target);
  }

  // optional float similarity_strict_inlier_ratio = 30 [default = 0];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_similarity_strict_inlier_ratio(), target);
  }

  // optional float frame_width = 31;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_frame_width(), target);
  }

  // optional float frame_height = 32;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_frame_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.CameraMotion)
  return target;
}

size_t CameraMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.CameraMotion)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mixture_inlier_coverage = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mixture_inlier_coverage_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mixture_inlier_coverage_size());
    total_size += data_size;
  }

  // repeated int32 overlay_indices = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->overlay_indices_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_overlay_indices_size());
    total_size += data_size;
  }

  // repeated .mediapipe.MixtureHomography mixture_homography_spectrum = 23;
  total_size += 2UL * this->_internal_mixture_homography_spectrum_size();
  for (const auto& msg : this->mixture_homography_spectrum_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.TranslationModel translation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translation_);
    }

    // optional .mediapipe.SimilarityModel similarity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *similarity_);
    }

    // optional .mediapipe.LinearSimilarityModel linear_similarity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_similarity_);
    }

    // optional .mediapipe.AffineModel affine = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *affine_);
    }

    // optional .mediapipe.Homography homography = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *homography_);
    }

    // optional .mediapipe.MixtureHomography mixture_homography = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mixture_homography_);
    }

    // optional .mediapipe.CameraMotion.Type type = 6 [default = VALID];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float mixture_row_sigma = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float average_homography_error = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float homography_inlier_coverage = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float rolling_shutter_guess = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional .mediapipe.CameraMotion.Type overridden_type = 15 [default = VALID];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_overridden_type());
    }

    // optional int32 flags = 19 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_flags());
    }

    // optional float blur_score = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float bluriness = 21 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float homography_strict_inlier_coverage = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float average_magnitude = 24 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float translation_variance = 25 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional int64 timestamp_usec = 27 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp_usec());
    }

    // optional float frac_long_features_rejected = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 match_frame = 28 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_frame());
    }

    // optional float similarity_inlier_ratio = 29 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float similarity_strict_inlier_ratio = 30 [default = 0];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float frame_width = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional float frame_height = 32;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 rolling_shutter_motion_index = 16 [default = -1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rolling_shutter_motion_index());
    }

    // optional int32 overlay_domain = 18 [default = 10];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_overlay_domain());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraMotion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.CameraMotion)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraMotion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraMotion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.CameraMotion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.CameraMotion)
    MergeFrom(*source);
  }
}

void CameraMotion::MergeFrom(const CameraMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.CameraMotion)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mixture_inlier_coverage_.MergeFrom(from.mixture_inlier_coverage_);
  overlay_indices_.MergeFrom(from.overlay_indices_);
  mixture_homography_spectrum_.MergeFrom(from.mixture_homography_spectrum_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_translation()->::mediapipe::TranslationModel::MergeFrom(from._internal_translation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_similarity()->::mediapipe::SimilarityModel::MergeFrom(from._internal_similarity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_similarity()->::mediapipe::LinearSimilarityModel::MergeFrom(from._internal_linear_similarity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_affine()->::mediapipe::AffineModel::MergeFrom(from._internal_affine());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_homography()->::mediapipe::Homography::MergeFrom(from._internal_homography());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_mixture_homography()->::mediapipe::MixtureHomography::MergeFrom(from._internal_mixture_homography());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      mixture_row_sigma_ = from.mixture_row_sigma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      average_homography_error_ = from.average_homography_error_;
    }
    if (cached_has_bits & 0x00000200u) {
      homography_inlier_coverage_ = from.homography_inlier_coverage_;
    }
    if (cached_has_bits & 0x00000400u) {
      rolling_shutter_guess_ = from.rolling_shutter_guess_;
    }
    if (cached_has_bits & 0x00000800u) {
      overridden_type_ = from.overridden_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      blur_score_ = from.blur_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      bluriness_ = from.bluriness_;
    }
    if (cached_has_bits & 0x00008000u) {
      homography_strict_inlier_coverage_ = from.homography_strict_inlier_coverage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      average_magnitude_ = from.average_magnitude_;
    }
    if (cached_has_bits & 0x00020000u) {
      translation_variance_ = from.translation_variance_;
    }
    if (cached_has_bits & 0x00040000u) {
      timestamp_usec_ = from.timestamp_usec_;
    }
    if (cached_has_bits & 0x00080000u) {
      frac_long_features_rejected_ = from.frac_long_features_rejected_;
    }
    if (cached_has_bits & 0x00100000u) {
      match_frame_ = from.match_frame_;
    }
    if (cached_has_bits & 0x00200000u) {
      similarity_inlier_ratio_ = from.similarity_inlier_ratio_;
    }
    if (cached_has_bits & 0x00400000u) {
      similarity_strict_inlier_ratio_ = from.similarity_strict_inlier_ratio_;
    }
    if (cached_has_bits & 0x00800000u) {
      frame_width_ = from.frame_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      frame_height_ = from.frame_height_;
    }
    if (cached_has_bits & 0x02000000u) {
      rolling_shutter_motion_index_ = from.rolling_shutter_motion_index_;
    }
    if (cached_has_bits & 0x04000000u) {
      overlay_domain_ = from.overlay_domain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraMotion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.CameraMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMotion::CopyFrom(const CameraMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.CameraMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMotion::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void CameraMotion::InternalSwap(CameraMotion* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mixture_inlier_coverage_.InternalSwap(&other->mixture_inlier_coverage_);
  overlay_indices_.InternalSwap(&other->overlay_indices_);
  mixture_homography_spectrum_.InternalSwap(&other->mixture_homography_spectrum_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraMotion, frame_height_)
      + sizeof(CameraMotion::frame_height_)
      - PROTOBUF_FIELD_OFFSET(CameraMotion, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
  swap(rolling_shutter_motion_index_, other->rolling_shutter_motion_index_);
  swap(overlay_domain_, other->overlay_domain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraMotion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::CameraMotion* Arena::CreateMaybeMessage< ::mediapipe::CameraMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::CameraMotion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
