// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/camera_motion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/motion_models.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto;
namespace mediapipe {
class CameraMotion;
struct CameraMotionDefaultTypeInternal;
extern CameraMotionDefaultTypeInternal _CameraMotion_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::CameraMotion* Arena::CreateMaybeMessage<::mediapipe::CameraMotion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum CameraMotion_Type : int {
  CameraMotion_Type_VALID = 0,
  CameraMotion_Type_UNSTABLE_HOMOG = 1,
  CameraMotion_Type_UNSTABLE_SIM = 2,
  CameraMotion_Type_UNSTABLE = 3,
  CameraMotion_Type_INVALID = 4
};
bool CameraMotion_Type_IsValid(int value);
constexpr CameraMotion_Type CameraMotion_Type_Type_MIN = CameraMotion_Type_VALID;
constexpr CameraMotion_Type CameraMotion_Type_Type_MAX = CameraMotion_Type_INVALID;
constexpr int CameraMotion_Type_Type_ARRAYSIZE = CameraMotion_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraMotion_Type_descriptor();
template<typename T>
inline const std::string& CameraMotion_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraMotion_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraMotion_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraMotion_Type_descriptor(), enum_t_value);
}
inline bool CameraMotion_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraMotion_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraMotion_Type>(
    CameraMotion_Type_descriptor(), name, value);
}
enum CameraMotion_Flags : int {
  CameraMotion_Flags_FLAG_SHOT_BOUNDARY = 1,
  CameraMotion_Flags_FLAG_BLURRY_FRAME = 2,
  CameraMotion_Flags_FLAG_MAJOR_OVERLAY = 4,
  CameraMotion_Flags_FLAG_SHARP_FRAME = 8,
  CameraMotion_Flags_FLAG_SINGULAR_ESTIMATION = 16,
  CameraMotion_Flags_FLAG_SHOT_FADE = 32,
  CameraMotion_Flags_FLAG_DUPLICATED = 64,
  CameraMotion_Flags_FLAG_CENTER_FRAME = 128
};
bool CameraMotion_Flags_IsValid(int value);
constexpr CameraMotion_Flags CameraMotion_Flags_Flags_MIN = CameraMotion_Flags_FLAG_SHOT_BOUNDARY;
constexpr CameraMotion_Flags CameraMotion_Flags_Flags_MAX = CameraMotion_Flags_FLAG_CENTER_FRAME;
constexpr int CameraMotion_Flags_Flags_ARRAYSIZE = CameraMotion_Flags_Flags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraMotion_Flags_descriptor();
template<typename T>
inline const std::string& CameraMotion_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraMotion_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraMotion_Flags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraMotion_Flags_descriptor(), enum_t_value);
}
inline bool CameraMotion_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraMotion_Flags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraMotion_Flags>(
    CameraMotion_Flags_descriptor(), name, value);
}
// ===================================================================

class CameraMotion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.CameraMotion) */ {
 public:
  inline CameraMotion() : CameraMotion(nullptr) {}
  ~CameraMotion() override;
  explicit constexpr CameraMotion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraMotion(const CameraMotion& from);
  CameraMotion(CameraMotion&& from) noexcept
    : CameraMotion() {
    *this = ::std::move(from);
  }

  inline CameraMotion& operator=(const CameraMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraMotion& operator=(CameraMotion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraMotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraMotion* internal_default_instance() {
    return reinterpret_cast<const CameraMotion*>(
               &_CameraMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraMotion& a, CameraMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraMotion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraMotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraMotion* New() const final {
    return CreateMaybeMessage<CameraMotion>(nullptr);
  }

  CameraMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraMotion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraMotion& from);
  void MergeFrom(const CameraMotion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraMotion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.CameraMotion";
  }
  protected:
  explicit CameraMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraMotion_Type Type;
  static constexpr Type VALID =
    CameraMotion_Type_VALID;
  static constexpr Type UNSTABLE_HOMOG =
    CameraMotion_Type_UNSTABLE_HOMOG;
  static constexpr Type UNSTABLE_SIM =
    CameraMotion_Type_UNSTABLE_SIM;
  static constexpr Type UNSTABLE =
    CameraMotion_Type_UNSTABLE;
  static constexpr Type INVALID =
    CameraMotion_Type_INVALID;
  static inline bool Type_IsValid(int value) {
    return CameraMotion_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CameraMotion_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CameraMotion_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CameraMotion_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CameraMotion_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CameraMotion_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return CameraMotion_Type_Parse(name, value);
  }

  typedef CameraMotion_Flags Flags;
  static constexpr Flags FLAG_SHOT_BOUNDARY =
    CameraMotion_Flags_FLAG_SHOT_BOUNDARY;
  static constexpr Flags FLAG_BLURRY_FRAME =
    CameraMotion_Flags_FLAG_BLURRY_FRAME;
  static constexpr Flags FLAG_MAJOR_OVERLAY =
    CameraMotion_Flags_FLAG_MAJOR_OVERLAY;
  static constexpr Flags FLAG_SHARP_FRAME =
    CameraMotion_Flags_FLAG_SHARP_FRAME;
  static constexpr Flags FLAG_SINGULAR_ESTIMATION =
    CameraMotion_Flags_FLAG_SINGULAR_ESTIMATION;
  static constexpr Flags FLAG_SHOT_FADE =
    CameraMotion_Flags_FLAG_SHOT_FADE;
  static constexpr Flags FLAG_DUPLICATED =
    CameraMotion_Flags_FLAG_DUPLICATED;
  static constexpr Flags FLAG_CENTER_FRAME =
    CameraMotion_Flags_FLAG_CENTER_FRAME;
  static inline bool Flags_IsValid(int value) {
    return CameraMotion_Flags_IsValid(value);
  }
  static constexpr Flags Flags_MIN =
    CameraMotion_Flags_Flags_MIN;
  static constexpr Flags Flags_MAX =
    CameraMotion_Flags_Flags_MAX;
  static constexpr int Flags_ARRAYSIZE =
    CameraMotion_Flags_Flags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flags_descriptor() {
    return CameraMotion_Flags_descriptor();
  }
  template<typename T>
  static inline const std::string& Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flags_Name.");
    return CameraMotion_Flags_Name(enum_t_value);
  }
  static inline bool Flags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flags* value) {
    return CameraMotion_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMixtureInlierCoverageFieldNumber = 13,
    kOverlayIndicesFieldNumber = 17,
    kMixtureHomographySpectrumFieldNumber = 23,
    kTranslationFieldNumber = 1,
    kSimilarityFieldNumber = 2,
    kLinearSimilarityFieldNumber = 3,
    kAffineFieldNumber = 4,
    kHomographyFieldNumber = 5,
    kMixtureHomographyFieldNumber = 8,
    kTypeFieldNumber = 6,
    kMixtureRowSigmaFieldNumber = 10,
    kAverageHomographyErrorFieldNumber = 11,
    kHomographyInlierCoverageFieldNumber = 12,
    kRollingShutterGuessFieldNumber = 14,
    kOverriddenTypeFieldNumber = 15,
    kFlagsFieldNumber = 19,
    kBlurScoreFieldNumber = 20,
    kBlurinessFieldNumber = 21,
    kHomographyStrictInlierCoverageFieldNumber = 22,
    kAverageMagnitudeFieldNumber = 24,
    kTranslationVarianceFieldNumber = 25,
    kTimestampUsecFieldNumber = 27,
    kFracLongFeaturesRejectedFieldNumber = 26,
    kMatchFrameFieldNumber = 28,
    kSimilarityInlierRatioFieldNumber = 29,
    kSimilarityStrictInlierRatioFieldNumber = 30,
    kFrameWidthFieldNumber = 31,
    kFrameHeightFieldNumber = 32,
    kRollingShutterMotionIndexFieldNumber = 16,
    kOverlayDomainFieldNumber = 18,
  };
  // repeated float mixture_inlier_coverage = 13;
  int mixture_inlier_coverage_size() const;
  private:
  int _internal_mixture_inlier_coverage_size() const;
  public:
  void clear_mixture_inlier_coverage();
  private:
  float _internal_mixture_inlier_coverage(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mixture_inlier_coverage() const;
  void _internal_add_mixture_inlier_coverage(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mixture_inlier_coverage();
  public:
  float mixture_inlier_coverage(int index) const;
  void set_mixture_inlier_coverage(int index, float value);
  void add_mixture_inlier_coverage(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mixture_inlier_coverage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mixture_inlier_coverage();

  // repeated int32 overlay_indices = 17;
  int overlay_indices_size() const;
  private:
  int _internal_overlay_indices_size() const;
  public:
  void clear_overlay_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overlay_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_overlay_indices() const;
  void _internal_add_overlay_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_overlay_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 overlay_indices(int index) const;
  void set_overlay_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_overlay_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      overlay_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_overlay_indices();

  // repeated .mediapipe.MixtureHomography mixture_homography_spectrum = 23;
  int mixture_homography_spectrum_size() const;
  private:
  int _internal_mixture_homography_spectrum_size() const;
  public:
  void clear_mixture_homography_spectrum();
  ::mediapipe::MixtureHomography* mutable_mixture_homography_spectrum(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MixtureHomography >*
      mutable_mixture_homography_spectrum();
  private:
  const ::mediapipe::MixtureHomography& _internal_mixture_homography_spectrum(int index) const;
  ::mediapipe::MixtureHomography* _internal_add_mixture_homography_spectrum();
  public:
  const ::mediapipe::MixtureHomography& mixture_homography_spectrum(int index) const;
  ::mediapipe::MixtureHomography* add_mixture_homography_spectrum();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MixtureHomography >&
      mixture_homography_spectrum() const;

  // optional .mediapipe.TranslationModel translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::mediapipe::TranslationModel& translation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TranslationModel* release_translation();
  ::mediapipe::TranslationModel* mutable_translation();
  void set_allocated_translation(::mediapipe::TranslationModel* translation);
  private:
  const ::mediapipe::TranslationModel& _internal_translation() const;
  ::mediapipe::TranslationModel* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::mediapipe::TranslationModel* translation);
  ::mediapipe::TranslationModel* unsafe_arena_release_translation();

  // optional .mediapipe.SimilarityModel similarity = 2;
  bool has_similarity() const;
  private:
  bool _internal_has_similarity() const;
  public:
  void clear_similarity();
  const ::mediapipe::SimilarityModel& similarity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::SimilarityModel* release_similarity();
  ::mediapipe::SimilarityModel* mutable_similarity();
  void set_allocated_similarity(::mediapipe::SimilarityModel* similarity);
  private:
  const ::mediapipe::SimilarityModel& _internal_similarity() const;
  ::mediapipe::SimilarityModel* _internal_mutable_similarity();
  public:
  void unsafe_arena_set_allocated_similarity(
      ::mediapipe::SimilarityModel* similarity);
  ::mediapipe::SimilarityModel* unsafe_arena_release_similarity();

  // optional .mediapipe.LinearSimilarityModel linear_similarity = 3;
  bool has_linear_similarity() const;
  private:
  bool _internal_has_linear_similarity() const;
  public:
  void clear_linear_similarity();
  const ::mediapipe::LinearSimilarityModel& linear_similarity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::LinearSimilarityModel* release_linear_similarity();
  ::mediapipe::LinearSimilarityModel* mutable_linear_similarity();
  void set_allocated_linear_similarity(::mediapipe::LinearSimilarityModel* linear_similarity);
  private:
  const ::mediapipe::LinearSimilarityModel& _internal_linear_similarity() const;
  ::mediapipe::LinearSimilarityModel* _internal_mutable_linear_similarity();
  public:
  void unsafe_arena_set_allocated_linear_similarity(
      ::mediapipe::LinearSimilarityModel* linear_similarity);
  ::mediapipe::LinearSimilarityModel* unsafe_arena_release_linear_similarity();

  // optional .mediapipe.AffineModel affine = 4;
  bool has_affine() const;
  private:
  bool _internal_has_affine() const;
  public:
  void clear_affine();
  const ::mediapipe::AffineModel& affine() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::AffineModel* release_affine();
  ::mediapipe::AffineModel* mutable_affine();
  void set_allocated_affine(::mediapipe::AffineModel* affine);
  private:
  const ::mediapipe::AffineModel& _internal_affine() const;
  ::mediapipe::AffineModel* _internal_mutable_affine();
  public:
  void unsafe_arena_set_allocated_affine(
      ::mediapipe::AffineModel* affine);
  ::mediapipe::AffineModel* unsafe_arena_release_affine();

  // optional .mediapipe.Homography homography = 5;
  bool has_homography() const;
  private:
  bool _internal_has_homography() const;
  public:
  void clear_homography();
  const ::mediapipe::Homography& homography() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::Homography* release_homography();
  ::mediapipe::Homography* mutable_homography();
  void set_allocated_homography(::mediapipe::Homography* homography);
  private:
  const ::mediapipe::Homography& _internal_homography() const;
  ::mediapipe::Homography* _internal_mutable_homography();
  public:
  void unsafe_arena_set_allocated_homography(
      ::mediapipe::Homography* homography);
  ::mediapipe::Homography* unsafe_arena_release_homography();

  // optional .mediapipe.MixtureHomography mixture_homography = 8;
  bool has_mixture_homography() const;
  private:
  bool _internal_has_mixture_homography() const;
  public:
  void clear_mixture_homography();
  const ::mediapipe::MixtureHomography& mixture_homography() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MixtureHomography* release_mixture_homography();
  ::mediapipe::MixtureHomography* mutable_mixture_homography();
  void set_allocated_mixture_homography(::mediapipe::MixtureHomography* mixture_homography);
  private:
  const ::mediapipe::MixtureHomography& _internal_mixture_homography() const;
  ::mediapipe::MixtureHomography* _internal_mutable_mixture_homography();
  public:
  void unsafe_arena_set_allocated_mixture_homography(
      ::mediapipe::MixtureHomography* mixture_homography);
  ::mediapipe::MixtureHomography* unsafe_arena_release_mixture_homography();

  // optional .mediapipe.CameraMotion.Type type = 6 [default = VALID];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mediapipe::CameraMotion_Type type() const;
  void set_type(::mediapipe::CameraMotion_Type value);
  private:
  ::mediapipe::CameraMotion_Type _internal_type() const;
  void _internal_set_type(::mediapipe::CameraMotion_Type value);
  public:

  // optional float mixture_row_sigma = 10;
  bool has_mixture_row_sigma() const;
  private:
  bool _internal_has_mixture_row_sigma() const;
  public:
  void clear_mixture_row_sigma();
  float mixture_row_sigma() const;
  void set_mixture_row_sigma(float value);
  private:
  float _internal_mixture_row_sigma() const;
  void _internal_set_mixture_row_sigma(float value);
  public:

  // optional float average_homography_error = 11;
  bool has_average_homography_error() const;
  private:
  bool _internal_has_average_homography_error() const;
  public:
  void clear_average_homography_error();
  float average_homography_error() const;
  void set_average_homography_error(float value);
  private:
  float _internal_average_homography_error() const;
  void _internal_set_average_homography_error(float value);
  public:

  // optional float homography_inlier_coverage = 12;
  bool has_homography_inlier_coverage() const;
  private:
  bool _internal_has_homography_inlier_coverage() const;
  public:
  void clear_homography_inlier_coverage();
  float homography_inlier_coverage() const;
  void set_homography_inlier_coverage(float value);
  private:
  float _internal_homography_inlier_coverage() const;
  void _internal_set_homography_inlier_coverage(float value);
  public:

  // optional float rolling_shutter_guess = 14;
  bool has_rolling_shutter_guess() const;
  private:
  bool _internal_has_rolling_shutter_guess() const;
  public:
  void clear_rolling_shutter_guess();
  float rolling_shutter_guess() const;
  void set_rolling_shutter_guess(float value);
  private:
  float _internal_rolling_shutter_guess() const;
  void _internal_set_rolling_shutter_guess(float value);
  public:

  // optional .mediapipe.CameraMotion.Type overridden_type = 15 [default = VALID];
  bool has_overridden_type() const;
  private:
  bool _internal_has_overridden_type() const;
  public:
  void clear_overridden_type();
  ::mediapipe::CameraMotion_Type overridden_type() const;
  void set_overridden_type(::mediapipe::CameraMotion_Type value);
  private:
  ::mediapipe::CameraMotion_Type _internal_overridden_type() const;
  void _internal_set_overridden_type(::mediapipe::CameraMotion_Type value);
  public:

  // optional int32 flags = 19 [default = 0];
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float blur_score = 20;
  bool has_blur_score() const;
  private:
  bool _internal_has_blur_score() const;
  public:
  void clear_blur_score();
  float blur_score() const;
  void set_blur_score(float value);
  private:
  float _internal_blur_score() const;
  void _internal_set_blur_score(float value);
  public:

  // optional float bluriness = 21 [default = 0];
  bool has_bluriness() const;
  private:
  bool _internal_has_bluriness() const;
  public:
  void clear_bluriness();
  float bluriness() const;
  void set_bluriness(float value);
  private:
  float _internal_bluriness() const;
  void _internal_set_bluriness(float value);
  public:

  // optional float homography_strict_inlier_coverage = 22;
  bool has_homography_strict_inlier_coverage() const;
  private:
  bool _internal_has_homography_strict_inlier_coverage() const;
  public:
  void clear_homography_strict_inlier_coverage();
  float homography_strict_inlier_coverage() const;
  void set_homography_strict_inlier_coverage(float value);
  private:
  float _internal_homography_strict_inlier_coverage() const;
  void _internal_set_homography_strict_inlier_coverage(float value);
  public:

  // optional float average_magnitude = 24 [default = 0];
  bool has_average_magnitude() const;
  private:
  bool _internal_has_average_magnitude() const;
  public:
  void clear_average_magnitude();
  float average_magnitude() const;
  void set_average_magnitude(float value);
  private:
  float _internal_average_magnitude() const;
  void _internal_set_average_magnitude(float value);
  public:

  // optional float translation_variance = 25 [default = 0];
  bool has_translation_variance() const;
  private:
  bool _internal_has_translation_variance() const;
  public:
  void clear_translation_variance();
  float translation_variance() const;
  void set_translation_variance(float value);
  private:
  float _internal_translation_variance() const;
  void _internal_set_translation_variance(float value);
  public:

  // optional int64 timestamp_usec = 27 [default = 0];
  bool has_timestamp_usec() const;
  private:
  bool _internal_has_timestamp_usec() const;
  public:
  void clear_timestamp_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec() const;
  void set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_usec() const;
  void _internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float frac_long_features_rejected = 26;
  bool has_frac_long_features_rejected() const;
  private:
  bool _internal_has_frac_long_features_rejected() const;
  public:
  void clear_frac_long_features_rejected();
  float frac_long_features_rejected() const;
  void set_frac_long_features_rejected(float value);
  private:
  float _internal_frac_long_features_rejected() const;
  void _internal_set_frac_long_features_rejected(float value);
  public:

  // optional int32 match_frame = 28 [default = 0];
  bool has_match_frame() const;
  private:
  bool _internal_has_match_frame() const;
  public:
  void clear_match_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 match_frame() const;
  void set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_frame() const;
  void _internal_set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float similarity_inlier_ratio = 29 [default = 0];
  bool has_similarity_inlier_ratio() const;
  private:
  bool _internal_has_similarity_inlier_ratio() const;
  public:
  void clear_similarity_inlier_ratio();
  float similarity_inlier_ratio() const;
  void set_similarity_inlier_ratio(float value);
  private:
  float _internal_similarity_inlier_ratio() const;
  void _internal_set_similarity_inlier_ratio(float value);
  public:

  // optional float similarity_strict_inlier_ratio = 30 [default = 0];
  bool has_similarity_strict_inlier_ratio() const;
  private:
  bool _internal_has_similarity_strict_inlier_ratio() const;
  public:
  void clear_similarity_strict_inlier_ratio();
  float similarity_strict_inlier_ratio() const;
  void set_similarity_strict_inlier_ratio(float value);
  private:
  float _internal_similarity_strict_inlier_ratio() const;
  void _internal_set_similarity_strict_inlier_ratio(float value);
  public:

  // optional float frame_width = 31;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  float frame_width() const;
  void set_frame_width(float value);
  private:
  float _internal_frame_width() const;
  void _internal_set_frame_width(float value);
  public:

  // optional float frame_height = 32;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  float frame_height() const;
  void set_frame_height(float value);
  private:
  float _internal_frame_height() const;
  void _internal_set_frame_height(float value);
  public:

  // optional int32 rolling_shutter_motion_index = 16 [default = -1];
  bool has_rolling_shutter_motion_index() const;
  private:
  bool _internal_has_rolling_shutter_motion_index() const;
  public:
  void clear_rolling_shutter_motion_index();
  ::PROTOBUF_NAMESPACE_ID::int32 rolling_shutter_motion_index() const;
  void set_rolling_shutter_motion_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rolling_shutter_motion_index() const;
  void _internal_set_rolling_shutter_motion_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 overlay_domain = 18 [default = 10];
  bool has_overlay_domain() const;
  private:
  bool _internal_has_overlay_domain() const;
  public:
  void clear_overlay_domain();
  ::PROTOBUF_NAMESPACE_ID::int32 overlay_domain() const;
  void set_overlay_domain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overlay_domain() const;
  void _internal_set_overlay_domain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CameraMotion)
  // @@protoc_insertion_point(class_scope:mediapipe.CameraMotion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mixture_inlier_coverage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > overlay_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MixtureHomography > mixture_homography_spectrum_;
  ::mediapipe::TranslationModel* translation_;
  ::mediapipe::SimilarityModel* similarity_;
  ::mediapipe::LinearSimilarityModel* linear_similarity_;
  ::mediapipe::AffineModel* affine_;
  ::mediapipe::Homography* homography_;
  ::mediapipe::MixtureHomography* mixture_homography_;
  int type_;
  float mixture_row_sigma_;
  float average_homography_error_;
  float homography_inlier_coverage_;
  float rolling_shutter_guess_;
  int overridden_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  float blur_score_;
  float bluriness_;
  float homography_strict_inlier_coverage_;
  float average_magnitude_;
  float translation_variance_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec_;
  float frac_long_features_rejected_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_frame_;
  float similarity_inlier_ratio_;
  float similarity_strict_inlier_ratio_;
  float frame_width_;
  float frame_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 rolling_shutter_motion_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 overlay_domain_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraMotion

// optional .mediapipe.TranslationModel translation = 1;
inline bool CameraMotion::_internal_has_translation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || translation_ != nullptr);
  return value;
}
inline bool CameraMotion::has_translation() const {
  return _internal_has_translation();
}
inline const ::mediapipe::TranslationModel& CameraMotion::_internal_translation() const {
  const ::mediapipe::TranslationModel* p = translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TranslationModel&>(
      ::mediapipe::_TranslationModel_default_instance_);
}
inline const ::mediapipe::TranslationModel& CameraMotion::translation() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.translation)
  return _internal_translation();
}
inline void CameraMotion::unsafe_arena_set_allocated_translation(
    ::mediapipe::TranslationModel* translation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CameraMotion.translation)
}
inline ::mediapipe::TranslationModel* CameraMotion::release_translation() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TranslationModel* temp = translation_;
  translation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TranslationModel* CameraMotion::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:mediapipe.CameraMotion.translation)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TranslationModel* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::mediapipe::TranslationModel* CameraMotion::_internal_mutable_translation() {
  _has_bits_[0] |= 0x00000001u;
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TranslationModel>(GetArena());
    translation_ = p;
  }
  return translation_;
}
inline ::mediapipe::TranslationModel* CameraMotion::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CameraMotion.translation)
  return _internal_mutable_translation();
}
inline void CameraMotion::set_allocated_translation(::mediapipe::TranslationModel* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation)->GetArena();
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CameraMotion.translation)
}

// optional .mediapipe.SimilarityModel similarity = 2;
inline bool CameraMotion::_internal_has_similarity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || similarity_ != nullptr);
  return value;
}
inline bool CameraMotion::has_similarity() const {
  return _internal_has_similarity();
}
inline const ::mediapipe::SimilarityModel& CameraMotion::_internal_similarity() const {
  const ::mediapipe::SimilarityModel* p = similarity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::SimilarityModel&>(
      ::mediapipe::_SimilarityModel_default_instance_);
}
inline const ::mediapipe::SimilarityModel& CameraMotion::similarity() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.similarity)
  return _internal_similarity();
}
inline void CameraMotion::unsafe_arena_set_allocated_similarity(
    ::mediapipe::SimilarityModel* similarity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(similarity_);
  }
  similarity_ = similarity;
  if (similarity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CameraMotion.similarity)
}
inline ::mediapipe::SimilarityModel* CameraMotion::release_similarity() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::SimilarityModel* temp = similarity_;
  similarity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::SimilarityModel* CameraMotion::unsafe_arena_release_similarity() {
  // @@protoc_insertion_point(field_release:mediapipe.CameraMotion.similarity)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::SimilarityModel* temp = similarity_;
  similarity_ = nullptr;
  return temp;
}
inline ::mediapipe::SimilarityModel* CameraMotion::_internal_mutable_similarity() {
  _has_bits_[0] |= 0x00000002u;
  if (similarity_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::SimilarityModel>(GetArena());
    similarity_ = p;
  }
  return similarity_;
}
inline ::mediapipe::SimilarityModel* CameraMotion::mutable_similarity() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CameraMotion.similarity)
  return _internal_mutable_similarity();
}
inline void CameraMotion::set_allocated_similarity(::mediapipe::SimilarityModel* similarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(similarity_);
  }
  if (similarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(similarity)->GetArena();
    if (message_arena != submessage_arena) {
      similarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, similarity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  similarity_ = similarity;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CameraMotion.similarity)
}

// optional .mediapipe.LinearSimilarityModel linear_similarity = 3;
inline bool CameraMotion::_internal_has_linear_similarity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_similarity_ != nullptr);
  return value;
}
inline bool CameraMotion::has_linear_similarity() const {
  return _internal_has_linear_similarity();
}
inline const ::mediapipe::LinearSimilarityModel& CameraMotion::_internal_linear_similarity() const {
  const ::mediapipe::LinearSimilarityModel* p = linear_similarity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::LinearSimilarityModel&>(
      ::mediapipe::_LinearSimilarityModel_default_instance_);
}
inline const ::mediapipe::LinearSimilarityModel& CameraMotion::linear_similarity() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.linear_similarity)
  return _internal_linear_similarity();
}
inline void CameraMotion::unsafe_arena_set_allocated_linear_similarity(
    ::mediapipe::LinearSimilarityModel* linear_similarity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_similarity_);
  }
  linear_similarity_ = linear_similarity;
  if (linear_similarity) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CameraMotion.linear_similarity)
}
inline ::mediapipe::LinearSimilarityModel* CameraMotion::release_linear_similarity() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::LinearSimilarityModel* temp = linear_similarity_;
  linear_similarity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::LinearSimilarityModel* CameraMotion::unsafe_arena_release_linear_similarity() {
  // @@protoc_insertion_point(field_release:mediapipe.CameraMotion.linear_similarity)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::LinearSimilarityModel* temp = linear_similarity_;
  linear_similarity_ = nullptr;
  return temp;
}
inline ::mediapipe::LinearSimilarityModel* CameraMotion::_internal_mutable_linear_similarity() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_similarity_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::LinearSimilarityModel>(GetArena());
    linear_similarity_ = p;
  }
  return linear_similarity_;
}
inline ::mediapipe::LinearSimilarityModel* CameraMotion::mutable_linear_similarity() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CameraMotion.linear_similarity)
  return _internal_mutable_linear_similarity();
}
inline void CameraMotion::set_allocated_linear_similarity(::mediapipe::LinearSimilarityModel* linear_similarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_similarity_);
  }
  if (linear_similarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_similarity)->GetArena();
    if (message_arena != submessage_arena) {
      linear_similarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_similarity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_similarity_ = linear_similarity;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CameraMotion.linear_similarity)
}

// optional .mediapipe.AffineModel affine = 4;
inline bool CameraMotion::_internal_has_affine() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || affine_ != nullptr);
  return value;
}
inline bool CameraMotion::has_affine() const {
  return _internal_has_affine();
}
inline const ::mediapipe::AffineModel& CameraMotion::_internal_affine() const {
  const ::mediapipe::AffineModel* p = affine_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::AffineModel&>(
      ::mediapipe::_AffineModel_default_instance_);
}
inline const ::mediapipe::AffineModel& CameraMotion::affine() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.affine)
  return _internal_affine();
}
inline void CameraMotion::unsafe_arena_set_allocated_affine(
    ::mediapipe::AffineModel* affine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affine_);
  }
  affine_ = affine;
  if (affine) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CameraMotion.affine)
}
inline ::mediapipe::AffineModel* CameraMotion::release_affine() {
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::AffineModel* temp = affine_;
  affine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::AffineModel* CameraMotion::unsafe_arena_release_affine() {
  // @@protoc_insertion_point(field_release:mediapipe.CameraMotion.affine)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::AffineModel* temp = affine_;
  affine_ = nullptr;
  return temp;
}
inline ::mediapipe::AffineModel* CameraMotion::_internal_mutable_affine() {
  _has_bits_[0] |= 0x00000008u;
  if (affine_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::AffineModel>(GetArena());
    affine_ = p;
  }
  return affine_;
}
inline ::mediapipe::AffineModel* CameraMotion::mutable_affine() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CameraMotion.affine)
  return _internal_mutable_affine();
}
inline void CameraMotion::set_allocated_affine(::mediapipe::AffineModel* affine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affine_);
  }
  if (affine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affine)->GetArena();
    if (message_arena != submessage_arena) {
      affine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  affine_ = affine;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CameraMotion.affine)
}

// optional .mediapipe.Homography homography = 5;
inline bool CameraMotion::_internal_has_homography() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || homography_ != nullptr);
  return value;
}
inline bool CameraMotion::has_homography() const {
  return _internal_has_homography();
}
inline const ::mediapipe::Homography& CameraMotion::_internal_homography() const {
  const ::mediapipe::Homography* p = homography_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::Homography&>(
      ::mediapipe::_Homography_default_instance_);
}
inline const ::mediapipe::Homography& CameraMotion::homography() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.homography)
  return _internal_homography();
}
inline void CameraMotion::unsafe_arena_set_allocated_homography(
    ::mediapipe::Homography* homography) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(homography_);
  }
  homography_ = homography;
  if (homography) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CameraMotion.homography)
}
inline ::mediapipe::Homography* CameraMotion::release_homography() {
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::Homography* temp = homography_;
  homography_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::Homography* CameraMotion::unsafe_arena_release_homography() {
  // @@protoc_insertion_point(field_release:mediapipe.CameraMotion.homography)
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::Homography* temp = homography_;
  homography_ = nullptr;
  return temp;
}
inline ::mediapipe::Homography* CameraMotion::_internal_mutable_homography() {
  _has_bits_[0] |= 0x00000010u;
  if (homography_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::Homography>(GetArena());
    homography_ = p;
  }
  return homography_;
}
inline ::mediapipe::Homography* CameraMotion::mutable_homography() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CameraMotion.homography)
  return _internal_mutable_homography();
}
inline void CameraMotion::set_allocated_homography(::mediapipe::Homography* homography) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(homography_);
  }
  if (homography) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(homography)->GetArena();
    if (message_arena != submessage_arena) {
      homography = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, homography, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  homography_ = homography;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CameraMotion.homography)
}

// optional .mediapipe.MixtureHomography mixture_homography = 8;
inline bool CameraMotion::_internal_has_mixture_homography() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || mixture_homography_ != nullptr);
  return value;
}
inline bool CameraMotion::has_mixture_homography() const {
  return _internal_has_mixture_homography();
}
inline const ::mediapipe::MixtureHomography& CameraMotion::_internal_mixture_homography() const {
  const ::mediapipe::MixtureHomography* p = mixture_homography_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MixtureHomography&>(
      ::mediapipe::_MixtureHomography_default_instance_);
}
inline const ::mediapipe::MixtureHomography& CameraMotion::mixture_homography() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.mixture_homography)
  return _internal_mixture_homography();
}
inline void CameraMotion::unsafe_arena_set_allocated_mixture_homography(
    ::mediapipe::MixtureHomography* mixture_homography) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_homography_);
  }
  mixture_homography_ = mixture_homography;
  if (mixture_homography) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.CameraMotion.mixture_homography)
}
inline ::mediapipe::MixtureHomography* CameraMotion::release_mixture_homography() {
  _has_bits_[0] &= ~0x00000020u;
  ::mediapipe::MixtureHomography* temp = mixture_homography_;
  mixture_homography_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MixtureHomography* CameraMotion::unsafe_arena_release_mixture_homography() {
  // @@protoc_insertion_point(field_release:mediapipe.CameraMotion.mixture_homography)
  _has_bits_[0] &= ~0x00000020u;
  ::mediapipe::MixtureHomography* temp = mixture_homography_;
  mixture_homography_ = nullptr;
  return temp;
}
inline ::mediapipe::MixtureHomography* CameraMotion::_internal_mutable_mixture_homography() {
  _has_bits_[0] |= 0x00000020u;
  if (mixture_homography_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MixtureHomography>(GetArena());
    mixture_homography_ = p;
  }
  return mixture_homography_;
}
inline ::mediapipe::MixtureHomography* CameraMotion::mutable_mixture_homography() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CameraMotion.mixture_homography)
  return _internal_mutable_mixture_homography();
}
inline void CameraMotion::set_allocated_mixture_homography(::mediapipe::MixtureHomography* mixture_homography) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_homography_);
  }
  if (mixture_homography) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_homography)->GetArena();
    if (message_arena != submessage_arena) {
      mixture_homography = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixture_homography, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  mixture_homography_ = mixture_homography;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CameraMotion.mixture_homography)
}

// optional float frame_width = 31;
inline bool CameraMotion::_internal_has_frame_width() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CameraMotion::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void CameraMotion::clear_frame_width() {
  frame_width_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float CameraMotion::_internal_frame_width() const {
  return frame_width_;
}
inline float CameraMotion::frame_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.frame_width)
  return _internal_frame_width();
}
inline void CameraMotion::_internal_set_frame_width(float value) {
  _has_bits_[0] |= 0x00800000u;
  frame_width_ = value;
}
inline void CameraMotion::set_frame_width(float value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.frame_width)
}

// optional float frame_height = 32;
inline bool CameraMotion::_internal_has_frame_height() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CameraMotion::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void CameraMotion::clear_frame_height() {
  frame_height_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float CameraMotion::_internal_frame_height() const {
  return frame_height_;
}
inline float CameraMotion::frame_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.frame_height)
  return _internal_frame_height();
}
inline void CameraMotion::_internal_set_frame_height(float value) {
  _has_bits_[0] |= 0x01000000u;
  frame_height_ = value;
}
inline void CameraMotion::set_frame_height(float value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.frame_height)
}

// repeated .mediapipe.MixtureHomography mixture_homography_spectrum = 23;
inline int CameraMotion::_internal_mixture_homography_spectrum_size() const {
  return mixture_homography_spectrum_.size();
}
inline int CameraMotion::mixture_homography_spectrum_size() const {
  return _internal_mixture_homography_spectrum_size();
}
inline ::mediapipe::MixtureHomography* CameraMotion::mutable_mixture_homography_spectrum(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CameraMotion.mixture_homography_spectrum)
  return mixture_homography_spectrum_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MixtureHomography >*
CameraMotion::mutable_mixture_homography_spectrum() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CameraMotion.mixture_homography_spectrum)
  return &mixture_homography_spectrum_;
}
inline const ::mediapipe::MixtureHomography& CameraMotion::_internal_mixture_homography_spectrum(int index) const {
  return mixture_homography_spectrum_.Get(index);
}
inline const ::mediapipe::MixtureHomography& CameraMotion::mixture_homography_spectrum(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.mixture_homography_spectrum)
  return _internal_mixture_homography_spectrum(index);
}
inline ::mediapipe::MixtureHomography* CameraMotion::_internal_add_mixture_homography_spectrum() {
  return mixture_homography_spectrum_.Add();
}
inline ::mediapipe::MixtureHomography* CameraMotion::add_mixture_homography_spectrum() {
  // @@protoc_insertion_point(field_add:mediapipe.CameraMotion.mixture_homography_spectrum)
  return _internal_add_mixture_homography_spectrum();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MixtureHomography >&
CameraMotion::mixture_homography_spectrum() const {
  // @@protoc_insertion_point(field_list:mediapipe.CameraMotion.mixture_homography_spectrum)
  return mixture_homography_spectrum_;
}

// optional float mixture_row_sigma = 10;
inline bool CameraMotion::_internal_has_mixture_row_sigma() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CameraMotion::has_mixture_row_sigma() const {
  return _internal_has_mixture_row_sigma();
}
inline void CameraMotion::clear_mixture_row_sigma() {
  mixture_row_sigma_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CameraMotion::_internal_mixture_row_sigma() const {
  return mixture_row_sigma_;
}
inline float CameraMotion::mixture_row_sigma() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.mixture_row_sigma)
  return _internal_mixture_row_sigma();
}
inline void CameraMotion::_internal_set_mixture_row_sigma(float value) {
  _has_bits_[0] |= 0x00000080u;
  mixture_row_sigma_ = value;
}
inline void CameraMotion::set_mixture_row_sigma(float value) {
  _internal_set_mixture_row_sigma(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.mixture_row_sigma)
}

// optional float average_magnitude = 24 [default = 0];
inline bool CameraMotion::_internal_has_average_magnitude() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CameraMotion::has_average_magnitude() const {
  return _internal_has_average_magnitude();
}
inline void CameraMotion::clear_average_magnitude() {
  average_magnitude_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CameraMotion::_internal_average_magnitude() const {
  return average_magnitude_;
}
inline float CameraMotion::average_magnitude() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.average_magnitude)
  return _internal_average_magnitude();
}
inline void CameraMotion::_internal_set_average_magnitude(float value) {
  _has_bits_[0] |= 0x00010000u;
  average_magnitude_ = value;
}
inline void CameraMotion::set_average_magnitude(float value) {
  _internal_set_average_magnitude(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.average_magnitude)
}

// optional float translation_variance = 25 [default = 0];
inline bool CameraMotion::_internal_has_translation_variance() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CameraMotion::has_translation_variance() const {
  return _internal_has_translation_variance();
}
inline void CameraMotion::clear_translation_variance() {
  translation_variance_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float CameraMotion::_internal_translation_variance() const {
  return translation_variance_;
}
inline float CameraMotion::translation_variance() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.translation_variance)
  return _internal_translation_variance();
}
inline void CameraMotion::_internal_set_translation_variance(float value) {
  _has_bits_[0] |= 0x00020000u;
  translation_variance_ = value;
}
inline void CameraMotion::set_translation_variance(float value) {
  _internal_set_translation_variance(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.translation_variance)
}

// optional float similarity_inlier_ratio = 29 [default = 0];
inline bool CameraMotion::_internal_has_similarity_inlier_ratio() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CameraMotion::has_similarity_inlier_ratio() const {
  return _internal_has_similarity_inlier_ratio();
}
inline void CameraMotion::clear_similarity_inlier_ratio() {
  similarity_inlier_ratio_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float CameraMotion::_internal_similarity_inlier_ratio() const {
  return similarity_inlier_ratio_;
}
inline float CameraMotion::similarity_inlier_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.similarity_inlier_ratio)
  return _internal_similarity_inlier_ratio();
}
inline void CameraMotion::_internal_set_similarity_inlier_ratio(float value) {
  _has_bits_[0] |= 0x00200000u;
  similarity_inlier_ratio_ = value;
}
inline void CameraMotion::set_similarity_inlier_ratio(float value) {
  _internal_set_similarity_inlier_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.similarity_inlier_ratio)
}

// optional float similarity_strict_inlier_ratio = 30 [default = 0];
inline bool CameraMotion::_internal_has_similarity_strict_inlier_ratio() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CameraMotion::has_similarity_strict_inlier_ratio() const {
  return _internal_has_similarity_strict_inlier_ratio();
}
inline void CameraMotion::clear_similarity_strict_inlier_ratio() {
  similarity_strict_inlier_ratio_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float CameraMotion::_internal_similarity_strict_inlier_ratio() const {
  return similarity_strict_inlier_ratio_;
}
inline float CameraMotion::similarity_strict_inlier_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.similarity_strict_inlier_ratio)
  return _internal_similarity_strict_inlier_ratio();
}
inline void CameraMotion::_internal_set_similarity_strict_inlier_ratio(float value) {
  _has_bits_[0] |= 0x00400000u;
  similarity_strict_inlier_ratio_ = value;
}
inline void CameraMotion::set_similarity_strict_inlier_ratio(float value) {
  _internal_set_similarity_strict_inlier_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.similarity_strict_inlier_ratio)
}

// optional float average_homography_error = 11;
inline bool CameraMotion::_internal_has_average_homography_error() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CameraMotion::has_average_homography_error() const {
  return _internal_has_average_homography_error();
}
inline void CameraMotion::clear_average_homography_error() {
  average_homography_error_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CameraMotion::_internal_average_homography_error() const {
  return average_homography_error_;
}
inline float CameraMotion::average_homography_error() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.average_homography_error)
  return _internal_average_homography_error();
}
inline void CameraMotion::_internal_set_average_homography_error(float value) {
  _has_bits_[0] |= 0x00000100u;
  average_homography_error_ = value;
}
inline void CameraMotion::set_average_homography_error(float value) {
  _internal_set_average_homography_error(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.average_homography_error)
}

// optional float homography_inlier_coverage = 12;
inline bool CameraMotion::_internal_has_homography_inlier_coverage() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CameraMotion::has_homography_inlier_coverage() const {
  return _internal_has_homography_inlier_coverage();
}
inline void CameraMotion::clear_homography_inlier_coverage() {
  homography_inlier_coverage_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CameraMotion::_internal_homography_inlier_coverage() const {
  return homography_inlier_coverage_;
}
inline float CameraMotion::homography_inlier_coverage() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.homography_inlier_coverage)
  return _internal_homography_inlier_coverage();
}
inline void CameraMotion::_internal_set_homography_inlier_coverage(float value) {
  _has_bits_[0] |= 0x00000200u;
  homography_inlier_coverage_ = value;
}
inline void CameraMotion::set_homography_inlier_coverage(float value) {
  _internal_set_homography_inlier_coverage(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.homography_inlier_coverage)
}

// optional float homography_strict_inlier_coverage = 22;
inline bool CameraMotion::_internal_has_homography_strict_inlier_coverage() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CameraMotion::has_homography_strict_inlier_coverage() const {
  return _internal_has_homography_strict_inlier_coverage();
}
inline void CameraMotion::clear_homography_strict_inlier_coverage() {
  homography_strict_inlier_coverage_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CameraMotion::_internal_homography_strict_inlier_coverage() const {
  return homography_strict_inlier_coverage_;
}
inline float CameraMotion::homography_strict_inlier_coverage() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.homography_strict_inlier_coverage)
  return _internal_homography_strict_inlier_coverage();
}
inline void CameraMotion::_internal_set_homography_strict_inlier_coverage(float value) {
  _has_bits_[0] |= 0x00008000u;
  homography_strict_inlier_coverage_ = value;
}
inline void CameraMotion::set_homography_strict_inlier_coverage(float value) {
  _internal_set_homography_strict_inlier_coverage(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.homography_strict_inlier_coverage)
}

// repeated float mixture_inlier_coverage = 13;
inline int CameraMotion::_internal_mixture_inlier_coverage_size() const {
  return mixture_inlier_coverage_.size();
}
inline int CameraMotion::mixture_inlier_coverage_size() const {
  return _internal_mixture_inlier_coverage_size();
}
inline void CameraMotion::clear_mixture_inlier_coverage() {
  mixture_inlier_coverage_.Clear();
}
inline float CameraMotion::_internal_mixture_inlier_coverage(int index) const {
  return mixture_inlier_coverage_.Get(index);
}
inline float CameraMotion::mixture_inlier_coverage(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.mixture_inlier_coverage)
  return _internal_mixture_inlier_coverage(index);
}
inline void CameraMotion::set_mixture_inlier_coverage(int index, float value) {
  mixture_inlier_coverage_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.mixture_inlier_coverage)
}
inline void CameraMotion::_internal_add_mixture_inlier_coverage(float value) {
  mixture_inlier_coverage_.Add(value);
}
inline void CameraMotion::add_mixture_inlier_coverage(float value) {
  _internal_add_mixture_inlier_coverage(value);
  // @@protoc_insertion_point(field_add:mediapipe.CameraMotion.mixture_inlier_coverage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMotion::_internal_mixture_inlier_coverage() const {
  return mixture_inlier_coverage_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraMotion::mixture_inlier_coverage() const {
  // @@protoc_insertion_point(field_list:mediapipe.CameraMotion.mixture_inlier_coverage)
  return _internal_mixture_inlier_coverage();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMotion::_internal_mutable_mixture_inlier_coverage() {
  return &mixture_inlier_coverage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraMotion::mutable_mixture_inlier_coverage() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CameraMotion.mixture_inlier_coverage)
  return _internal_mutable_mixture_inlier_coverage();
}

// optional float rolling_shutter_guess = 14;
inline bool CameraMotion::_internal_has_rolling_shutter_guess() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CameraMotion::has_rolling_shutter_guess() const {
  return _internal_has_rolling_shutter_guess();
}
inline void CameraMotion::clear_rolling_shutter_guess() {
  rolling_shutter_guess_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CameraMotion::_internal_rolling_shutter_guess() const {
  return rolling_shutter_guess_;
}
inline float CameraMotion::rolling_shutter_guess() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.rolling_shutter_guess)
  return _internal_rolling_shutter_guess();
}
inline void CameraMotion::_internal_set_rolling_shutter_guess(float value) {
  _has_bits_[0] |= 0x00000400u;
  rolling_shutter_guess_ = value;
}
inline void CameraMotion::set_rolling_shutter_guess(float value) {
  _internal_set_rolling_shutter_guess(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.rolling_shutter_guess)
}

// optional int32 rolling_shutter_motion_index = 16 [default = -1];
inline bool CameraMotion::_internal_has_rolling_shutter_motion_index() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CameraMotion::has_rolling_shutter_motion_index() const {
  return _internal_has_rolling_shutter_motion_index();
}
inline void CameraMotion::clear_rolling_shutter_motion_index() {
  rolling_shutter_motion_index_ = -1;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::_internal_rolling_shutter_motion_index() const {
  return rolling_shutter_motion_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::rolling_shutter_motion_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.rolling_shutter_motion_index)
  return _internal_rolling_shutter_motion_index();
}
inline void CameraMotion::_internal_set_rolling_shutter_motion_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  rolling_shutter_motion_index_ = value;
}
inline void CameraMotion::set_rolling_shutter_motion_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rolling_shutter_motion_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.rolling_shutter_motion_index)
}

// repeated int32 overlay_indices = 17;
inline int CameraMotion::_internal_overlay_indices_size() const {
  return overlay_indices_.size();
}
inline int CameraMotion::overlay_indices_size() const {
  return _internal_overlay_indices_size();
}
inline void CameraMotion::clear_overlay_indices() {
  overlay_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::_internal_overlay_indices(int index) const {
  return overlay_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::overlay_indices(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.overlay_indices)
  return _internal_overlay_indices(index);
}
inline void CameraMotion::set_overlay_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  overlay_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.overlay_indices)
}
inline void CameraMotion::_internal_add_overlay_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  overlay_indices_.Add(value);
}
inline void CameraMotion::add_overlay_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_overlay_indices(value);
  // @@protoc_insertion_point(field_add:mediapipe.CameraMotion.overlay_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CameraMotion::_internal_overlay_indices() const {
  return overlay_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CameraMotion::overlay_indices() const {
  // @@protoc_insertion_point(field_list:mediapipe.CameraMotion.overlay_indices)
  return _internal_overlay_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CameraMotion::_internal_mutable_overlay_indices() {
  return &overlay_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CameraMotion::mutable_overlay_indices() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CameraMotion.overlay_indices)
  return _internal_mutable_overlay_indices();
}

// optional int32 overlay_domain = 18 [default = 10];
inline bool CameraMotion::_internal_has_overlay_domain() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CameraMotion::has_overlay_domain() const {
  return _internal_has_overlay_domain();
}
inline void CameraMotion::clear_overlay_domain() {
  overlay_domain_ = 10;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::_internal_overlay_domain() const {
  return overlay_domain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::overlay_domain() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.overlay_domain)
  return _internal_overlay_domain();
}
inline void CameraMotion::_internal_set_overlay_domain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  overlay_domain_ = value;
}
inline void CameraMotion::set_overlay_domain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_overlay_domain(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.overlay_domain)
}

// optional .mediapipe.CameraMotion.Type type = 6 [default = VALID];
inline bool CameraMotion::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CameraMotion::has_type() const {
  return _internal_has_type();
}
inline void CameraMotion::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::mediapipe::CameraMotion_Type CameraMotion::_internal_type() const {
  return static_cast< ::mediapipe::CameraMotion_Type >(type_);
}
inline ::mediapipe::CameraMotion_Type CameraMotion::type() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.type)
  return _internal_type();
}
inline void CameraMotion::_internal_set_type(::mediapipe::CameraMotion_Type value) {
  assert(::mediapipe::CameraMotion_Type_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void CameraMotion::set_type(::mediapipe::CameraMotion_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.type)
}

// optional .mediapipe.CameraMotion.Type overridden_type = 15 [default = VALID];
inline bool CameraMotion::_internal_has_overridden_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CameraMotion::has_overridden_type() const {
  return _internal_has_overridden_type();
}
inline void CameraMotion::clear_overridden_type() {
  overridden_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::mediapipe::CameraMotion_Type CameraMotion::_internal_overridden_type() const {
  return static_cast< ::mediapipe::CameraMotion_Type >(overridden_type_);
}
inline ::mediapipe::CameraMotion_Type CameraMotion::overridden_type() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.overridden_type)
  return _internal_overridden_type();
}
inline void CameraMotion::_internal_set_overridden_type(::mediapipe::CameraMotion_Type value) {
  assert(::mediapipe::CameraMotion_Type_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  overridden_type_ = value;
}
inline void CameraMotion::set_overridden_type(::mediapipe::CameraMotion_Type value) {
  _internal_set_overridden_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.overridden_type)
}

// optional int32 flags = 19 [default = 0];
inline bool CameraMotion::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CameraMotion::has_flags() const {
  return _internal_has_flags();
}
inline void CameraMotion::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::flags() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.flags)
  return _internal_flags();
}
inline void CameraMotion::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  flags_ = value;
}
inline void CameraMotion::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.flags)
}

// optional float blur_score = 20;
inline bool CameraMotion::_internal_has_blur_score() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CameraMotion::has_blur_score() const {
  return _internal_has_blur_score();
}
inline void CameraMotion::clear_blur_score() {
  blur_score_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CameraMotion::_internal_blur_score() const {
  return blur_score_;
}
inline float CameraMotion::blur_score() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.blur_score)
  return _internal_blur_score();
}
inline void CameraMotion::_internal_set_blur_score(float value) {
  _has_bits_[0] |= 0x00002000u;
  blur_score_ = value;
}
inline void CameraMotion::set_blur_score(float value) {
  _internal_set_blur_score(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.blur_score)
}

// optional float bluriness = 21 [default = 0];
inline bool CameraMotion::_internal_has_bluriness() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CameraMotion::has_bluriness() const {
  return _internal_has_bluriness();
}
inline void CameraMotion::clear_bluriness() {
  bluriness_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CameraMotion::_internal_bluriness() const {
  return bluriness_;
}
inline float CameraMotion::bluriness() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.bluriness)
  return _internal_bluriness();
}
inline void CameraMotion::_internal_set_bluriness(float value) {
  _has_bits_[0] |= 0x00004000u;
  bluriness_ = value;
}
inline void CameraMotion::set_bluriness(float value) {
  _internal_set_bluriness(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.bluriness)
}

// optional float frac_long_features_rejected = 26;
inline bool CameraMotion::_internal_has_frac_long_features_rejected() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CameraMotion::has_frac_long_features_rejected() const {
  return _internal_has_frac_long_features_rejected();
}
inline void CameraMotion::clear_frac_long_features_rejected() {
  frac_long_features_rejected_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float CameraMotion::_internal_frac_long_features_rejected() const {
  return frac_long_features_rejected_;
}
inline float CameraMotion::frac_long_features_rejected() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.frac_long_features_rejected)
  return _internal_frac_long_features_rejected();
}
inline void CameraMotion::_internal_set_frac_long_features_rejected(float value) {
  _has_bits_[0] |= 0x00080000u;
  frac_long_features_rejected_ = value;
}
inline void CameraMotion::set_frac_long_features_rejected(float value) {
  _internal_set_frac_long_features_rejected(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.frac_long_features_rejected)
}

// optional int64 timestamp_usec = 27 [default = 0];
inline bool CameraMotion::_internal_has_timestamp_usec() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CameraMotion::has_timestamp_usec() const {
  return _internal_has_timestamp_usec();
}
inline void CameraMotion::clear_timestamp_usec() {
  timestamp_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraMotion::_internal_timestamp_usec() const {
  return timestamp_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CameraMotion::timestamp_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.timestamp_usec)
  return _internal_timestamp_usec();
}
inline void CameraMotion::_internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  timestamp_usec_ = value;
}
inline void CameraMotion::set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.timestamp_usec)
}

// optional int32 match_frame = 28 [default = 0];
inline bool CameraMotion::_internal_has_match_frame() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CameraMotion::has_match_frame() const {
  return _internal_has_match_frame();
}
inline void CameraMotion::clear_match_frame() {
  match_frame_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::_internal_match_frame() const {
  return match_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraMotion::match_frame() const {
  // @@protoc_insertion_point(field_get:mediapipe.CameraMotion.match_frame)
  return _internal_match_frame();
}
inline void CameraMotion::_internal_set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  match_frame_ = value;
}
inline void CameraMotion::set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_frame(value);
  // @@protoc_insertion_point(field_set:mediapipe.CameraMotion.match_frame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::CameraMotion_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::CameraMotion_Type>() {
  return ::mediapipe::CameraMotion_Type_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::CameraMotion_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::CameraMotion_Flags>() {
  return ::mediapipe::CameraMotion_Flags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fcamera_5fmotion_2eproto
