// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/flow_packager.proto

#include "mediapipe/util/tracking/flow_packager.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr TrackingData_MotionData::TrackingData_MotionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vector_data_()
  , track_id_()
  , _track_id_cached_byte_size_()
  , row_indices_()
  , _row_indices_cached_byte_size_()
  , col_starts_()
  , _col_starts_cached_byte_size_()
  , feature_descriptors_()
  , actively_discarded_tracked_ids_()
  , num_elements_(0){}
struct TrackingData_MotionDataDefaultTypeInternal {
  constexpr TrackingData_MotionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingData_MotionDataDefaultTypeInternal() {}
  union {
    TrackingData_MotionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingData_MotionDataDefaultTypeInternal _TrackingData_MotionData_default_instance_;
constexpr TrackingData::TrackingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : background_model_(nullptr)
  , motion_data_(nullptr)
  , frame_flags_(0)
  , domain_width_(0)
  , domain_height_(0)
  , global_feature_count_(0u)
  , average_motion_magnitude_(0)
  , frame_aspect_(1){}
struct TrackingDataDefaultTypeInternal {
  constexpr TrackingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingDataDefaultTypeInternal() {}
  union {
    TrackingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingDataDefaultTypeInternal _TrackingData_default_instance_;
constexpr TrackingDataChunk_Item::TrackingDataChunk_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracking_data_(nullptr)
  , timestamp_usec_(PROTOBUF_LONGLONG(0))
  , prev_timestamp_usec_(PROTOBUF_LONGLONG(0))
  , frame_idx_(0){}
struct TrackingDataChunk_ItemDefaultTypeInternal {
  constexpr TrackingDataChunk_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingDataChunk_ItemDefaultTypeInternal() {}
  union {
    TrackingDataChunk_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingDataChunk_ItemDefaultTypeInternal _TrackingDataChunk_Item_default_instance_;
constexpr TrackingDataChunk::TrackingDataChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_()
  , last_chunk_(false)
  , first_chunk_(false){}
struct TrackingDataChunkDefaultTypeInternal {
  constexpr TrackingDataChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingDataChunkDefaultTypeInternal() {}
  union {
    TrackingDataChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingDataChunkDefaultTypeInternal _TrackingDataChunk_default_instance_;
constexpr BinaryTrackingData::BinaryTrackingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BinaryTrackingDataDefaultTypeInternal {
  constexpr BinaryTrackingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryTrackingDataDefaultTypeInternal() {}
  union {
    BinaryTrackingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryTrackingDataDefaultTypeInternal _BinaryTrackingData_default_instance_;
constexpr MetaData_TrackOffset::MetaData_TrackOffset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msec_(0u)
  , stream_offset_(0u){}
struct MetaData_TrackOffsetDefaultTypeInternal {
  constexpr MetaData_TrackOffsetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaData_TrackOffsetDefaultTypeInternal() {}
  union {
    MetaData_TrackOffset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaData_TrackOffsetDefaultTypeInternal _MetaData_TrackOffset_default_instance_;
constexpr MetaData::MetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_offsets_()
  , num_frames_(0u){}
struct MetaDataDefaultTypeInternal {
  constexpr MetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaDataDefaultTypeInternal() {}
  union {
    MetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaDataDefaultTypeInternal _MetaData_default_instance_;
constexpr TrackingContainer::TrackingContainer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(0u)
  , version_(1u){}
struct TrackingContainerDefaultTypeInternal {
  constexpr TrackingContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingContainerDefaultTypeInternal() {}
  union {
    TrackingContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingContainerDefaultTypeInternal _TrackingContainer_default_instance_;
constexpr TrackingContainerFormat::TrackingContainerFormat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_data_()
  , meta_data_(nullptr)
  , term_data_(nullptr){}
struct TrackingContainerFormatDefaultTypeInternal {
  constexpr TrackingContainerFormatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingContainerFormatDefaultTypeInternal() {}
  union {
    TrackingContainerFormat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingContainerFormatDefaultTypeInternal _TrackingContainerFormat_default_instance_;
constexpr TrackingContainerProto::TrackingContainerProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_data_()
  , meta_data_(nullptr){}
struct TrackingContainerProtoDefaultTypeInternal {
  constexpr TrackingContainerProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingContainerProtoDefaultTypeInternal() {}
  union {
    TrackingContainerProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingContainerProtoDefaultTypeInternal _TrackingContainerProto_default_instance_;
constexpr FlowPackagerOptions::FlowPackagerOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : use_high_profile_(false)
  , domain_width_(256)
  , domain_height_(192)
  , high_profile_reuse_threshold_(0.5f)
  , binary_tracking_data_support_(true)
  , high_fidelity_16bit_encode_(true){}
struct FlowPackagerOptionsDefaultTypeInternal {
  constexpr FlowPackagerOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowPackagerOptionsDefaultTypeInternal() {}
  union {
    FlowPackagerOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowPackagerOptionsDefaultTypeInternal _FlowPackagerOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, num_elements_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, vector_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, track_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, row_indices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, col_starts_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, feature_descriptors_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData_MotionData, actively_discarded_tracked_ids_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, frame_flags_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, domain_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, domain_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, frame_aspect_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, background_model_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, motion_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, global_feature_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingData, average_motion_magnitude_),
  2,
  3,
  4,
  7,
  0,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk_Item, tracking_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk_Item, frame_idx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk_Item, timestamp_usec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk_Item, prev_timestamp_usec_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk, item_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk, last_chunk_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingDataChunk, first_chunk_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::BinaryTrackingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BinaryTrackingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BinaryTrackingData, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData_TrackOffset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData_TrackOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData_TrackOffset, msec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData_TrackOffset, stream_offset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData, num_frames_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MetaData, track_offsets_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainer, header_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainer, version_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainer, size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainer, data_),
  0,
  3,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerFormat, meta_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerFormat, track_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerFormat, term_data_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerProto, meta_data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingContainerProto, track_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, domain_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, domain_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, binary_tracking_data_support_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, use_high_profile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, high_fidelity_16bit_encode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::FlowPackagerOptions, high_profile_reuse_threshold_),
  1,
  2,
  4,
  0,
  5,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::mediapipe::TrackingData_MotionData)},
  { 19, 32, sizeof(::mediapipe::TrackingData)},
  { 40, 49, sizeof(::mediapipe::TrackingDataChunk_Item)},
  { 53, 61, sizeof(::mediapipe::TrackingDataChunk)},
  { 64, 70, sizeof(::mediapipe::BinaryTrackingData)},
  { 71, 78, sizeof(::mediapipe::MetaData_TrackOffset)},
  { 80, 87, sizeof(::mediapipe::MetaData)},
  { 89, 98, sizeof(::mediapipe::TrackingContainer)},
  { 102, 110, sizeof(::mediapipe::TrackingContainerFormat)},
  { 113, 120, sizeof(::mediapipe::TrackingContainerProto)},
  { 122, 133, sizeof(::mediapipe::FlowPackagerOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingData_MotionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingDataChunk_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingDataChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BinaryTrackingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MetaData_TrackOffset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingContainerFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingContainerProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_FlowPackagerOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+mediapipe/util/tracking/flow_packager."
  "proto\022\tmediapipe\032+mediapipe/util/trackin"
  "g/motion_models.proto\032)mediapipe/util/tr"
  "acking/region_flow.proto\"\261\005\n\014TrackingDat"
  "a\022\026\n\013frame_flags\030\001 \001(\005:\0010\022\024\n\014domain_widt"
  "h\030\002 \001(\005\022\025\n\rdomain_height\030\003 \001(\005\022\027\n\014frame_"
  "aspect\030\006 \001(\002:\0011\022/\n\020background_model\030\004 \001("
  "\0132\025.mediapipe.Homography\0227\n\013motion_data\030"
  "\005 \001(\0132\".mediapipe.TrackingData.MotionDat"
  "a\022\034\n\024global_feature_count\030\007 \001(\r\022 \n\030avera"
  "ge_motion_magnitude\030\010 \001(\002\032\353\001\n\nMotionData"
  "\022\024\n\014num_elements\030\001 \001(\005\022\027\n\013vector_data\030\002 "
  "\003(\002B\002\020\001\022\024\n\010track_id\030\003 \003(\005B\002\020\001\022\027\n\013row_ind"
  "ices\030\004 \003(\005B\002\020\001\022\026\n\ncol_starts\030\005 \003(\005B\002\020\001\022\?"
  "\n\023feature_descriptors\030\006 \003(\0132\".mediapipe."
  "BinaryFeatureDescriptor\022&\n\036actively_disc"
  "arded_tracked_ids\030\007 \003(\005\"\252\001\n\nFrameFlags\022\031"
  "\n\025FLAG_PROFILE_BASELINE\020\000\022\025\n\021FLAG_PROFIL"
  "E_HIGH\020\001\022\036\n\032FLAG_HIGH_FIDELITY_VECTORS\020\002"
  "\022\034\n\030FLAG_BACKGROUND_UNSTABLE\020\004\022\023\n\017FLAG_D"
  "UPLICATED\020\010\022\027\n\023FLAG_CHUNK_BOUNDARY\020\020\"\373\001\n"
  "\021TrackingDataChunk\022/\n\004item\030\001 \003(\0132!.media"
  "pipe.TrackingDataChunk.Item\022\031\n\nlast_chun"
  "k\030\002 \001(\010:\005false\022\032\n\013first_chunk\030\003 \001(\010:\005fal"
  "se\032~\n\004Item\022.\n\rtracking_data\030\001 \001(\0132\027.medi"
  "apipe.TrackingData\022\021\n\tframe_idx\030\002 \001(\005\022\026\n"
  "\016timestamp_usec\030\003 \001(\003\022\033\n\023prev_timestamp_"
  "usec\030\004 \001(\003\"\"\n\022BinaryTrackingData\022\014\n\004data"
  "\030\001 \001(\014\"\212\001\n\010MetaData\022\022\n\nnum_frames\030\002 \001(\007\022"
  "6\n\rtrack_offsets\030\003 \003(\0132\037.mediapipe.MetaD"
  "ata.TrackOffset\0322\n\013TrackOffset\022\014\n\004msec\030\001"
  " \001(\007\022\025\n\rstream_offset\030\002 \001(\007\"S\n\021TrackingC"
  "ontainer\022\016\n\006header\030\001 \001(\t\022\022\n\007version\030\002 \001("
  "\007:\0011\022\014\n\004size\030\003 \001(\007\022\014\n\004data\030\004 \001(\014\"\255\001\n\027Tra"
  "ckingContainerFormat\022/\n\tmeta_data\030\001 \001(\0132"
  "\034.mediapipe.TrackingContainer\0220\n\ntrack_d"
  "ata\030\002 \003(\0132\034.mediapipe.TrackingContainer\022"
  "/\n\tterm_data\030\003 \001(\0132\034.mediapipe.TrackingC"
  "ontainer\"s\n\026TrackingContainerProto\022&\n\tme"
  "ta_data\030\001 \001(\0132\023.mediapipe.MetaData\0221\n\ntr"
  "ack_data\030\002 \003(\0132\035.mediapipe.BinaryTrackin"
  "gData\"\301\002\n\023FlowPackagerOptions\022\031\n\014domain_"
  "width\030\001 \001(\005:\003256\022\032\n\rdomain_height\030\002 \001(\005:"
  "\003192\022*\n\034binary_tracking_data_support\030\006 \001"
  "(\010:\004true\022\037\n\020use_high_profile\030\003 \001(\010:\005fals"
  "e\022(\n\032high_fidelity_16bit_encode\030\004 \001(\010:\004t"
  "rue\022)\n\034high_profile_reuse_threshold\030\005 \001("
  "\002:\0030.5\"Q\n\023HighProfileEncoding\022\021\n\014ADVANCE"
  "_FLAG\020\200\001\022\027\n\023DOUBLE_INDEX_ENCODE\020@\022\016\n\nIND"
  "EX_MASK\020\?"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto,
  &::descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto = {
  false, false, 1969, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto, "mediapipe/util/tracking/flow_packager.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingData_FrameFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[0];
}
bool TrackingData_FrameFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackingData_FrameFlags TrackingData::FLAG_PROFILE_BASELINE;
constexpr TrackingData_FrameFlags TrackingData::FLAG_PROFILE_HIGH;
constexpr TrackingData_FrameFlags TrackingData::FLAG_HIGH_FIDELITY_VECTORS;
constexpr TrackingData_FrameFlags TrackingData::FLAG_BACKGROUND_UNSTABLE;
constexpr TrackingData_FrameFlags TrackingData::FLAG_DUPLICATED;
constexpr TrackingData_FrameFlags TrackingData::FLAG_CHUNK_BOUNDARY;
constexpr TrackingData_FrameFlags TrackingData::FrameFlags_MIN;
constexpr TrackingData_FrameFlags TrackingData::FrameFlags_MAX;
constexpr int TrackingData::FrameFlags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowPackagerOptions_HighProfileEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[1];
}
bool FlowPackagerOptions_HighProfileEncoding_IsValid(int value) {
  switch (value) {
    case 63:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FlowPackagerOptions_HighProfileEncoding FlowPackagerOptions::ADVANCE_FLAG;
constexpr FlowPackagerOptions_HighProfileEncoding FlowPackagerOptions::DOUBLE_INDEX_ENCODE;
constexpr FlowPackagerOptions_HighProfileEncoding FlowPackagerOptions::INDEX_MASK;
constexpr FlowPackagerOptions_HighProfileEncoding FlowPackagerOptions::HighProfileEncoding_MIN;
constexpr FlowPackagerOptions_HighProfileEncoding FlowPackagerOptions::HighProfileEncoding_MAX;
constexpr int FlowPackagerOptions::HighProfileEncoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TrackingData_MotionData::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingData_MotionData>()._has_bits_);
  static void set_has_num_elements(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void TrackingData_MotionData::clear_feature_descriptors() {
  feature_descriptors_.Clear();
}
TrackingData_MotionData::TrackingData_MotionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vector_data_(arena),
  track_id_(arena),
  row_indices_(arena),
  col_starts_(arena),
  feature_descriptors_(arena),
  actively_discarded_tracked_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingData.MotionData)
}
TrackingData_MotionData::TrackingData_MotionData(const TrackingData_MotionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vector_data_(from.vector_data_),
      track_id_(from.track_id_),
      row_indices_(from.row_indices_),
      col_starts_(from.col_starts_),
      feature_descriptors_(from.feature_descriptors_),
      actively_discarded_tracked_ids_(from.actively_discarded_tracked_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_elements_ = from.num_elements_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingData.MotionData)
}

void TrackingData_MotionData::SharedCtor() {
num_elements_ = 0;
}

TrackingData_MotionData::~TrackingData_MotionData() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingData.MotionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingData_MotionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackingData_MotionData::ArenaDtor(void* object) {
  TrackingData_MotionData* _this = reinterpret_cast< TrackingData_MotionData* >(object);
  (void)_this;
}
void TrackingData_MotionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingData_MotionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingData_MotionData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingData.MotionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_data_.Clear();
  track_id_.Clear();
  row_indices_.Clear();
  col_starts_.Clear();
  feature_descriptors_.Clear();
  actively_discarded_tracked_ids_.Clear();
  num_elements_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingData_MotionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_elements(&has_bits);
          num_elements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float vector_data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vector_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_vector_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 track_id = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_track_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_track_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 row_indices = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_row_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 col_starts = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_col_starts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_col_starts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.BinaryFeatureDescriptor feature_descriptors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 actively_discarded_tracked_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_actively_discarded_tracked_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingData_MotionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingData.MotionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_elements = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_elements(), target);
  }

  // repeated float vector_data = 2 [packed = true];
  if (this->_internal_vector_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_vector_data(), target);
  }

  // repeated int32 track_id = 3 [packed = true];
  {
    int byte_size = _track_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_track_id(), byte_size, target);
    }
  }

  // repeated int32 row_indices = 4 [packed = true];
  {
    int byte_size = _row_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_row_indices(), byte_size, target);
    }
  }

  // repeated int32 col_starts = 5 [packed = true];
  {
    int byte_size = _col_starts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_col_starts(), byte_size, target);
    }
  }

  // repeated .mediapipe.BinaryFeatureDescriptor feature_descriptors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_feature_descriptors(i), target, stream);
  }

  // repeated int32 actively_discarded_tracked_ids = 7;
  for (int i = 0, n = this->_internal_actively_discarded_tracked_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_actively_discarded_tracked_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingData.MotionData)
  return target;
}

size_t TrackingData_MotionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingData.MotionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vector_data = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vector_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 track_id = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->track_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _track_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 row_indices = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->row_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _row_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 col_starts = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->col_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _col_starts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .mediapipe.BinaryFeatureDescriptor feature_descriptors = 6;
  total_size += 1UL * this->_internal_feature_descriptors_size();
  for (const auto& msg : this->feature_descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 actively_discarded_tracked_ids = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->actively_discarded_tracked_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_actively_discarded_tracked_ids_size());
    total_size += data_size;
  }

  // optional int32 num_elements = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_elements());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingData_MotionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingData.MotionData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingData_MotionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingData_MotionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingData.MotionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingData.MotionData)
    MergeFrom(*source);
  }
}

void TrackingData_MotionData::MergeFrom(const TrackingData_MotionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingData.MotionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_data_.MergeFrom(from.vector_data_);
  track_id_.MergeFrom(from.track_id_);
  row_indices_.MergeFrom(from.row_indices_);
  col_starts_.MergeFrom(from.col_starts_);
  feature_descriptors_.MergeFrom(from.feature_descriptors_);
  actively_discarded_tracked_ids_.MergeFrom(from.actively_discarded_tracked_ids_);
  if (from._internal_has_num_elements()) {
    _internal_set_num_elements(from._internal_num_elements());
  }
}

void TrackingData_MotionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingData.MotionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingData_MotionData::CopyFrom(const TrackingData_MotionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingData.MotionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingData_MotionData::IsInitialized() const {
  return true;
}

void TrackingData_MotionData::InternalSwap(TrackingData_MotionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vector_data_.InternalSwap(&other->vector_data_);
  track_id_.InternalSwap(&other->track_id_);
  row_indices_.InternalSwap(&other->row_indices_);
  col_starts_.InternalSwap(&other->col_starts_);
  feature_descriptors_.InternalSwap(&other->feature_descriptors_);
  actively_discarded_tracked_ids_.InternalSwap(&other->actively_discarded_tracked_ids_);
  swap(num_elements_, other->num_elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingData_MotionData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[0]);
}

// ===================================================================

class TrackingData::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingData>()._has_bits_);
  static void set_has_frame_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_domain_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_domain_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_aspect(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mediapipe::Homography& background_model(const TrackingData* msg);
  static void set_has_background_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::TrackingData_MotionData& motion_data(const TrackingData* msg);
  static void set_has_motion_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_global_feature_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_average_motion_magnitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::mediapipe::Homography&
TrackingData::_Internal::background_model(const TrackingData* msg) {
  return *msg->background_model_;
}
const ::mediapipe::TrackingData_MotionData&
TrackingData::_Internal::motion_data(const TrackingData* msg) {
  return *msg->motion_data_;
}
void TrackingData::clear_background_model() {
  if (background_model_ != nullptr) background_model_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TrackingData::TrackingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingData)
}
TrackingData::TrackingData(const TrackingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_background_model()) {
    background_model_ = new ::mediapipe::Homography(*from.background_model_);
  } else {
    background_model_ = nullptr;
  }
  if (from._internal_has_motion_data()) {
    motion_data_ = new ::mediapipe::TrackingData_MotionData(*from.motion_data_);
  } else {
    motion_data_ = nullptr;
  }
  ::memcpy(&frame_flags_, &from.frame_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_aspect_) -
    reinterpret_cast<char*>(&frame_flags_)) + sizeof(frame_aspect_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingData)
}

void TrackingData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&background_model_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&average_motion_magnitude_) -
    reinterpret_cast<char*>(&background_model_)) + sizeof(average_motion_magnitude_));
frame_aspect_ = 1;
}

TrackingData::~TrackingData() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete background_model_;
  if (this != internal_default_instance()) delete motion_data_;
}

void TrackingData::ArenaDtor(void* object) {
  TrackingData* _this = reinterpret_cast< TrackingData* >(object);
  (void)_this;
}
void TrackingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(background_model_ != nullptr);
      background_model_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(motion_data_ != nullptr);
      motion_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&frame_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&average_motion_magnitude_) -
        reinterpret_cast<char*>(&frame_flags_)) + sizeof(average_motion_magnitude_));
    frame_aspect_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 frame_flags = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frame_flags(&has_bits);
          frame_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 domain_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_domain_width(&has_bits);
          domain_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 domain_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_domain_height(&has_bits);
          domain_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.Homography background_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingData.MotionData motion_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float frame_aspect = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_frame_aspect(&has_bits);
          frame_aspect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 global_feature_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_global_feature_count(&has_bits);
          global_feature_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float average_motion_magnitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_average_motion_magnitude(&has_bits);
          average_motion_magnitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 frame_flags = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_flags(), target);
  }

  // optional int32 domain_width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_domain_width(), target);
  }

  // optional int32 domain_height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_domain_height(), target);
  }

  // optional .mediapipe.Homography background_model = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::background_model(this), target, stream);
  }

  // optional .mediapipe.TrackingData.MotionData motion_data = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::motion_data(this), target, stream);
  }

  // optional float frame_aspect = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_frame_aspect(), target);
  }

  // optional uint32 global_feature_count = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_global_feature_count(), target);
  }

  // optional float average_motion_magnitude = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_average_motion_magnitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingData)
  return target;
}

size_t TrackingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.Homography background_model = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_model_);
    }

    // optional .mediapipe.TrackingData.MotionData motion_data = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motion_data_);
    }

    // optional int32 frame_flags = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_flags());
    }

    // optional int32 domain_width = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_domain_width());
    }

    // optional int32 domain_height = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_domain_height());
    }

    // optional uint32 global_feature_count = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_global_feature_count());
    }

    // optional float average_motion_magnitude = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float frame_aspect = 6 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingData)
    MergeFrom(*source);
  }
}

void TrackingData::MergeFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_background_model()->::mediapipe::Homography::MergeFrom(from._internal_background_model());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_motion_data()->::mediapipe::TrackingData_MotionData::MergeFrom(from._internal_motion_data());
    }
    if (cached_has_bits & 0x00000004u) {
      frame_flags_ = from.frame_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      domain_width_ = from.domain_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      domain_height_ = from.domain_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      global_feature_count_ = from.global_feature_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      average_motion_magnitude_ = from.average_motion_magnitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      frame_aspect_ = from.frame_aspect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingData::CopyFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingData::IsInitialized() const {
  return true;
}

void TrackingData::InternalSwap(TrackingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackingData, average_motion_magnitude_)
      + sizeof(TrackingData::average_motion_magnitude_)
      - PROTOBUF_FIELD_OFFSET(TrackingData, background_model_)>(
          reinterpret_cast<char*>(&background_model_),
          reinterpret_cast<char*>(&other->background_model_));
  swap(frame_aspect_, other->frame_aspect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[1]);
}

// ===================================================================

class TrackingDataChunk_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingDataChunk_Item>()._has_bits_);
  static const ::mediapipe::TrackingData& tracking_data(const TrackingDataChunk_Item* msg);
  static void set_has_tracking_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::TrackingData&
TrackingDataChunk_Item::_Internal::tracking_data(const TrackingDataChunk_Item* msg) {
  return *msg->tracking_data_;
}
TrackingDataChunk_Item::TrackingDataChunk_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingDataChunk.Item)
}
TrackingDataChunk_Item::TrackingDataChunk_Item(const TrackingDataChunk_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tracking_data()) {
    tracking_data_ = new ::mediapipe::TrackingData(*from.tracking_data_);
  } else {
    tracking_data_ = nullptr;
  }
  ::memcpy(&timestamp_usec_, &from.timestamp_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_idx_) -
    reinterpret_cast<char*>(&timestamp_usec_)) + sizeof(frame_idx_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingDataChunk.Item)
}

void TrackingDataChunk_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracking_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_idx_) -
    reinterpret_cast<char*>(&tracking_data_)) + sizeof(frame_idx_));
}

TrackingDataChunk_Item::~TrackingDataChunk_Item() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingDataChunk.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingDataChunk_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tracking_data_;
}

void TrackingDataChunk_Item::ArenaDtor(void* object) {
  TrackingDataChunk_Item* _this = reinterpret_cast< TrackingDataChunk_Item* >(object);
  (void)_this;
}
void TrackingDataChunk_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingDataChunk_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingDataChunk_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingDataChunk.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tracking_data_ != nullptr);
    tracking_data_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_idx_) -
        reinterpret_cast<char*>(&timestamp_usec_)) + sizeof(frame_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingDataChunk_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.TrackingData tracking_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracking_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_idx(&has_bits);
          frame_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_usec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp_usec(&has_bits);
          timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prev_timestamp_usec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prev_timestamp_usec(&has_bits);
          prev_timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingDataChunk_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingDataChunk.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.TrackingData tracking_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tracking_data(this), target, stream);
  }

  // optional int32 frame_idx = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frame_idx(), target);
  }

  // optional int64 timestamp_usec = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp_usec(), target);
  }

  // optional int64 prev_timestamp_usec = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_prev_timestamp_usec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingDataChunk.Item)
  return target;
}

size_t TrackingDataChunk_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingDataChunk.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mediapipe.TrackingData tracking_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracking_data_);
    }

    // optional int64 timestamp_usec = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp_usec());
    }

    // optional int64 prev_timestamp_usec = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_prev_timestamp_usec());
    }

    // optional int32 frame_idx = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingDataChunk_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingDataChunk.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingDataChunk_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingDataChunk_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingDataChunk.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingDataChunk.Item)
    MergeFrom(*source);
  }
}

void TrackingDataChunk_Item::MergeFrom(const TrackingDataChunk_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingDataChunk.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tracking_data()->::mediapipe::TrackingData::MergeFrom(from._internal_tracking_data());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_usec_ = from.timestamp_usec_;
    }
    if (cached_has_bits & 0x00000004u) {
      prev_timestamp_usec_ = from.prev_timestamp_usec_;
    }
    if (cached_has_bits & 0x00000008u) {
      frame_idx_ = from.frame_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingDataChunk_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingDataChunk.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingDataChunk_Item::CopyFrom(const TrackingDataChunk_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingDataChunk.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingDataChunk_Item::IsInitialized() const {
  return true;
}

void TrackingDataChunk_Item::InternalSwap(TrackingDataChunk_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackingDataChunk_Item, frame_idx_)
      + sizeof(TrackingDataChunk_Item::frame_idx_)
      - PROTOBUF_FIELD_OFFSET(TrackingDataChunk_Item, tracking_data_)>(
          reinterpret_cast<char*>(&tracking_data_),
          reinterpret_cast<char*>(&other->tracking_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingDataChunk_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[2]);
}

// ===================================================================

class TrackingDataChunk::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingDataChunk>()._has_bits_);
  static void set_has_last_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrackingDataChunk::TrackingDataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingDataChunk)
}
TrackingDataChunk::TrackingDataChunk(const TrackingDataChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_chunk_, &from.last_chunk_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_chunk_) -
    reinterpret_cast<char*>(&last_chunk_)) + sizeof(first_chunk_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingDataChunk)
}

void TrackingDataChunk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_chunk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_chunk_) -
    reinterpret_cast<char*>(&last_chunk_)) + sizeof(first_chunk_));
}

TrackingDataChunk::~TrackingDataChunk() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingDataChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingDataChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackingDataChunk::ArenaDtor(void* object) {
  TrackingDataChunk* _this = reinterpret_cast< TrackingDataChunk* >(object);
  (void)_this;
}
void TrackingDataChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingDataChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingDataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingDataChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  ::memset(&last_chunk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_chunk_) -
      reinterpret_cast<char*>(&last_chunk_)) + sizeof(first_chunk_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingDataChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.TrackingDataChunk.Item item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool last_chunk = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_chunk(&has_bits);
          last_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_chunk = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_first_chunk(&has_bits);
          first_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingDataChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingDataChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.TrackingDataChunk.Item item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool last_chunk = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_last_chunk(), target);
  }

  // optional bool first_chunk = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_first_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingDataChunk)
  return target;
}

size_t TrackingDataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingDataChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.TrackingDataChunk.Item item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool last_chunk = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool first_chunk = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingDataChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingDataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingDataChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingDataChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingDataChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingDataChunk)
    MergeFrom(*source);
  }
}

void TrackingDataChunk::MergeFrom(const TrackingDataChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingDataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_chunk_ = from.last_chunk_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_chunk_ = from.first_chunk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingDataChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingDataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingDataChunk::CopyFrom(const TrackingDataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingDataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingDataChunk::IsInitialized() const {
  return true;
}

void TrackingDataChunk::InternalSwap(TrackingDataChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackingDataChunk, first_chunk_)
      + sizeof(TrackingDataChunk::first_chunk_)
      - PROTOBUF_FIELD_OFFSET(TrackingDataChunk, last_chunk_)>(
          reinterpret_cast<char*>(&last_chunk_),
          reinterpret_cast<char*>(&other->last_chunk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingDataChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[3]);
}

// ===================================================================

class BinaryTrackingData::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryTrackingData>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinaryTrackingData::BinaryTrackingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BinaryTrackingData)
}
BinaryTrackingData::BinaryTrackingData(const BinaryTrackingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.BinaryTrackingData)
}

void BinaryTrackingData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BinaryTrackingData::~BinaryTrackingData() {
  // @@protoc_insertion_point(destructor:mediapipe.BinaryTrackingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryTrackingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BinaryTrackingData::ArenaDtor(void* object) {
  BinaryTrackingData* _this = reinterpret_cast< BinaryTrackingData* >(object);
  (void)_this;
}
void BinaryTrackingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryTrackingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryTrackingData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BinaryTrackingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryTrackingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryTrackingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BinaryTrackingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BinaryTrackingData)
  return target;
}

size_t BinaryTrackingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BinaryTrackingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryTrackingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BinaryTrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryTrackingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryTrackingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BinaryTrackingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BinaryTrackingData)
    MergeFrom(*source);
  }
}

void BinaryTrackingData::MergeFrom(const BinaryTrackingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BinaryTrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void BinaryTrackingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BinaryTrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryTrackingData::CopyFrom(const BinaryTrackingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BinaryTrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryTrackingData::IsInitialized() const {
  return true;
}

void BinaryTrackingData::InternalSwap(BinaryTrackingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryTrackingData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[4]);
}

// ===================================================================

class MetaData_TrackOffset::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaData_TrackOffset>()._has_bits_);
  static void set_has_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MetaData_TrackOffset::MetaData_TrackOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MetaData.TrackOffset)
}
MetaData_TrackOffset::MetaData_TrackOffset(const MetaData_TrackOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msec_, &from.msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_offset_) -
    reinterpret_cast<char*>(&msec_)) + sizeof(stream_offset_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MetaData.TrackOffset)
}

void MetaData_TrackOffset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_offset_) -
    reinterpret_cast<char*>(&msec_)) + sizeof(stream_offset_));
}

MetaData_TrackOffset::~MetaData_TrackOffset() {
  // @@protoc_insertion_point(destructor:mediapipe.MetaData.TrackOffset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetaData_TrackOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetaData_TrackOffset::ArenaDtor(void* object) {
  MetaData_TrackOffset* _this = reinterpret_cast< MetaData_TrackOffset* >(object);
  (void)_this;
}
void MetaData_TrackOffset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaData_TrackOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaData_TrackOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MetaData.TrackOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_offset_) -
        reinterpret_cast<char*>(&msec_)) + sizeof(stream_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaData_TrackOffset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 msec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_msec(&has_bits);
          msec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 stream_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_stream_offset(&has_bits);
          stream_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaData_TrackOffset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MetaData.TrackOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 msec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_msec(), target);
  }

  // optional fixed32 stream_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_stream_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MetaData.TrackOffset)
  return target;
}

size_t MetaData_TrackOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MetaData.TrackOffset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 msec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 stream_offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaData_TrackOffset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MetaData.TrackOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaData_TrackOffset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaData_TrackOffset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MetaData.TrackOffset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MetaData.TrackOffset)
    MergeFrom(*source);
  }
}

void MetaData_TrackOffset::MergeFrom(const MetaData_TrackOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MetaData.TrackOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msec_ = from.msec_;
    }
    if (cached_has_bits & 0x00000002u) {
      stream_offset_ = from.stream_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetaData_TrackOffset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MetaData.TrackOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData_TrackOffset::CopyFrom(const MetaData_TrackOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MetaData.TrackOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData_TrackOffset::IsInitialized() const {
  return true;
}

void MetaData_TrackOffset::InternalSwap(MetaData_TrackOffset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaData_TrackOffset, stream_offset_)
      + sizeof(MetaData_TrackOffset::stream_offset_)
      - PROTOBUF_FIELD_OFFSET(MetaData_TrackOffset, msec_)>(
          reinterpret_cast<char*>(&msec_),
          reinterpret_cast<char*>(&other->msec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaData_TrackOffset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[5]);
}

// ===================================================================

class MetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaData>()._has_bits_);
  static void set_has_num_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MetaData::MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  track_offsets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      track_offsets_(from.track_offsets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_frames_ = from.num_frames_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.MetaData)
}

void MetaData::SharedCtor() {
num_frames_ = 0u;
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:mediapipe.MetaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetaData::ArenaDtor(void* object) {
  MetaData* _this = reinterpret_cast< MetaData* >(object);
  (void)_this;
}
void MetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_offsets_.Clear();
  num_frames_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 num_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_num_frames(&has_bits);
          num_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.MetaData.TrackOffset track_offsets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_track_offsets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 num_frames = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_num_frames(), target);
  }

  // repeated .mediapipe.MetaData.TrackOffset track_offsets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_track_offsets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_track_offsets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MetaData)
  return target;
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.MetaData.TrackOffset track_offsets = 3;
  total_size += 1UL * this->_internal_track_offsets_size();
  for (const auto& msg : this->track_offsets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed32 num_frames = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MetaData)
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  track_offsets_.MergeFrom(from.track_offsets_);
  if (from._internal_has_num_frames()) {
    _internal_set_num_frames(from._internal_num_frames());
  }
}

void MetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::InternalSwap(MetaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  track_offsets_.InternalSwap(&other->track_offsets_);
  swap(num_frames_, other->num_frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[6]);
}

// ===================================================================

class TrackingContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingContainer>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrackingContainer::TrackingContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingContainer)
}
TrackingContainer::TrackingContainer(const TrackingContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_header()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&size_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingContainer)
}

void TrackingContainer::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
size_ = 0u;
version_ = 1u;
}

TrackingContainer::~TrackingContainer() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackingContainer::ArenaDtor(void* object) {
  TrackingContainer* _this = reinterpret_cast< TrackingContainer* >(object);
  (void)_this;
}
void TrackingContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    size_ = 0u;
    version_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.TrackingContainer.header");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 version = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.TrackingContainer.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // optional fixed32 version = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_version(), target);
  }

  // optional fixed32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_size(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingContainer)
  return target;
}

size_t TrackingContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_header());
    }

    // optional bytes data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional fixed32 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 version = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingContainer)
    MergeFrom(*source);
  }
}

void TrackingContainer::MergeFrom(const TrackingContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingContainer::CopyFrom(const TrackingContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingContainer::IsInitialized() const {
  return true;
}

void TrackingContainer::InternalSwap(TrackingContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingContainer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[7]);
}

// ===================================================================

class TrackingContainerFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingContainerFormat>()._has_bits_);
  static const ::mediapipe::TrackingContainer& meta_data(const TrackingContainerFormat* msg);
  static void set_has_meta_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::TrackingContainer& term_data(const TrackingContainerFormat* msg);
  static void set_has_term_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mediapipe::TrackingContainer&
TrackingContainerFormat::_Internal::meta_data(const TrackingContainerFormat* msg) {
  return *msg->meta_data_;
}
const ::mediapipe::TrackingContainer&
TrackingContainerFormat::_Internal::term_data(const TrackingContainerFormat* msg) {
  return *msg->term_data_;
}
TrackingContainerFormat::TrackingContainerFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  track_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingContainerFormat)
}
TrackingContainerFormat::TrackingContainerFormat(const TrackingContainerFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      track_data_(from.track_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta_data()) {
    meta_data_ = new ::mediapipe::TrackingContainer(*from.meta_data_);
  } else {
    meta_data_ = nullptr;
  }
  if (from._internal_has_term_data()) {
    term_data_ = new ::mediapipe::TrackingContainer(*from.term_data_);
  } else {
    term_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingContainerFormat)
}

void TrackingContainerFormat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&term_data_) -
    reinterpret_cast<char*>(&meta_data_)) + sizeof(term_data_));
}

TrackingContainerFormat::~TrackingContainerFormat() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingContainerFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingContainerFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_data_;
  if (this != internal_default_instance()) delete term_data_;
}

void TrackingContainerFormat::ArenaDtor(void* object) {
  TrackingContainerFormat* _this = reinterpret_cast< TrackingContainerFormat* >(object);
  (void)_this;
}
void TrackingContainerFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingContainerFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingContainerFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingContainerFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(meta_data_ != nullptr);
      meta_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(term_data_ != nullptr);
      term_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingContainerFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.TrackingContainer meta_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.TrackingContainer track_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_track_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingContainer term_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_term_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingContainerFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingContainerFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.TrackingContainer meta_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta_data(this), target, stream);
  }

  // repeated .mediapipe.TrackingContainer track_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_track_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_track_data(i), target, stream);
  }

  // optional .mediapipe.TrackingContainer term_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::term_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingContainerFormat)
  return target;
}

size_t TrackingContainerFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingContainerFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.TrackingContainer track_data = 2;
  total_size += 1UL * this->_internal_track_data_size();
  for (const auto& msg : this->track_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mediapipe.TrackingContainer meta_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meta_data_);
    }

    // optional .mediapipe.TrackingContainer term_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *term_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingContainerFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingContainerFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingContainerFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingContainerFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingContainerFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingContainerFormat)
    MergeFrom(*source);
  }
}

void TrackingContainerFormat::MergeFrom(const TrackingContainerFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingContainerFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  track_data_.MergeFrom(from.track_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_meta_data()->::mediapipe::TrackingContainer::MergeFrom(from._internal_meta_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_term_data()->::mediapipe::TrackingContainer::MergeFrom(from._internal_term_data());
    }
  }
}

void TrackingContainerFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingContainerFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingContainerFormat::CopyFrom(const TrackingContainerFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingContainerFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingContainerFormat::IsInitialized() const {
  return true;
}

void TrackingContainerFormat::InternalSwap(TrackingContainerFormat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  track_data_.InternalSwap(&other->track_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackingContainerFormat, term_data_)
      + sizeof(TrackingContainerFormat::term_data_)
      - PROTOBUF_FIELD_OFFSET(TrackingContainerFormat, meta_data_)>(
          reinterpret_cast<char*>(&meta_data_),
          reinterpret_cast<char*>(&other->meta_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingContainerFormat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[8]);
}

// ===================================================================

class TrackingContainerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingContainerProto>()._has_bits_);
  static const ::mediapipe::MetaData& meta_data(const TrackingContainerProto* msg);
  static void set_has_meta_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mediapipe::MetaData&
TrackingContainerProto::_Internal::meta_data(const TrackingContainerProto* msg) {
  return *msg->meta_data_;
}
TrackingContainerProto::TrackingContainerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  track_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingContainerProto)
}
TrackingContainerProto::TrackingContainerProto(const TrackingContainerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      track_data_(from.track_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta_data()) {
    meta_data_ = new ::mediapipe::MetaData(*from.meta_data_);
  } else {
    meta_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingContainerProto)
}

void TrackingContainerProto::SharedCtor() {
meta_data_ = nullptr;
}

TrackingContainerProto::~TrackingContainerProto() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingContainerProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingContainerProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_data_;
}

void TrackingContainerProto::ArenaDtor(void* object) {
  TrackingContainerProto* _this = reinterpret_cast< TrackingContainerProto* >(object);
  (void)_this;
}
void TrackingContainerProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingContainerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingContainerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingContainerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(meta_data_ != nullptr);
    meta_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingContainerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.MetaData meta_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.BinaryTrackingData track_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_track_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingContainerProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingContainerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.MetaData meta_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta_data(this), target, stream);
  }

  // repeated .mediapipe.BinaryTrackingData track_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_track_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_track_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingContainerProto)
  return target;
}

size_t TrackingContainerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingContainerProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.BinaryTrackingData track_data = 2;
  total_size += 1UL * this->_internal_track_data_size();
  for (const auto& msg : this->track_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mediapipe.MetaData meta_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingContainerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingContainerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingContainerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingContainerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingContainerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingContainerProto)
    MergeFrom(*source);
  }
}

void TrackingContainerProto::MergeFrom(const TrackingContainerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingContainerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  track_data_.MergeFrom(from.track_data_);
  if (from._internal_has_meta_data()) {
    _internal_mutable_meta_data()->::mediapipe::MetaData::MergeFrom(from._internal_meta_data());
  }
}

void TrackingContainerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingContainerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingContainerProto::CopyFrom(const TrackingContainerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingContainerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingContainerProto::IsInitialized() const {
  return true;
}

void TrackingContainerProto::InternalSwap(TrackingContainerProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  track_data_.InternalSwap(&other->track_data_);
  swap(meta_data_, other->meta_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingContainerProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[9]);
}

// ===================================================================

class FlowPackagerOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<FlowPackagerOptions>()._has_bits_);
  static void set_has_domain_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_binary_tracking_data_support(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_high_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high_fidelity_16bit_encode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_high_profile_reuse_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FlowPackagerOptions::FlowPackagerOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.FlowPackagerOptions)
}
FlowPackagerOptions::FlowPackagerOptions(const FlowPackagerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_high_profile_, &from.use_high_profile_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_fidelity_16bit_encode_) -
    reinterpret_cast<char*>(&use_high_profile_)) + sizeof(high_fidelity_16bit_encode_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.FlowPackagerOptions)
}

void FlowPackagerOptions::SharedCtor() {
use_high_profile_ = false;
domain_width_ = 256;
domain_height_ = 192;
high_profile_reuse_threshold_ = 0.5f;
binary_tracking_data_support_ = true;
high_fidelity_16bit_encode_ = true;
}

FlowPackagerOptions::~FlowPackagerOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.FlowPackagerOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowPackagerOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlowPackagerOptions::ArenaDtor(void* object) {
  FlowPackagerOptions* _this = reinterpret_cast< FlowPackagerOptions* >(object);
  (void)_this;
}
void FlowPackagerOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowPackagerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowPackagerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.FlowPackagerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    use_high_profile_ = false;
    domain_width_ = 256;
    domain_height_ = 192;
    high_profile_reuse_threshold_ = 0.5f;
    binary_tracking_data_support_ = true;
    high_fidelity_16bit_encode_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowPackagerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 domain_width = 1 [default = 256];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_domain_width(&has_bits);
          domain_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 domain_height = 2 [default = 192];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_domain_height(&has_bits);
          domain_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_high_profile = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_high_profile(&has_bits);
          use_high_profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_fidelity_16bit_encode = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_high_fidelity_16bit_encode(&has_bits);
          high_fidelity_16bit_encode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float high_profile_reuse_threshold = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_high_profile_reuse_threshold(&has_bits);
          high_profile_reuse_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool binary_tracking_data_support = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_binary_tracking_data_support(&has_bits);
          binary_tracking_data_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowPackagerOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.FlowPackagerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 domain_width = 1 [default = 256];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_domain_width(), target);
  }

  // optional int32 domain_height = 2 [default = 192];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_domain_height(), target);
  }

  // optional bool use_high_profile = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_high_profile(), target);
  }

  // optional bool high_fidelity_16bit_encode = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_high_fidelity_16bit_encode(), target);
  }

  // optional float high_profile_reuse_threshold = 5 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_high_profile_reuse_threshold(), target);
  }

  // optional bool binary_tracking_data_support = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_binary_tracking_data_support(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.FlowPackagerOptions)
  return target;
}

size_t FlowPackagerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.FlowPackagerOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool use_high_profile = 3 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 domain_width = 1 [default = 256];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_domain_width());
    }

    // optional int32 domain_height = 2 [default = 192];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_domain_height());
    }

    // optional float high_profile_reuse_threshold = 5 [default = 0.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool binary_tracking_data_support = 6 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool high_fidelity_16bit_encode = 4 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowPackagerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.FlowPackagerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowPackagerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowPackagerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.FlowPackagerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.FlowPackagerOptions)
    MergeFrom(*source);
  }
}

void FlowPackagerOptions::MergeFrom(const FlowPackagerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.FlowPackagerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      use_high_profile_ = from.use_high_profile_;
    }
    if (cached_has_bits & 0x00000002u) {
      domain_width_ = from.domain_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      domain_height_ = from.domain_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_profile_reuse_threshold_ = from.high_profile_reuse_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      binary_tracking_data_support_ = from.binary_tracking_data_support_;
    }
    if (cached_has_bits & 0x00000020u) {
      high_fidelity_16bit_encode_ = from.high_fidelity_16bit_encode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowPackagerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.FlowPackagerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowPackagerOptions::CopyFrom(const FlowPackagerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.FlowPackagerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowPackagerOptions::IsInitialized() const {
  return true;
}

void FlowPackagerOptions::InternalSwap(FlowPackagerOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_high_profile_, other->use_high_profile_);
  swap(domain_width_, other->domain_width_);
  swap(domain_height_, other->domain_height_);
  swap(high_profile_reuse_threshold_, other->high_profile_reuse_threshold_);
  swap(binary_tracking_data_support_, other->binary_tracking_data_support_);
  swap(high_fidelity_16bit_encode_, other->high_fidelity_16bit_encode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowPackagerOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingData_MotionData* Arena::CreateMaybeMessage< ::mediapipe::TrackingData_MotionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingData_MotionData >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingData* Arena::CreateMaybeMessage< ::mediapipe::TrackingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingData >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingDataChunk_Item* Arena::CreateMaybeMessage< ::mediapipe::TrackingDataChunk_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingDataChunk_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingDataChunk* Arena::CreateMaybeMessage< ::mediapipe::TrackingDataChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingDataChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::BinaryTrackingData* Arena::CreateMaybeMessage< ::mediapipe::BinaryTrackingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BinaryTrackingData >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MetaData_TrackOffset* Arena::CreateMaybeMessage< ::mediapipe::MetaData_TrackOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MetaData_TrackOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MetaData* Arena::CreateMaybeMessage< ::mediapipe::MetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingContainer* Arena::CreateMaybeMessage< ::mediapipe::TrackingContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingContainerFormat* Arena::CreateMaybeMessage< ::mediapipe::TrackingContainerFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingContainerFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingContainerProto* Arena::CreateMaybeMessage< ::mediapipe::TrackingContainerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingContainerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::FlowPackagerOptions* Arena::CreateMaybeMessage< ::mediapipe::FlowPackagerOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::FlowPackagerOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
