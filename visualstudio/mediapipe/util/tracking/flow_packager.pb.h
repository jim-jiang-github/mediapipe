// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/flow_packager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/motion_models.pb.h"
#include "mediapipe/util/tracking/region_flow.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
namespace mediapipe {
class BinaryTrackingData;
struct BinaryTrackingDataDefaultTypeInternal;
extern BinaryTrackingDataDefaultTypeInternal _BinaryTrackingData_default_instance_;
class FlowPackagerOptions;
struct FlowPackagerOptionsDefaultTypeInternal;
extern FlowPackagerOptionsDefaultTypeInternal _FlowPackagerOptions_default_instance_;
class MetaData;
struct MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class MetaData_TrackOffset;
struct MetaData_TrackOffsetDefaultTypeInternal;
extern MetaData_TrackOffsetDefaultTypeInternal _MetaData_TrackOffset_default_instance_;
class TrackingContainer;
struct TrackingContainerDefaultTypeInternal;
extern TrackingContainerDefaultTypeInternal _TrackingContainer_default_instance_;
class TrackingContainerFormat;
struct TrackingContainerFormatDefaultTypeInternal;
extern TrackingContainerFormatDefaultTypeInternal _TrackingContainerFormat_default_instance_;
class TrackingContainerProto;
struct TrackingContainerProtoDefaultTypeInternal;
extern TrackingContainerProtoDefaultTypeInternal _TrackingContainerProto_default_instance_;
class TrackingData;
struct TrackingDataDefaultTypeInternal;
extern TrackingDataDefaultTypeInternal _TrackingData_default_instance_;
class TrackingDataChunk;
struct TrackingDataChunkDefaultTypeInternal;
extern TrackingDataChunkDefaultTypeInternal _TrackingDataChunk_default_instance_;
class TrackingDataChunk_Item;
struct TrackingDataChunk_ItemDefaultTypeInternal;
extern TrackingDataChunk_ItemDefaultTypeInternal _TrackingDataChunk_Item_default_instance_;
class TrackingData_MotionData;
struct TrackingData_MotionDataDefaultTypeInternal;
extern TrackingData_MotionDataDefaultTypeInternal _TrackingData_MotionData_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::BinaryTrackingData* Arena::CreateMaybeMessage<::mediapipe::BinaryTrackingData>(Arena*);
template<> ::mediapipe::FlowPackagerOptions* Arena::CreateMaybeMessage<::mediapipe::FlowPackagerOptions>(Arena*);
template<> ::mediapipe::MetaData* Arena::CreateMaybeMessage<::mediapipe::MetaData>(Arena*);
template<> ::mediapipe::MetaData_TrackOffset* Arena::CreateMaybeMessage<::mediapipe::MetaData_TrackOffset>(Arena*);
template<> ::mediapipe::TrackingContainer* Arena::CreateMaybeMessage<::mediapipe::TrackingContainer>(Arena*);
template<> ::mediapipe::TrackingContainerFormat* Arena::CreateMaybeMessage<::mediapipe::TrackingContainerFormat>(Arena*);
template<> ::mediapipe::TrackingContainerProto* Arena::CreateMaybeMessage<::mediapipe::TrackingContainerProto>(Arena*);
template<> ::mediapipe::TrackingData* Arena::CreateMaybeMessage<::mediapipe::TrackingData>(Arena*);
template<> ::mediapipe::TrackingDataChunk* Arena::CreateMaybeMessage<::mediapipe::TrackingDataChunk>(Arena*);
template<> ::mediapipe::TrackingDataChunk_Item* Arena::CreateMaybeMessage<::mediapipe::TrackingDataChunk_Item>(Arena*);
template<> ::mediapipe::TrackingData_MotionData* Arena::CreateMaybeMessage<::mediapipe::TrackingData_MotionData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum TrackingData_FrameFlags : int {
  TrackingData_FrameFlags_FLAG_PROFILE_BASELINE = 0,
  TrackingData_FrameFlags_FLAG_PROFILE_HIGH = 1,
  TrackingData_FrameFlags_FLAG_HIGH_FIDELITY_VECTORS = 2,
  TrackingData_FrameFlags_FLAG_BACKGROUND_UNSTABLE = 4,
  TrackingData_FrameFlags_FLAG_DUPLICATED = 8,
  TrackingData_FrameFlags_FLAG_CHUNK_BOUNDARY = 16
};
bool TrackingData_FrameFlags_IsValid(int value);
constexpr TrackingData_FrameFlags TrackingData_FrameFlags_FrameFlags_MIN = TrackingData_FrameFlags_FLAG_PROFILE_BASELINE;
constexpr TrackingData_FrameFlags TrackingData_FrameFlags_FrameFlags_MAX = TrackingData_FrameFlags_FLAG_CHUNK_BOUNDARY;
constexpr int TrackingData_FrameFlags_FrameFlags_ARRAYSIZE = TrackingData_FrameFlags_FrameFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingData_FrameFlags_descriptor();
template<typename T>
inline const std::string& TrackingData_FrameFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackingData_FrameFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackingData_FrameFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackingData_FrameFlags_descriptor(), enum_t_value);
}
inline bool TrackingData_FrameFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackingData_FrameFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackingData_FrameFlags>(
    TrackingData_FrameFlags_descriptor(), name, value);
}
enum FlowPackagerOptions_HighProfileEncoding : int {
  FlowPackagerOptions_HighProfileEncoding_ADVANCE_FLAG = 128,
  FlowPackagerOptions_HighProfileEncoding_DOUBLE_INDEX_ENCODE = 64,
  FlowPackagerOptions_HighProfileEncoding_INDEX_MASK = 63
};
bool FlowPackagerOptions_HighProfileEncoding_IsValid(int value);
constexpr FlowPackagerOptions_HighProfileEncoding FlowPackagerOptions_HighProfileEncoding_HighProfileEncoding_MIN = FlowPackagerOptions_HighProfileEncoding_INDEX_MASK;
constexpr FlowPackagerOptions_HighProfileEncoding FlowPackagerOptions_HighProfileEncoding_HighProfileEncoding_MAX = FlowPackagerOptions_HighProfileEncoding_ADVANCE_FLAG;
constexpr int FlowPackagerOptions_HighProfileEncoding_HighProfileEncoding_ARRAYSIZE = FlowPackagerOptions_HighProfileEncoding_HighProfileEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowPackagerOptions_HighProfileEncoding_descriptor();
template<typename T>
inline const std::string& FlowPackagerOptions_HighProfileEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowPackagerOptions_HighProfileEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowPackagerOptions_HighProfileEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowPackagerOptions_HighProfileEncoding_descriptor(), enum_t_value);
}
inline bool FlowPackagerOptions_HighProfileEncoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowPackagerOptions_HighProfileEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowPackagerOptions_HighProfileEncoding>(
    FlowPackagerOptions_HighProfileEncoding_descriptor(), name, value);
}
// ===================================================================

class TrackingData_MotionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingData.MotionData) */ {
 public:
  inline TrackingData_MotionData() : TrackingData_MotionData(nullptr) {}
  ~TrackingData_MotionData() override;
  explicit constexpr TrackingData_MotionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingData_MotionData(const TrackingData_MotionData& from);
  TrackingData_MotionData(TrackingData_MotionData&& from) noexcept
    : TrackingData_MotionData() {
    *this = ::std::move(from);
  }

  inline TrackingData_MotionData& operator=(const TrackingData_MotionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingData_MotionData& operator=(TrackingData_MotionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingData_MotionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingData_MotionData* internal_default_instance() {
    return reinterpret_cast<const TrackingData_MotionData*>(
               &_TrackingData_MotionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackingData_MotionData& a, TrackingData_MotionData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingData_MotionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingData_MotionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingData_MotionData* New() const final {
    return CreateMaybeMessage<TrackingData_MotionData>(nullptr);
  }

  TrackingData_MotionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingData_MotionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingData_MotionData& from);
  void MergeFrom(const TrackingData_MotionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingData_MotionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingData.MotionData";
  }
  protected:
  explicit TrackingData_MotionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorDataFieldNumber = 2,
    kTrackIdFieldNumber = 3,
    kRowIndicesFieldNumber = 4,
    kColStartsFieldNumber = 5,
    kFeatureDescriptorsFieldNumber = 6,
    kActivelyDiscardedTrackedIdsFieldNumber = 7,
    kNumElementsFieldNumber = 1,
  };
  // repeated float vector_data = 2 [packed = true];
  int vector_data_size() const;
  private:
  int _internal_vector_data_size() const;
  public:
  void clear_vector_data();
  private:
  float _internal_vector_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vector_data() const;
  void _internal_add_vector_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vector_data();
  public:
  float vector_data(int index) const;
  void set_vector_data(int index, float value);
  void add_vector_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vector_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vector_data();

  // repeated int32 track_id = 3 [packed = true];
  int track_id_size() const;
  private:
  int _internal_track_id_size() const;
  public:
  void clear_track_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_track_id() const;
  void _internal_add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_track_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 track_id(int index) const;
  void set_track_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      track_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_track_id();

  // repeated int32 row_indices = 4 [packed = true];
  int row_indices_size() const;
  private:
  int _internal_row_indices_size() const;
  public:
  void clear_row_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_row_indices() const;
  void _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_row_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 row_indices(int index) const;
  void set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      row_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_row_indices();

  // repeated int32 col_starts = 5 [packed = true];
  int col_starts_size() const;
  private:
  int _internal_col_starts_size() const;
  public:
  void clear_col_starts();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col_starts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_col_starts() const;
  void _internal_add_col_starts(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_col_starts();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 col_starts(int index) const;
  void set_col_starts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_col_starts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      col_starts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_col_starts();

  // repeated .mediapipe.BinaryFeatureDescriptor feature_descriptors = 6;
  int feature_descriptors_size() const;
  private:
  int _internal_feature_descriptors_size() const;
  public:
  void clear_feature_descriptors();
  ::mediapipe::BinaryFeatureDescriptor* mutable_feature_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >*
      mutable_feature_descriptors();
  private:
  const ::mediapipe::BinaryFeatureDescriptor& _internal_feature_descriptors(int index) const;
  ::mediapipe::BinaryFeatureDescriptor* _internal_add_feature_descriptors();
  public:
  const ::mediapipe::BinaryFeatureDescriptor& feature_descriptors(int index) const;
  ::mediapipe::BinaryFeatureDescriptor* add_feature_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >&
      feature_descriptors() const;

  // repeated int32 actively_discarded_tracked_ids = 7;
  int actively_discarded_tracked_ids_size() const;
  private:
  int _internal_actively_discarded_tracked_ids_size() const;
  public:
  void clear_actively_discarded_tracked_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actively_discarded_tracked_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_actively_discarded_tracked_ids() const;
  void _internal_add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_actively_discarded_tracked_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 actively_discarded_tracked_ids(int index) const;
  void set_actively_discarded_tracked_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      actively_discarded_tracked_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_actively_discarded_tracked_ids();

  // optional int32 num_elements = 1;
  bool has_num_elements() const;
  private:
  bool _internal_has_num_elements() const;
  public:
  void clear_num_elements();
  ::PROTOBUF_NAMESPACE_ID::int32 num_elements() const;
  void set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_elements() const;
  void _internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingData.MotionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vector_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > track_id_;
  mutable std::atomic<int> _track_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > row_indices_;
  mutable std::atomic<int> _row_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > col_starts_;
  mutable std::atomic<int> _col_starts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor > feature_descriptors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > actively_discarded_tracked_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_elements_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class TrackingData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingData) */ {
 public:
  inline TrackingData() : TrackingData(nullptr) {}
  ~TrackingData() override;
  explicit constexpr TrackingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingData(const TrackingData& from);
  TrackingData(TrackingData&& from) noexcept
    : TrackingData() {
    *this = ::std::move(from);
  }

  inline TrackingData& operator=(const TrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingData& operator=(TrackingData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingData* internal_default_instance() {
    return reinterpret_cast<const TrackingData*>(
               &_TrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrackingData& a, TrackingData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingData* New() const final {
    return CreateMaybeMessage<TrackingData>(nullptr);
  }

  TrackingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingData& from);
  void MergeFrom(const TrackingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingData";
  }
  protected:
  explicit TrackingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrackingData_MotionData MotionData;

  typedef TrackingData_FrameFlags FrameFlags;
  static constexpr FrameFlags FLAG_PROFILE_BASELINE =
    TrackingData_FrameFlags_FLAG_PROFILE_BASELINE;
  static constexpr FrameFlags FLAG_PROFILE_HIGH =
    TrackingData_FrameFlags_FLAG_PROFILE_HIGH;
  static constexpr FrameFlags FLAG_HIGH_FIDELITY_VECTORS =
    TrackingData_FrameFlags_FLAG_HIGH_FIDELITY_VECTORS;
  static constexpr FrameFlags FLAG_BACKGROUND_UNSTABLE =
    TrackingData_FrameFlags_FLAG_BACKGROUND_UNSTABLE;
  static constexpr FrameFlags FLAG_DUPLICATED =
    TrackingData_FrameFlags_FLAG_DUPLICATED;
  static constexpr FrameFlags FLAG_CHUNK_BOUNDARY =
    TrackingData_FrameFlags_FLAG_CHUNK_BOUNDARY;
  static inline bool FrameFlags_IsValid(int value) {
    return TrackingData_FrameFlags_IsValid(value);
  }
  static constexpr FrameFlags FrameFlags_MIN =
    TrackingData_FrameFlags_FrameFlags_MIN;
  static constexpr FrameFlags FrameFlags_MAX =
    TrackingData_FrameFlags_FrameFlags_MAX;
  static constexpr int FrameFlags_ARRAYSIZE =
    TrackingData_FrameFlags_FrameFlags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameFlags_descriptor() {
    return TrackingData_FrameFlags_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameFlags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameFlags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameFlags_Name.");
    return TrackingData_FrameFlags_Name(enum_t_value);
  }
  static inline bool FrameFlags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameFlags* value) {
    return TrackingData_FrameFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundModelFieldNumber = 4,
    kMotionDataFieldNumber = 5,
    kFrameFlagsFieldNumber = 1,
    kDomainWidthFieldNumber = 2,
    kDomainHeightFieldNumber = 3,
    kGlobalFeatureCountFieldNumber = 7,
    kAverageMotionMagnitudeFieldNumber = 8,
    kFrameAspectFieldNumber = 6,
  };
  // optional .mediapipe.Homography background_model = 4;
  bool has_background_model() const;
  private:
  bool _internal_has_background_model() const;
  public:
  void clear_background_model();
  const ::mediapipe::Homography& background_model() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::Homography* release_background_model();
  ::mediapipe::Homography* mutable_background_model();
  void set_allocated_background_model(::mediapipe::Homography* background_model);
  private:
  const ::mediapipe::Homography& _internal_background_model() const;
  ::mediapipe::Homography* _internal_mutable_background_model();
  public:
  void unsafe_arena_set_allocated_background_model(
      ::mediapipe::Homography* background_model);
  ::mediapipe::Homography* unsafe_arena_release_background_model();

  // optional .mediapipe.TrackingData.MotionData motion_data = 5;
  bool has_motion_data() const;
  private:
  bool _internal_has_motion_data() const;
  public:
  void clear_motion_data();
  const ::mediapipe::TrackingData_MotionData& motion_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingData_MotionData* release_motion_data();
  ::mediapipe::TrackingData_MotionData* mutable_motion_data();
  void set_allocated_motion_data(::mediapipe::TrackingData_MotionData* motion_data);
  private:
  const ::mediapipe::TrackingData_MotionData& _internal_motion_data() const;
  ::mediapipe::TrackingData_MotionData* _internal_mutable_motion_data();
  public:
  void unsafe_arena_set_allocated_motion_data(
      ::mediapipe::TrackingData_MotionData* motion_data);
  ::mediapipe::TrackingData_MotionData* unsafe_arena_release_motion_data();

  // optional int32 frame_flags = 1 [default = 0];
  bool has_frame_flags() const;
  private:
  bool _internal_has_frame_flags() const;
  public:
  void clear_frame_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_flags() const;
  void set_frame_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_flags() const;
  void _internal_set_frame_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 domain_width = 2;
  bool has_domain_width() const;
  private:
  bool _internal_has_domain_width() const;
  public:
  void clear_domain_width();
  ::PROTOBUF_NAMESPACE_ID::int32 domain_width() const;
  void set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_domain_width() const;
  void _internal_set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 domain_height = 3;
  bool has_domain_height() const;
  private:
  bool _internal_has_domain_height() const;
  public:
  void clear_domain_height();
  ::PROTOBUF_NAMESPACE_ID::int32 domain_height() const;
  void set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_domain_height() const;
  void _internal_set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 global_feature_count = 7;
  bool has_global_feature_count() const;
  private:
  bool _internal_has_global_feature_count() const;
  public:
  void clear_global_feature_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_feature_count() const;
  void set_global_feature_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_feature_count() const;
  void _internal_set_global_feature_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float average_motion_magnitude = 8;
  bool has_average_motion_magnitude() const;
  private:
  bool _internal_has_average_motion_magnitude() const;
  public:
  void clear_average_motion_magnitude();
  float average_motion_magnitude() const;
  void set_average_motion_magnitude(float value);
  private:
  float _internal_average_motion_magnitude() const;
  void _internal_set_average_motion_magnitude(float value);
  public:

  // optional float frame_aspect = 6 [default = 1];
  bool has_frame_aspect() const;
  private:
  bool _internal_has_frame_aspect() const;
  public:
  void clear_frame_aspect();
  float frame_aspect() const;
  void set_frame_aspect(float value);
  private:
  float _internal_frame_aspect() const;
  void _internal_set_frame_aspect(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::Homography* background_model_;
  ::mediapipe::TrackingData_MotionData* motion_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 domain_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 domain_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_feature_count_;
  float average_motion_magnitude_;
  float frame_aspect_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class TrackingDataChunk_Item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingDataChunk.Item) */ {
 public:
  inline TrackingDataChunk_Item() : TrackingDataChunk_Item(nullptr) {}
  ~TrackingDataChunk_Item() override;
  explicit constexpr TrackingDataChunk_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingDataChunk_Item(const TrackingDataChunk_Item& from);
  TrackingDataChunk_Item(TrackingDataChunk_Item&& from) noexcept
    : TrackingDataChunk_Item() {
    *this = ::std::move(from);
  }

  inline TrackingDataChunk_Item& operator=(const TrackingDataChunk_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingDataChunk_Item& operator=(TrackingDataChunk_Item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingDataChunk_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingDataChunk_Item* internal_default_instance() {
    return reinterpret_cast<const TrackingDataChunk_Item*>(
               &_TrackingDataChunk_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackingDataChunk_Item& a, TrackingDataChunk_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingDataChunk_Item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingDataChunk_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingDataChunk_Item* New() const final {
    return CreateMaybeMessage<TrackingDataChunk_Item>(nullptr);
  }

  TrackingDataChunk_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingDataChunk_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingDataChunk_Item& from);
  void MergeFrom(const TrackingDataChunk_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingDataChunk_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingDataChunk.Item";
  }
  protected:
  explicit TrackingDataChunk_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingDataFieldNumber = 1,
    kTimestampUsecFieldNumber = 3,
    kPrevTimestampUsecFieldNumber = 4,
    kFrameIdxFieldNumber = 2,
  };
  // optional .mediapipe.TrackingData tracking_data = 1;
  bool has_tracking_data() const;
  private:
  bool _internal_has_tracking_data() const;
  public:
  void clear_tracking_data();
  const ::mediapipe::TrackingData& tracking_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingData* release_tracking_data();
  ::mediapipe::TrackingData* mutable_tracking_data();
  void set_allocated_tracking_data(::mediapipe::TrackingData* tracking_data);
  private:
  const ::mediapipe::TrackingData& _internal_tracking_data() const;
  ::mediapipe::TrackingData* _internal_mutable_tracking_data();
  public:
  void unsafe_arena_set_allocated_tracking_data(
      ::mediapipe::TrackingData* tracking_data);
  ::mediapipe::TrackingData* unsafe_arena_release_tracking_data();

  // optional int64 timestamp_usec = 3;
  bool has_timestamp_usec() const;
  private:
  bool _internal_has_timestamp_usec() const;
  public:
  void clear_timestamp_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec() const;
  void set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_usec() const;
  void _internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 prev_timestamp_usec = 4;
  bool has_prev_timestamp_usec() const;
  private:
  bool _internal_has_prev_timestamp_usec() const;
  public:
  void clear_prev_timestamp_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 prev_timestamp_usec() const;
  void set_prev_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prev_timestamp_usec() const;
  void _internal_set_prev_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 frame_idx = 2;
  bool has_frame_idx() const;
  private:
  bool _internal_has_frame_idx() const;
  public:
  void clear_frame_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_idx() const;
  void set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_idx() const;
  void _internal_set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingDataChunk.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::TrackingData* tracking_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec_;
  ::PROTOBUF_NAMESPACE_ID::int64 prev_timestamp_usec_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_idx_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class TrackingDataChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingDataChunk) */ {
 public:
  inline TrackingDataChunk() : TrackingDataChunk(nullptr) {}
  ~TrackingDataChunk() override;
  explicit constexpr TrackingDataChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingDataChunk(const TrackingDataChunk& from);
  TrackingDataChunk(TrackingDataChunk&& from) noexcept
    : TrackingDataChunk() {
    *this = ::std::move(from);
  }

  inline TrackingDataChunk& operator=(const TrackingDataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingDataChunk& operator=(TrackingDataChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingDataChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingDataChunk* internal_default_instance() {
    return reinterpret_cast<const TrackingDataChunk*>(
               &_TrackingDataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackingDataChunk& a, TrackingDataChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingDataChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingDataChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingDataChunk* New() const final {
    return CreateMaybeMessage<TrackingDataChunk>(nullptr);
  }

  TrackingDataChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingDataChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingDataChunk& from);
  void MergeFrom(const TrackingDataChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingDataChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingDataChunk";
  }
  protected:
  explicit TrackingDataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrackingDataChunk_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kLastChunkFieldNumber = 2,
    kFirstChunkFieldNumber = 3,
  };
  // repeated .mediapipe.TrackingDataChunk.Item item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::mediapipe::TrackingDataChunk_Item* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingDataChunk_Item >*
      mutable_item();
  private:
  const ::mediapipe::TrackingDataChunk_Item& _internal_item(int index) const;
  ::mediapipe::TrackingDataChunk_Item* _internal_add_item();
  public:
  const ::mediapipe::TrackingDataChunk_Item& item(int index) const;
  ::mediapipe::TrackingDataChunk_Item* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingDataChunk_Item >&
      item() const;

  // optional bool last_chunk = 2 [default = false];
  bool has_last_chunk() const;
  private:
  bool _internal_has_last_chunk() const;
  public:
  void clear_last_chunk();
  bool last_chunk() const;
  void set_last_chunk(bool value);
  private:
  bool _internal_last_chunk() const;
  void _internal_set_last_chunk(bool value);
  public:

  // optional bool first_chunk = 3 [default = false];
  bool has_first_chunk() const;
  private:
  bool _internal_has_first_chunk() const;
  public:
  void clear_first_chunk();
  bool first_chunk() const;
  void set_first_chunk(bool value);
  private:
  bool _internal_first_chunk() const;
  void _internal_set_first_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingDataChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingDataChunk_Item > item_;
  bool last_chunk_;
  bool first_chunk_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class BinaryTrackingData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BinaryTrackingData) */ {
 public:
  inline BinaryTrackingData() : BinaryTrackingData(nullptr) {}
  ~BinaryTrackingData() override;
  explicit constexpr BinaryTrackingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryTrackingData(const BinaryTrackingData& from);
  BinaryTrackingData(BinaryTrackingData&& from) noexcept
    : BinaryTrackingData() {
    *this = ::std::move(from);
  }

  inline BinaryTrackingData& operator=(const BinaryTrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryTrackingData& operator=(BinaryTrackingData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryTrackingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryTrackingData* internal_default_instance() {
    return reinterpret_cast<const BinaryTrackingData*>(
               &_BinaryTrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BinaryTrackingData& a, BinaryTrackingData& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryTrackingData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryTrackingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryTrackingData* New() const final {
    return CreateMaybeMessage<BinaryTrackingData>(nullptr);
  }

  BinaryTrackingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryTrackingData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryTrackingData& from);
  void MergeFrom(const BinaryTrackingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryTrackingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BinaryTrackingData";
  }
  protected:
  explicit BinaryTrackingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.BinaryTrackingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class MetaData_TrackOffset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MetaData.TrackOffset) */ {
 public:
  inline MetaData_TrackOffset() : MetaData_TrackOffset(nullptr) {}
  ~MetaData_TrackOffset() override;
  explicit constexpr MetaData_TrackOffset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaData_TrackOffset(const MetaData_TrackOffset& from);
  MetaData_TrackOffset(MetaData_TrackOffset&& from) noexcept
    : MetaData_TrackOffset() {
    *this = ::std::move(from);
  }

  inline MetaData_TrackOffset& operator=(const MetaData_TrackOffset& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData_TrackOffset& operator=(MetaData_TrackOffset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaData_TrackOffset& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaData_TrackOffset* internal_default_instance() {
    return reinterpret_cast<const MetaData_TrackOffset*>(
               &_MetaData_TrackOffset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MetaData_TrackOffset& a, MetaData_TrackOffset& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaData_TrackOffset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaData_TrackOffset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaData_TrackOffset* New() const final {
    return CreateMaybeMessage<MetaData_TrackOffset>(nullptr);
  }

  MetaData_TrackOffset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaData_TrackOffset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaData_TrackOffset& from);
  void MergeFrom(const MetaData_TrackOffset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData_TrackOffset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MetaData.TrackOffset";
  }
  protected:
  explicit MetaData_TrackOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsecFieldNumber = 1,
    kStreamOffsetFieldNumber = 2,
  };
  // optional fixed32 msec = 1;
  bool has_msec() const;
  private:
  bool _internal_has_msec() const;
  public:
  void clear_msec();
  ::PROTOBUF_NAMESPACE_ID::uint32 msec() const;
  void set_msec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msec() const;
  void _internal_set_msec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 stream_offset = 2;
  bool has_stream_offset() const;
  private:
  bool _internal_has_stream_offset() const;
  public:
  void clear_stream_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_offset() const;
  void set_stream_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stream_offset() const;
  void _internal_set_stream_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MetaData.TrackOffset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stream_offset_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class MetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MetaData) */ {
 public:
  inline MetaData() : MetaData(nullptr) {}
  ~MetaData() override;
  explicit constexpr MetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaData(const MetaData& from);
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(nullptr);
  }

  MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MetaData";
  }
  protected:
  explicit MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MetaData_TrackOffset TrackOffset;

  // accessors -------------------------------------------------------

  enum : int {
    kTrackOffsetsFieldNumber = 3,
    kNumFramesFieldNumber = 2,
  };
  // repeated .mediapipe.MetaData.TrackOffset track_offsets = 3;
  int track_offsets_size() const;
  private:
  int _internal_track_offsets_size() const;
  public:
  void clear_track_offsets();
  ::mediapipe::MetaData_TrackOffset* mutable_track_offsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MetaData_TrackOffset >*
      mutable_track_offsets();
  private:
  const ::mediapipe::MetaData_TrackOffset& _internal_track_offsets(int index) const;
  ::mediapipe::MetaData_TrackOffset* _internal_add_track_offsets();
  public:
  const ::mediapipe::MetaData_TrackOffset& track_offsets(int index) const;
  ::mediapipe::MetaData_TrackOffset* add_track_offsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MetaData_TrackOffset >&
      track_offsets() const;

  // optional fixed32 num_frames = 2;
  bool has_num_frames() const;
  private:
  bool _internal_has_num_frames() const;
  public:
  void clear_num_frames();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_frames() const;
  void set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_frames() const;
  void _internal_set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MetaData_TrackOffset > track_offsets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_frames_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class TrackingContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingContainer) */ {
 public:
  inline TrackingContainer() : TrackingContainer(nullptr) {}
  ~TrackingContainer() override;
  explicit constexpr TrackingContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingContainer(const TrackingContainer& from);
  TrackingContainer(TrackingContainer&& from) noexcept
    : TrackingContainer() {
    *this = ::std::move(from);
  }

  inline TrackingContainer& operator=(const TrackingContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingContainer& operator=(TrackingContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingContainer* internal_default_instance() {
    return reinterpret_cast<const TrackingContainer*>(
               &_TrackingContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrackingContainer& a, TrackingContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingContainer* New() const final {
    return CreateMaybeMessage<TrackingContainer>(nullptr);
  }

  TrackingContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingContainer& from);
  void MergeFrom(const TrackingContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingContainer";
  }
  protected:
  explicit TrackingContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDataFieldNumber = 4,
    kSizeFieldNumber = 3,
    kVersionFieldNumber = 2,
  };
  // optional string header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional fixed32 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 version = 2 [default = 1];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class TrackingContainerFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingContainerFormat) */ {
 public:
  inline TrackingContainerFormat() : TrackingContainerFormat(nullptr) {}
  ~TrackingContainerFormat() override;
  explicit constexpr TrackingContainerFormat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingContainerFormat(const TrackingContainerFormat& from);
  TrackingContainerFormat(TrackingContainerFormat&& from) noexcept
    : TrackingContainerFormat() {
    *this = ::std::move(from);
  }

  inline TrackingContainerFormat& operator=(const TrackingContainerFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingContainerFormat& operator=(TrackingContainerFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingContainerFormat& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingContainerFormat* internal_default_instance() {
    return reinterpret_cast<const TrackingContainerFormat*>(
               &_TrackingContainerFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TrackingContainerFormat& a, TrackingContainerFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingContainerFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingContainerFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingContainerFormat* New() const final {
    return CreateMaybeMessage<TrackingContainerFormat>(nullptr);
  }

  TrackingContainerFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingContainerFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingContainerFormat& from);
  void MergeFrom(const TrackingContainerFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingContainerFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingContainerFormat";
  }
  protected:
  explicit TrackingContainerFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackDataFieldNumber = 2,
    kMetaDataFieldNumber = 1,
    kTermDataFieldNumber = 3,
  };
  // repeated .mediapipe.TrackingContainer track_data = 2;
  int track_data_size() const;
  private:
  int _internal_track_data_size() const;
  public:
  void clear_track_data();
  ::mediapipe::TrackingContainer* mutable_track_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingContainer >*
      mutable_track_data();
  private:
  const ::mediapipe::TrackingContainer& _internal_track_data(int index) const;
  ::mediapipe::TrackingContainer* _internal_add_track_data();
  public:
  const ::mediapipe::TrackingContainer& track_data(int index) const;
  ::mediapipe::TrackingContainer* add_track_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingContainer >&
      track_data() const;

  // optional .mediapipe.TrackingContainer meta_data = 1;
  bool has_meta_data() const;
  private:
  bool _internal_has_meta_data() const;
  public:
  void clear_meta_data();
  const ::mediapipe::TrackingContainer& meta_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingContainer* release_meta_data();
  ::mediapipe::TrackingContainer* mutable_meta_data();
  void set_allocated_meta_data(::mediapipe::TrackingContainer* meta_data);
  private:
  const ::mediapipe::TrackingContainer& _internal_meta_data() const;
  ::mediapipe::TrackingContainer* _internal_mutable_meta_data();
  public:
  void unsafe_arena_set_allocated_meta_data(
      ::mediapipe::TrackingContainer* meta_data);
  ::mediapipe::TrackingContainer* unsafe_arena_release_meta_data();

  // optional .mediapipe.TrackingContainer term_data = 3;
  bool has_term_data() const;
  private:
  bool _internal_has_term_data() const;
  public:
  void clear_term_data();
  const ::mediapipe::TrackingContainer& term_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingContainer* release_term_data();
  ::mediapipe::TrackingContainer* mutable_term_data();
  void set_allocated_term_data(::mediapipe::TrackingContainer* term_data);
  private:
  const ::mediapipe::TrackingContainer& _internal_term_data() const;
  ::mediapipe::TrackingContainer* _internal_mutable_term_data();
  public:
  void unsafe_arena_set_allocated_term_data(
      ::mediapipe::TrackingContainer* term_data);
  ::mediapipe::TrackingContainer* unsafe_arena_release_term_data();

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingContainerFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingContainer > track_data_;
  ::mediapipe::TrackingContainer* meta_data_;
  ::mediapipe::TrackingContainer* term_data_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class TrackingContainerProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingContainerProto) */ {
 public:
  inline TrackingContainerProto() : TrackingContainerProto(nullptr) {}
  ~TrackingContainerProto() override;
  explicit constexpr TrackingContainerProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingContainerProto(const TrackingContainerProto& from);
  TrackingContainerProto(TrackingContainerProto&& from) noexcept
    : TrackingContainerProto() {
    *this = ::std::move(from);
  }

  inline TrackingContainerProto& operator=(const TrackingContainerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingContainerProto& operator=(TrackingContainerProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingContainerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingContainerProto* internal_default_instance() {
    return reinterpret_cast<const TrackingContainerProto*>(
               &_TrackingContainerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TrackingContainerProto& a, TrackingContainerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingContainerProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingContainerProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingContainerProto* New() const final {
    return CreateMaybeMessage<TrackingContainerProto>(nullptr);
  }

  TrackingContainerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingContainerProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingContainerProto& from);
  void MergeFrom(const TrackingContainerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingContainerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingContainerProto";
  }
  protected:
  explicit TrackingContainerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackDataFieldNumber = 2,
    kMetaDataFieldNumber = 1,
  };
  // repeated .mediapipe.BinaryTrackingData track_data = 2;
  int track_data_size() const;
  private:
  int _internal_track_data_size() const;
  public:
  void clear_track_data();
  ::mediapipe::BinaryTrackingData* mutable_track_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryTrackingData >*
      mutable_track_data();
  private:
  const ::mediapipe::BinaryTrackingData& _internal_track_data(int index) const;
  ::mediapipe::BinaryTrackingData* _internal_add_track_data();
  public:
  const ::mediapipe::BinaryTrackingData& track_data(int index) const;
  ::mediapipe::BinaryTrackingData* add_track_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryTrackingData >&
      track_data() const;

  // optional .mediapipe.MetaData meta_data = 1;
  bool has_meta_data() const;
  private:
  bool _internal_has_meta_data() const;
  public:
  void clear_meta_data();
  const ::mediapipe::MetaData& meta_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MetaData* release_meta_data();
  ::mediapipe::MetaData* mutable_meta_data();
  void set_allocated_meta_data(::mediapipe::MetaData* meta_data);
  private:
  const ::mediapipe::MetaData& _internal_meta_data() const;
  ::mediapipe::MetaData* _internal_mutable_meta_data();
  public:
  void unsafe_arena_set_allocated_meta_data(
      ::mediapipe::MetaData* meta_data);
  ::mediapipe::MetaData* unsafe_arena_release_meta_data();

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingContainerProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryTrackingData > track_data_;
  ::mediapipe::MetaData* meta_data_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// -------------------------------------------------------------------

class FlowPackagerOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FlowPackagerOptions) */ {
 public:
  inline FlowPackagerOptions() : FlowPackagerOptions(nullptr) {}
  ~FlowPackagerOptions() override;
  explicit constexpr FlowPackagerOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowPackagerOptions(const FlowPackagerOptions& from);
  FlowPackagerOptions(FlowPackagerOptions&& from) noexcept
    : FlowPackagerOptions() {
    *this = ::std::move(from);
  }

  inline FlowPackagerOptions& operator=(const FlowPackagerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowPackagerOptions& operator=(FlowPackagerOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowPackagerOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowPackagerOptions* internal_default_instance() {
    return reinterpret_cast<const FlowPackagerOptions*>(
               &_FlowPackagerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FlowPackagerOptions& a, FlowPackagerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowPackagerOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowPackagerOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowPackagerOptions* New() const final {
    return CreateMaybeMessage<FlowPackagerOptions>(nullptr);
  }

  FlowPackagerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowPackagerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowPackagerOptions& from);
  void MergeFrom(const FlowPackagerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowPackagerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FlowPackagerOptions";
  }
  protected:
  explicit FlowPackagerOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlowPackagerOptions_HighProfileEncoding HighProfileEncoding;
  static constexpr HighProfileEncoding ADVANCE_FLAG =
    FlowPackagerOptions_HighProfileEncoding_ADVANCE_FLAG;
  static constexpr HighProfileEncoding DOUBLE_INDEX_ENCODE =
    FlowPackagerOptions_HighProfileEncoding_DOUBLE_INDEX_ENCODE;
  static constexpr HighProfileEncoding INDEX_MASK =
    FlowPackagerOptions_HighProfileEncoding_INDEX_MASK;
  static inline bool HighProfileEncoding_IsValid(int value) {
    return FlowPackagerOptions_HighProfileEncoding_IsValid(value);
  }
  static constexpr HighProfileEncoding HighProfileEncoding_MIN =
    FlowPackagerOptions_HighProfileEncoding_HighProfileEncoding_MIN;
  static constexpr HighProfileEncoding HighProfileEncoding_MAX =
    FlowPackagerOptions_HighProfileEncoding_HighProfileEncoding_MAX;
  static constexpr int HighProfileEncoding_ARRAYSIZE =
    FlowPackagerOptions_HighProfileEncoding_HighProfileEncoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HighProfileEncoding_descriptor() {
    return FlowPackagerOptions_HighProfileEncoding_descriptor();
  }
  template<typename T>
  static inline const std::string& HighProfileEncoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HighProfileEncoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HighProfileEncoding_Name.");
    return FlowPackagerOptions_HighProfileEncoding_Name(enum_t_value);
  }
  static inline bool HighProfileEncoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HighProfileEncoding* value) {
    return FlowPackagerOptions_HighProfileEncoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUseHighProfileFieldNumber = 3,
    kDomainWidthFieldNumber = 1,
    kDomainHeightFieldNumber = 2,
    kHighProfileReuseThresholdFieldNumber = 5,
    kBinaryTrackingDataSupportFieldNumber = 6,
    kHighFidelity16BitEncodeFieldNumber = 4,
  };
  // optional bool use_high_profile = 3 [default = false];
  bool has_use_high_profile() const;
  private:
  bool _internal_has_use_high_profile() const;
  public:
  void clear_use_high_profile();
  bool use_high_profile() const;
  void set_use_high_profile(bool value);
  private:
  bool _internal_use_high_profile() const;
  void _internal_set_use_high_profile(bool value);
  public:

  // optional int32 domain_width = 1 [default = 256];
  bool has_domain_width() const;
  private:
  bool _internal_has_domain_width() const;
  public:
  void clear_domain_width();
  ::PROTOBUF_NAMESPACE_ID::int32 domain_width() const;
  void set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_domain_width() const;
  void _internal_set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 domain_height = 2 [default = 192];
  bool has_domain_height() const;
  private:
  bool _internal_has_domain_height() const;
  public:
  void clear_domain_height();
  ::PROTOBUF_NAMESPACE_ID::int32 domain_height() const;
  void set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_domain_height() const;
  void _internal_set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float high_profile_reuse_threshold = 5 [default = 0.5];
  bool has_high_profile_reuse_threshold() const;
  private:
  bool _internal_has_high_profile_reuse_threshold() const;
  public:
  void clear_high_profile_reuse_threshold();
  float high_profile_reuse_threshold() const;
  void set_high_profile_reuse_threshold(float value);
  private:
  float _internal_high_profile_reuse_threshold() const;
  void _internal_set_high_profile_reuse_threshold(float value);
  public:

  // optional bool binary_tracking_data_support = 6 [default = true];
  bool has_binary_tracking_data_support() const;
  private:
  bool _internal_has_binary_tracking_data_support() const;
  public:
  void clear_binary_tracking_data_support();
  bool binary_tracking_data_support() const;
  void set_binary_tracking_data_support(bool value);
  private:
  bool _internal_binary_tracking_data_support() const;
  void _internal_set_binary_tracking_data_support(bool value);
  public:

  // optional bool high_fidelity_16bit_encode = 4 [default = true];
  bool has_high_fidelity_16bit_encode() const;
  private:
  bool _internal_has_high_fidelity_16bit_encode() const;
  public:
  void clear_high_fidelity_16bit_encode();
  bool high_fidelity_16bit_encode() const;
  void set_high_fidelity_16bit_encode(bool value);
  private:
  bool _internal_high_fidelity_16bit_encode() const;
  void _internal_set_high_fidelity_16bit_encode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.FlowPackagerOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool use_high_profile_;
  ::PROTOBUF_NAMESPACE_ID::int32 domain_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 domain_height_;
  float high_profile_reuse_threshold_;
  bool binary_tracking_data_support_;
  bool high_fidelity_16bit_encode_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackingData_MotionData

// optional int32 num_elements = 1;
inline bool TrackingData_MotionData::_internal_has_num_elements() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackingData_MotionData::has_num_elements() const {
  return _internal_has_num_elements();
}
inline void TrackingData_MotionData::clear_num_elements() {
  num_elements_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::_internal_num_elements() const {
  return num_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::num_elements() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.MotionData.num_elements)
  return _internal_num_elements();
}
inline void TrackingData_MotionData::_internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_elements_ = value;
}
inline void TrackingData_MotionData::set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_elements(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.MotionData.num_elements)
}

// repeated float vector_data = 2 [packed = true];
inline int TrackingData_MotionData::_internal_vector_data_size() const {
  return vector_data_.size();
}
inline int TrackingData_MotionData::vector_data_size() const {
  return _internal_vector_data_size();
}
inline void TrackingData_MotionData::clear_vector_data() {
  vector_data_.Clear();
}
inline float TrackingData_MotionData::_internal_vector_data(int index) const {
  return vector_data_.Get(index);
}
inline float TrackingData_MotionData::vector_data(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.MotionData.vector_data)
  return _internal_vector_data(index);
}
inline void TrackingData_MotionData::set_vector_data(int index, float value) {
  vector_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.MotionData.vector_data)
}
inline void TrackingData_MotionData::_internal_add_vector_data(float value) {
  vector_data_.Add(value);
}
inline void TrackingData_MotionData::add_vector_data(float value) {
  _internal_add_vector_data(value);
  // @@protoc_insertion_point(field_add:mediapipe.TrackingData.MotionData.vector_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrackingData_MotionData::_internal_vector_data() const {
  return vector_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrackingData_MotionData::vector_data() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingData.MotionData.vector_data)
  return _internal_vector_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrackingData_MotionData::_internal_mutable_vector_data() {
  return &vector_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrackingData_MotionData::mutable_vector_data() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingData.MotionData.vector_data)
  return _internal_mutable_vector_data();
}

// repeated int32 track_id = 3 [packed = true];
inline int TrackingData_MotionData::_internal_track_id_size() const {
  return track_id_.size();
}
inline int TrackingData_MotionData::track_id_size() const {
  return _internal_track_id_size();
}
inline void TrackingData_MotionData::clear_track_id() {
  track_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::_internal_track_id(int index) const {
  return track_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::track_id(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.MotionData.track_id)
  return _internal_track_id(index);
}
inline void TrackingData_MotionData::set_track_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  track_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.MotionData.track_id)
}
inline void TrackingData_MotionData::_internal_add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  track_id_.Add(value);
}
inline void TrackingData_MotionData::add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_track_id(value);
  // @@protoc_insertion_point(field_add:mediapipe.TrackingData.MotionData.track_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::_internal_track_id() const {
  return track_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::track_id() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingData.MotionData.track_id)
  return _internal_track_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::_internal_mutable_track_id() {
  return &track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingData.MotionData.track_id)
  return _internal_mutable_track_id();
}

// repeated int32 row_indices = 4 [packed = true];
inline int TrackingData_MotionData::_internal_row_indices_size() const {
  return row_indices_.size();
}
inline int TrackingData_MotionData::row_indices_size() const {
  return _internal_row_indices_size();
}
inline void TrackingData_MotionData::clear_row_indices() {
  row_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::_internal_row_indices(int index) const {
  return row_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::row_indices(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.MotionData.row_indices)
  return _internal_row_indices(index);
}
inline void TrackingData_MotionData::set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  row_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.MotionData.row_indices)
}
inline void TrackingData_MotionData::_internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  row_indices_.Add(value);
}
inline void TrackingData_MotionData::add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_row_indices(value);
  // @@protoc_insertion_point(field_add:mediapipe.TrackingData.MotionData.row_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::_internal_row_indices() const {
  return row_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::row_indices() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingData.MotionData.row_indices)
  return _internal_row_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::_internal_mutable_row_indices() {
  return &row_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::mutable_row_indices() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingData.MotionData.row_indices)
  return _internal_mutable_row_indices();
}

// repeated int32 col_starts = 5 [packed = true];
inline int TrackingData_MotionData::_internal_col_starts_size() const {
  return col_starts_.size();
}
inline int TrackingData_MotionData::col_starts_size() const {
  return _internal_col_starts_size();
}
inline void TrackingData_MotionData::clear_col_starts() {
  col_starts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::_internal_col_starts(int index) const {
  return col_starts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::col_starts(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.MotionData.col_starts)
  return _internal_col_starts(index);
}
inline void TrackingData_MotionData::set_col_starts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  col_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.MotionData.col_starts)
}
inline void TrackingData_MotionData::_internal_add_col_starts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  col_starts_.Add(value);
}
inline void TrackingData_MotionData::add_col_starts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_col_starts(value);
  // @@protoc_insertion_point(field_add:mediapipe.TrackingData.MotionData.col_starts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::_internal_col_starts() const {
  return col_starts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::col_starts() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingData.MotionData.col_starts)
  return _internal_col_starts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::_internal_mutable_col_starts() {
  return &col_starts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::mutable_col_starts() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingData.MotionData.col_starts)
  return _internal_mutable_col_starts();
}

// repeated .mediapipe.BinaryFeatureDescriptor feature_descriptors = 6;
inline int TrackingData_MotionData::_internal_feature_descriptors_size() const {
  return feature_descriptors_.size();
}
inline int TrackingData_MotionData::feature_descriptors_size() const {
  return _internal_feature_descriptors_size();
}
inline ::mediapipe::BinaryFeatureDescriptor* TrackingData_MotionData::mutable_feature_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingData.MotionData.feature_descriptors)
  return feature_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >*
TrackingData_MotionData::mutable_feature_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingData.MotionData.feature_descriptors)
  return &feature_descriptors_;
}
inline const ::mediapipe::BinaryFeatureDescriptor& TrackingData_MotionData::_internal_feature_descriptors(int index) const {
  return feature_descriptors_.Get(index);
}
inline const ::mediapipe::BinaryFeatureDescriptor& TrackingData_MotionData::feature_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.MotionData.feature_descriptors)
  return _internal_feature_descriptors(index);
}
inline ::mediapipe::BinaryFeatureDescriptor* TrackingData_MotionData::_internal_add_feature_descriptors() {
  return feature_descriptors_.Add();
}
inline ::mediapipe::BinaryFeatureDescriptor* TrackingData_MotionData::add_feature_descriptors() {
  // @@protoc_insertion_point(field_add:mediapipe.TrackingData.MotionData.feature_descriptors)
  return _internal_add_feature_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryFeatureDescriptor >&
TrackingData_MotionData::feature_descriptors() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingData.MotionData.feature_descriptors)
  return feature_descriptors_;
}

// repeated int32 actively_discarded_tracked_ids = 7;
inline int TrackingData_MotionData::_internal_actively_discarded_tracked_ids_size() const {
  return actively_discarded_tracked_ids_.size();
}
inline int TrackingData_MotionData::actively_discarded_tracked_ids_size() const {
  return _internal_actively_discarded_tracked_ids_size();
}
inline void TrackingData_MotionData::clear_actively_discarded_tracked_ids() {
  actively_discarded_tracked_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::_internal_actively_discarded_tracked_ids(int index) const {
  return actively_discarded_tracked_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData_MotionData::actively_discarded_tracked_ids(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.MotionData.actively_discarded_tracked_ids)
  return _internal_actively_discarded_tracked_ids(index);
}
inline void TrackingData_MotionData::set_actively_discarded_tracked_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  actively_discarded_tracked_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.MotionData.actively_discarded_tracked_ids)
}
inline void TrackingData_MotionData::_internal_add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  actively_discarded_tracked_ids_.Add(value);
}
inline void TrackingData_MotionData::add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_actively_discarded_tracked_ids(value);
  // @@protoc_insertion_point(field_add:mediapipe.TrackingData.MotionData.actively_discarded_tracked_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::_internal_actively_discarded_tracked_ids() const {
  return actively_discarded_tracked_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrackingData_MotionData::actively_discarded_tracked_ids() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingData.MotionData.actively_discarded_tracked_ids)
  return _internal_actively_discarded_tracked_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::_internal_mutable_actively_discarded_tracked_ids() {
  return &actively_discarded_tracked_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrackingData_MotionData::mutable_actively_discarded_tracked_ids() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingData.MotionData.actively_discarded_tracked_ids)
  return _internal_mutable_actively_discarded_tracked_ids();
}

// -------------------------------------------------------------------

// TrackingData

// optional int32 frame_flags = 1 [default = 0];
inline bool TrackingData::_internal_has_frame_flags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackingData::has_frame_flags() const {
  return _internal_has_frame_flags();
}
inline void TrackingData::clear_frame_flags() {
  frame_flags_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData::_internal_frame_flags() const {
  return frame_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData::frame_flags() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.frame_flags)
  return _internal_frame_flags();
}
inline void TrackingData::_internal_set_frame_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  frame_flags_ = value;
}
inline void TrackingData::set_frame_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_flags(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.frame_flags)
}

// optional int32 domain_width = 2;
inline bool TrackingData::_internal_has_domain_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackingData::has_domain_width() const {
  return _internal_has_domain_width();
}
inline void TrackingData::clear_domain_width() {
  domain_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData::_internal_domain_width() const {
  return domain_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData::domain_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.domain_width)
  return _internal_domain_width();
}
inline void TrackingData::_internal_set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  domain_width_ = value;
}
inline void TrackingData::set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_domain_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.domain_width)
}

// optional int32 domain_height = 3;
inline bool TrackingData::_internal_has_domain_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackingData::has_domain_height() const {
  return _internal_has_domain_height();
}
inline void TrackingData::clear_domain_height() {
  domain_height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData::_internal_domain_height() const {
  return domain_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingData::domain_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.domain_height)
  return _internal_domain_height();
}
inline void TrackingData::_internal_set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  domain_height_ = value;
}
inline void TrackingData::set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_domain_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.domain_height)
}

// optional float frame_aspect = 6 [default = 1];
inline bool TrackingData::_internal_has_frame_aspect() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackingData::has_frame_aspect() const {
  return _internal_has_frame_aspect();
}
inline void TrackingData::clear_frame_aspect() {
  frame_aspect_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TrackingData::_internal_frame_aspect() const {
  return frame_aspect_;
}
inline float TrackingData::frame_aspect() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.frame_aspect)
  return _internal_frame_aspect();
}
inline void TrackingData::_internal_set_frame_aspect(float value) {
  _has_bits_[0] |= 0x00000080u;
  frame_aspect_ = value;
}
inline void TrackingData::set_frame_aspect(float value) {
  _internal_set_frame_aspect(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.frame_aspect)
}

// optional .mediapipe.Homography background_model = 4;
inline bool TrackingData::_internal_has_background_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || background_model_ != nullptr);
  return value;
}
inline bool TrackingData::has_background_model() const {
  return _internal_has_background_model();
}
inline const ::mediapipe::Homography& TrackingData::_internal_background_model() const {
  const ::mediapipe::Homography* p = background_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::Homography&>(
      ::mediapipe::_Homography_default_instance_);
}
inline const ::mediapipe::Homography& TrackingData::background_model() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.background_model)
  return _internal_background_model();
}
inline void TrackingData::unsafe_arena_set_allocated_background_model(
    ::mediapipe::Homography* background_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_model_);
  }
  background_model_ = background_model;
  if (background_model) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingData.background_model)
}
inline ::mediapipe::Homography* TrackingData::release_background_model() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::Homography* temp = background_model_;
  background_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::Homography* TrackingData::unsafe_arena_release_background_model() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingData.background_model)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::Homography* temp = background_model_;
  background_model_ = nullptr;
  return temp;
}
inline ::mediapipe::Homography* TrackingData::_internal_mutable_background_model() {
  _has_bits_[0] |= 0x00000001u;
  if (background_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::Homography>(GetArena());
    background_model_ = p;
  }
  return background_model_;
}
inline ::mediapipe::Homography* TrackingData::mutable_background_model() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingData.background_model)
  return _internal_mutable_background_model();
}
inline void TrackingData::set_allocated_background_model(::mediapipe::Homography* background_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_model_);
  }
  if (background_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_model)->GetArena();
    if (message_arena != submessage_arena) {
      background_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  background_model_ = background_model;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingData.background_model)
}

// optional .mediapipe.TrackingData.MotionData motion_data = 5;
inline bool TrackingData::_internal_has_motion_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || motion_data_ != nullptr);
  return value;
}
inline bool TrackingData::has_motion_data() const {
  return _internal_has_motion_data();
}
inline void TrackingData::clear_motion_data() {
  if (motion_data_ != nullptr) motion_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::TrackingData_MotionData& TrackingData::_internal_motion_data() const {
  const ::mediapipe::TrackingData_MotionData* p = motion_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingData_MotionData&>(
      ::mediapipe::_TrackingData_MotionData_default_instance_);
}
inline const ::mediapipe::TrackingData_MotionData& TrackingData::motion_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.motion_data)
  return _internal_motion_data();
}
inline void TrackingData::unsafe_arena_set_allocated_motion_data(
    ::mediapipe::TrackingData_MotionData* motion_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_data_);
  }
  motion_data_ = motion_data;
  if (motion_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingData.motion_data)
}
inline ::mediapipe::TrackingData_MotionData* TrackingData::release_motion_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackingData_MotionData* temp = motion_data_;
  motion_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingData_MotionData* TrackingData::unsafe_arena_release_motion_data() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingData.motion_data)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackingData_MotionData* temp = motion_data_;
  motion_data_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingData_MotionData* TrackingData::_internal_mutable_motion_data() {
  _has_bits_[0] |= 0x00000002u;
  if (motion_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingData_MotionData>(GetArena());
    motion_data_ = p;
  }
  return motion_data_;
}
inline ::mediapipe::TrackingData_MotionData* TrackingData::mutable_motion_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingData.motion_data)
  return _internal_mutable_motion_data();
}
inline void TrackingData::set_allocated_motion_data(::mediapipe::TrackingData_MotionData* motion_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete motion_data_;
  }
  if (motion_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(motion_data);
    if (message_arena != submessage_arena) {
      motion_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  motion_data_ = motion_data;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingData.motion_data)
}

// optional uint32 global_feature_count = 7;
inline bool TrackingData::_internal_has_global_feature_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackingData::has_global_feature_count() const {
  return _internal_has_global_feature_count();
}
inline void TrackingData::clear_global_feature_count() {
  global_feature_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackingData::_internal_global_feature_count() const {
  return global_feature_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackingData::global_feature_count() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.global_feature_count)
  return _internal_global_feature_count();
}
inline void TrackingData::_internal_set_global_feature_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  global_feature_count_ = value;
}
inline void TrackingData::set_global_feature_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_feature_count(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.global_feature_count)
}

// optional float average_motion_magnitude = 8;
inline bool TrackingData::_internal_has_average_motion_magnitude() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackingData::has_average_motion_magnitude() const {
  return _internal_has_average_motion_magnitude();
}
inline void TrackingData::clear_average_motion_magnitude() {
  average_motion_magnitude_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TrackingData::_internal_average_motion_magnitude() const {
  return average_motion_magnitude_;
}
inline float TrackingData::average_motion_magnitude() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingData.average_motion_magnitude)
  return _internal_average_motion_magnitude();
}
inline void TrackingData::_internal_set_average_motion_magnitude(float value) {
  _has_bits_[0] |= 0x00000040u;
  average_motion_magnitude_ = value;
}
inline void TrackingData::set_average_motion_magnitude(float value) {
  _internal_set_average_motion_magnitude(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingData.average_motion_magnitude)
}

// -------------------------------------------------------------------

// TrackingDataChunk_Item

// optional .mediapipe.TrackingData tracking_data = 1;
inline bool TrackingDataChunk_Item::_internal_has_tracking_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tracking_data_ != nullptr);
  return value;
}
inline bool TrackingDataChunk_Item::has_tracking_data() const {
  return _internal_has_tracking_data();
}
inline void TrackingDataChunk_Item::clear_tracking_data() {
  if (tracking_data_ != nullptr) tracking_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::TrackingData& TrackingDataChunk_Item::_internal_tracking_data() const {
  const ::mediapipe::TrackingData* p = tracking_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingData&>(
      ::mediapipe::_TrackingData_default_instance_);
}
inline const ::mediapipe::TrackingData& TrackingDataChunk_Item::tracking_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingDataChunk.Item.tracking_data)
  return _internal_tracking_data();
}
inline void TrackingDataChunk_Item::unsafe_arena_set_allocated_tracking_data(
    ::mediapipe::TrackingData* tracking_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracking_data_);
  }
  tracking_data_ = tracking_data;
  if (tracking_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingDataChunk.Item.tracking_data)
}
inline ::mediapipe::TrackingData* TrackingDataChunk_Item::release_tracking_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingData* temp = tracking_data_;
  tracking_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingData* TrackingDataChunk_Item::unsafe_arena_release_tracking_data() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingDataChunk.Item.tracking_data)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingData* temp = tracking_data_;
  tracking_data_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingData* TrackingDataChunk_Item::_internal_mutable_tracking_data() {
  _has_bits_[0] |= 0x00000001u;
  if (tracking_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingData>(GetArena());
    tracking_data_ = p;
  }
  return tracking_data_;
}
inline ::mediapipe::TrackingData* TrackingDataChunk_Item::mutable_tracking_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingDataChunk.Item.tracking_data)
  return _internal_mutable_tracking_data();
}
inline void TrackingDataChunk_Item::set_allocated_tracking_data(::mediapipe::TrackingData* tracking_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracking_data_;
  }
  if (tracking_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracking_data);
    if (message_arena != submessage_arena) {
      tracking_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracking_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tracking_data_ = tracking_data;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingDataChunk.Item.tracking_data)
}

// optional int32 frame_idx = 2;
inline bool TrackingDataChunk_Item::_internal_has_frame_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackingDataChunk_Item::has_frame_idx() const {
  return _internal_has_frame_idx();
}
inline void TrackingDataChunk_Item::clear_frame_idx() {
  frame_idx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingDataChunk_Item::_internal_frame_idx() const {
  return frame_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingDataChunk_Item::frame_idx() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingDataChunk.Item.frame_idx)
  return _internal_frame_idx();
}
inline void TrackingDataChunk_Item::_internal_set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  frame_idx_ = value;
}
inline void TrackingDataChunk_Item::set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_idx(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingDataChunk.Item.frame_idx)
}

// optional int64 timestamp_usec = 3;
inline bool TrackingDataChunk_Item::_internal_has_timestamp_usec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackingDataChunk_Item::has_timestamp_usec() const {
  return _internal_has_timestamp_usec();
}
inline void TrackingDataChunk_Item::clear_timestamp_usec() {
  timestamp_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackingDataChunk_Item::_internal_timestamp_usec() const {
  return timestamp_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackingDataChunk_Item::timestamp_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingDataChunk.Item.timestamp_usec)
  return _internal_timestamp_usec();
}
inline void TrackingDataChunk_Item::_internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_usec_ = value;
}
inline void TrackingDataChunk_Item::set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingDataChunk.Item.timestamp_usec)
}

// optional int64 prev_timestamp_usec = 4;
inline bool TrackingDataChunk_Item::_internal_has_prev_timestamp_usec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackingDataChunk_Item::has_prev_timestamp_usec() const {
  return _internal_has_prev_timestamp_usec();
}
inline void TrackingDataChunk_Item::clear_prev_timestamp_usec() {
  prev_timestamp_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackingDataChunk_Item::_internal_prev_timestamp_usec() const {
  return prev_timestamp_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackingDataChunk_Item::prev_timestamp_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingDataChunk.Item.prev_timestamp_usec)
  return _internal_prev_timestamp_usec();
}
inline void TrackingDataChunk_Item::_internal_set_prev_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  prev_timestamp_usec_ = value;
}
inline void TrackingDataChunk_Item::set_prev_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prev_timestamp_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingDataChunk.Item.prev_timestamp_usec)
}

// -------------------------------------------------------------------

// TrackingDataChunk

// repeated .mediapipe.TrackingDataChunk.Item item = 1;
inline int TrackingDataChunk::_internal_item_size() const {
  return item_.size();
}
inline int TrackingDataChunk::item_size() const {
  return _internal_item_size();
}
inline void TrackingDataChunk::clear_item() {
  item_.Clear();
}
inline ::mediapipe::TrackingDataChunk_Item* TrackingDataChunk::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingDataChunk.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingDataChunk_Item >*
TrackingDataChunk::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingDataChunk.item)
  return &item_;
}
inline const ::mediapipe::TrackingDataChunk_Item& TrackingDataChunk::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::mediapipe::TrackingDataChunk_Item& TrackingDataChunk::item(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingDataChunk.item)
  return _internal_item(index);
}
inline ::mediapipe::TrackingDataChunk_Item* TrackingDataChunk::_internal_add_item() {
  return item_.Add();
}
inline ::mediapipe::TrackingDataChunk_Item* TrackingDataChunk::add_item() {
  // @@protoc_insertion_point(field_add:mediapipe.TrackingDataChunk.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingDataChunk_Item >&
TrackingDataChunk::item() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingDataChunk.item)
  return item_;
}

// optional bool last_chunk = 2 [default = false];
inline bool TrackingDataChunk::_internal_has_last_chunk() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackingDataChunk::has_last_chunk() const {
  return _internal_has_last_chunk();
}
inline void TrackingDataChunk::clear_last_chunk() {
  last_chunk_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TrackingDataChunk::_internal_last_chunk() const {
  return last_chunk_;
}
inline bool TrackingDataChunk::last_chunk() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingDataChunk.last_chunk)
  return _internal_last_chunk();
}
inline void TrackingDataChunk::_internal_set_last_chunk(bool value) {
  _has_bits_[0] |= 0x00000001u;
  last_chunk_ = value;
}
inline void TrackingDataChunk::set_last_chunk(bool value) {
  _internal_set_last_chunk(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingDataChunk.last_chunk)
}

// optional bool first_chunk = 3 [default = false];
inline bool TrackingDataChunk::_internal_has_first_chunk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackingDataChunk::has_first_chunk() const {
  return _internal_has_first_chunk();
}
inline void TrackingDataChunk::clear_first_chunk() {
  first_chunk_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TrackingDataChunk::_internal_first_chunk() const {
  return first_chunk_;
}
inline bool TrackingDataChunk::first_chunk() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingDataChunk.first_chunk)
  return _internal_first_chunk();
}
inline void TrackingDataChunk::_internal_set_first_chunk(bool value) {
  _has_bits_[0] |= 0x00000002u;
  first_chunk_ = value;
}
inline void TrackingDataChunk::set_first_chunk(bool value) {
  _internal_set_first_chunk(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingDataChunk.first_chunk)
}

// -------------------------------------------------------------------

// BinaryTrackingData

// optional bytes data = 1;
inline bool BinaryTrackingData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinaryTrackingData::has_data() const {
  return _internal_has_data();
}
inline void BinaryTrackingData::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinaryTrackingData::data() const {
  // @@protoc_insertion_point(field_get:mediapipe.BinaryTrackingData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BinaryTrackingData::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.BinaryTrackingData.data)
}
inline std::string* BinaryTrackingData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.BinaryTrackingData.data)
  return _internal_mutable_data();
}
inline const std::string& BinaryTrackingData::_internal_data() const {
  return data_.Get();
}
inline void BinaryTrackingData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BinaryTrackingData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BinaryTrackingData::release_data() {
  // @@protoc_insertion_point(field_release:mediapipe.BinaryTrackingData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BinaryTrackingData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.BinaryTrackingData.data)
}

// -------------------------------------------------------------------

// MetaData_TrackOffset

// optional fixed32 msec = 1;
inline bool MetaData_TrackOffset::_internal_has_msec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetaData_TrackOffset::has_msec() const {
  return _internal_has_msec();
}
inline void MetaData_TrackOffset::clear_msec() {
  msec_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetaData_TrackOffset::_internal_msec() const {
  return msec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetaData_TrackOffset::msec() const {
  // @@protoc_insertion_point(field_get:mediapipe.MetaData.TrackOffset.msec)
  return _internal_msec();
}
inline void MetaData_TrackOffset::_internal_set_msec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  msec_ = value;
}
inline void MetaData_TrackOffset::set_msec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msec(value);
  // @@protoc_insertion_point(field_set:mediapipe.MetaData.TrackOffset.msec)
}

// optional fixed32 stream_offset = 2;
inline bool MetaData_TrackOffset::_internal_has_stream_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MetaData_TrackOffset::has_stream_offset() const {
  return _internal_has_stream_offset();
}
inline void MetaData_TrackOffset::clear_stream_offset() {
  stream_offset_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetaData_TrackOffset::_internal_stream_offset() const {
  return stream_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetaData_TrackOffset::stream_offset() const {
  // @@protoc_insertion_point(field_get:mediapipe.MetaData.TrackOffset.stream_offset)
  return _internal_stream_offset();
}
inline void MetaData_TrackOffset::_internal_set_stream_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stream_offset_ = value;
}
inline void MetaData_TrackOffset::set_stream_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stream_offset(value);
  // @@protoc_insertion_point(field_set:mediapipe.MetaData.TrackOffset.stream_offset)
}

// -------------------------------------------------------------------

// MetaData

// optional fixed32 num_frames = 2;
inline bool MetaData::_internal_has_num_frames() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetaData::has_num_frames() const {
  return _internal_has_num_frames();
}
inline void MetaData::clear_num_frames() {
  num_frames_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetaData::_internal_num_frames() const {
  return num_frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetaData::num_frames() const {
  // @@protoc_insertion_point(field_get:mediapipe.MetaData.num_frames)
  return _internal_num_frames();
}
inline void MetaData::_internal_set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_frames_ = value;
}
inline void MetaData::set_num_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_frames(value);
  // @@protoc_insertion_point(field_set:mediapipe.MetaData.num_frames)
}

// repeated .mediapipe.MetaData.TrackOffset track_offsets = 3;
inline int MetaData::_internal_track_offsets_size() const {
  return track_offsets_.size();
}
inline int MetaData::track_offsets_size() const {
  return _internal_track_offsets_size();
}
inline void MetaData::clear_track_offsets() {
  track_offsets_.Clear();
}
inline ::mediapipe::MetaData_TrackOffset* MetaData::mutable_track_offsets(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.MetaData.track_offsets)
  return track_offsets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MetaData_TrackOffset >*
MetaData::mutable_track_offsets() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MetaData.track_offsets)
  return &track_offsets_;
}
inline const ::mediapipe::MetaData_TrackOffset& MetaData::_internal_track_offsets(int index) const {
  return track_offsets_.Get(index);
}
inline const ::mediapipe::MetaData_TrackOffset& MetaData::track_offsets(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MetaData.track_offsets)
  return _internal_track_offsets(index);
}
inline ::mediapipe::MetaData_TrackOffset* MetaData::_internal_add_track_offsets() {
  return track_offsets_.Add();
}
inline ::mediapipe::MetaData_TrackOffset* MetaData::add_track_offsets() {
  // @@protoc_insertion_point(field_add:mediapipe.MetaData.track_offsets)
  return _internal_add_track_offsets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::MetaData_TrackOffset >&
MetaData::track_offsets() const {
  // @@protoc_insertion_point(field_list:mediapipe.MetaData.track_offsets)
  return track_offsets_;
}

// -------------------------------------------------------------------

// TrackingContainer

// optional string header = 1;
inline bool TrackingContainer::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackingContainer::has_header() const {
  return _internal_has_header();
}
inline void TrackingContainer::clear_header() {
  header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackingContainer::header() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainer.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TrackingContainer::set_header(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.TrackingContainer.header)
}
inline std::string* TrackingContainer::mutable_header() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingContainer.header)
  return _internal_mutable_header();
}
inline const std::string& TrackingContainer::_internal_header() const {
  return header_.Get();
}
inline void TrackingContainer::_internal_set_header(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TrackingContainer::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrackingContainer::release_header() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingContainer.header)
  if (!_internal_has_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return header_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackingContainer::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingContainer.header)
}

// optional fixed32 version = 2 [default = 1];
inline bool TrackingContainer::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackingContainer::has_version() const {
  return _internal_has_version();
}
inline void TrackingContainer::clear_version() {
  version_ = 1u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackingContainer::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackingContainer::version() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainer.version)
  return _internal_version();
}
inline void TrackingContainer::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
}
inline void TrackingContainer::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingContainer.version)
}

// optional fixed32 size = 3;
inline bool TrackingContainer::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackingContainer::has_size() const {
  return _internal_has_size();
}
inline void TrackingContainer::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackingContainer::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackingContainer::size() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainer.size)
  return _internal_size();
}
inline void TrackingContainer::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
}
inline void TrackingContainer::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingContainer.size)
}

// optional bytes data = 4;
inline bool TrackingContainer::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackingContainer::has_data() const {
  return _internal_has_data();
}
inline void TrackingContainer::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrackingContainer::data() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainer.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TrackingContainer::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.TrackingContainer.data)
}
inline std::string* TrackingContainer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingContainer.data)
  return _internal_mutable_data();
}
inline const std::string& TrackingContainer::_internal_data() const {
  return data_.Get();
}
inline void TrackingContainer::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TrackingContainer::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrackingContainer::release_data() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingContainer.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackingContainer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingContainer.data)
}

// -------------------------------------------------------------------

// TrackingContainerFormat

// optional .mediapipe.TrackingContainer meta_data = 1;
inline bool TrackingContainerFormat::_internal_has_meta_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || meta_data_ != nullptr);
  return value;
}
inline bool TrackingContainerFormat::has_meta_data() const {
  return _internal_has_meta_data();
}
inline void TrackingContainerFormat::clear_meta_data() {
  if (meta_data_ != nullptr) meta_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::TrackingContainer& TrackingContainerFormat::_internal_meta_data() const {
  const ::mediapipe::TrackingContainer* p = meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingContainer&>(
      ::mediapipe::_TrackingContainer_default_instance_);
}
inline const ::mediapipe::TrackingContainer& TrackingContainerFormat::meta_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainerFormat.meta_data)
  return _internal_meta_data();
}
inline void TrackingContainerFormat::unsafe_arena_set_allocated_meta_data(
    ::mediapipe::TrackingContainer* meta_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_data_);
  }
  meta_data_ = meta_data;
  if (meta_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingContainerFormat.meta_data)
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::release_meta_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingContainer* temp = meta_data_;
  meta_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::unsafe_arena_release_meta_data() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingContainerFormat.meta_data)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingContainer* temp = meta_data_;
  meta_data_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::_internal_mutable_meta_data() {
  _has_bits_[0] |= 0x00000001u;
  if (meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingContainer>(GetArena());
    meta_data_ = p;
  }
  return meta_data_;
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingContainerFormat.meta_data)
  return _internal_mutable_meta_data();
}
inline void TrackingContainerFormat::set_allocated_meta_data(::mediapipe::TrackingContainer* meta_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_data_;
  }
  if (meta_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta_data);
    if (message_arena != submessage_arena) {
      meta_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  meta_data_ = meta_data;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingContainerFormat.meta_data)
}

// repeated .mediapipe.TrackingContainer track_data = 2;
inline int TrackingContainerFormat::_internal_track_data_size() const {
  return track_data_.size();
}
inline int TrackingContainerFormat::track_data_size() const {
  return _internal_track_data_size();
}
inline void TrackingContainerFormat::clear_track_data() {
  track_data_.Clear();
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::mutable_track_data(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingContainerFormat.track_data)
  return track_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingContainer >*
TrackingContainerFormat::mutable_track_data() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingContainerFormat.track_data)
  return &track_data_;
}
inline const ::mediapipe::TrackingContainer& TrackingContainerFormat::_internal_track_data(int index) const {
  return track_data_.Get(index);
}
inline const ::mediapipe::TrackingContainer& TrackingContainerFormat::track_data(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainerFormat.track_data)
  return _internal_track_data(index);
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::_internal_add_track_data() {
  return track_data_.Add();
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::add_track_data() {
  // @@protoc_insertion_point(field_add:mediapipe.TrackingContainerFormat.track_data)
  return _internal_add_track_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::TrackingContainer >&
TrackingContainerFormat::track_data() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingContainerFormat.track_data)
  return track_data_;
}

// optional .mediapipe.TrackingContainer term_data = 3;
inline bool TrackingContainerFormat::_internal_has_term_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || term_data_ != nullptr);
  return value;
}
inline bool TrackingContainerFormat::has_term_data() const {
  return _internal_has_term_data();
}
inline void TrackingContainerFormat::clear_term_data() {
  if (term_data_ != nullptr) term_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::TrackingContainer& TrackingContainerFormat::_internal_term_data() const {
  const ::mediapipe::TrackingContainer* p = term_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingContainer&>(
      ::mediapipe::_TrackingContainer_default_instance_);
}
inline const ::mediapipe::TrackingContainer& TrackingContainerFormat::term_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainerFormat.term_data)
  return _internal_term_data();
}
inline void TrackingContainerFormat::unsafe_arena_set_allocated_term_data(
    ::mediapipe::TrackingContainer* term_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(term_data_);
  }
  term_data_ = term_data;
  if (term_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingContainerFormat.term_data)
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::release_term_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackingContainer* temp = term_data_;
  term_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::unsafe_arena_release_term_data() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingContainerFormat.term_data)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackingContainer* temp = term_data_;
  term_data_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::_internal_mutable_term_data() {
  _has_bits_[0] |= 0x00000002u;
  if (term_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingContainer>(GetArena());
    term_data_ = p;
  }
  return term_data_;
}
inline ::mediapipe::TrackingContainer* TrackingContainerFormat::mutable_term_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingContainerFormat.term_data)
  return _internal_mutable_term_data();
}
inline void TrackingContainerFormat::set_allocated_term_data(::mediapipe::TrackingContainer* term_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete term_data_;
  }
  if (term_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(term_data);
    if (message_arena != submessage_arena) {
      term_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, term_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  term_data_ = term_data;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingContainerFormat.term_data)
}

// -------------------------------------------------------------------

// TrackingContainerProto

// optional .mediapipe.MetaData meta_data = 1;
inline bool TrackingContainerProto::_internal_has_meta_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || meta_data_ != nullptr);
  return value;
}
inline bool TrackingContainerProto::has_meta_data() const {
  return _internal_has_meta_data();
}
inline void TrackingContainerProto::clear_meta_data() {
  if (meta_data_ != nullptr) meta_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::MetaData& TrackingContainerProto::_internal_meta_data() const {
  const ::mediapipe::MetaData* p = meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MetaData&>(
      ::mediapipe::_MetaData_default_instance_);
}
inline const ::mediapipe::MetaData& TrackingContainerProto::meta_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainerProto.meta_data)
  return _internal_meta_data();
}
inline void TrackingContainerProto::unsafe_arena_set_allocated_meta_data(
    ::mediapipe::MetaData* meta_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_data_);
  }
  meta_data_ = meta_data;
  if (meta_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingContainerProto.meta_data)
}
inline ::mediapipe::MetaData* TrackingContainerProto::release_meta_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::MetaData* temp = meta_data_;
  meta_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MetaData* TrackingContainerProto::unsafe_arena_release_meta_data() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingContainerProto.meta_data)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::MetaData* temp = meta_data_;
  meta_data_ = nullptr;
  return temp;
}
inline ::mediapipe::MetaData* TrackingContainerProto::_internal_mutable_meta_data() {
  _has_bits_[0] |= 0x00000001u;
  if (meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MetaData>(GetArena());
    meta_data_ = p;
  }
  return meta_data_;
}
inline ::mediapipe::MetaData* TrackingContainerProto::mutable_meta_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingContainerProto.meta_data)
  return _internal_mutable_meta_data();
}
inline void TrackingContainerProto::set_allocated_meta_data(::mediapipe::MetaData* meta_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_data_;
  }
  if (meta_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta_data);
    if (message_arena != submessage_arena) {
      meta_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  meta_data_ = meta_data;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingContainerProto.meta_data)
}

// repeated .mediapipe.BinaryTrackingData track_data = 2;
inline int TrackingContainerProto::_internal_track_data_size() const {
  return track_data_.size();
}
inline int TrackingContainerProto::track_data_size() const {
  return _internal_track_data_size();
}
inline void TrackingContainerProto::clear_track_data() {
  track_data_.Clear();
}
inline ::mediapipe::BinaryTrackingData* TrackingContainerProto::mutable_track_data(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingContainerProto.track_data)
  return track_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryTrackingData >*
TrackingContainerProto::mutable_track_data() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TrackingContainerProto.track_data)
  return &track_data_;
}
inline const ::mediapipe::BinaryTrackingData& TrackingContainerProto::_internal_track_data(int index) const {
  return track_data_.Get(index);
}
inline const ::mediapipe::BinaryTrackingData& TrackingContainerProto::track_data(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingContainerProto.track_data)
  return _internal_track_data(index);
}
inline ::mediapipe::BinaryTrackingData* TrackingContainerProto::_internal_add_track_data() {
  return track_data_.Add();
}
inline ::mediapipe::BinaryTrackingData* TrackingContainerProto::add_track_data() {
  // @@protoc_insertion_point(field_add:mediapipe.TrackingContainerProto.track_data)
  return _internal_add_track_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::BinaryTrackingData >&
TrackingContainerProto::track_data() const {
  // @@protoc_insertion_point(field_list:mediapipe.TrackingContainerProto.track_data)
  return track_data_;
}

// -------------------------------------------------------------------

// FlowPackagerOptions

// optional int32 domain_width = 1 [default = 256];
inline bool FlowPackagerOptions::_internal_has_domain_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlowPackagerOptions::has_domain_width() const {
  return _internal_has_domain_width();
}
inline void FlowPackagerOptions::clear_domain_width() {
  domain_width_ = 256;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlowPackagerOptions::_internal_domain_width() const {
  return domain_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlowPackagerOptions::domain_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowPackagerOptions.domain_width)
  return _internal_domain_width();
}
inline void FlowPackagerOptions::_internal_set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  domain_width_ = value;
}
inline void FlowPackagerOptions::set_domain_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_domain_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowPackagerOptions.domain_width)
}

// optional int32 domain_height = 2 [default = 192];
inline bool FlowPackagerOptions::_internal_has_domain_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FlowPackagerOptions::has_domain_height() const {
  return _internal_has_domain_height();
}
inline void FlowPackagerOptions::clear_domain_height() {
  domain_height_ = 192;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlowPackagerOptions::_internal_domain_height() const {
  return domain_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlowPackagerOptions::domain_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowPackagerOptions.domain_height)
  return _internal_domain_height();
}
inline void FlowPackagerOptions::_internal_set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  domain_height_ = value;
}
inline void FlowPackagerOptions::set_domain_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_domain_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowPackagerOptions.domain_height)
}

// optional bool binary_tracking_data_support = 6 [default = true];
inline bool FlowPackagerOptions::_internal_has_binary_tracking_data_support() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FlowPackagerOptions::has_binary_tracking_data_support() const {
  return _internal_has_binary_tracking_data_support();
}
inline void FlowPackagerOptions::clear_binary_tracking_data_support() {
  binary_tracking_data_support_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FlowPackagerOptions::_internal_binary_tracking_data_support() const {
  return binary_tracking_data_support_;
}
inline bool FlowPackagerOptions::binary_tracking_data_support() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowPackagerOptions.binary_tracking_data_support)
  return _internal_binary_tracking_data_support();
}
inline void FlowPackagerOptions::_internal_set_binary_tracking_data_support(bool value) {
  _has_bits_[0] |= 0x00000010u;
  binary_tracking_data_support_ = value;
}
inline void FlowPackagerOptions::set_binary_tracking_data_support(bool value) {
  _internal_set_binary_tracking_data_support(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowPackagerOptions.binary_tracking_data_support)
}

// optional bool use_high_profile = 3 [default = false];
inline bool FlowPackagerOptions::_internal_has_use_high_profile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlowPackagerOptions::has_use_high_profile() const {
  return _internal_has_use_high_profile();
}
inline void FlowPackagerOptions::clear_use_high_profile() {
  use_high_profile_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FlowPackagerOptions::_internal_use_high_profile() const {
  return use_high_profile_;
}
inline bool FlowPackagerOptions::use_high_profile() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowPackagerOptions.use_high_profile)
  return _internal_use_high_profile();
}
inline void FlowPackagerOptions::_internal_set_use_high_profile(bool value) {
  _has_bits_[0] |= 0x00000001u;
  use_high_profile_ = value;
}
inline void FlowPackagerOptions::set_use_high_profile(bool value) {
  _internal_set_use_high_profile(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowPackagerOptions.use_high_profile)
}

// optional bool high_fidelity_16bit_encode = 4 [default = true];
inline bool FlowPackagerOptions::_internal_has_high_fidelity_16bit_encode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FlowPackagerOptions::has_high_fidelity_16bit_encode() const {
  return _internal_has_high_fidelity_16bit_encode();
}
inline void FlowPackagerOptions::clear_high_fidelity_16bit_encode() {
  high_fidelity_16bit_encode_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FlowPackagerOptions::_internal_high_fidelity_16bit_encode() const {
  return high_fidelity_16bit_encode_;
}
inline bool FlowPackagerOptions::high_fidelity_16bit_encode() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowPackagerOptions.high_fidelity_16bit_encode)
  return _internal_high_fidelity_16bit_encode();
}
inline void FlowPackagerOptions::_internal_set_high_fidelity_16bit_encode(bool value) {
  _has_bits_[0] |= 0x00000020u;
  high_fidelity_16bit_encode_ = value;
}
inline void FlowPackagerOptions::set_high_fidelity_16bit_encode(bool value) {
  _internal_set_high_fidelity_16bit_encode(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowPackagerOptions.high_fidelity_16bit_encode)
}

// optional float high_profile_reuse_threshold = 5 [default = 0.5];
inline bool FlowPackagerOptions::_internal_has_high_profile_reuse_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FlowPackagerOptions::has_high_profile_reuse_threshold() const {
  return _internal_has_high_profile_reuse_threshold();
}
inline void FlowPackagerOptions::clear_high_profile_reuse_threshold() {
  high_profile_reuse_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FlowPackagerOptions::_internal_high_profile_reuse_threshold() const {
  return high_profile_reuse_threshold_;
}
inline float FlowPackagerOptions::high_profile_reuse_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.FlowPackagerOptions.high_profile_reuse_threshold)
  return _internal_high_profile_reuse_threshold();
}
inline void FlowPackagerOptions::_internal_set_high_profile_reuse_threshold(float value) {
  _has_bits_[0] |= 0x00000008u;
  high_profile_reuse_threshold_ = value;
}
inline void FlowPackagerOptions::set_high_profile_reuse_threshold(float value) {
  _internal_set_high_profile_reuse_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.FlowPackagerOptions.high_profile_reuse_threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::TrackingData_FrameFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TrackingData_FrameFlags>() {
  return ::mediapipe::TrackingData_FrameFlags_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::FlowPackagerOptions_HighProfileEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::FlowPackagerOptions_HighProfileEncoding>() {
  return ::mediapipe::FlowPackagerOptions_HighProfileEncoding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fflow_5fpackager_2eproto
