// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/frame_selection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/camera_motion.pb.h"
#include "mediapipe/util/tracking/frame_selection_solution_evaluator.pb.h"
#include "mediapipe/util/tracking/region_flow.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto;
namespace mediapipe {
class FrameSelectionCriterion;
struct FrameSelectionCriterionDefaultTypeInternal;
extern FrameSelectionCriterionDefaultTypeInternal _FrameSelectionCriterion_default_instance_;
class FrameSelectionOptions;
struct FrameSelectionOptionsDefaultTypeInternal;
extern FrameSelectionOptionsDefaultTypeInternal _FrameSelectionOptions_default_instance_;
class FrameSelectionResult;
struct FrameSelectionResultDefaultTypeInternal;
extern FrameSelectionResultDefaultTypeInternal _FrameSelectionResult_default_instance_;
class FrameSelectionTimestamp;
struct FrameSelectionTimestampDefaultTypeInternal;
extern FrameSelectionTimestampDefaultTypeInternal _FrameSelectionTimestamp_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::FrameSelectionCriterion* Arena::CreateMaybeMessage<::mediapipe::FrameSelectionCriterion>(Arena*);
template<> ::mediapipe::FrameSelectionOptions* Arena::CreateMaybeMessage<::mediapipe::FrameSelectionOptions>(Arena*);
template<> ::mediapipe::FrameSelectionResult* Arena::CreateMaybeMessage<::mediapipe::FrameSelectionResult>(Arena*);
template<> ::mediapipe::FrameSelectionTimestamp* Arena::CreateMaybeMessage<::mediapipe::FrameSelectionTimestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class FrameSelectionTimestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FrameSelectionTimestamp) */ {
 public:
  inline FrameSelectionTimestamp() : FrameSelectionTimestamp(nullptr) {}
  ~FrameSelectionTimestamp() override;
  explicit constexpr FrameSelectionTimestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSelectionTimestamp(const FrameSelectionTimestamp& from);
  FrameSelectionTimestamp(FrameSelectionTimestamp&& from) noexcept
    : FrameSelectionTimestamp() {
    *this = ::std::move(from);
  }

  inline FrameSelectionTimestamp& operator=(const FrameSelectionTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSelectionTimestamp& operator=(FrameSelectionTimestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSelectionTimestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSelectionTimestamp* internal_default_instance() {
    return reinterpret_cast<const FrameSelectionTimestamp*>(
               &_FrameSelectionTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameSelectionTimestamp& a, FrameSelectionTimestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSelectionTimestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSelectionTimestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameSelectionTimestamp* New() const final {
    return CreateMaybeMessage<FrameSelectionTimestamp>(nullptr);
  }

  FrameSelectionTimestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameSelectionTimestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameSelectionTimestamp& from);
  void MergeFrom(const FrameSelectionTimestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSelectionTimestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FrameSelectionTimestamp";
  }
  protected:
  explicit FrameSelectionTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kFrameIdxFieldNumber = 2,
    kProcessedFromTimestampFieldNumber = 3,
  };
  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 frame_idx = 2;
  bool has_frame_idx() const;
  private:
  bool _internal_has_frame_idx() const;
  public:
  void clear_frame_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_idx() const;
  void set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_idx() const;
  void _internal_set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 processed_from_timestamp = 3 [default = -1];
  bool has_processed_from_timestamp() const;
  private:
  bool _internal_has_processed_from_timestamp() const;
  public:
  void clear_processed_from_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 processed_from_timestamp() const;
  void set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_processed_from_timestamp() const;
  void _internal_set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.FrameSelectionTimestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_idx_;
  ::PROTOBUF_NAMESPACE_ID::int64 processed_from_timestamp_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto;
};
// -------------------------------------------------------------------

class FrameSelectionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FrameSelectionResult) */ {
 public:
  inline FrameSelectionResult() : FrameSelectionResult(nullptr) {}
  ~FrameSelectionResult() override;
  explicit constexpr FrameSelectionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSelectionResult(const FrameSelectionResult& from);
  FrameSelectionResult(FrameSelectionResult&& from) noexcept
    : FrameSelectionResult() {
    *this = ::std::move(from);
  }

  inline FrameSelectionResult& operator=(const FrameSelectionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSelectionResult& operator=(FrameSelectionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSelectionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSelectionResult* internal_default_instance() {
    return reinterpret_cast<const FrameSelectionResult*>(
               &_FrameSelectionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameSelectionResult& a, FrameSelectionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSelectionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSelectionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameSelectionResult* New() const final {
    return CreateMaybeMessage<FrameSelectionResult>(nullptr);
  }

  FrameSelectionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameSelectionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameSelectionResult& from);
  void MergeFrom(const FrameSelectionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSelectionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FrameSelectionResult";
  }
  protected:
  explicit FrameSelectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraMotionFieldNumber = 3,
    kFeaturesFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kFrameIdxFieldNumber = 2,
    kProcessedFromTimestampFieldNumber = 5,
  };
  // optional .mediapipe.CameraMotion camera_motion = 3;
  bool has_camera_motion() const;
  private:
  bool _internal_has_camera_motion() const;
  public:
  void clear_camera_motion();
  const ::mediapipe::CameraMotion& camera_motion() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::CameraMotion* release_camera_motion();
  ::mediapipe::CameraMotion* mutable_camera_motion();
  void set_allocated_camera_motion(::mediapipe::CameraMotion* camera_motion);
  private:
  const ::mediapipe::CameraMotion& _internal_camera_motion() const;
  ::mediapipe::CameraMotion* _internal_mutable_camera_motion();
  public:
  void unsafe_arena_set_allocated_camera_motion(
      ::mediapipe::CameraMotion* camera_motion);
  ::mediapipe::CameraMotion* unsafe_arena_release_camera_motion();

  // optional .mediapipe.RegionFlowFeatureList features = 4;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::mediapipe::RegionFlowFeatureList& features() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::RegionFlowFeatureList* release_features();
  ::mediapipe::RegionFlowFeatureList* mutable_features();
  void set_allocated_features(::mediapipe::RegionFlowFeatureList* features);
  private:
  const ::mediapipe::RegionFlowFeatureList& _internal_features() const;
  ::mediapipe::RegionFlowFeatureList* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::mediapipe::RegionFlowFeatureList* features);
  ::mediapipe::RegionFlowFeatureList* unsafe_arena_release_features();

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 frame_idx = 2;
  bool has_frame_idx() const;
  private:
  bool _internal_has_frame_idx() const;
  public:
  void clear_frame_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_idx() const;
  void set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_idx() const;
  void _internal_set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 processed_from_timestamp = 5 [default = -1];
  bool has_processed_from_timestamp() const;
  private:
  bool _internal_has_processed_from_timestamp() const;
  public:
  void clear_processed_from_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 processed_from_timestamp() const;
  void set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_processed_from_timestamp() const;
  void _internal_set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.FrameSelectionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::CameraMotion* camera_motion_;
  ::mediapipe::RegionFlowFeatureList* features_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_idx_;
  ::PROTOBUF_NAMESPACE_ID::int64 processed_from_timestamp_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto;
};
// -------------------------------------------------------------------

class FrameSelectionCriterion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FrameSelectionCriterion) */ {
 public:
  inline FrameSelectionCriterion() : FrameSelectionCriterion(nullptr) {}
  ~FrameSelectionCriterion() override;
  explicit constexpr FrameSelectionCriterion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSelectionCriterion(const FrameSelectionCriterion& from);
  FrameSelectionCriterion(FrameSelectionCriterion&& from) noexcept
    : FrameSelectionCriterion() {
    *this = ::std::move(from);
  }

  inline FrameSelectionCriterion& operator=(const FrameSelectionCriterion& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSelectionCriterion& operator=(FrameSelectionCriterion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSelectionCriterion& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSelectionCriterion* internal_default_instance() {
    return reinterpret_cast<const FrameSelectionCriterion*>(
               &_FrameSelectionCriterion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameSelectionCriterion& a, FrameSelectionCriterion& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSelectionCriterion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSelectionCriterion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameSelectionCriterion* New() const final {
    return CreateMaybeMessage<FrameSelectionCriterion>(nullptr);
  }

  FrameSelectionCriterion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameSelectionCriterion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameSelectionCriterion& from);
  void MergeFrom(const FrameSelectionCriterion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSelectionCriterion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FrameSelectionCriterion";
  }
  protected:
  explicit FrameSelectionCriterion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolutionEvaluatorFieldNumber = 4,
    kSamplingRateFieldNumber = 1,
    kMaxOutputFramesFieldNumber = 5,
    kBandwidthFramesFieldNumber = 2,
    kSearchRadiusFramesFieldNumber = 3,
  };
  // optional .mediapipe.FrameSelectionSolutionEvaluatorType solution_evaluator = 4;
  bool has_solution_evaluator() const;
  private:
  bool _internal_has_solution_evaluator() const;
  public:
  void clear_solution_evaluator();
  const ::mediapipe::FrameSelectionSolutionEvaluatorType& solution_evaluator() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::FrameSelectionSolutionEvaluatorType* release_solution_evaluator();
  ::mediapipe::FrameSelectionSolutionEvaluatorType* mutable_solution_evaluator();
  void set_allocated_solution_evaluator(::mediapipe::FrameSelectionSolutionEvaluatorType* solution_evaluator);
  private:
  const ::mediapipe::FrameSelectionSolutionEvaluatorType& _internal_solution_evaluator() const;
  ::mediapipe::FrameSelectionSolutionEvaluatorType* _internal_mutable_solution_evaluator();
  public:
  void unsafe_arena_set_allocated_solution_evaluator(
      ::mediapipe::FrameSelectionSolutionEvaluatorType* solution_evaluator);
  ::mediapipe::FrameSelectionSolutionEvaluatorType* unsafe_arena_release_solution_evaluator();

  // optional int32 sampling_rate = 1 [default = 0];
  bool has_sampling_rate() const;
  private:
  bool _internal_has_sampling_rate() const;
  public:
  void clear_sampling_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 sampling_rate() const;
  void set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sampling_rate() const;
  void _internal_set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_output_frames = 5 [default = 0];
  bool has_max_output_frames() const;
  private:
  bool _internal_has_max_output_frames() const;
  public:
  void clear_max_output_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 max_output_frames() const;
  void set_max_output_frames(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_output_frames() const;
  void _internal_set_max_output_frames(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float bandwidth_frames = 2 [default = 50];
  bool has_bandwidth_frames() const;
  private:
  bool _internal_has_bandwidth_frames() const;
  public:
  void clear_bandwidth_frames();
  float bandwidth_frames() const;
  void set_bandwidth_frames(float value);
  private:
  float _internal_bandwidth_frames() const;
  void _internal_set_bandwidth_frames(float value);
  public:

  // optional int32 search_radius_frames = 3 [default = 1];
  bool has_search_radius_frames() const;
  private:
  bool _internal_has_search_radius_frames() const;
  public:
  void clear_search_radius_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 search_radius_frames() const;
  void set_search_radius_frames(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_search_radius_frames() const;
  void _internal_set_search_radius_frames(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.FrameSelectionCriterion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::FrameSelectionSolutionEvaluatorType* solution_evaluator_;
  ::PROTOBUF_NAMESPACE_ID::int32 sampling_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_output_frames_;
  float bandwidth_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 search_radius_frames_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto;
};
// -------------------------------------------------------------------

class FrameSelectionOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.FrameSelectionOptions) */ {
 public:
  inline FrameSelectionOptions() : FrameSelectionOptions(nullptr) {}
  ~FrameSelectionOptions() override;
  explicit constexpr FrameSelectionOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSelectionOptions(const FrameSelectionOptions& from);
  FrameSelectionOptions(FrameSelectionOptions&& from) noexcept
    : FrameSelectionOptions() {
    *this = ::std::move(from);
  }

  inline FrameSelectionOptions& operator=(const FrameSelectionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSelectionOptions& operator=(FrameSelectionOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSelectionOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSelectionOptions* internal_default_instance() {
    return reinterpret_cast<const FrameSelectionOptions*>(
               &_FrameSelectionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameSelectionOptions& a, FrameSelectionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSelectionOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSelectionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameSelectionOptions* New() const final {
    return CreateMaybeMessage<FrameSelectionOptions>(nullptr);
  }

  FrameSelectionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameSelectionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameSelectionOptions& from);
  void MergeFrom(const FrameSelectionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSelectionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.FrameSelectionOptions";
  }
  protected:
  explicit FrameSelectionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCriterionFieldNumber = 1,
    kChunkSizeFieldNumber = 2,
  };
  // repeated .mediapipe.FrameSelectionCriterion criterion = 1;
  int criterion_size() const;
  private:
  int _internal_criterion_size() const;
  public:
  void clear_criterion();
  ::mediapipe::FrameSelectionCriterion* mutable_criterion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameSelectionCriterion >*
      mutable_criterion();
  private:
  const ::mediapipe::FrameSelectionCriterion& _internal_criterion(int index) const;
  ::mediapipe::FrameSelectionCriterion* _internal_add_criterion();
  public:
  const ::mediapipe::FrameSelectionCriterion& criterion(int index) const;
  ::mediapipe::FrameSelectionCriterion* add_criterion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameSelectionCriterion >&
      criterion() const;

  // optional int32 chunk_size = 2 [default = 100];
  bool has_chunk_size() const;
  private:
  bool _internal_has_chunk_size() const;
  public:
  void clear_chunk_size();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_size() const;
  void set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_size() const;
  void _internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.FrameSelectionOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameSelectionCriterion > criterion_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameSelectionTimestamp

// optional int64 timestamp = 1;
inline bool FrameSelectionTimestamp::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrameSelectionTimestamp::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FrameSelectionTimestamp::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionTimestamp::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionTimestamp::timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionTimestamp.timestamp)
  return _internal_timestamp();
}
inline void FrameSelectionTimestamp::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void FrameSelectionTimestamp::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionTimestamp.timestamp)
}

// optional int32 frame_idx = 2;
inline bool FrameSelectionTimestamp::_internal_has_frame_idx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameSelectionTimestamp::has_frame_idx() const {
  return _internal_has_frame_idx();
}
inline void FrameSelectionTimestamp::clear_frame_idx() {
  frame_idx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionTimestamp::_internal_frame_idx() const {
  return frame_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionTimestamp::frame_idx() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionTimestamp.frame_idx)
  return _internal_frame_idx();
}
inline void FrameSelectionTimestamp::_internal_set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_idx_ = value;
}
inline void FrameSelectionTimestamp::set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_idx(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionTimestamp.frame_idx)
}

// optional int64 processed_from_timestamp = 3 [default = -1];
inline bool FrameSelectionTimestamp::_internal_has_processed_from_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrameSelectionTimestamp::has_processed_from_timestamp() const {
  return _internal_has_processed_from_timestamp();
}
inline void FrameSelectionTimestamp::clear_processed_from_timestamp() {
  processed_from_timestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionTimestamp::_internal_processed_from_timestamp() const {
  return processed_from_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionTimestamp::processed_from_timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionTimestamp.processed_from_timestamp)
  return _internal_processed_from_timestamp();
}
inline void FrameSelectionTimestamp::_internal_set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  processed_from_timestamp_ = value;
}
inline void FrameSelectionTimestamp::set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_processed_from_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionTimestamp.processed_from_timestamp)
}

// -------------------------------------------------------------------

// FrameSelectionResult

// optional int64 timestamp = 1;
inline bool FrameSelectionResult::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrameSelectionResult::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FrameSelectionResult::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionResult::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionResult::timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionResult.timestamp)
  return _internal_timestamp();
}
inline void FrameSelectionResult::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void FrameSelectionResult::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionResult.timestamp)
}

// optional int32 frame_idx = 2;
inline bool FrameSelectionResult::_internal_has_frame_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FrameSelectionResult::has_frame_idx() const {
  return _internal_has_frame_idx();
}
inline void FrameSelectionResult::clear_frame_idx() {
  frame_idx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionResult::_internal_frame_idx() const {
  return frame_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionResult::frame_idx() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionResult.frame_idx)
  return _internal_frame_idx();
}
inline void FrameSelectionResult::_internal_set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  frame_idx_ = value;
}
inline void FrameSelectionResult::set_frame_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_idx(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionResult.frame_idx)
}

// optional .mediapipe.CameraMotion camera_motion = 3;
inline bool FrameSelectionResult::_internal_has_camera_motion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || camera_motion_ != nullptr);
  return value;
}
inline bool FrameSelectionResult::has_camera_motion() const {
  return _internal_has_camera_motion();
}
inline const ::mediapipe::CameraMotion& FrameSelectionResult::_internal_camera_motion() const {
  const ::mediapipe::CameraMotion* p = camera_motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::CameraMotion&>(
      ::mediapipe::_CameraMotion_default_instance_);
}
inline const ::mediapipe::CameraMotion& FrameSelectionResult::camera_motion() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionResult.camera_motion)
  return _internal_camera_motion();
}
inline void FrameSelectionResult::unsafe_arena_set_allocated_camera_motion(
    ::mediapipe::CameraMotion* camera_motion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_motion_);
  }
  camera_motion_ = camera_motion;
  if (camera_motion) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.FrameSelectionResult.camera_motion)
}
inline ::mediapipe::CameraMotion* FrameSelectionResult::release_camera_motion() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::CameraMotion* temp = camera_motion_;
  camera_motion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::CameraMotion* FrameSelectionResult::unsafe_arena_release_camera_motion() {
  // @@protoc_insertion_point(field_release:mediapipe.FrameSelectionResult.camera_motion)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::CameraMotion* temp = camera_motion_;
  camera_motion_ = nullptr;
  return temp;
}
inline ::mediapipe::CameraMotion* FrameSelectionResult::_internal_mutable_camera_motion() {
  _has_bits_[0] |= 0x00000001u;
  if (camera_motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::CameraMotion>(GetArena());
    camera_motion_ = p;
  }
  return camera_motion_;
}
inline ::mediapipe::CameraMotion* FrameSelectionResult::mutable_camera_motion() {
  // @@protoc_insertion_point(field_mutable:mediapipe.FrameSelectionResult.camera_motion)
  return _internal_mutable_camera_motion();
}
inline void FrameSelectionResult::set_allocated_camera_motion(::mediapipe::CameraMotion* camera_motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_motion_);
  }
  if (camera_motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_motion)->GetArena();
    if (message_arena != submessage_arena) {
      camera_motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_motion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_motion_ = camera_motion;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.FrameSelectionResult.camera_motion)
}

// optional .mediapipe.RegionFlowFeatureList features = 4;
inline bool FrameSelectionResult::_internal_has_features() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || features_ != nullptr);
  return value;
}
inline bool FrameSelectionResult::has_features() const {
  return _internal_has_features();
}
inline const ::mediapipe::RegionFlowFeatureList& FrameSelectionResult::_internal_features() const {
  const ::mediapipe::RegionFlowFeatureList* p = features_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::RegionFlowFeatureList&>(
      ::mediapipe::_RegionFlowFeatureList_default_instance_);
}
inline const ::mediapipe::RegionFlowFeatureList& FrameSelectionResult::features() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionResult.features)
  return _internal_features();
}
inline void FrameSelectionResult::unsafe_arena_set_allocated_features(
    ::mediapipe::RegionFlowFeatureList* features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features_);
  }
  features_ = features;
  if (features) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.FrameSelectionResult.features)
}
inline ::mediapipe::RegionFlowFeatureList* FrameSelectionResult::release_features() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::RegionFlowFeatureList* temp = features_;
  features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::RegionFlowFeatureList* FrameSelectionResult::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:mediapipe.FrameSelectionResult.features)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::RegionFlowFeatureList* temp = features_;
  features_ = nullptr;
  return temp;
}
inline ::mediapipe::RegionFlowFeatureList* FrameSelectionResult::_internal_mutable_features() {
  _has_bits_[0] |= 0x00000002u;
  if (features_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::RegionFlowFeatureList>(GetArena());
    features_ = p;
  }
  return features_;
}
inline ::mediapipe::RegionFlowFeatureList* FrameSelectionResult::mutable_features() {
  // @@protoc_insertion_point(field_mutable:mediapipe.FrameSelectionResult.features)
  return _internal_mutable_features();
}
inline void FrameSelectionResult::set_allocated_features(::mediapipe::RegionFlowFeatureList* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(features_);
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features)->GetArena();
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  features_ = features;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.FrameSelectionResult.features)
}

// optional int64 processed_from_timestamp = 5 [default = -1];
inline bool FrameSelectionResult::_internal_has_processed_from_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FrameSelectionResult::has_processed_from_timestamp() const {
  return _internal_has_processed_from_timestamp();
}
inline void FrameSelectionResult::clear_processed_from_timestamp() {
  processed_from_timestamp_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionResult::_internal_processed_from_timestamp() const {
  return processed_from_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameSelectionResult::processed_from_timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionResult.processed_from_timestamp)
  return _internal_processed_from_timestamp();
}
inline void FrameSelectionResult::_internal_set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  processed_from_timestamp_ = value;
}
inline void FrameSelectionResult::set_processed_from_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_processed_from_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionResult.processed_from_timestamp)
}

// -------------------------------------------------------------------

// FrameSelectionCriterion

// optional int32 sampling_rate = 1 [default = 0];
inline bool FrameSelectionCriterion::_internal_has_sampling_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameSelectionCriterion::has_sampling_rate() const {
  return _internal_has_sampling_rate();
}
inline void FrameSelectionCriterion::clear_sampling_rate() {
  sampling_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionCriterion::_internal_sampling_rate() const {
  return sampling_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionCriterion::sampling_rate() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionCriterion.sampling_rate)
  return _internal_sampling_rate();
}
inline void FrameSelectionCriterion::_internal_set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sampling_rate_ = value;
}
inline void FrameSelectionCriterion::set_sampling_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sampling_rate(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionCriterion.sampling_rate)
}

// optional float bandwidth_frames = 2 [default = 50];
inline bool FrameSelectionCriterion::_internal_has_bandwidth_frames() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FrameSelectionCriterion::has_bandwidth_frames() const {
  return _internal_has_bandwidth_frames();
}
inline void FrameSelectionCriterion::clear_bandwidth_frames() {
  bandwidth_frames_ = 50;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FrameSelectionCriterion::_internal_bandwidth_frames() const {
  return bandwidth_frames_;
}
inline float FrameSelectionCriterion::bandwidth_frames() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionCriterion.bandwidth_frames)
  return _internal_bandwidth_frames();
}
inline void FrameSelectionCriterion::_internal_set_bandwidth_frames(float value) {
  _has_bits_[0] |= 0x00000008u;
  bandwidth_frames_ = value;
}
inline void FrameSelectionCriterion::set_bandwidth_frames(float value) {
  _internal_set_bandwidth_frames(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionCriterion.bandwidth_frames)
}

// optional int32 search_radius_frames = 3 [default = 1];
inline bool FrameSelectionCriterion::_internal_has_search_radius_frames() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FrameSelectionCriterion::has_search_radius_frames() const {
  return _internal_has_search_radius_frames();
}
inline void FrameSelectionCriterion::clear_search_radius_frames() {
  search_radius_frames_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionCriterion::_internal_search_radius_frames() const {
  return search_radius_frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionCriterion::search_radius_frames() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionCriterion.search_radius_frames)
  return _internal_search_radius_frames();
}
inline void FrameSelectionCriterion::_internal_set_search_radius_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  search_radius_frames_ = value;
}
inline void FrameSelectionCriterion::set_search_radius_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_search_radius_frames(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionCriterion.search_radius_frames)
}

// optional .mediapipe.FrameSelectionSolutionEvaluatorType solution_evaluator = 4;
inline bool FrameSelectionCriterion::_internal_has_solution_evaluator() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || solution_evaluator_ != nullptr);
  return value;
}
inline bool FrameSelectionCriterion::has_solution_evaluator() const {
  return _internal_has_solution_evaluator();
}
inline const ::mediapipe::FrameSelectionSolutionEvaluatorType& FrameSelectionCriterion::_internal_solution_evaluator() const {
  const ::mediapipe::FrameSelectionSolutionEvaluatorType* p = solution_evaluator_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::FrameSelectionSolutionEvaluatorType&>(
      ::mediapipe::_FrameSelectionSolutionEvaluatorType_default_instance_);
}
inline const ::mediapipe::FrameSelectionSolutionEvaluatorType& FrameSelectionCriterion::solution_evaluator() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionCriterion.solution_evaluator)
  return _internal_solution_evaluator();
}
inline void FrameSelectionCriterion::unsafe_arena_set_allocated_solution_evaluator(
    ::mediapipe::FrameSelectionSolutionEvaluatorType* solution_evaluator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solution_evaluator_);
  }
  solution_evaluator_ = solution_evaluator;
  if (solution_evaluator) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.FrameSelectionCriterion.solution_evaluator)
}
inline ::mediapipe::FrameSelectionSolutionEvaluatorType* FrameSelectionCriterion::release_solution_evaluator() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::FrameSelectionSolutionEvaluatorType* temp = solution_evaluator_;
  solution_evaluator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::FrameSelectionSolutionEvaluatorType* FrameSelectionCriterion::unsafe_arena_release_solution_evaluator() {
  // @@protoc_insertion_point(field_release:mediapipe.FrameSelectionCriterion.solution_evaluator)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::FrameSelectionSolutionEvaluatorType* temp = solution_evaluator_;
  solution_evaluator_ = nullptr;
  return temp;
}
inline ::mediapipe::FrameSelectionSolutionEvaluatorType* FrameSelectionCriterion::_internal_mutable_solution_evaluator() {
  _has_bits_[0] |= 0x00000001u;
  if (solution_evaluator_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::FrameSelectionSolutionEvaluatorType>(GetArena());
    solution_evaluator_ = p;
  }
  return solution_evaluator_;
}
inline ::mediapipe::FrameSelectionSolutionEvaluatorType* FrameSelectionCriterion::mutable_solution_evaluator() {
  // @@protoc_insertion_point(field_mutable:mediapipe.FrameSelectionCriterion.solution_evaluator)
  return _internal_mutable_solution_evaluator();
}
inline void FrameSelectionCriterion::set_allocated_solution_evaluator(::mediapipe::FrameSelectionSolutionEvaluatorType* solution_evaluator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(solution_evaluator_);
  }
  if (solution_evaluator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solution_evaluator)->GetArena();
    if (message_arena != submessage_arena) {
      solution_evaluator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solution_evaluator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  solution_evaluator_ = solution_evaluator;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.FrameSelectionCriterion.solution_evaluator)
}

// optional int32 max_output_frames = 5 [default = 0];
inline bool FrameSelectionCriterion::_internal_has_max_output_frames() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrameSelectionCriterion::has_max_output_frames() const {
  return _internal_has_max_output_frames();
}
inline void FrameSelectionCriterion::clear_max_output_frames() {
  max_output_frames_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionCriterion::_internal_max_output_frames() const {
  return max_output_frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionCriterion::max_output_frames() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionCriterion.max_output_frames)
  return _internal_max_output_frames();
}
inline void FrameSelectionCriterion::_internal_set_max_output_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_output_frames_ = value;
}
inline void FrameSelectionCriterion::set_max_output_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_output_frames(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionCriterion.max_output_frames)
}

// -------------------------------------------------------------------

// FrameSelectionOptions

// repeated .mediapipe.FrameSelectionCriterion criterion = 1;
inline int FrameSelectionOptions::_internal_criterion_size() const {
  return criterion_.size();
}
inline int FrameSelectionOptions::criterion_size() const {
  return _internal_criterion_size();
}
inline void FrameSelectionOptions::clear_criterion() {
  criterion_.Clear();
}
inline ::mediapipe::FrameSelectionCriterion* FrameSelectionOptions::mutable_criterion(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.FrameSelectionOptions.criterion)
  return criterion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameSelectionCriterion >*
FrameSelectionOptions::mutable_criterion() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.FrameSelectionOptions.criterion)
  return &criterion_;
}
inline const ::mediapipe::FrameSelectionCriterion& FrameSelectionOptions::_internal_criterion(int index) const {
  return criterion_.Get(index);
}
inline const ::mediapipe::FrameSelectionCriterion& FrameSelectionOptions::criterion(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionOptions.criterion)
  return _internal_criterion(index);
}
inline ::mediapipe::FrameSelectionCriterion* FrameSelectionOptions::_internal_add_criterion() {
  return criterion_.Add();
}
inline ::mediapipe::FrameSelectionCriterion* FrameSelectionOptions::add_criterion() {
  // @@protoc_insertion_point(field_add:mediapipe.FrameSelectionOptions.criterion)
  return _internal_add_criterion();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::FrameSelectionCriterion >&
FrameSelectionOptions::criterion() const {
  // @@protoc_insertion_point(field_list:mediapipe.FrameSelectionOptions.criterion)
  return criterion_;
}

// optional int32 chunk_size = 2 [default = 100];
inline bool FrameSelectionOptions::_internal_has_chunk_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrameSelectionOptions::has_chunk_size() const {
  return _internal_has_chunk_size();
}
inline void FrameSelectionOptions::clear_chunk_size() {
  chunk_size_ = 100;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionOptions::_internal_chunk_size() const {
  return chunk_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameSelectionOptions::chunk_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.FrameSelectionOptions.chunk_size)
  return _internal_chunk_size();
}
inline void FrameSelectionOptions::_internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  chunk_size_ = value;
}
inline void FrameSelectionOptions::set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.FrameSelectionOptions.chunk_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fframe_5fselection_2eproto
