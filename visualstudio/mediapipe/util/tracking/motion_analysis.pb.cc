// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/motion_analysis.proto

#include "mediapipe/util/tracking/motion_analysis.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr MotionAnalysisOptions_VisualizationOptions::MotionAnalysisOptions_VisualizationOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : visualize_salient_points_(false)
  , foreground_jet_coloring_(false)
  , visualize_blur_analysis_region_(false)
  , min_long_feature_track_(0)
  , max_long_feature_points_(0)
  , visualize_region_flow_features_(true)
  , visualize_stats_(true)
  , line_thickness_(4){}
struct MotionAnalysisOptions_VisualizationOptionsDefaultTypeInternal {
  constexpr MotionAnalysisOptions_VisualizationOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionAnalysisOptions_VisualizationOptionsDefaultTypeInternal() {}
  union {
    MotionAnalysisOptions_VisualizationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionAnalysisOptions_VisualizationOptionsDefaultTypeInternal _MotionAnalysisOptions_VisualizationOptions_default_instance_;
constexpr MotionAnalysisOptions_ForegroundOptions::MotionAnalysisOptions_ForegroundOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_coverage_scaling_(true)
  , foreground_threshold_(0.5f)
  , foreground_gamma_(1){}
struct MotionAnalysisOptions_ForegroundOptionsDefaultTypeInternal {
  constexpr MotionAnalysisOptions_ForegroundOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionAnalysisOptions_ForegroundOptionsDefaultTypeInternal() {}
  union {
    MotionAnalysisOptions_ForegroundOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionAnalysisOptions_ForegroundOptionsDefaultTypeInternal _MotionAnalysisOptions_ForegroundOptions_default_instance_;
constexpr MotionAnalysisOptions::MotionAnalysisOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flow_options_(nullptr)
  , motion_options_(nullptr)
  , saliency_options_(nullptr)
  , visualization_options_(nullptr)
  , foreground_options_(nullptr)
  , track_index_(0)
  , subtract_camera_motion_from_features_(false)
  , compute_motion_saliency_(false)
  , post_irls_smoothing_(false)
  , analysis_policy_(0)

  , rejection_transform_threshold_(20)
  , estimation_clip_size_(16)
  , select_saliency_inliers_(true)
  , filter_saliency_(true){}
struct MotionAnalysisOptionsDefaultTypeInternal {
  constexpr MotionAnalysisOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionAnalysisOptionsDefaultTypeInternal() {}
  union {
    MotionAnalysisOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionAnalysisOptionsDefaultTypeInternal _MotionAnalysisOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, visualize_region_flow_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, visualize_salient_points_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, line_thickness_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, foreground_jet_coloring_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, visualize_blur_analysis_region_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, visualize_stats_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, min_long_feature_track_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_VisualizationOptions, max_long_feature_points_),
  5,
  0,
  7,
  1,
  2,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_ForegroundOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_ForegroundOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_ForegroundOptions, foreground_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_ForegroundOptions, foreground_gamma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions_ForegroundOptions, threshold_coverage_scaling_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, analysis_policy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, flow_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, motion_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, saliency_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, estimation_clip_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, subtract_camera_motion_from_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, track_index_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, compute_motion_saliency_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, select_saliency_inliers_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, filter_saliency_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, post_irls_smoothing_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, rejection_transform_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, visualization_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionAnalysisOptions, foreground_options_),
  9,
  0,
  1,
  2,
  11,
  6,
  5,
  7,
  12,
  13,
  8,
  10,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::mediapipe::MotionAnalysisOptions_VisualizationOptions)},
  { 21, 29, sizeof(::mediapipe::MotionAnalysisOptions_ForegroundOptions)},
  { 32, 51, sizeof(::mediapipe::MotionAnalysisOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionAnalysisOptions_VisualizationOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionAnalysisOptions_ForegroundOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionAnalysisOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-mediapipe/util/tracking/motion_analysi"
  "s.proto\022\tmediapipe\032/mediapipe/util/track"
  "ing/motion_estimation.proto\032-mediapipe/u"
  "til/tracking/motion_saliency.proto\0325medi"
  "apipe/util/tracking/region_flow_computat"
  "ion.proto\"\370\n\n\025MotionAnalysisOptions\022`\n\017a"
  "nalysis_policy\030\016 \001(\0162/.mediapipe.MotionA"
  "nalysisOptions.AnalysisPolicy:\026ANALYSIS_"
  "POLICY_LEGACY\022=\n\014flow_options\030\001 \001(\0132\'.me"
  "diapipe.RegionFlowComputationOptions\022:\n\016"
  "motion_options\030\002 \001(\0132\".mediapipe.MotionE"
  "stimationOptions\022:\n\020saliency_options\030\003 \001"
  "(\0132 .mediapipe.MotionSaliencyOptions\022 \n\024"
  "estimation_clip_size\030\004 \001(\005:\00216\0223\n$subtra"
  "ct_camera_motion_from_features\030\005 \001(\010:\005fa"
  "lse\022\026\n\013track_index\030\006 \001(\005:\0010\022&\n\027compute_m"
  "otion_saliency\030\007 \001(\010:\005false\022%\n\027select_sa"
  "liency_inliers\030\010 \001(\010:\004true\022\035\n\017filter_sal"
  "iency\030\t \001(\010:\004true\022\"\n\023post_irls_smoothing"
  "\030\n \001(\010:\005false\022)\n\035rejection_transform_thr"
  "eshold\030\r \001(\002:\00220\022T\n\025visualization_option"
  "s\030\013 \001(\01325.mediapipe.MotionAnalysisOption"
  "s.VisualizationOptions\022N\n\022foreground_opt"
  "ions\030\014 \001(\01322.mediapipe.MotionAnalysisOpt"
  "ions.ForegroundOptions\032\305\002\n\024Visualization"
  "Options\022,\n\036visualize_region_flow_feature"
  "s\030\001 \001(\010:\004true\022\'\n\030visualize_salient_point"
  "s\030\002 \001(\010:\005false\022\031\n\016line_thickness\030\005 \001(\005:\001"
  "4\022&\n\027foreground_jet_coloring\030\003 \001(\010:\005fals"
  "e\022-\n\036visualize_blur_analysis_region\030\004 \001("
  "\010:\005false\022\035\n\017visualize_stats\030\006 \001(\010:\004true\022"
  "!\n\026min_long_feature_track\030\007 \001(\005:\0010\022\"\n\027ma"
  "x_long_feature_points\030\010 \001(\005:\0010\032}\n\021Foregr"
  "oundOptions\022!\n\024foreground_threshold\030\001 \001("
  "\002:\0030.5\022\033\n\020foreground_gamma\030\002 \001(\002:\0011\022(\n\032t"
  "hreshold_coverage_scaling\030\003 \001(\010:\004true\"\254\001"
  "\n\016AnalysisPolicy\022\032\n\026ANALYSIS_POLICY_LEGA"
  "CY\020\000\022\031\n\025ANALYSIS_POLICY_VIDEO\020\001\022 \n\034ANALY"
  "SIS_POLICY_VIDEO_MOBILE\020\002\022!\n\035ANALYSIS_PO"
  "LICY_CAMERA_MOBILE\020\003\022\036\n\032ANALYSIS_POLICY_"
  "HYPERLAPSE\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_deps[3] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5festimation_2eproto,
  &::descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto,
  &::descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto = {
  false, false, 1612, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto, "mediapipe/util/tracking/motion_analysis.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionAnalysisOptions_AnalysisPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto[0];
}
bool MotionAnalysisOptions_AnalysisPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::ANALYSIS_POLICY_LEGACY;
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::ANALYSIS_POLICY_VIDEO;
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::ANALYSIS_POLICY_VIDEO_MOBILE;
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::ANALYSIS_POLICY_CAMERA_MOBILE;
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::ANALYSIS_POLICY_HYPERLAPSE;
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::AnalysisPolicy_MIN;
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::AnalysisPolicy_MAX;
constexpr int MotionAnalysisOptions::AnalysisPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MotionAnalysisOptions_VisualizationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionAnalysisOptions_VisualizationOptions>()._has_bits_);
  static void set_has_visualize_region_flow_features(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_visualize_salient_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_line_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_foreground_jet_coloring(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visualize_blur_analysis_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visualize_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_long_feature_track(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_long_feature_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MotionAnalysisOptions_VisualizationOptions::MotionAnalysisOptions_VisualizationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionAnalysisOptions.VisualizationOptions)
}
MotionAnalysisOptions_VisualizationOptions::MotionAnalysisOptions_VisualizationOptions(const MotionAnalysisOptions_VisualizationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&visualize_salient_points_, &from.visualize_salient_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_thickness_) -
    reinterpret_cast<char*>(&visualize_salient_points_)) + sizeof(line_thickness_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionAnalysisOptions.VisualizationOptions)
}

void MotionAnalysisOptions_VisualizationOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&visualize_salient_points_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_long_feature_points_) -
    reinterpret_cast<char*>(&visualize_salient_points_)) + sizeof(max_long_feature_points_));
visualize_region_flow_features_ = true;
visualize_stats_ = true;
line_thickness_ = 4;
}

MotionAnalysisOptions_VisualizationOptions::~MotionAnalysisOptions_VisualizationOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionAnalysisOptions_VisualizationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MotionAnalysisOptions_VisualizationOptions::ArenaDtor(void* object) {
  MotionAnalysisOptions_VisualizationOptions* _this = reinterpret_cast< MotionAnalysisOptions_VisualizationOptions* >(object);
  (void)_this;
}
void MotionAnalysisOptions_VisualizationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionAnalysisOptions_VisualizationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionAnalysisOptions_VisualizationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&visualize_salient_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_long_feature_points_) -
        reinterpret_cast<char*>(&visualize_salient_points_)) + sizeof(max_long_feature_points_));
    visualize_region_flow_features_ = true;
    visualize_stats_ = true;
    line_thickness_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionAnalysisOptions_VisualizationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool visualize_region_flow_features = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_visualize_region_flow_features(&has_bits);
          visualize_region_flow_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visualize_salient_points = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_visualize_salient_points(&has_bits);
          visualize_salient_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool foreground_jet_coloring = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_foreground_jet_coloring(&has_bits);
          foreground_jet_coloring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visualize_blur_analysis_region = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_visualize_blur_analysis_region(&has_bits);
          visualize_blur_analysis_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 line_thickness = 5 [default = 4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_line_thickness(&has_bits);
          line_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visualize_stats = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_visualize_stats(&has_bits);
          visualize_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_long_feature_track = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_min_long_feature_track(&has_bits);
          min_long_feature_track_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_long_feature_points = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_long_feature_points(&has_bits);
          max_long_feature_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionAnalysisOptions_VisualizationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visualize_region_flow_features = 1 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_visualize_region_flow_features(), target);
  }

  // optional bool visualize_salient_points = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_visualize_salient_points(), target);
  }

  // optional bool foreground_jet_coloring = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_foreground_jet_coloring(), target);
  }

  // optional bool visualize_blur_analysis_region = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_visualize_blur_analysis_region(), target);
  }

  // optional int32 line_thickness = 5 [default = 4];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_line_thickness(), target);
  }

  // optional bool visualize_stats = 6 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_visualize_stats(), target);
  }

  // optional int32 min_long_feature_track = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_min_long_feature_track(), target);
  }

  // optional int32 max_long_feature_points = 8 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_long_feature_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  return target;
}

size_t MotionAnalysisOptions_VisualizationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool visualize_salient_points = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool foreground_jet_coloring = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool visualize_blur_analysis_region = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 min_long_feature_track = 7 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_long_feature_track());
    }

    // optional int32 max_long_feature_points = 8 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_long_feature_points());
    }

    // optional bool visualize_region_flow_features = 1 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool visualize_stats = 6 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 line_thickness = 5 [default = 4];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_line_thickness());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionAnalysisOptions_VisualizationOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionAnalysisOptions_VisualizationOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionAnalysisOptions_VisualizationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionAnalysisOptions.VisualizationOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionAnalysisOptions.VisualizationOptions)
    MergeFrom(*source);
  }
}

void MotionAnalysisOptions_VisualizationOptions::MergeFrom(const MotionAnalysisOptions_VisualizationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      visualize_salient_points_ = from.visualize_salient_points_;
    }
    if (cached_has_bits & 0x00000002u) {
      foreground_jet_coloring_ = from.foreground_jet_coloring_;
    }
    if (cached_has_bits & 0x00000004u) {
      visualize_blur_analysis_region_ = from.visualize_blur_analysis_region_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_long_feature_track_ = from.min_long_feature_track_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_long_feature_points_ = from.max_long_feature_points_;
    }
    if (cached_has_bits & 0x00000020u) {
      visualize_region_flow_features_ = from.visualize_region_flow_features_;
    }
    if (cached_has_bits & 0x00000040u) {
      visualize_stats_ = from.visualize_stats_;
    }
    if (cached_has_bits & 0x00000080u) {
      line_thickness_ = from.line_thickness_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionAnalysisOptions_VisualizationOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionAnalysisOptions_VisualizationOptions::CopyFrom(const MotionAnalysisOptions_VisualizationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionAnalysisOptions.VisualizationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionAnalysisOptions_VisualizationOptions::IsInitialized() const {
  return true;
}

void MotionAnalysisOptions_VisualizationOptions::InternalSwap(MotionAnalysisOptions_VisualizationOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionAnalysisOptions_VisualizationOptions, max_long_feature_points_)
      + sizeof(MotionAnalysisOptions_VisualizationOptions::max_long_feature_points_)
      - PROTOBUF_FIELD_OFFSET(MotionAnalysisOptions_VisualizationOptions, visualize_salient_points_)>(
          reinterpret_cast<char*>(&visualize_salient_points_),
          reinterpret_cast<char*>(&other->visualize_salient_points_));
  swap(visualize_region_flow_features_, other->visualize_region_flow_features_);
  swap(visualize_stats_, other->visualize_stats_);
  swap(line_thickness_, other->line_thickness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionAnalysisOptions_VisualizationOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto[0]);
}

// ===================================================================

class MotionAnalysisOptions_ForegroundOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionAnalysisOptions_ForegroundOptions>()._has_bits_);
  static void set_has_foreground_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_foreground_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_threshold_coverage_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MotionAnalysisOptions_ForegroundOptions::MotionAnalysisOptions_ForegroundOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionAnalysisOptions.ForegroundOptions)
}
MotionAnalysisOptions_ForegroundOptions::MotionAnalysisOptions_ForegroundOptions(const MotionAnalysisOptions_ForegroundOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&threshold_coverage_scaling_, &from.threshold_coverage_scaling_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreground_gamma_) -
    reinterpret_cast<char*>(&threshold_coverage_scaling_)) + sizeof(foreground_gamma_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionAnalysisOptions.ForegroundOptions)
}

void MotionAnalysisOptions_ForegroundOptions::SharedCtor() {
threshold_coverage_scaling_ = true;
foreground_threshold_ = 0.5f;
foreground_gamma_ = 1;
}

MotionAnalysisOptions_ForegroundOptions::~MotionAnalysisOptions_ForegroundOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionAnalysisOptions_ForegroundOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MotionAnalysisOptions_ForegroundOptions::ArenaDtor(void* object) {
  MotionAnalysisOptions_ForegroundOptions* _this = reinterpret_cast< MotionAnalysisOptions_ForegroundOptions* >(object);
  (void)_this;
}
void MotionAnalysisOptions_ForegroundOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionAnalysisOptions_ForegroundOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionAnalysisOptions_ForegroundOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    threshold_coverage_scaling_ = true;
    foreground_threshold_ = 0.5f;
    foreground_gamma_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionAnalysisOptions_ForegroundOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float foreground_threshold = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_foreground_threshold(&has_bits);
          foreground_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float foreground_gamma = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_foreground_gamma(&has_bits);
          foreground_gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool threshold_coverage_scaling = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_threshold_coverage_scaling(&has_bits);
          threshold_coverage_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionAnalysisOptions_ForegroundOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float foreground_threshold = 1 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_foreground_threshold(), target);
  }

  // optional float foreground_gamma = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_foreground_gamma(), target);
  }

  // optional bool threshold_coverage_scaling = 3 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_threshold_coverage_scaling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  return target;
}

size_t MotionAnalysisOptions_ForegroundOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool threshold_coverage_scaling = 3 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float foreground_threshold = 1 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float foreground_gamma = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionAnalysisOptions_ForegroundOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionAnalysisOptions_ForegroundOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionAnalysisOptions_ForegroundOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionAnalysisOptions.ForegroundOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionAnalysisOptions.ForegroundOptions)
    MergeFrom(*source);
  }
}

void MotionAnalysisOptions_ForegroundOptions::MergeFrom(const MotionAnalysisOptions_ForegroundOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      threshold_coverage_scaling_ = from.threshold_coverage_scaling_;
    }
    if (cached_has_bits & 0x00000002u) {
      foreground_threshold_ = from.foreground_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      foreground_gamma_ = from.foreground_gamma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionAnalysisOptions_ForegroundOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionAnalysisOptions_ForegroundOptions::CopyFrom(const MotionAnalysisOptions_ForegroundOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionAnalysisOptions.ForegroundOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionAnalysisOptions_ForegroundOptions::IsInitialized() const {
  return true;
}

void MotionAnalysisOptions_ForegroundOptions::InternalSwap(MotionAnalysisOptions_ForegroundOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(threshold_coverage_scaling_, other->threshold_coverage_scaling_);
  swap(foreground_threshold_, other->foreground_threshold_);
  swap(foreground_gamma_, other->foreground_gamma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionAnalysisOptions_ForegroundOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto[1]);
}

// ===================================================================

class MotionAnalysisOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionAnalysisOptions>()._has_bits_);
  static void set_has_analysis_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::mediapipe::RegionFlowComputationOptions& flow_options(const MotionAnalysisOptions* msg);
  static void set_has_flow_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::MotionEstimationOptions& motion_options(const MotionAnalysisOptions* msg);
  static void set_has_motion_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::MotionSaliencyOptions& saliency_options(const MotionAnalysisOptions* msg);
  static void set_has_saliency_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_estimation_clip_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_subtract_camera_motion_from_features(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_track_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_compute_motion_saliency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_select_saliency_inliers(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_filter_saliency(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_post_irls_smoothing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rejection_transform_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::mediapipe::MotionAnalysisOptions_VisualizationOptions& visualization_options(const MotionAnalysisOptions* msg);
  static void set_has_visualization_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mediapipe::MotionAnalysisOptions_ForegroundOptions& foreground_options(const MotionAnalysisOptions* msg);
  static void set_has_foreground_options(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mediapipe::RegionFlowComputationOptions&
MotionAnalysisOptions::_Internal::flow_options(const MotionAnalysisOptions* msg) {
  return *msg->flow_options_;
}
const ::mediapipe::MotionEstimationOptions&
MotionAnalysisOptions::_Internal::motion_options(const MotionAnalysisOptions* msg) {
  return *msg->motion_options_;
}
const ::mediapipe::MotionSaliencyOptions&
MotionAnalysisOptions::_Internal::saliency_options(const MotionAnalysisOptions* msg) {
  return *msg->saliency_options_;
}
const ::mediapipe::MotionAnalysisOptions_VisualizationOptions&
MotionAnalysisOptions::_Internal::visualization_options(const MotionAnalysisOptions* msg) {
  return *msg->visualization_options_;
}
const ::mediapipe::MotionAnalysisOptions_ForegroundOptions&
MotionAnalysisOptions::_Internal::foreground_options(const MotionAnalysisOptions* msg) {
  return *msg->foreground_options_;
}
void MotionAnalysisOptions::clear_flow_options() {
  if (flow_options_ != nullptr) flow_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MotionAnalysisOptions::clear_motion_options() {
  if (motion_options_ != nullptr) motion_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MotionAnalysisOptions::clear_saliency_options() {
  if (saliency_options_ != nullptr) saliency_options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MotionAnalysisOptions::MotionAnalysisOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionAnalysisOptions)
}
MotionAnalysisOptions::MotionAnalysisOptions(const MotionAnalysisOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flow_options()) {
    flow_options_ = new ::mediapipe::RegionFlowComputationOptions(*from.flow_options_);
  } else {
    flow_options_ = nullptr;
  }
  if (from._internal_has_motion_options()) {
    motion_options_ = new ::mediapipe::MotionEstimationOptions(*from.motion_options_);
  } else {
    motion_options_ = nullptr;
  }
  if (from._internal_has_saliency_options()) {
    saliency_options_ = new ::mediapipe::MotionSaliencyOptions(*from.saliency_options_);
  } else {
    saliency_options_ = nullptr;
  }
  if (from._internal_has_visualization_options()) {
    visualization_options_ = new ::mediapipe::MotionAnalysisOptions_VisualizationOptions(*from.visualization_options_);
  } else {
    visualization_options_ = nullptr;
  }
  if (from._internal_has_foreground_options()) {
    foreground_options_ = new ::mediapipe::MotionAnalysisOptions_ForegroundOptions(*from.foreground_options_);
  } else {
    foreground_options_ = nullptr;
  }
  ::memcpy(&track_index_, &from.track_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_saliency_) -
    reinterpret_cast<char*>(&track_index_)) + sizeof(filter_saliency_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionAnalysisOptions)
}

void MotionAnalysisOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flow_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&analysis_policy_) -
    reinterpret_cast<char*>(&flow_options_)) + sizeof(analysis_policy_));
rejection_transform_threshold_ = 20;
estimation_clip_size_ = 16;
select_saliency_inliers_ = true;
filter_saliency_ = true;
}

MotionAnalysisOptions::~MotionAnalysisOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionAnalysisOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionAnalysisOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete flow_options_;
  if (this != internal_default_instance()) delete motion_options_;
  if (this != internal_default_instance()) delete saliency_options_;
  if (this != internal_default_instance()) delete visualization_options_;
  if (this != internal_default_instance()) delete foreground_options_;
}

void MotionAnalysisOptions::ArenaDtor(void* object) {
  MotionAnalysisOptions* _this = reinterpret_cast< MotionAnalysisOptions* >(object);
  (void)_this;
}
void MotionAnalysisOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionAnalysisOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionAnalysisOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionAnalysisOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(flow_options_ != nullptr);
      flow_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(motion_options_ != nullptr);
      motion_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(saliency_options_ != nullptr);
      saliency_options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(visualization_options_ != nullptr);
      visualization_options_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(foreground_options_ != nullptr);
      foreground_options_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&track_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compute_motion_saliency_) -
        reinterpret_cast<char*>(&track_index_)) + sizeof(compute_motion_saliency_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&post_irls_smoothing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&analysis_policy_) -
        reinterpret_cast<char*>(&post_irls_smoothing_)) + sizeof(analysis_policy_));
    rejection_transform_threshold_ = 20;
    estimation_clip_size_ = 16;
    select_saliency_inliers_ = true;
    filter_saliency_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionAnalysisOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.RegionFlowComputationOptions flow_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionEstimationOptions motion_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionSaliencyOptions saliency_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_saliency_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 estimation_clip_size = 4 [default = 16];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_estimation_clip_size(&has_bits);
          estimation_clip_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool subtract_camera_motion_from_features = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_subtract_camera_motion_from_features(&has_bits);
          subtract_camera_motion_from_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 track_index = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_track_index(&has_bits);
          track_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compute_motion_saliency = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_compute_motion_saliency(&has_bits);
          compute_motion_saliency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool select_saliency_inliers = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_select_saliency_inliers(&has_bits);
          select_saliency_inliers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_saliency = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_filter_saliency(&has_bits);
          filter_saliency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool post_irls_smoothing = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_post_irls_smoothing(&has_bits);
          post_irls_smoothing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionAnalysisOptions.VisualizationOptions visualization_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_visualization_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionAnalysisOptions.ForegroundOptions foreground_options = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreground_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rejection_transform_threshold = 13 [default = 20];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_rejection_transform_threshold(&has_bits);
          rejection_transform_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionAnalysisOptions.AnalysisPolicy analysis_policy = 14 [default = ANALYSIS_POLICY_LEGACY];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::MotionAnalysisOptions_AnalysisPolicy_IsValid(val))) {
            _internal_set_analysis_policy(static_cast<::mediapipe::MotionAnalysisOptions_AnalysisPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionAnalysisOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionAnalysisOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.RegionFlowComputationOptions flow_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flow_options(this), target, stream);
  }

  // optional .mediapipe.MotionEstimationOptions motion_options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::motion_options(this), target, stream);
  }

  // optional .mediapipe.MotionSaliencyOptions saliency_options = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::saliency_options(this), target, stream);
  }

  // optional int32 estimation_clip_size = 4 [default = 16];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_estimation_clip_size(), target);
  }

  // optional bool subtract_camera_motion_from_features = 5 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_subtract_camera_motion_from_features(), target);
  }

  // optional int32 track_index = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_track_index(), target);
  }

  // optional bool compute_motion_saliency = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_compute_motion_saliency(), target);
  }

  // optional bool select_saliency_inliers = 8 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_select_saliency_inliers(), target);
  }

  // optional bool filter_saliency = 9 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_filter_saliency(), target);
  }

  // optional bool post_irls_smoothing = 10 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_post_irls_smoothing(), target);
  }

  // optional .mediapipe.MotionAnalysisOptions.VisualizationOptions visualization_options = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::visualization_options(this), target, stream);
  }

  // optional .mediapipe.MotionAnalysisOptions.ForegroundOptions foreground_options = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::foreground_options(this), target, stream);
  }

  // optional float rejection_transform_threshold = 13 [default = 20];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_rejection_transform_threshold(), target);
  }

  // optional .mediapipe.MotionAnalysisOptions.AnalysisPolicy analysis_policy = 14 [default = ANALYSIS_POLICY_LEGACY];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_analysis_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionAnalysisOptions)
  return target;
}

size_t MotionAnalysisOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionAnalysisOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.RegionFlowComputationOptions flow_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flow_options_);
    }

    // optional .mediapipe.MotionEstimationOptions motion_options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motion_options_);
    }

    // optional .mediapipe.MotionSaliencyOptions saliency_options = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saliency_options_);
    }

    // optional .mediapipe.MotionAnalysisOptions.VisualizationOptions visualization_options = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visualization_options_);
    }

    // optional .mediapipe.MotionAnalysisOptions.ForegroundOptions foreground_options = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_options_);
    }

    // optional int32 track_index = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_track_index());
    }

    // optional bool subtract_camera_motion_from_features = 5 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool compute_motion_saliency = 7 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool post_irls_smoothing = 10 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.MotionAnalysisOptions.AnalysisPolicy analysis_policy = 14 [default = ANALYSIS_POLICY_LEGACY];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_analysis_policy());
    }

    // optional float rejection_transform_threshold = 13 [default = 20];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 estimation_clip_size = 4 [default = 16];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_estimation_clip_size());
    }

    // optional bool select_saliency_inliers = 8 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool filter_saliency = 9 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionAnalysisOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionAnalysisOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionAnalysisOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionAnalysisOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionAnalysisOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionAnalysisOptions)
    MergeFrom(*source);
  }
}

void MotionAnalysisOptions::MergeFrom(const MotionAnalysisOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionAnalysisOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_flow_options()->::mediapipe::RegionFlowComputationOptions::MergeFrom(from._internal_flow_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_motion_options()->::mediapipe::MotionEstimationOptions::MergeFrom(from._internal_motion_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_saliency_options()->::mediapipe::MotionSaliencyOptions::MergeFrom(from._internal_saliency_options());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_visualization_options()->::mediapipe::MotionAnalysisOptions_VisualizationOptions::MergeFrom(from._internal_visualization_options());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_foreground_options()->::mediapipe::MotionAnalysisOptions_ForegroundOptions::MergeFrom(from._internal_foreground_options());
    }
    if (cached_has_bits & 0x00000020u) {
      track_index_ = from.track_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      subtract_camera_motion_from_features_ = from.subtract_camera_motion_from_features_;
    }
    if (cached_has_bits & 0x00000080u) {
      compute_motion_saliency_ = from.compute_motion_saliency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      post_irls_smoothing_ = from.post_irls_smoothing_;
    }
    if (cached_has_bits & 0x00000200u) {
      analysis_policy_ = from.analysis_policy_;
    }
    if (cached_has_bits & 0x00000400u) {
      rejection_transform_threshold_ = from.rejection_transform_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      estimation_clip_size_ = from.estimation_clip_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      select_saliency_inliers_ = from.select_saliency_inliers_;
    }
    if (cached_has_bits & 0x00002000u) {
      filter_saliency_ = from.filter_saliency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionAnalysisOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionAnalysisOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionAnalysisOptions::CopyFrom(const MotionAnalysisOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionAnalysisOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionAnalysisOptions::IsInitialized() const {
  if (_internal_has_flow_options()) {
    if (!flow_options_->IsInitialized()) return false;
  }
  if (_internal_has_motion_options()) {
    if (!motion_options_->IsInitialized()) return false;
  }
  return true;
}

void MotionAnalysisOptions::InternalSwap(MotionAnalysisOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionAnalysisOptions, analysis_policy_)
      + sizeof(MotionAnalysisOptions::analysis_policy_)
      - PROTOBUF_FIELD_OFFSET(MotionAnalysisOptions, flow_options_)>(
          reinterpret_cast<char*>(&flow_options_),
          reinterpret_cast<char*>(&other->flow_options_));
  swap(rejection_transform_threshold_, other->rejection_transform_threshold_);
  swap(estimation_clip_size_, other->estimation_clip_size_);
  swap(select_saliency_inliers_, other->select_saliency_inliers_);
  swap(filter_saliency_, other->filter_saliency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionAnalysisOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::MotionAnalysisOptions_VisualizationOptions* Arena::CreateMaybeMessage< ::mediapipe::MotionAnalysisOptions_VisualizationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionAnalysisOptions_VisualizationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MotionAnalysisOptions_ForegroundOptions* Arena::CreateMaybeMessage< ::mediapipe::MotionAnalysisOptions_ForegroundOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionAnalysisOptions_ForegroundOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MotionAnalysisOptions* Arena::CreateMaybeMessage< ::mediapipe::MotionAnalysisOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionAnalysisOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
