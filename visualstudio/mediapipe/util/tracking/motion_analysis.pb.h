// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/motion_analysis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/motion_estimation.pb.h"
#include "mediapipe/util/tracking/motion_saliency.pb.h"
#include "mediapipe/util/tracking/region_flow_computation.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto;
namespace mediapipe {
class MotionAnalysisOptions;
struct MotionAnalysisOptionsDefaultTypeInternal;
extern MotionAnalysisOptionsDefaultTypeInternal _MotionAnalysisOptions_default_instance_;
class MotionAnalysisOptions_ForegroundOptions;
struct MotionAnalysisOptions_ForegroundOptionsDefaultTypeInternal;
extern MotionAnalysisOptions_ForegroundOptionsDefaultTypeInternal _MotionAnalysisOptions_ForegroundOptions_default_instance_;
class MotionAnalysisOptions_VisualizationOptions;
struct MotionAnalysisOptions_VisualizationOptionsDefaultTypeInternal;
extern MotionAnalysisOptions_VisualizationOptionsDefaultTypeInternal _MotionAnalysisOptions_VisualizationOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::MotionAnalysisOptions* Arena::CreateMaybeMessage<::mediapipe::MotionAnalysisOptions>(Arena*);
template<> ::mediapipe::MotionAnalysisOptions_ForegroundOptions* Arena::CreateMaybeMessage<::mediapipe::MotionAnalysisOptions_ForegroundOptions>(Arena*);
template<> ::mediapipe::MotionAnalysisOptions_VisualizationOptions* Arena::CreateMaybeMessage<::mediapipe::MotionAnalysisOptions_VisualizationOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum MotionAnalysisOptions_AnalysisPolicy : int {
  MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_LEGACY = 0,
  MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_VIDEO = 1,
  MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_VIDEO_MOBILE = 2,
  MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_CAMERA_MOBILE = 3,
  MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_HYPERLAPSE = 4
};
bool MotionAnalysisOptions_AnalysisPolicy_IsValid(int value);
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions_AnalysisPolicy_AnalysisPolicy_MIN = MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_LEGACY;
constexpr MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions_AnalysisPolicy_AnalysisPolicy_MAX = MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_HYPERLAPSE;
constexpr int MotionAnalysisOptions_AnalysisPolicy_AnalysisPolicy_ARRAYSIZE = MotionAnalysisOptions_AnalysisPolicy_AnalysisPolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionAnalysisOptions_AnalysisPolicy_descriptor();
template<typename T>
inline const std::string& MotionAnalysisOptions_AnalysisPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionAnalysisOptions_AnalysisPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionAnalysisOptions_AnalysisPolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionAnalysisOptions_AnalysisPolicy_descriptor(), enum_t_value);
}
inline bool MotionAnalysisOptions_AnalysisPolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionAnalysisOptions_AnalysisPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionAnalysisOptions_AnalysisPolicy>(
    MotionAnalysisOptions_AnalysisPolicy_descriptor(), name, value);
}
// ===================================================================

class MotionAnalysisOptions_VisualizationOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionAnalysisOptions.VisualizationOptions) */ {
 public:
  inline MotionAnalysisOptions_VisualizationOptions() : MotionAnalysisOptions_VisualizationOptions(nullptr) {}
  ~MotionAnalysisOptions_VisualizationOptions() override;
  explicit constexpr MotionAnalysisOptions_VisualizationOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionAnalysisOptions_VisualizationOptions(const MotionAnalysisOptions_VisualizationOptions& from);
  MotionAnalysisOptions_VisualizationOptions(MotionAnalysisOptions_VisualizationOptions&& from) noexcept
    : MotionAnalysisOptions_VisualizationOptions() {
    *this = ::std::move(from);
  }

  inline MotionAnalysisOptions_VisualizationOptions& operator=(const MotionAnalysisOptions_VisualizationOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionAnalysisOptions_VisualizationOptions& operator=(MotionAnalysisOptions_VisualizationOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionAnalysisOptions_VisualizationOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionAnalysisOptions_VisualizationOptions* internal_default_instance() {
    return reinterpret_cast<const MotionAnalysisOptions_VisualizationOptions*>(
               &_MotionAnalysisOptions_VisualizationOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MotionAnalysisOptions_VisualizationOptions& a, MotionAnalysisOptions_VisualizationOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionAnalysisOptions_VisualizationOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionAnalysisOptions_VisualizationOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionAnalysisOptions_VisualizationOptions* New() const final {
    return CreateMaybeMessage<MotionAnalysisOptions_VisualizationOptions>(nullptr);
  }

  MotionAnalysisOptions_VisualizationOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionAnalysisOptions_VisualizationOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionAnalysisOptions_VisualizationOptions& from);
  void MergeFrom(const MotionAnalysisOptions_VisualizationOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionAnalysisOptions_VisualizationOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionAnalysisOptions.VisualizationOptions";
  }
  protected:
  explicit MotionAnalysisOptions_VisualizationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisualizeSalientPointsFieldNumber = 2,
    kForegroundJetColoringFieldNumber = 3,
    kVisualizeBlurAnalysisRegionFieldNumber = 4,
    kMinLongFeatureTrackFieldNumber = 7,
    kMaxLongFeaturePointsFieldNumber = 8,
    kVisualizeRegionFlowFeaturesFieldNumber = 1,
    kVisualizeStatsFieldNumber = 6,
    kLineThicknessFieldNumber = 5,
  };
  // optional bool visualize_salient_points = 2 [default = false];
  bool has_visualize_salient_points() const;
  private:
  bool _internal_has_visualize_salient_points() const;
  public:
  void clear_visualize_salient_points();
  bool visualize_salient_points() const;
  void set_visualize_salient_points(bool value);
  private:
  bool _internal_visualize_salient_points() const;
  void _internal_set_visualize_salient_points(bool value);
  public:

  // optional bool foreground_jet_coloring = 3 [default = false];
  bool has_foreground_jet_coloring() const;
  private:
  bool _internal_has_foreground_jet_coloring() const;
  public:
  void clear_foreground_jet_coloring();
  bool foreground_jet_coloring() const;
  void set_foreground_jet_coloring(bool value);
  private:
  bool _internal_foreground_jet_coloring() const;
  void _internal_set_foreground_jet_coloring(bool value);
  public:

  // optional bool visualize_blur_analysis_region = 4 [default = false];
  bool has_visualize_blur_analysis_region() const;
  private:
  bool _internal_has_visualize_blur_analysis_region() const;
  public:
  void clear_visualize_blur_analysis_region();
  bool visualize_blur_analysis_region() const;
  void set_visualize_blur_analysis_region(bool value);
  private:
  bool _internal_visualize_blur_analysis_region() const;
  void _internal_set_visualize_blur_analysis_region(bool value);
  public:

  // optional int32 min_long_feature_track = 7 [default = 0];
  bool has_min_long_feature_track() const;
  private:
  bool _internal_has_min_long_feature_track() const;
  public:
  void clear_min_long_feature_track();
  ::PROTOBUF_NAMESPACE_ID::int32 min_long_feature_track() const;
  void set_min_long_feature_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_long_feature_track() const;
  void _internal_set_min_long_feature_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_long_feature_points = 8 [default = 0];
  bool has_max_long_feature_points() const;
  private:
  bool _internal_has_max_long_feature_points() const;
  public:
  void clear_max_long_feature_points();
  ::PROTOBUF_NAMESPACE_ID::int32 max_long_feature_points() const;
  void set_max_long_feature_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_long_feature_points() const;
  void _internal_set_max_long_feature_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool visualize_region_flow_features = 1 [default = true];
  bool has_visualize_region_flow_features() const;
  private:
  bool _internal_has_visualize_region_flow_features() const;
  public:
  void clear_visualize_region_flow_features();
  bool visualize_region_flow_features() const;
  void set_visualize_region_flow_features(bool value);
  private:
  bool _internal_visualize_region_flow_features() const;
  void _internal_set_visualize_region_flow_features(bool value);
  public:

  // optional bool visualize_stats = 6 [default = true];
  bool has_visualize_stats() const;
  private:
  bool _internal_has_visualize_stats() const;
  public:
  void clear_visualize_stats();
  bool visualize_stats() const;
  void set_visualize_stats(bool value);
  private:
  bool _internal_visualize_stats() const;
  void _internal_set_visualize_stats(bool value);
  public:

  // optional int32 line_thickness = 5 [default = 4];
  bool has_line_thickness() const;
  private:
  bool _internal_has_line_thickness() const;
  public:
  void clear_line_thickness();
  ::PROTOBUF_NAMESPACE_ID::int32 line_thickness() const;
  void set_line_thickness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_thickness() const;
  void _internal_set_line_thickness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MotionAnalysisOptions.VisualizationOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool visualize_salient_points_;
  bool foreground_jet_coloring_;
  bool visualize_blur_analysis_region_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_long_feature_track_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_long_feature_points_;
  bool visualize_region_flow_features_;
  bool visualize_stats_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_thickness_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class MotionAnalysisOptions_ForegroundOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionAnalysisOptions.ForegroundOptions) */ {
 public:
  inline MotionAnalysisOptions_ForegroundOptions() : MotionAnalysisOptions_ForegroundOptions(nullptr) {}
  ~MotionAnalysisOptions_ForegroundOptions() override;
  explicit constexpr MotionAnalysisOptions_ForegroundOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionAnalysisOptions_ForegroundOptions(const MotionAnalysisOptions_ForegroundOptions& from);
  MotionAnalysisOptions_ForegroundOptions(MotionAnalysisOptions_ForegroundOptions&& from) noexcept
    : MotionAnalysisOptions_ForegroundOptions() {
    *this = ::std::move(from);
  }

  inline MotionAnalysisOptions_ForegroundOptions& operator=(const MotionAnalysisOptions_ForegroundOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionAnalysisOptions_ForegroundOptions& operator=(MotionAnalysisOptions_ForegroundOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionAnalysisOptions_ForegroundOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionAnalysisOptions_ForegroundOptions* internal_default_instance() {
    return reinterpret_cast<const MotionAnalysisOptions_ForegroundOptions*>(
               &_MotionAnalysisOptions_ForegroundOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MotionAnalysisOptions_ForegroundOptions& a, MotionAnalysisOptions_ForegroundOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionAnalysisOptions_ForegroundOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionAnalysisOptions_ForegroundOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionAnalysisOptions_ForegroundOptions* New() const final {
    return CreateMaybeMessage<MotionAnalysisOptions_ForegroundOptions>(nullptr);
  }

  MotionAnalysisOptions_ForegroundOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionAnalysisOptions_ForegroundOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionAnalysisOptions_ForegroundOptions& from);
  void MergeFrom(const MotionAnalysisOptions_ForegroundOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionAnalysisOptions_ForegroundOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionAnalysisOptions.ForegroundOptions";
  }
  protected:
  explicit MotionAnalysisOptions_ForegroundOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdCoverageScalingFieldNumber = 3,
    kForegroundThresholdFieldNumber = 1,
    kForegroundGammaFieldNumber = 2,
  };
  // optional bool threshold_coverage_scaling = 3 [default = true];
  bool has_threshold_coverage_scaling() const;
  private:
  bool _internal_has_threshold_coverage_scaling() const;
  public:
  void clear_threshold_coverage_scaling();
  bool threshold_coverage_scaling() const;
  void set_threshold_coverage_scaling(bool value);
  private:
  bool _internal_threshold_coverage_scaling() const;
  void _internal_set_threshold_coverage_scaling(bool value);
  public:

  // optional float foreground_threshold = 1 [default = 0.5];
  bool has_foreground_threshold() const;
  private:
  bool _internal_has_foreground_threshold() const;
  public:
  void clear_foreground_threshold();
  float foreground_threshold() const;
  void set_foreground_threshold(float value);
  private:
  float _internal_foreground_threshold() const;
  void _internal_set_foreground_threshold(float value);
  public:

  // optional float foreground_gamma = 2 [default = 1];
  bool has_foreground_gamma() const;
  private:
  bool _internal_has_foreground_gamma() const;
  public:
  void clear_foreground_gamma();
  float foreground_gamma() const;
  void set_foreground_gamma(float value);
  private:
  float _internal_foreground_gamma() const;
  void _internal_set_foreground_gamma(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MotionAnalysisOptions.ForegroundOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool threshold_coverage_scaling_;
  float foreground_threshold_;
  float foreground_gamma_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class MotionAnalysisOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionAnalysisOptions) */ {
 public:
  inline MotionAnalysisOptions() : MotionAnalysisOptions(nullptr) {}
  ~MotionAnalysisOptions() override;
  explicit constexpr MotionAnalysisOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionAnalysisOptions(const MotionAnalysisOptions& from);
  MotionAnalysisOptions(MotionAnalysisOptions&& from) noexcept
    : MotionAnalysisOptions() {
    *this = ::std::move(from);
  }

  inline MotionAnalysisOptions& operator=(const MotionAnalysisOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionAnalysisOptions& operator=(MotionAnalysisOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionAnalysisOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionAnalysisOptions* internal_default_instance() {
    return reinterpret_cast<const MotionAnalysisOptions*>(
               &_MotionAnalysisOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotionAnalysisOptions& a, MotionAnalysisOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionAnalysisOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionAnalysisOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionAnalysisOptions* New() const final {
    return CreateMaybeMessage<MotionAnalysisOptions>(nullptr);
  }

  MotionAnalysisOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionAnalysisOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionAnalysisOptions& from);
  void MergeFrom(const MotionAnalysisOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionAnalysisOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionAnalysisOptions";
  }
  protected:
  explicit MotionAnalysisOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MotionAnalysisOptions_VisualizationOptions VisualizationOptions;
  typedef MotionAnalysisOptions_ForegroundOptions ForegroundOptions;

  typedef MotionAnalysisOptions_AnalysisPolicy AnalysisPolicy;
  static constexpr AnalysisPolicy ANALYSIS_POLICY_LEGACY =
    MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_LEGACY;
  static constexpr AnalysisPolicy ANALYSIS_POLICY_VIDEO =
    MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_VIDEO;
  static constexpr AnalysisPolicy ANALYSIS_POLICY_VIDEO_MOBILE =
    MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_VIDEO_MOBILE;
  static constexpr AnalysisPolicy ANALYSIS_POLICY_CAMERA_MOBILE =
    MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_CAMERA_MOBILE;
  static constexpr AnalysisPolicy ANALYSIS_POLICY_HYPERLAPSE =
    MotionAnalysisOptions_AnalysisPolicy_ANALYSIS_POLICY_HYPERLAPSE;
  static inline bool AnalysisPolicy_IsValid(int value) {
    return MotionAnalysisOptions_AnalysisPolicy_IsValid(value);
  }
  static constexpr AnalysisPolicy AnalysisPolicy_MIN =
    MotionAnalysisOptions_AnalysisPolicy_AnalysisPolicy_MIN;
  static constexpr AnalysisPolicy AnalysisPolicy_MAX =
    MotionAnalysisOptions_AnalysisPolicy_AnalysisPolicy_MAX;
  static constexpr int AnalysisPolicy_ARRAYSIZE =
    MotionAnalysisOptions_AnalysisPolicy_AnalysisPolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AnalysisPolicy_descriptor() {
    return MotionAnalysisOptions_AnalysisPolicy_descriptor();
  }
  template<typename T>
  static inline const std::string& AnalysisPolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AnalysisPolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AnalysisPolicy_Name.");
    return MotionAnalysisOptions_AnalysisPolicy_Name(enum_t_value);
  }
  static inline bool AnalysisPolicy_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AnalysisPolicy* value) {
    return MotionAnalysisOptions_AnalysisPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFlowOptionsFieldNumber = 1,
    kMotionOptionsFieldNumber = 2,
    kSaliencyOptionsFieldNumber = 3,
    kVisualizationOptionsFieldNumber = 11,
    kForegroundOptionsFieldNumber = 12,
    kTrackIndexFieldNumber = 6,
    kSubtractCameraMotionFromFeaturesFieldNumber = 5,
    kComputeMotionSaliencyFieldNumber = 7,
    kPostIrlsSmoothingFieldNumber = 10,
    kAnalysisPolicyFieldNumber = 14,
    kRejectionTransformThresholdFieldNumber = 13,
    kEstimationClipSizeFieldNumber = 4,
    kSelectSaliencyInliersFieldNumber = 8,
    kFilterSaliencyFieldNumber = 9,
  };
  // optional .mediapipe.RegionFlowComputationOptions flow_options = 1;
  bool has_flow_options() const;
  private:
  bool _internal_has_flow_options() const;
  public:
  void clear_flow_options();
  const ::mediapipe::RegionFlowComputationOptions& flow_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::RegionFlowComputationOptions* release_flow_options();
  ::mediapipe::RegionFlowComputationOptions* mutable_flow_options();
  void set_allocated_flow_options(::mediapipe::RegionFlowComputationOptions* flow_options);
  private:
  const ::mediapipe::RegionFlowComputationOptions& _internal_flow_options() const;
  ::mediapipe::RegionFlowComputationOptions* _internal_mutable_flow_options();
  public:
  void unsafe_arena_set_allocated_flow_options(
      ::mediapipe::RegionFlowComputationOptions* flow_options);
  ::mediapipe::RegionFlowComputationOptions* unsafe_arena_release_flow_options();

  // optional .mediapipe.MotionEstimationOptions motion_options = 2;
  bool has_motion_options() const;
  private:
  bool _internal_has_motion_options() const;
  public:
  void clear_motion_options();
  const ::mediapipe::MotionEstimationOptions& motion_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MotionEstimationOptions* release_motion_options();
  ::mediapipe::MotionEstimationOptions* mutable_motion_options();
  void set_allocated_motion_options(::mediapipe::MotionEstimationOptions* motion_options);
  private:
  const ::mediapipe::MotionEstimationOptions& _internal_motion_options() const;
  ::mediapipe::MotionEstimationOptions* _internal_mutable_motion_options();
  public:
  void unsafe_arena_set_allocated_motion_options(
      ::mediapipe::MotionEstimationOptions* motion_options);
  ::mediapipe::MotionEstimationOptions* unsafe_arena_release_motion_options();

  // optional .mediapipe.MotionSaliencyOptions saliency_options = 3;
  bool has_saliency_options() const;
  private:
  bool _internal_has_saliency_options() const;
  public:
  void clear_saliency_options();
  const ::mediapipe::MotionSaliencyOptions& saliency_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MotionSaliencyOptions* release_saliency_options();
  ::mediapipe::MotionSaliencyOptions* mutable_saliency_options();
  void set_allocated_saliency_options(::mediapipe::MotionSaliencyOptions* saliency_options);
  private:
  const ::mediapipe::MotionSaliencyOptions& _internal_saliency_options() const;
  ::mediapipe::MotionSaliencyOptions* _internal_mutable_saliency_options();
  public:
  void unsafe_arena_set_allocated_saliency_options(
      ::mediapipe::MotionSaliencyOptions* saliency_options);
  ::mediapipe::MotionSaliencyOptions* unsafe_arena_release_saliency_options();

  // optional .mediapipe.MotionAnalysisOptions.VisualizationOptions visualization_options = 11;
  bool has_visualization_options() const;
  private:
  bool _internal_has_visualization_options() const;
  public:
  void clear_visualization_options();
  const ::mediapipe::MotionAnalysisOptions_VisualizationOptions& visualization_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MotionAnalysisOptions_VisualizationOptions* release_visualization_options();
  ::mediapipe::MotionAnalysisOptions_VisualizationOptions* mutable_visualization_options();
  void set_allocated_visualization_options(::mediapipe::MotionAnalysisOptions_VisualizationOptions* visualization_options);
  private:
  const ::mediapipe::MotionAnalysisOptions_VisualizationOptions& _internal_visualization_options() const;
  ::mediapipe::MotionAnalysisOptions_VisualizationOptions* _internal_mutable_visualization_options();
  public:
  void unsafe_arena_set_allocated_visualization_options(
      ::mediapipe::MotionAnalysisOptions_VisualizationOptions* visualization_options);
  ::mediapipe::MotionAnalysisOptions_VisualizationOptions* unsafe_arena_release_visualization_options();

  // optional .mediapipe.MotionAnalysisOptions.ForegroundOptions foreground_options = 12;
  bool has_foreground_options() const;
  private:
  bool _internal_has_foreground_options() const;
  public:
  void clear_foreground_options();
  const ::mediapipe::MotionAnalysisOptions_ForegroundOptions& foreground_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MotionAnalysisOptions_ForegroundOptions* release_foreground_options();
  ::mediapipe::MotionAnalysisOptions_ForegroundOptions* mutable_foreground_options();
  void set_allocated_foreground_options(::mediapipe::MotionAnalysisOptions_ForegroundOptions* foreground_options);
  private:
  const ::mediapipe::MotionAnalysisOptions_ForegroundOptions& _internal_foreground_options() const;
  ::mediapipe::MotionAnalysisOptions_ForegroundOptions* _internal_mutable_foreground_options();
  public:
  void unsafe_arena_set_allocated_foreground_options(
      ::mediapipe::MotionAnalysisOptions_ForegroundOptions* foreground_options);
  ::mediapipe::MotionAnalysisOptions_ForegroundOptions* unsafe_arena_release_foreground_options();

  // optional int32 track_index = 6 [default = 0];
  bool has_track_index() const;
  private:
  bool _internal_has_track_index() const;
  public:
  void clear_track_index();
  ::PROTOBUF_NAMESPACE_ID::int32 track_index() const;
  void set_track_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_index() const;
  void _internal_set_track_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool subtract_camera_motion_from_features = 5 [default = false];
  bool has_subtract_camera_motion_from_features() const;
  private:
  bool _internal_has_subtract_camera_motion_from_features() const;
  public:
  void clear_subtract_camera_motion_from_features();
  bool subtract_camera_motion_from_features() const;
  void set_subtract_camera_motion_from_features(bool value);
  private:
  bool _internal_subtract_camera_motion_from_features() const;
  void _internal_set_subtract_camera_motion_from_features(bool value);
  public:

  // optional bool compute_motion_saliency = 7 [default = false];
  bool has_compute_motion_saliency() const;
  private:
  bool _internal_has_compute_motion_saliency() const;
  public:
  void clear_compute_motion_saliency();
  bool compute_motion_saliency() const;
  void set_compute_motion_saliency(bool value);
  private:
  bool _internal_compute_motion_saliency() const;
  void _internal_set_compute_motion_saliency(bool value);
  public:

  // optional bool post_irls_smoothing = 10 [default = false];
  bool has_post_irls_smoothing() const;
  private:
  bool _internal_has_post_irls_smoothing() const;
  public:
  void clear_post_irls_smoothing();
  bool post_irls_smoothing() const;
  void set_post_irls_smoothing(bool value);
  private:
  bool _internal_post_irls_smoothing() const;
  void _internal_set_post_irls_smoothing(bool value);
  public:

  // optional .mediapipe.MotionAnalysisOptions.AnalysisPolicy analysis_policy = 14 [default = ANALYSIS_POLICY_LEGACY];
  bool has_analysis_policy() const;
  private:
  bool _internal_has_analysis_policy() const;
  public:
  void clear_analysis_policy();
  ::mediapipe::MotionAnalysisOptions_AnalysisPolicy analysis_policy() const;
  void set_analysis_policy(::mediapipe::MotionAnalysisOptions_AnalysisPolicy value);
  private:
  ::mediapipe::MotionAnalysisOptions_AnalysisPolicy _internal_analysis_policy() const;
  void _internal_set_analysis_policy(::mediapipe::MotionAnalysisOptions_AnalysisPolicy value);
  public:

  // optional float rejection_transform_threshold = 13 [default = 20];
  bool has_rejection_transform_threshold() const;
  private:
  bool _internal_has_rejection_transform_threshold() const;
  public:
  void clear_rejection_transform_threshold();
  float rejection_transform_threshold() const;
  void set_rejection_transform_threshold(float value);
  private:
  float _internal_rejection_transform_threshold() const;
  void _internal_set_rejection_transform_threshold(float value);
  public:

  // optional int32 estimation_clip_size = 4 [default = 16];
  bool has_estimation_clip_size() const;
  private:
  bool _internal_has_estimation_clip_size() const;
  public:
  void clear_estimation_clip_size();
  ::PROTOBUF_NAMESPACE_ID::int32 estimation_clip_size() const;
  void set_estimation_clip_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_estimation_clip_size() const;
  void _internal_set_estimation_clip_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool select_saliency_inliers = 8 [default = true];
  bool has_select_saliency_inliers() const;
  private:
  bool _internal_has_select_saliency_inliers() const;
  public:
  void clear_select_saliency_inliers();
  bool select_saliency_inliers() const;
  void set_select_saliency_inliers(bool value);
  private:
  bool _internal_select_saliency_inliers() const;
  void _internal_set_select_saliency_inliers(bool value);
  public:

  // optional bool filter_saliency = 9 [default = true];
  bool has_filter_saliency() const;
  private:
  bool _internal_has_filter_saliency() const;
  public:
  void clear_filter_saliency();
  bool filter_saliency() const;
  void set_filter_saliency(bool value);
  private:
  bool _internal_filter_saliency() const;
  void _internal_set_filter_saliency(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MotionAnalysisOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::RegionFlowComputationOptions* flow_options_;
  ::mediapipe::MotionEstimationOptions* motion_options_;
  ::mediapipe::MotionSaliencyOptions* saliency_options_;
  ::mediapipe::MotionAnalysisOptions_VisualizationOptions* visualization_options_;
  ::mediapipe::MotionAnalysisOptions_ForegroundOptions* foreground_options_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_index_;
  bool subtract_camera_motion_from_features_;
  bool compute_motion_saliency_;
  bool post_irls_smoothing_;
  int analysis_policy_;
  float rejection_transform_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 estimation_clip_size_;
  bool select_saliency_inliers_;
  bool filter_saliency_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionAnalysisOptions_VisualizationOptions

// optional bool visualize_region_flow_features = 1 [default = true];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_visualize_region_flow_features() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_visualize_region_flow_features() const {
  return _internal_has_visualize_region_flow_features();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_visualize_region_flow_features() {
  visualize_region_flow_features_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_visualize_region_flow_features() const {
  return visualize_region_flow_features_;
}
inline bool MotionAnalysisOptions_VisualizationOptions::visualize_region_flow_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_region_flow_features)
  return _internal_visualize_region_flow_features();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_visualize_region_flow_features(bool value) {
  _has_bits_[0] |= 0x00000020u;
  visualize_region_flow_features_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_visualize_region_flow_features(bool value) {
  _internal_set_visualize_region_flow_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_region_flow_features)
}

// optional bool visualize_salient_points = 2 [default = false];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_visualize_salient_points() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_visualize_salient_points() const {
  return _internal_has_visualize_salient_points();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_visualize_salient_points() {
  visualize_salient_points_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_visualize_salient_points() const {
  return visualize_salient_points_;
}
inline bool MotionAnalysisOptions_VisualizationOptions::visualize_salient_points() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_salient_points)
  return _internal_visualize_salient_points();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_visualize_salient_points(bool value) {
  _has_bits_[0] |= 0x00000001u;
  visualize_salient_points_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_visualize_salient_points(bool value) {
  _internal_set_visualize_salient_points(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_salient_points)
}

// optional int32 line_thickness = 5 [default = 4];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_line_thickness() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_line_thickness() const {
  return _internal_has_line_thickness();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_line_thickness() {
  line_thickness_ = 4;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions_VisualizationOptions::_internal_line_thickness() const {
  return line_thickness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions_VisualizationOptions::line_thickness() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.line_thickness)
  return _internal_line_thickness();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_line_thickness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  line_thickness_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_line_thickness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_thickness(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.line_thickness)
}

// optional bool foreground_jet_coloring = 3 [default = false];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_foreground_jet_coloring() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_foreground_jet_coloring() const {
  return _internal_has_foreground_jet_coloring();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_foreground_jet_coloring() {
  foreground_jet_coloring_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_foreground_jet_coloring() const {
  return foreground_jet_coloring_;
}
inline bool MotionAnalysisOptions_VisualizationOptions::foreground_jet_coloring() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.foreground_jet_coloring)
  return _internal_foreground_jet_coloring();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_foreground_jet_coloring(bool value) {
  _has_bits_[0] |= 0x00000002u;
  foreground_jet_coloring_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_foreground_jet_coloring(bool value) {
  _internal_set_foreground_jet_coloring(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.foreground_jet_coloring)
}

// optional bool visualize_blur_analysis_region = 4 [default = false];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_visualize_blur_analysis_region() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_visualize_blur_analysis_region() const {
  return _internal_has_visualize_blur_analysis_region();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_visualize_blur_analysis_region() {
  visualize_blur_analysis_region_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_visualize_blur_analysis_region() const {
  return visualize_blur_analysis_region_;
}
inline bool MotionAnalysisOptions_VisualizationOptions::visualize_blur_analysis_region() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_blur_analysis_region)
  return _internal_visualize_blur_analysis_region();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_visualize_blur_analysis_region(bool value) {
  _has_bits_[0] |= 0x00000004u;
  visualize_blur_analysis_region_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_visualize_blur_analysis_region(bool value) {
  _internal_set_visualize_blur_analysis_region(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_blur_analysis_region)
}

// optional bool visualize_stats = 6 [default = true];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_visualize_stats() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_visualize_stats() const {
  return _internal_has_visualize_stats();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_visualize_stats() {
  visualize_stats_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_visualize_stats() const {
  return visualize_stats_;
}
inline bool MotionAnalysisOptions_VisualizationOptions::visualize_stats() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_stats)
  return _internal_visualize_stats();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_visualize_stats(bool value) {
  _has_bits_[0] |= 0x00000040u;
  visualize_stats_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_visualize_stats(bool value) {
  _internal_set_visualize_stats(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.visualize_stats)
}

// optional int32 min_long_feature_track = 7 [default = 0];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_min_long_feature_track() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_min_long_feature_track() const {
  return _internal_has_min_long_feature_track();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_min_long_feature_track() {
  min_long_feature_track_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions_VisualizationOptions::_internal_min_long_feature_track() const {
  return min_long_feature_track_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions_VisualizationOptions::min_long_feature_track() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.min_long_feature_track)
  return _internal_min_long_feature_track();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_min_long_feature_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_long_feature_track_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_min_long_feature_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_long_feature_track(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.min_long_feature_track)
}

// optional int32 max_long_feature_points = 8 [default = 0];
inline bool MotionAnalysisOptions_VisualizationOptions::_internal_has_max_long_feature_points() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_VisualizationOptions::has_max_long_feature_points() const {
  return _internal_has_max_long_feature_points();
}
inline void MotionAnalysisOptions_VisualizationOptions::clear_max_long_feature_points() {
  max_long_feature_points_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions_VisualizationOptions::_internal_max_long_feature_points() const {
  return max_long_feature_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions_VisualizationOptions::max_long_feature_points() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.VisualizationOptions.max_long_feature_points)
  return _internal_max_long_feature_points();
}
inline void MotionAnalysisOptions_VisualizationOptions::_internal_set_max_long_feature_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_long_feature_points_ = value;
}
inline void MotionAnalysisOptions_VisualizationOptions::set_max_long_feature_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_long_feature_points(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.VisualizationOptions.max_long_feature_points)
}

// -------------------------------------------------------------------

// MotionAnalysisOptions_ForegroundOptions

// optional float foreground_threshold = 1 [default = 0.5];
inline bool MotionAnalysisOptions_ForegroundOptions::_internal_has_foreground_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_ForegroundOptions::has_foreground_threshold() const {
  return _internal_has_foreground_threshold();
}
inline void MotionAnalysisOptions_ForegroundOptions::clear_foreground_threshold() {
  foreground_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MotionAnalysisOptions_ForegroundOptions::_internal_foreground_threshold() const {
  return foreground_threshold_;
}
inline float MotionAnalysisOptions_ForegroundOptions::foreground_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.ForegroundOptions.foreground_threshold)
  return _internal_foreground_threshold();
}
inline void MotionAnalysisOptions_ForegroundOptions::_internal_set_foreground_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  foreground_threshold_ = value;
}
inline void MotionAnalysisOptions_ForegroundOptions::set_foreground_threshold(float value) {
  _internal_set_foreground_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.ForegroundOptions.foreground_threshold)
}

// optional float foreground_gamma = 2 [default = 1];
inline bool MotionAnalysisOptions_ForegroundOptions::_internal_has_foreground_gamma() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_ForegroundOptions::has_foreground_gamma() const {
  return _internal_has_foreground_gamma();
}
inline void MotionAnalysisOptions_ForegroundOptions::clear_foreground_gamma() {
  foreground_gamma_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MotionAnalysisOptions_ForegroundOptions::_internal_foreground_gamma() const {
  return foreground_gamma_;
}
inline float MotionAnalysisOptions_ForegroundOptions::foreground_gamma() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.ForegroundOptions.foreground_gamma)
  return _internal_foreground_gamma();
}
inline void MotionAnalysisOptions_ForegroundOptions::_internal_set_foreground_gamma(float value) {
  _has_bits_[0] |= 0x00000004u;
  foreground_gamma_ = value;
}
inline void MotionAnalysisOptions_ForegroundOptions::set_foreground_gamma(float value) {
  _internal_set_foreground_gamma(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.ForegroundOptions.foreground_gamma)
}

// optional bool threshold_coverage_scaling = 3 [default = true];
inline bool MotionAnalysisOptions_ForegroundOptions::_internal_has_threshold_coverage_scaling() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MotionAnalysisOptions_ForegroundOptions::has_threshold_coverage_scaling() const {
  return _internal_has_threshold_coverage_scaling();
}
inline void MotionAnalysisOptions_ForegroundOptions::clear_threshold_coverage_scaling() {
  threshold_coverage_scaling_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MotionAnalysisOptions_ForegroundOptions::_internal_threshold_coverage_scaling() const {
  return threshold_coverage_scaling_;
}
inline bool MotionAnalysisOptions_ForegroundOptions::threshold_coverage_scaling() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.ForegroundOptions.threshold_coverage_scaling)
  return _internal_threshold_coverage_scaling();
}
inline void MotionAnalysisOptions_ForegroundOptions::_internal_set_threshold_coverage_scaling(bool value) {
  _has_bits_[0] |= 0x00000001u;
  threshold_coverage_scaling_ = value;
}
inline void MotionAnalysisOptions_ForegroundOptions::set_threshold_coverage_scaling(bool value) {
  _internal_set_threshold_coverage_scaling(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.ForegroundOptions.threshold_coverage_scaling)
}

// -------------------------------------------------------------------

// MotionAnalysisOptions

// optional .mediapipe.MotionAnalysisOptions.AnalysisPolicy analysis_policy = 14 [default = ANALYSIS_POLICY_LEGACY];
inline bool MotionAnalysisOptions::_internal_has_analysis_policy() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_analysis_policy() const {
  return _internal_has_analysis_policy();
}
inline void MotionAnalysisOptions::clear_analysis_policy() {
  analysis_policy_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::mediapipe::MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::_internal_analysis_policy() const {
  return static_cast< ::mediapipe::MotionAnalysisOptions_AnalysisPolicy >(analysis_policy_);
}
inline ::mediapipe::MotionAnalysisOptions_AnalysisPolicy MotionAnalysisOptions::analysis_policy() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.analysis_policy)
  return _internal_analysis_policy();
}
inline void MotionAnalysisOptions::_internal_set_analysis_policy(::mediapipe::MotionAnalysisOptions_AnalysisPolicy value) {
  assert(::mediapipe::MotionAnalysisOptions_AnalysisPolicy_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  analysis_policy_ = value;
}
inline void MotionAnalysisOptions::set_analysis_policy(::mediapipe::MotionAnalysisOptions_AnalysisPolicy value) {
  _internal_set_analysis_policy(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.analysis_policy)
}

// optional .mediapipe.RegionFlowComputationOptions flow_options = 1;
inline bool MotionAnalysisOptions::_internal_has_flow_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || flow_options_ != nullptr);
  return value;
}
inline bool MotionAnalysisOptions::has_flow_options() const {
  return _internal_has_flow_options();
}
inline const ::mediapipe::RegionFlowComputationOptions& MotionAnalysisOptions::_internal_flow_options() const {
  const ::mediapipe::RegionFlowComputationOptions* p = flow_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::RegionFlowComputationOptions&>(
      ::mediapipe::_RegionFlowComputationOptions_default_instance_);
}
inline const ::mediapipe::RegionFlowComputationOptions& MotionAnalysisOptions::flow_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.flow_options)
  return _internal_flow_options();
}
inline void MotionAnalysisOptions::unsafe_arena_set_allocated_flow_options(
    ::mediapipe::RegionFlowComputationOptions* flow_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_options_);
  }
  flow_options_ = flow_options;
  if (flow_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionAnalysisOptions.flow_options)
}
inline ::mediapipe::RegionFlowComputationOptions* MotionAnalysisOptions::release_flow_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::RegionFlowComputationOptions* temp = flow_options_;
  flow_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions* MotionAnalysisOptions::unsafe_arena_release_flow_options() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionAnalysisOptions.flow_options)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::RegionFlowComputationOptions* temp = flow_options_;
  flow_options_ = nullptr;
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions* MotionAnalysisOptions::_internal_mutable_flow_options() {
  _has_bits_[0] |= 0x00000001u;
  if (flow_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions>(GetArena());
    flow_options_ = p;
  }
  return flow_options_;
}
inline ::mediapipe::RegionFlowComputationOptions* MotionAnalysisOptions::mutable_flow_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionAnalysisOptions.flow_options)
  return _internal_mutable_flow_options();
}
inline void MotionAnalysisOptions::set_allocated_flow_options(::mediapipe::RegionFlowComputationOptions* flow_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_options_);
  }
  if (flow_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_options)->GetArena();
    if (message_arena != submessage_arena) {
      flow_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  flow_options_ = flow_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionAnalysisOptions.flow_options)
}

// optional .mediapipe.MotionEstimationOptions motion_options = 2;
inline bool MotionAnalysisOptions::_internal_has_motion_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || motion_options_ != nullptr);
  return value;
}
inline bool MotionAnalysisOptions::has_motion_options() const {
  return _internal_has_motion_options();
}
inline const ::mediapipe::MotionEstimationOptions& MotionAnalysisOptions::_internal_motion_options() const {
  const ::mediapipe::MotionEstimationOptions* p = motion_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MotionEstimationOptions&>(
      ::mediapipe::_MotionEstimationOptions_default_instance_);
}
inline const ::mediapipe::MotionEstimationOptions& MotionAnalysisOptions::motion_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.motion_options)
  return _internal_motion_options();
}
inline void MotionAnalysisOptions::unsafe_arena_set_allocated_motion_options(
    ::mediapipe::MotionEstimationOptions* motion_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_options_);
  }
  motion_options_ = motion_options;
  if (motion_options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionAnalysisOptions.motion_options)
}
inline ::mediapipe::MotionEstimationOptions* MotionAnalysisOptions::release_motion_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MotionEstimationOptions* temp = motion_options_;
  motion_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MotionEstimationOptions* MotionAnalysisOptions::unsafe_arena_release_motion_options() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionAnalysisOptions.motion_options)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MotionEstimationOptions* temp = motion_options_;
  motion_options_ = nullptr;
  return temp;
}
inline ::mediapipe::MotionEstimationOptions* MotionAnalysisOptions::_internal_mutable_motion_options() {
  _has_bits_[0] |= 0x00000002u;
  if (motion_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MotionEstimationOptions>(GetArena());
    motion_options_ = p;
  }
  return motion_options_;
}
inline ::mediapipe::MotionEstimationOptions* MotionAnalysisOptions::mutable_motion_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionAnalysisOptions.motion_options)
  return _internal_mutable_motion_options();
}
inline void MotionAnalysisOptions::set_allocated_motion_options(::mediapipe::MotionEstimationOptions* motion_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_options_);
  }
  if (motion_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion_options)->GetArena();
    if (message_arena != submessage_arena) {
      motion_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  motion_options_ = motion_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionAnalysisOptions.motion_options)
}

// optional .mediapipe.MotionSaliencyOptions saliency_options = 3;
inline bool MotionAnalysisOptions::_internal_has_saliency_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || saliency_options_ != nullptr);
  return value;
}
inline bool MotionAnalysisOptions::has_saliency_options() const {
  return _internal_has_saliency_options();
}
inline const ::mediapipe::MotionSaliencyOptions& MotionAnalysisOptions::_internal_saliency_options() const {
  const ::mediapipe::MotionSaliencyOptions* p = saliency_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MotionSaliencyOptions&>(
      ::mediapipe::_MotionSaliencyOptions_default_instance_);
}
inline const ::mediapipe::MotionSaliencyOptions& MotionAnalysisOptions::saliency_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.saliency_options)
  return _internal_saliency_options();
}
inline void MotionAnalysisOptions::unsafe_arena_set_allocated_saliency_options(
    ::mediapipe::MotionSaliencyOptions* saliency_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saliency_options_);
  }
  saliency_options_ = saliency_options;
  if (saliency_options) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionAnalysisOptions.saliency_options)
}
inline ::mediapipe::MotionSaliencyOptions* MotionAnalysisOptions::release_saliency_options() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::MotionSaliencyOptions* temp = saliency_options_;
  saliency_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MotionSaliencyOptions* MotionAnalysisOptions::unsafe_arena_release_saliency_options() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionAnalysisOptions.saliency_options)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::MotionSaliencyOptions* temp = saliency_options_;
  saliency_options_ = nullptr;
  return temp;
}
inline ::mediapipe::MotionSaliencyOptions* MotionAnalysisOptions::_internal_mutable_saliency_options() {
  _has_bits_[0] |= 0x00000004u;
  if (saliency_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MotionSaliencyOptions>(GetArena());
    saliency_options_ = p;
  }
  return saliency_options_;
}
inline ::mediapipe::MotionSaliencyOptions* MotionAnalysisOptions::mutable_saliency_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionAnalysisOptions.saliency_options)
  return _internal_mutable_saliency_options();
}
inline void MotionAnalysisOptions::set_allocated_saliency_options(::mediapipe::MotionSaliencyOptions* saliency_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(saliency_options_);
  }
  if (saliency_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saliency_options)->GetArena();
    if (message_arena != submessage_arena) {
      saliency_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saliency_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  saliency_options_ = saliency_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionAnalysisOptions.saliency_options)
}

// optional int32 estimation_clip_size = 4 [default = 16];
inline bool MotionAnalysisOptions::_internal_has_estimation_clip_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_estimation_clip_size() const {
  return _internal_has_estimation_clip_size();
}
inline void MotionAnalysisOptions::clear_estimation_clip_size() {
  estimation_clip_size_ = 16;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions::_internal_estimation_clip_size() const {
  return estimation_clip_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions::estimation_clip_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.estimation_clip_size)
  return _internal_estimation_clip_size();
}
inline void MotionAnalysisOptions::_internal_set_estimation_clip_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  estimation_clip_size_ = value;
}
inline void MotionAnalysisOptions::set_estimation_clip_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_estimation_clip_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.estimation_clip_size)
}

// optional bool subtract_camera_motion_from_features = 5 [default = false];
inline bool MotionAnalysisOptions::_internal_has_subtract_camera_motion_from_features() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_subtract_camera_motion_from_features() const {
  return _internal_has_subtract_camera_motion_from_features();
}
inline void MotionAnalysisOptions::clear_subtract_camera_motion_from_features() {
  subtract_camera_motion_from_features_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool MotionAnalysisOptions::_internal_subtract_camera_motion_from_features() const {
  return subtract_camera_motion_from_features_;
}
inline bool MotionAnalysisOptions::subtract_camera_motion_from_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.subtract_camera_motion_from_features)
  return _internal_subtract_camera_motion_from_features();
}
inline void MotionAnalysisOptions::_internal_set_subtract_camera_motion_from_features(bool value) {
  _has_bits_[0] |= 0x00000040u;
  subtract_camera_motion_from_features_ = value;
}
inline void MotionAnalysisOptions::set_subtract_camera_motion_from_features(bool value) {
  _internal_set_subtract_camera_motion_from_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.subtract_camera_motion_from_features)
}

// optional int32 track_index = 6 [default = 0];
inline bool MotionAnalysisOptions::_internal_has_track_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_track_index() const {
  return _internal_has_track_index();
}
inline void MotionAnalysisOptions::clear_track_index() {
  track_index_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions::_internal_track_index() const {
  return track_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionAnalysisOptions::track_index() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.track_index)
  return _internal_track_index();
}
inline void MotionAnalysisOptions::_internal_set_track_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  track_index_ = value;
}
inline void MotionAnalysisOptions::set_track_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_index(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.track_index)
}

// optional bool compute_motion_saliency = 7 [default = false];
inline bool MotionAnalysisOptions::_internal_has_compute_motion_saliency() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_compute_motion_saliency() const {
  return _internal_has_compute_motion_saliency();
}
inline void MotionAnalysisOptions::clear_compute_motion_saliency() {
  compute_motion_saliency_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool MotionAnalysisOptions::_internal_compute_motion_saliency() const {
  return compute_motion_saliency_;
}
inline bool MotionAnalysisOptions::compute_motion_saliency() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.compute_motion_saliency)
  return _internal_compute_motion_saliency();
}
inline void MotionAnalysisOptions::_internal_set_compute_motion_saliency(bool value) {
  _has_bits_[0] |= 0x00000080u;
  compute_motion_saliency_ = value;
}
inline void MotionAnalysisOptions::set_compute_motion_saliency(bool value) {
  _internal_set_compute_motion_saliency(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.compute_motion_saliency)
}

// optional bool select_saliency_inliers = 8 [default = true];
inline bool MotionAnalysisOptions::_internal_has_select_saliency_inliers() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_select_saliency_inliers() const {
  return _internal_has_select_saliency_inliers();
}
inline void MotionAnalysisOptions::clear_select_saliency_inliers() {
  select_saliency_inliers_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool MotionAnalysisOptions::_internal_select_saliency_inliers() const {
  return select_saliency_inliers_;
}
inline bool MotionAnalysisOptions::select_saliency_inliers() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.select_saliency_inliers)
  return _internal_select_saliency_inliers();
}
inline void MotionAnalysisOptions::_internal_set_select_saliency_inliers(bool value) {
  _has_bits_[0] |= 0x00001000u;
  select_saliency_inliers_ = value;
}
inline void MotionAnalysisOptions::set_select_saliency_inliers(bool value) {
  _internal_set_select_saliency_inliers(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.select_saliency_inliers)
}

// optional bool filter_saliency = 9 [default = true];
inline bool MotionAnalysisOptions::_internal_has_filter_saliency() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_filter_saliency() const {
  return _internal_has_filter_saliency();
}
inline void MotionAnalysisOptions::clear_filter_saliency() {
  filter_saliency_ = true;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool MotionAnalysisOptions::_internal_filter_saliency() const {
  return filter_saliency_;
}
inline bool MotionAnalysisOptions::filter_saliency() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.filter_saliency)
  return _internal_filter_saliency();
}
inline void MotionAnalysisOptions::_internal_set_filter_saliency(bool value) {
  _has_bits_[0] |= 0x00002000u;
  filter_saliency_ = value;
}
inline void MotionAnalysisOptions::set_filter_saliency(bool value) {
  _internal_set_filter_saliency(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.filter_saliency)
}

// optional bool post_irls_smoothing = 10 [default = false];
inline bool MotionAnalysisOptions::_internal_has_post_irls_smoothing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_post_irls_smoothing() const {
  return _internal_has_post_irls_smoothing();
}
inline void MotionAnalysisOptions::clear_post_irls_smoothing() {
  post_irls_smoothing_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool MotionAnalysisOptions::_internal_post_irls_smoothing() const {
  return post_irls_smoothing_;
}
inline bool MotionAnalysisOptions::post_irls_smoothing() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.post_irls_smoothing)
  return _internal_post_irls_smoothing();
}
inline void MotionAnalysisOptions::_internal_set_post_irls_smoothing(bool value) {
  _has_bits_[0] |= 0x00000100u;
  post_irls_smoothing_ = value;
}
inline void MotionAnalysisOptions::set_post_irls_smoothing(bool value) {
  _internal_set_post_irls_smoothing(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.post_irls_smoothing)
}

// optional float rejection_transform_threshold = 13 [default = 20];
inline bool MotionAnalysisOptions::_internal_has_rejection_transform_threshold() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MotionAnalysisOptions::has_rejection_transform_threshold() const {
  return _internal_has_rejection_transform_threshold();
}
inline void MotionAnalysisOptions::clear_rejection_transform_threshold() {
  rejection_transform_threshold_ = 20;
  _has_bits_[0] &= ~0x00000400u;
}
inline float MotionAnalysisOptions::_internal_rejection_transform_threshold() const {
  return rejection_transform_threshold_;
}
inline float MotionAnalysisOptions::rejection_transform_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.rejection_transform_threshold)
  return _internal_rejection_transform_threshold();
}
inline void MotionAnalysisOptions::_internal_set_rejection_transform_threshold(float value) {
  _has_bits_[0] |= 0x00000400u;
  rejection_transform_threshold_ = value;
}
inline void MotionAnalysisOptions::set_rejection_transform_threshold(float value) {
  _internal_set_rejection_transform_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionAnalysisOptions.rejection_transform_threshold)
}

// optional .mediapipe.MotionAnalysisOptions.VisualizationOptions visualization_options = 11;
inline bool MotionAnalysisOptions::_internal_has_visualization_options() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || visualization_options_ != nullptr);
  return value;
}
inline bool MotionAnalysisOptions::has_visualization_options() const {
  return _internal_has_visualization_options();
}
inline void MotionAnalysisOptions::clear_visualization_options() {
  if (visualization_options_ != nullptr) visualization_options_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mediapipe::MotionAnalysisOptions_VisualizationOptions& MotionAnalysisOptions::_internal_visualization_options() const {
  const ::mediapipe::MotionAnalysisOptions_VisualizationOptions* p = visualization_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MotionAnalysisOptions_VisualizationOptions&>(
      ::mediapipe::_MotionAnalysisOptions_VisualizationOptions_default_instance_);
}
inline const ::mediapipe::MotionAnalysisOptions_VisualizationOptions& MotionAnalysisOptions::visualization_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.visualization_options)
  return _internal_visualization_options();
}
inline void MotionAnalysisOptions::unsafe_arena_set_allocated_visualization_options(
    ::mediapipe::MotionAnalysisOptions_VisualizationOptions* visualization_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visualization_options_);
  }
  visualization_options_ = visualization_options;
  if (visualization_options) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionAnalysisOptions.visualization_options)
}
inline ::mediapipe::MotionAnalysisOptions_VisualizationOptions* MotionAnalysisOptions::release_visualization_options() {
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::MotionAnalysisOptions_VisualizationOptions* temp = visualization_options_;
  visualization_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MotionAnalysisOptions_VisualizationOptions* MotionAnalysisOptions::unsafe_arena_release_visualization_options() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionAnalysisOptions.visualization_options)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::MotionAnalysisOptions_VisualizationOptions* temp = visualization_options_;
  visualization_options_ = nullptr;
  return temp;
}
inline ::mediapipe::MotionAnalysisOptions_VisualizationOptions* MotionAnalysisOptions::_internal_mutable_visualization_options() {
  _has_bits_[0] |= 0x00000008u;
  if (visualization_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MotionAnalysisOptions_VisualizationOptions>(GetArena());
    visualization_options_ = p;
  }
  return visualization_options_;
}
inline ::mediapipe::MotionAnalysisOptions_VisualizationOptions* MotionAnalysisOptions::mutable_visualization_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionAnalysisOptions.visualization_options)
  return _internal_mutable_visualization_options();
}
inline void MotionAnalysisOptions::set_allocated_visualization_options(::mediapipe::MotionAnalysisOptions_VisualizationOptions* visualization_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visualization_options_;
  }
  if (visualization_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visualization_options);
    if (message_arena != submessage_arena) {
      visualization_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visualization_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  visualization_options_ = visualization_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionAnalysisOptions.visualization_options)
}

// optional .mediapipe.MotionAnalysisOptions.ForegroundOptions foreground_options = 12;
inline bool MotionAnalysisOptions::_internal_has_foreground_options() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || foreground_options_ != nullptr);
  return value;
}
inline bool MotionAnalysisOptions::has_foreground_options() const {
  return _internal_has_foreground_options();
}
inline void MotionAnalysisOptions::clear_foreground_options() {
  if (foreground_options_ != nullptr) foreground_options_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mediapipe::MotionAnalysisOptions_ForegroundOptions& MotionAnalysisOptions::_internal_foreground_options() const {
  const ::mediapipe::MotionAnalysisOptions_ForegroundOptions* p = foreground_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MotionAnalysisOptions_ForegroundOptions&>(
      ::mediapipe::_MotionAnalysisOptions_ForegroundOptions_default_instance_);
}
inline const ::mediapipe::MotionAnalysisOptions_ForegroundOptions& MotionAnalysisOptions::foreground_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionAnalysisOptions.foreground_options)
  return _internal_foreground_options();
}
inline void MotionAnalysisOptions::unsafe_arena_set_allocated_foreground_options(
    ::mediapipe::MotionAnalysisOptions_ForegroundOptions* foreground_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_options_);
  }
  foreground_options_ = foreground_options;
  if (foreground_options) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionAnalysisOptions.foreground_options)
}
inline ::mediapipe::MotionAnalysisOptions_ForegroundOptions* MotionAnalysisOptions::release_foreground_options() {
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::MotionAnalysisOptions_ForegroundOptions* temp = foreground_options_;
  foreground_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MotionAnalysisOptions_ForegroundOptions* MotionAnalysisOptions::unsafe_arena_release_foreground_options() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionAnalysisOptions.foreground_options)
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::MotionAnalysisOptions_ForegroundOptions* temp = foreground_options_;
  foreground_options_ = nullptr;
  return temp;
}
inline ::mediapipe::MotionAnalysisOptions_ForegroundOptions* MotionAnalysisOptions::_internal_mutable_foreground_options() {
  _has_bits_[0] |= 0x00000010u;
  if (foreground_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MotionAnalysisOptions_ForegroundOptions>(GetArena());
    foreground_options_ = p;
  }
  return foreground_options_;
}
inline ::mediapipe::MotionAnalysisOptions_ForegroundOptions* MotionAnalysisOptions::mutable_foreground_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionAnalysisOptions.foreground_options)
  return _internal_mutable_foreground_options();
}
inline void MotionAnalysisOptions::set_allocated_foreground_options(::mediapipe::MotionAnalysisOptions_ForegroundOptions* foreground_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete foreground_options_;
  }
  if (foreground_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foreground_options);
    if (message_arena != submessage_arena) {
      foreground_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  foreground_options_ = foreground_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionAnalysisOptions.foreground_options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::MotionAnalysisOptions_AnalysisPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::MotionAnalysisOptions_AnalysisPolicy>() {
  return ::mediapipe::MotionAnalysisOptions_AnalysisPolicy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fanalysis_2eproto
