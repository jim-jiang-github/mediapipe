// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/motion_models.proto

#include "mediapipe/util/tracking/motion_models.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr TranslationModel::TranslationModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dx_(0)
  , dy_(0){}
struct TranslationModelDefaultTypeInternal {
  constexpr TranslationModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranslationModelDefaultTypeInternal() {}
  union {
    TranslationModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranslationModelDefaultTypeInternal _TranslationModel_default_instance_;
constexpr SimilarityModel::SimilarityModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dx_(0)
  , dy_(0)
  , rotation_(0)
  , scale_(1){}
struct SimilarityModelDefaultTypeInternal {
  constexpr SimilarityModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimilarityModelDefaultTypeInternal() {}
  union {
    SimilarityModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimilarityModelDefaultTypeInternal _SimilarityModel_default_instance_;
constexpr LinearSimilarityModel::LinearSimilarityModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dx_(0)
  , dy_(0)
  , b_(0)
  , a_(1){}
struct LinearSimilarityModelDefaultTypeInternal {
  constexpr LinearSimilarityModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinearSimilarityModelDefaultTypeInternal() {}
  union {
    LinearSimilarityModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinearSimilarityModelDefaultTypeInternal _LinearSimilarityModel_default_instance_;
constexpr AffineModel::AffineModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dx_(0)
  , dy_(0)
  , b_(0)
  , c_(0)
  , a_(1)
  , d_(1){}
struct AffineModelDefaultTypeInternal {
  constexpr AffineModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AffineModelDefaultTypeInternal() {}
  union {
    AffineModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AffineModelDefaultTypeInternal _AffineModel_default_instance_;
constexpr Homography::Homography(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : h_01_(0)
  , h_02_(0)
  , h_10_(0)
  , h_12_(0)
  , h_20_(0)
  , h_21_(0)
  , h_00_(1)
  , h_11_(1){}
struct HomographyDefaultTypeInternal {
  constexpr HomographyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HomographyDefaultTypeInternal() {}
  union {
    Homography _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HomographyDefaultTypeInternal _Homography_default_instance_;
constexpr MixtureLinearSimilarity::MixtureLinearSimilarity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(){}
struct MixtureLinearSimilarityDefaultTypeInternal {
  constexpr MixtureLinearSimilarityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MixtureLinearSimilarityDefaultTypeInternal() {}
  union {
    MixtureLinearSimilarity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MixtureLinearSimilarityDefaultTypeInternal _MixtureLinearSimilarity_default_instance_;
constexpr MixtureAffine::MixtureAffine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(){}
struct MixtureAffineDefaultTypeInternal {
  constexpr MixtureAffineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MixtureAffineDefaultTypeInternal() {}
  union {
    MixtureAffine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MixtureAffineDefaultTypeInternal _MixtureAffine_default_instance_;
constexpr MixtureHomography::MixtureHomography(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_()
  , dof_(0)
{}
struct MixtureHomographyDefaultTypeInternal {
  constexpr MixtureHomographyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MixtureHomographyDefaultTypeInternal() {}
  union {
    MixtureHomography _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MixtureHomographyDefaultTypeInternal _MixtureHomography_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::TranslationModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TranslationModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TranslationModel, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TranslationModel, dy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::SimilarityModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SimilarityModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::SimilarityModel, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SimilarityModel, dy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SimilarityModel, scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SimilarityModel, rotation_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::LinearSimilarityModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LinearSimilarityModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::LinearSimilarityModel, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LinearSimilarityModel, dy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LinearSimilarityModel, a_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::LinearSimilarityModel, b_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, dy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, a_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, b_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, c_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineModel, d_),
  0,
  1,
  4,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_00_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_01_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_02_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_10_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_11_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_12_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_20_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Homography, h_21_),
  6,
  0,
  1,
  2,
  7,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureLinearSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureLinearSimilarity, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureAffine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureAffine, model_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureHomography, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureHomography, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureHomography, model_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureHomography, dof_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mediapipe::TranslationModel)},
  { 9, 18, sizeof(::mediapipe::SimilarityModel)},
  { 22, 31, sizeof(::mediapipe::LinearSimilarityModel)},
  { 35, 46, sizeof(::mediapipe::AffineModel)},
  { 52, 65, sizeof(::mediapipe::Homography)},
  { 73, -1, sizeof(::mediapipe::MixtureLinearSimilarity)},
  { 79, -1, sizeof(::mediapipe::MixtureAffine)},
  { 85, 92, sizeof(::mediapipe::MixtureHomography)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TranslationModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_SimilarityModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_LinearSimilarityModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_AffineModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Homography_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MixtureLinearSimilarity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MixtureAffine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MixtureHomography_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+mediapipe/util/tracking/motion_models."
  "proto\022\tmediapipe\"0\n\020TranslationModel\022\r\n\002"
  "dx\030\001 \001(\002:\0010\022\r\n\002dy\030\002 \001(\002:\0010\"V\n\017Similarity"
  "Model\022\r\n\002dx\030\001 \001(\002:\0010\022\r\n\002dy\030\002 \001(\002:\0010\022\020\n\005s"
  "cale\030\003 \001(\002:\0011\022\023\n\010rotation\030\004 \001(\002:\0010\"Q\n\025Li"
  "nearSimilarityModel\022\r\n\002dx\030\001 \001(\002:\0010\022\r\n\002dy"
  "\030\002 \001(\002:\0010\022\014\n\001a\030\003 \001(\002:\0011\022\014\n\001b\030\004 \001(\002:\0010\"c\n"
  "\013AffineModel\022\r\n\002dx\030\001 \001(\002:\0010\022\r\n\002dy\030\002 \001(\002:"
  "\0010\022\014\n\001a\030\003 \001(\002:\0011\022\014\n\001b\030\004 \001(\002:\0010\022\014\n\001c\030\005 \001("
  "\002:\0010\022\014\n\001d\030\006 \001(\002:\0011\"\224\001\n\nHomography\022\017\n\004h_0"
  "0\030\001 \001(\002:\0011\022\017\n\004h_01\030\002 \001(\002:\0010\022\017\n\004h_02\030\003 \001("
  "\002:\0010\022\017\n\004h_10\030\004 \001(\002:\0010\022\017\n\004h_11\030\005 \001(\002:\0011\022\017"
  "\n\004h_12\030\006 \001(\002:\0010\022\017\n\004h_20\030\007 \001(\002:\0010\022\017\n\004h_21"
  "\030\010 \001(\002:\0010\"J\n\027MixtureLinearSimilarity\022/\n\005"
  "model\030\001 \003(\0132 .mediapipe.LinearSimilarity"
  "Model\"6\n\rMixtureAffine\022%\n\005model\030\001 \003(\0132\026."
  "mediapipe.AffineModel\"\320\001\n\021MixtureHomogra"
  "phy\022$\n\005model\030\001 \003(\0132\025.mediapipe.Homograph"
  "y\022>\n\003dof\030\002 \001(\0162(.mediapipe.MixtureHomogr"
  "aphy.VariableDOF:\007ALL_DOF\"U\n\013VariableDOF"
  "\022\013\n\007ALL_DOF\020\000\022\023\n\017TRANSLATION_DOF\020\001\022\025\n\021SK"
  "EW_ROTATION_DOF\020\002\022\r\n\tCONST_DOF\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto = {
  false, false, 872, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto, "mediapipe/util/tracking/motion_models.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixtureHomography_VariableDOF_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[0];
}
bool MixtureHomography_VariableDOF_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MixtureHomography_VariableDOF MixtureHomography::ALL_DOF;
constexpr MixtureHomography_VariableDOF MixtureHomography::TRANSLATION_DOF;
constexpr MixtureHomography_VariableDOF MixtureHomography::SKEW_ROTATION_DOF;
constexpr MixtureHomography_VariableDOF MixtureHomography::CONST_DOF;
constexpr MixtureHomography_VariableDOF MixtureHomography::VariableDOF_MIN;
constexpr MixtureHomography_VariableDOF MixtureHomography::VariableDOF_MAX;
constexpr int MixtureHomography::VariableDOF_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TranslationModel::_Internal {
 public:
  using HasBits = decltype(std::declval<TranslationModel>()._has_bits_);
  static void set_has_dx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TranslationModel::TranslationModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TranslationModel)
}
TranslationModel::TranslationModel(const TranslationModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dy_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TranslationModel)
}

void TranslationModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dy_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
}

TranslationModel::~TranslationModel() {
  // @@protoc_insertion_point(destructor:mediapipe.TranslationModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TranslationModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TranslationModel::ArenaDtor(void* object) {
  TranslationModel* _this = reinterpret_cast< TranslationModel* >(object);
  (void)_this;
}
void TranslationModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranslationModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranslationModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TranslationModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dy_) -
        reinterpret_cast<char*>(&dx_)) + sizeof(dy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslationModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dx = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_dx(&has_bits);
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dy = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dy(&has_bits);
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TranslationModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TranslationModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dx = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dx(), target);
  }

  // optional float dy = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TranslationModel)
  return target;
}

size_t TranslationModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TranslationModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float dx = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dy = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranslationModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TranslationModel)
  GOOGLE_DCHECK_NE(&from, this);
  const TranslationModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TranslationModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TranslationModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TranslationModel)
    MergeFrom(*source);
  }
}

void TranslationModel::MergeFrom(const TranslationModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TranslationModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dx_ = from.dx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dy_ = from.dy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TranslationModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TranslationModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslationModel::CopyFrom(const TranslationModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TranslationModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslationModel::IsInitialized() const {
  return true;
}

void TranslationModel::InternalSwap(TranslationModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TranslationModel, dy_)
      + sizeof(TranslationModel::dy_)
      - PROTOBUF_FIELD_OFFSET(TranslationModel, dx_)>(
          reinterpret_cast<char*>(&dx_),
          reinterpret_cast<char*>(&other->dx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslationModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[0]);
}

// ===================================================================

class SimilarityModel::_Internal {
 public:
  using HasBits = decltype(std::declval<SimilarityModel>()._has_bits_);
  static void set_has_dx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SimilarityModel::SimilarityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.SimilarityModel)
}
SimilarityModel::SimilarityModel(const SimilarityModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.SimilarityModel)
}

void SimilarityModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(rotation_));
scale_ = 1;
}

SimilarityModel::~SimilarityModel() {
  // @@protoc_insertion_point(destructor:mediapipe.SimilarityModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimilarityModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimilarityModel::ArenaDtor(void* object) {
  SimilarityModel* _this = reinterpret_cast< SimilarityModel* >(object);
  (void)_this;
}
void SimilarityModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimilarityModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimilarityModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.SimilarityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&dx_)) + sizeof(rotation_));
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimilarityModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dx = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_dx(&has_bits);
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dy = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dy(&has_bits);
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimilarityModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.SimilarityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dx = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dx(), target);
  }

  // optional float dy = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dy(), target);
  }

  // optional float scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_scale(), target);
  }

  // optional float rotation = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.SimilarityModel)
  return target;
}

size_t SimilarityModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.SimilarityModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float dx = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dy = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float rotation = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float scale = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimilarityModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.SimilarityModel)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarityModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimilarityModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.SimilarityModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.SimilarityModel)
    MergeFrom(*source);
  }
}

void SimilarityModel::MergeFrom(const SimilarityModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.SimilarityModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dx_ = from.dx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dy_ = from.dy_;
    }
    if (cached_has_bits & 0x00000004u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00000008u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimilarityModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.SimilarityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarityModel::CopyFrom(const SimilarityModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.SimilarityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarityModel::IsInitialized() const {
  return true;
}

void SimilarityModel::InternalSwap(SimilarityModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimilarityModel, rotation_)
      + sizeof(SimilarityModel::rotation_)
      - PROTOBUF_FIELD_OFFSET(SimilarityModel, dx_)>(
          reinterpret_cast<char*>(&dx_),
          reinterpret_cast<char*>(&other->dx_));
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimilarityModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[1]);
}

// ===================================================================

class LinearSimilarityModel::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearSimilarityModel>()._has_bits_);
  static void set_has_dx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LinearSimilarityModel::LinearSimilarityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.LinearSimilarityModel)
}
LinearSimilarityModel::LinearSimilarityModel(const LinearSimilarityModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LinearSimilarityModel)
}

void LinearSimilarityModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(b_));
a_ = 1;
}

LinearSimilarityModel::~LinearSimilarityModel() {
  // @@protoc_insertion_point(destructor:mediapipe.LinearSimilarityModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearSimilarityModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinearSimilarityModel::ArenaDtor(void* object) {
  LinearSimilarityModel* _this = reinterpret_cast< LinearSimilarityModel* >(object);
  (void)_this;
}
void LinearSimilarityModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearSimilarityModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinearSimilarityModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LinearSimilarityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&dx_)) + sizeof(b_));
    a_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearSimilarityModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dx = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_dx(&has_bits);
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dy = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dy(&has_bits);
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float a = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float b = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearSimilarityModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LinearSimilarityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dx = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dx(), target);
  }

  // optional float dy = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dy(), target);
  }

  // optional float a = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_a(), target);
  }

  // optional float b = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LinearSimilarityModel)
  return target;
}

size_t LinearSimilarityModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LinearSimilarityModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float dx = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dy = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float b = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float a = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearSimilarityModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LinearSimilarityModel)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearSimilarityModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearSimilarityModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LinearSimilarityModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LinearSimilarityModel)
    MergeFrom(*source);
  }
}

void LinearSimilarityModel::MergeFrom(const LinearSimilarityModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LinearSimilarityModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dx_ = from.dx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dy_ = from.dy_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinearSimilarityModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LinearSimilarityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearSimilarityModel::CopyFrom(const LinearSimilarityModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LinearSimilarityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearSimilarityModel::IsInitialized() const {
  return true;
}

void LinearSimilarityModel::InternalSwap(LinearSimilarityModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearSimilarityModel, b_)
      + sizeof(LinearSimilarityModel::b_)
      - PROTOBUF_FIELD_OFFSET(LinearSimilarityModel, dx_)>(
          reinterpret_cast<char*>(&dx_),
          reinterpret_cast<char*>(&other->dx_));
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearSimilarityModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[2]);
}

// ===================================================================

class AffineModel::_Internal {
 public:
  using HasBits = decltype(std::declval<AffineModel>()._has_bits_);
  static void set_has_dx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

AffineModel::AffineModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.AffineModel)
}
AffineModel::AffineModel(const AffineModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.AffineModel)
}

void AffineModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(c_));
a_ = 1;
d_ = 1;
}

AffineModel::~AffineModel() {
  // @@protoc_insertion_point(destructor:mediapipe.AffineModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AffineModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AffineModel::ArenaDtor(void* object) {
  AffineModel* _this = reinterpret_cast< AffineModel* >(object);
  (void)_this;
}
void AffineModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AffineModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AffineModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.AffineModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&dx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c_) -
        reinterpret_cast<char*>(&dx_)) + sizeof(c_));
    a_ = 1;
    d_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AffineModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float dx = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_dx(&has_bits);
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dy = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dy(&has_bits);
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float a = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float b = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float c = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float d = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_d(&has_bits);
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AffineModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.AffineModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dx = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dx(), target);
  }

  // optional float dy = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dy(), target);
  }

  // optional float a = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_a(), target);
  }

  // optional float b = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_b(), target);
  }

  // optional float c = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_c(), target);
  }

  // optional float d = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.AffineModel)
  return target;
}

size_t AffineModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.AffineModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float dx = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dy = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float b = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float c = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float a = 3 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float d = 6 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AffineModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.AffineModel)
  GOOGLE_DCHECK_NE(&from, this);
  const AffineModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AffineModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.AffineModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.AffineModel)
    MergeFrom(*source);
  }
}

void AffineModel::MergeFrom(const AffineModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.AffineModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      dx_ = from.dx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dy_ = from.dy_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000010u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000020u) {
      d_ = from.d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AffineModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.AffineModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffineModel::CopyFrom(const AffineModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.AffineModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffineModel::IsInitialized() const {
  return true;
}

void AffineModel::InternalSwap(AffineModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AffineModel, c_)
      + sizeof(AffineModel::c_)
      - PROTOBUF_FIELD_OFFSET(AffineModel, dx_)>(
          reinterpret_cast<char*>(&dx_),
          reinterpret_cast<char*>(&other->dx_));
  swap(a_, other->a_);
  swap(d_, other->d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AffineModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[3]);
}

// ===================================================================

class Homography::_Internal {
 public:
  using HasBits = decltype(std::declval<Homography>()._has_bits_);
  static void set_has_h_00(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_h_01(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h_02(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h_10(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h_11(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_h_12(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_h_20(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_h_21(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Homography::Homography(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.Homography)
}
Homography::Homography(const Homography& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&h_01_, &from.h_01_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_11_) -
    reinterpret_cast<char*>(&h_01_)) + sizeof(h_11_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Homography)
}

void Homography::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&h_01_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&h_21_) -
    reinterpret_cast<char*>(&h_01_)) + sizeof(h_21_));
h_00_ = 1;
h_11_ = 1;
}

Homography::~Homography() {
  // @@protoc_insertion_point(destructor:mediapipe.Homography)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Homography::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Homography::ArenaDtor(void* object) {
  Homography* _this = reinterpret_cast< Homography* >(object);
  (void)_this;
}
void Homography::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Homography::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Homography::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Homography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&h_01_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_21_) -
        reinterpret_cast<char*>(&h_01_)) + sizeof(h_21_));
    h_00_ = 1;
    h_11_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Homography::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float h_00 = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_h_00(&has_bits);
          h_00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_01 = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_h_01(&has_bits);
          h_01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_02 = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_h_02(&has_bits);
          h_02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_10 = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_h_10(&has_bits);
          h_10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_11 = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_h_11(&has_bits);
          h_11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_12 = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_h_12(&has_bits);
          h_12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_20 = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_h_20(&has_bits);
          h_20_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_21 = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_h_21(&has_bits);
          h_21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Homography::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Homography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float h_00 = 1 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_h_00(), target);
  }

  // optional float h_01 = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_h_01(), target);
  }

  // optional float h_02 = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_02(), target);
  }

  // optional float h_10 = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_h_10(), target);
  }

  // optional float h_11 = 5 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_h_11(), target);
  }

  // optional float h_12 = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_h_12(), target);
  }

  // optional float h_20 = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_h_20(), target);
  }

  // optional float h_21 = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_h_21(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Homography)
  return target;
}

size_t Homography::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Homography)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float h_01 = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float h_02 = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float h_10 = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float h_12 = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float h_20 = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float h_21 = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float h_00 = 1 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float h_11 = 5 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Homography::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Homography)
  GOOGLE_DCHECK_NE(&from, this);
  const Homography* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Homography>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Homography)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Homography)
    MergeFrom(*source);
  }
}

void Homography::MergeFrom(const Homography& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Homography)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      h_01_ = from.h_01_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_02_ = from.h_02_;
    }
    if (cached_has_bits & 0x00000004u) {
      h_10_ = from.h_10_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_12_ = from.h_12_;
    }
    if (cached_has_bits & 0x00000010u) {
      h_20_ = from.h_20_;
    }
    if (cached_has_bits & 0x00000020u) {
      h_21_ = from.h_21_;
    }
    if (cached_has_bits & 0x00000040u) {
      h_00_ = from.h_00_;
    }
    if (cached_has_bits & 0x00000080u) {
      h_11_ = from.h_11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Homography::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Homography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Homography::CopyFrom(const Homography& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Homography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Homography::IsInitialized() const {
  return true;
}

void Homography::InternalSwap(Homography* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Homography, h_21_)
      + sizeof(Homography::h_21_)
      - PROTOBUF_FIELD_OFFSET(Homography, h_01_)>(
          reinterpret_cast<char*>(&h_01_),
          reinterpret_cast<char*>(&other->h_01_));
  swap(h_00_, other->h_00_);
  swap(h_11_, other->h_11_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Homography::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[4]);
}

// ===================================================================

class MixtureLinearSimilarity::_Internal {
 public:
};

MixtureLinearSimilarity::MixtureLinearSimilarity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  model_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MixtureLinearSimilarity)
}
MixtureLinearSimilarity::MixtureLinearSimilarity(const MixtureLinearSimilarity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_(from.model_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.MixtureLinearSimilarity)
}

void MixtureLinearSimilarity::SharedCtor() {
}

MixtureLinearSimilarity::~MixtureLinearSimilarity() {
  // @@protoc_insertion_point(destructor:mediapipe.MixtureLinearSimilarity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MixtureLinearSimilarity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MixtureLinearSimilarity::ArenaDtor(void* object) {
  MixtureLinearSimilarity* _this = reinterpret_cast< MixtureLinearSimilarity* >(object);
  (void)_this;
}
void MixtureLinearSimilarity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MixtureLinearSimilarity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixtureLinearSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MixtureLinearSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixtureLinearSimilarity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.LinearSimilarityModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixtureLinearSimilarity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MixtureLinearSimilarity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.LinearSimilarityModel model = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_model(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MixtureLinearSimilarity)
  return target;
}

size_t MixtureLinearSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MixtureLinearSimilarity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.LinearSimilarityModel model = 1;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixtureLinearSimilarity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MixtureLinearSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const MixtureLinearSimilarity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixtureLinearSimilarity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MixtureLinearSimilarity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MixtureLinearSimilarity)
    MergeFrom(*source);
  }
}

void MixtureLinearSimilarity::MergeFrom(const MixtureLinearSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MixtureLinearSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
}

void MixtureLinearSimilarity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MixtureLinearSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixtureLinearSimilarity::CopyFrom(const MixtureLinearSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MixtureLinearSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixtureLinearSimilarity::IsInitialized() const {
  return true;
}

void MixtureLinearSimilarity::InternalSwap(MixtureLinearSimilarity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_.InternalSwap(&other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixtureLinearSimilarity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[5]);
}

// ===================================================================

class MixtureAffine::_Internal {
 public:
};

MixtureAffine::MixtureAffine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  model_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MixtureAffine)
}
MixtureAffine::MixtureAffine(const MixtureAffine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_(from.model_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.MixtureAffine)
}

void MixtureAffine::SharedCtor() {
}

MixtureAffine::~MixtureAffine() {
  // @@protoc_insertion_point(destructor:mediapipe.MixtureAffine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MixtureAffine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MixtureAffine::ArenaDtor(void* object) {
  MixtureAffine* _this = reinterpret_cast< MixtureAffine* >(object);
  (void)_this;
}
void MixtureAffine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MixtureAffine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixtureAffine::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MixtureAffine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixtureAffine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.AffineModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixtureAffine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MixtureAffine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.AffineModel model = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_model(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MixtureAffine)
  return target;
}

size_t MixtureAffine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MixtureAffine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.AffineModel model = 1;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixtureAffine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MixtureAffine)
  GOOGLE_DCHECK_NE(&from, this);
  const MixtureAffine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixtureAffine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MixtureAffine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MixtureAffine)
    MergeFrom(*source);
  }
}

void MixtureAffine::MergeFrom(const MixtureAffine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MixtureAffine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
}

void MixtureAffine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MixtureAffine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixtureAffine::CopyFrom(const MixtureAffine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MixtureAffine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixtureAffine::IsInitialized() const {
  return true;
}

void MixtureAffine::InternalSwap(MixtureAffine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_.InternalSwap(&other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixtureAffine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[6]);
}

// ===================================================================

class MixtureHomography::_Internal {
 public:
  using HasBits = decltype(std::declval<MixtureHomography>()._has_bits_);
  static void set_has_dof(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MixtureHomography::MixtureHomography(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  model_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MixtureHomography)
}
MixtureHomography::MixtureHomography(const MixtureHomography& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      model_(from.model_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dof_ = from.dof_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.MixtureHomography)
}

void MixtureHomography::SharedCtor() {
dof_ = 0;
}

MixtureHomography::~MixtureHomography() {
  // @@protoc_insertion_point(destructor:mediapipe.MixtureHomography)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MixtureHomography::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MixtureHomography::ArenaDtor(void* object) {
  MixtureHomography* _this = reinterpret_cast< MixtureHomography* >(object);
  (void)_this;
}
void MixtureHomography::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MixtureHomography::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixtureHomography::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MixtureHomography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  dof_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixtureHomography::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.Homography model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MixtureHomography.VariableDOF dof = 2 [default = ALL_DOF];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::MixtureHomography_VariableDOF_IsValid(val))) {
            _internal_set_dof(static_cast<::mediapipe::MixtureHomography_VariableDOF>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixtureHomography::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MixtureHomography)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Homography model = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_model(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.MixtureHomography.VariableDOF dof = 2 [default = ALL_DOF];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MixtureHomography)
  return target;
}

size_t MixtureHomography::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MixtureHomography)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.Homography model = 1;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .mediapipe.MixtureHomography.VariableDOF dof = 2 [default = ALL_DOF];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dof());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixtureHomography::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MixtureHomography)
  GOOGLE_DCHECK_NE(&from, this);
  const MixtureHomography* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixtureHomography>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MixtureHomography)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MixtureHomography)
    MergeFrom(*source);
  }
}

void MixtureHomography::MergeFrom(const MixtureHomography& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MixtureHomography)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
  if (from._internal_has_dof()) {
    _internal_set_dof(from._internal_dof());
  }
}

void MixtureHomography::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MixtureHomography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixtureHomography::CopyFrom(const MixtureHomography& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MixtureHomography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixtureHomography::IsInitialized() const {
  return true;
}

void MixtureHomography::InternalSwap(MixtureHomography* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_.InternalSwap(&other->model_);
  swap(dof_, other->dof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixtureHomography::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::TranslationModel* Arena::CreateMaybeMessage< ::mediapipe::TranslationModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TranslationModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::SimilarityModel* Arena::CreateMaybeMessage< ::mediapipe::SimilarityModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::SimilarityModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::LinearSimilarityModel* Arena::CreateMaybeMessage< ::mediapipe::LinearSimilarityModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::LinearSimilarityModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::AffineModel* Arena::CreateMaybeMessage< ::mediapipe::AffineModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::AffineModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::Homography* Arena::CreateMaybeMessage< ::mediapipe::Homography >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::Homography >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MixtureLinearSimilarity* Arena::CreateMaybeMessage< ::mediapipe::MixtureLinearSimilarity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MixtureLinearSimilarity >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MixtureAffine* Arena::CreateMaybeMessage< ::mediapipe::MixtureAffine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MixtureAffine >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MixtureHomography* Arena::CreateMaybeMessage< ::mediapipe::MixtureHomography >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MixtureHomography >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
