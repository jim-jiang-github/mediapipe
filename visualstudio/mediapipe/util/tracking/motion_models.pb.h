// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/motion_models.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
namespace mediapipe {
class AffineModel;
struct AffineModelDefaultTypeInternal;
extern AffineModelDefaultTypeInternal _AffineModel_default_instance_;
class Homography;
struct HomographyDefaultTypeInternal;
extern HomographyDefaultTypeInternal _Homography_default_instance_;
class LinearSimilarityModel;
struct LinearSimilarityModelDefaultTypeInternal;
extern LinearSimilarityModelDefaultTypeInternal _LinearSimilarityModel_default_instance_;
class MixtureAffine;
struct MixtureAffineDefaultTypeInternal;
extern MixtureAffineDefaultTypeInternal _MixtureAffine_default_instance_;
class MixtureHomography;
struct MixtureHomographyDefaultTypeInternal;
extern MixtureHomographyDefaultTypeInternal _MixtureHomography_default_instance_;
class MixtureLinearSimilarity;
struct MixtureLinearSimilarityDefaultTypeInternal;
extern MixtureLinearSimilarityDefaultTypeInternal _MixtureLinearSimilarity_default_instance_;
class SimilarityModel;
struct SimilarityModelDefaultTypeInternal;
extern SimilarityModelDefaultTypeInternal _SimilarityModel_default_instance_;
class TranslationModel;
struct TranslationModelDefaultTypeInternal;
extern TranslationModelDefaultTypeInternal _TranslationModel_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::AffineModel* Arena::CreateMaybeMessage<::mediapipe::AffineModel>(Arena*);
template<> ::mediapipe::Homography* Arena::CreateMaybeMessage<::mediapipe::Homography>(Arena*);
template<> ::mediapipe::LinearSimilarityModel* Arena::CreateMaybeMessage<::mediapipe::LinearSimilarityModel>(Arena*);
template<> ::mediapipe::MixtureAffine* Arena::CreateMaybeMessage<::mediapipe::MixtureAffine>(Arena*);
template<> ::mediapipe::MixtureHomography* Arena::CreateMaybeMessage<::mediapipe::MixtureHomography>(Arena*);
template<> ::mediapipe::MixtureLinearSimilarity* Arena::CreateMaybeMessage<::mediapipe::MixtureLinearSimilarity>(Arena*);
template<> ::mediapipe::SimilarityModel* Arena::CreateMaybeMessage<::mediapipe::SimilarityModel>(Arena*);
template<> ::mediapipe::TranslationModel* Arena::CreateMaybeMessage<::mediapipe::TranslationModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum MixtureHomography_VariableDOF : int {
  MixtureHomography_VariableDOF_ALL_DOF = 0,
  MixtureHomography_VariableDOF_TRANSLATION_DOF = 1,
  MixtureHomography_VariableDOF_SKEW_ROTATION_DOF = 2,
  MixtureHomography_VariableDOF_CONST_DOF = 3
};
bool MixtureHomography_VariableDOF_IsValid(int value);
constexpr MixtureHomography_VariableDOF MixtureHomography_VariableDOF_VariableDOF_MIN = MixtureHomography_VariableDOF_ALL_DOF;
constexpr MixtureHomography_VariableDOF MixtureHomography_VariableDOF_VariableDOF_MAX = MixtureHomography_VariableDOF_CONST_DOF;
constexpr int MixtureHomography_VariableDOF_VariableDOF_ARRAYSIZE = MixtureHomography_VariableDOF_VariableDOF_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixtureHomography_VariableDOF_descriptor();
template<typename T>
inline const std::string& MixtureHomography_VariableDOF_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MixtureHomography_VariableDOF>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MixtureHomography_VariableDOF_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MixtureHomography_VariableDOF_descriptor(), enum_t_value);
}
inline bool MixtureHomography_VariableDOF_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MixtureHomography_VariableDOF* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MixtureHomography_VariableDOF>(
    MixtureHomography_VariableDOF_descriptor(), name, value);
}
// ===================================================================

class TranslationModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TranslationModel) */ {
 public:
  inline TranslationModel() : TranslationModel(nullptr) {}
  ~TranslationModel() override;
  explicit constexpr TranslationModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationModel(const TranslationModel& from);
  TranslationModel(TranslationModel&& from) noexcept
    : TranslationModel() {
    *this = ::std::move(from);
  }

  inline TranslationModel& operator=(const TranslationModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationModel& operator=(TranslationModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslationModel* internal_default_instance() {
    return reinterpret_cast<const TranslationModel*>(
               &_TranslationModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TranslationModel& a, TranslationModel& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranslationModel* New() const final {
    return CreateMaybeMessage<TranslationModel>(nullptr);
  }

  TranslationModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TranslationModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TranslationModel& from);
  void MergeFrom(const TranslationModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TranslationModel";
  }
  protected:
  explicit TranslationModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxFieldNumber = 1,
    kDyFieldNumber = 2,
  };
  // optional float dx = 1 [default = 0];
  bool has_dx() const;
  private:
  bool _internal_has_dx() const;
  public:
  void clear_dx();
  float dx() const;
  void set_dx(float value);
  private:
  float _internal_dx() const;
  void _internal_set_dx(float value);
  public:

  // optional float dy = 2 [default = 0];
  bool has_dy() const;
  private:
  bool _internal_has_dy() const;
  public:
  void clear_dy();
  float dy() const;
  void set_dy(float value);
  private:
  float _internal_dy() const;
  void _internal_set_dy(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TranslationModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float dx_;
  float dy_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class SimilarityModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.SimilarityModel) */ {
 public:
  inline SimilarityModel() : SimilarityModel(nullptr) {}
  ~SimilarityModel() override;
  explicit constexpr SimilarityModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimilarityModel(const SimilarityModel& from);
  SimilarityModel(SimilarityModel&& from) noexcept
    : SimilarityModel() {
    *this = ::std::move(from);
  }

  inline SimilarityModel& operator=(const SimilarityModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarityModel& operator=(SimilarityModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimilarityModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimilarityModel* internal_default_instance() {
    return reinterpret_cast<const SimilarityModel*>(
               &_SimilarityModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimilarityModel& a, SimilarityModel& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarityModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarityModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimilarityModel* New() const final {
    return CreateMaybeMessage<SimilarityModel>(nullptr);
  }

  SimilarityModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimilarityModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimilarityModel& from);
  void MergeFrom(const SimilarityModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarityModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.SimilarityModel";
  }
  protected:
  explicit SimilarityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxFieldNumber = 1,
    kDyFieldNumber = 2,
    kRotationFieldNumber = 4,
    kScaleFieldNumber = 3,
  };
  // optional float dx = 1 [default = 0];
  bool has_dx() const;
  private:
  bool _internal_has_dx() const;
  public:
  void clear_dx();
  float dx() const;
  void set_dx(float value);
  private:
  float _internal_dx() const;
  void _internal_set_dx(float value);
  public:

  // optional float dy = 2 [default = 0];
  bool has_dy() const;
  private:
  bool _internal_has_dy() const;
  public:
  void clear_dy();
  float dy() const;
  void set_dy(float value);
  private:
  float _internal_dy() const;
  void _internal_set_dy(float value);
  public:

  // optional float rotation = 4 [default = 0];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // optional float scale = 3 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.SimilarityModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float dx_;
  float dy_;
  float rotation_;
  float scale_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class LinearSimilarityModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LinearSimilarityModel) */ {
 public:
  inline LinearSimilarityModel() : LinearSimilarityModel(nullptr) {}
  ~LinearSimilarityModel() override;
  explicit constexpr LinearSimilarityModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinearSimilarityModel(const LinearSimilarityModel& from);
  LinearSimilarityModel(LinearSimilarityModel&& from) noexcept
    : LinearSimilarityModel() {
    *this = ::std::move(from);
  }

  inline LinearSimilarityModel& operator=(const LinearSimilarityModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearSimilarityModel& operator=(LinearSimilarityModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearSimilarityModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearSimilarityModel* internal_default_instance() {
    return reinterpret_cast<const LinearSimilarityModel*>(
               &_LinearSimilarityModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LinearSimilarityModel& a, LinearSimilarityModel& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearSimilarityModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearSimilarityModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearSimilarityModel* New() const final {
    return CreateMaybeMessage<LinearSimilarityModel>(nullptr);
  }

  LinearSimilarityModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearSimilarityModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearSimilarityModel& from);
  void MergeFrom(const LinearSimilarityModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearSimilarityModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.LinearSimilarityModel";
  }
  protected:
  explicit LinearSimilarityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxFieldNumber = 1,
    kDyFieldNumber = 2,
    kBFieldNumber = 4,
    kAFieldNumber = 3,
  };
  // optional float dx = 1 [default = 0];
  bool has_dx() const;
  private:
  bool _internal_has_dx() const;
  public:
  void clear_dx();
  float dx() const;
  void set_dx(float value);
  private:
  float _internal_dx() const;
  void _internal_set_dx(float value);
  public:

  // optional float dy = 2 [default = 0];
  bool has_dy() const;
  private:
  bool _internal_has_dy() const;
  public:
  void clear_dy();
  float dy() const;
  void set_dy(float value);
  private:
  float _internal_dy() const;
  void _internal_set_dy(float value);
  public:

  // optional float b = 4 [default = 0];
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // optional float a = 3 [default = 1];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.LinearSimilarityModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float dx_;
  float dy_;
  float b_;
  float a_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class AffineModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.AffineModel) */ {
 public:
  inline AffineModel() : AffineModel(nullptr) {}
  ~AffineModel() override;
  explicit constexpr AffineModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AffineModel(const AffineModel& from);
  AffineModel(AffineModel&& from) noexcept
    : AffineModel() {
    *this = ::std::move(from);
  }

  inline AffineModel& operator=(const AffineModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AffineModel& operator=(AffineModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AffineModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AffineModel* internal_default_instance() {
    return reinterpret_cast<const AffineModel*>(
               &_AffineModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AffineModel& a, AffineModel& b) {
    a.Swap(&b);
  }
  inline void Swap(AffineModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AffineModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AffineModel* New() const final {
    return CreateMaybeMessage<AffineModel>(nullptr);
  }

  AffineModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AffineModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AffineModel& from);
  void MergeFrom(const AffineModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AffineModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.AffineModel";
  }
  protected:
  explicit AffineModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxFieldNumber = 1,
    kDyFieldNumber = 2,
    kBFieldNumber = 4,
    kCFieldNumber = 5,
    kAFieldNumber = 3,
    kDFieldNumber = 6,
  };
  // optional float dx = 1 [default = 0];
  bool has_dx() const;
  private:
  bool _internal_has_dx() const;
  public:
  void clear_dx();
  float dx() const;
  void set_dx(float value);
  private:
  float _internal_dx() const;
  void _internal_set_dx(float value);
  public:

  // optional float dy = 2 [default = 0];
  bool has_dy() const;
  private:
  bool _internal_has_dy() const;
  public:
  void clear_dy();
  float dy() const;
  void set_dy(float value);
  private:
  float _internal_dy() const;
  void _internal_set_dy(float value);
  public:

  // optional float b = 4 [default = 0];
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // optional float c = 5 [default = 0];
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  float c() const;
  void set_c(float value);
  private:
  float _internal_c() const;
  void _internal_set_c(float value);
  public:

  // optional float a = 3 [default = 1];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // optional float d = 6 [default = 1];
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  float d() const;
  void set_d(float value);
  private:
  float _internal_d() const;
  void _internal_set_d(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.AffineModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float dx_;
  float dy_;
  float b_;
  float c_;
  float a_;
  float d_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class Homography PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Homography) */ {
 public:
  inline Homography() : Homography(nullptr) {}
  ~Homography() override;
  explicit constexpr Homography(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Homography(const Homography& from);
  Homography(Homography&& from) noexcept
    : Homography() {
    *this = ::std::move(from);
  }

  inline Homography& operator=(const Homography& from) {
    CopyFrom(from);
    return *this;
  }
  inline Homography& operator=(Homography&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Homography& default_instance() {
    return *internal_default_instance();
  }
  static inline const Homography* internal_default_instance() {
    return reinterpret_cast<const Homography*>(
               &_Homography_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Homography& a, Homography& b) {
    a.Swap(&b);
  }
  inline void Swap(Homography* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Homography* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Homography* New() const final {
    return CreateMaybeMessage<Homography>(nullptr);
  }

  Homography* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Homography>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Homography& from);
  void MergeFrom(const Homography& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Homography* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.Homography";
  }
  protected:
  explicit Homography(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kH01FieldNumber = 2,
    kH02FieldNumber = 3,
    kH10FieldNumber = 4,
    kH12FieldNumber = 6,
    kH20FieldNumber = 7,
    kH21FieldNumber = 8,
    kH00FieldNumber = 1,
    kH11FieldNumber = 5,
  };
  // optional float h_01 = 2 [default = 0];
  bool has_h_01() const;
  private:
  bool _internal_has_h_01() const;
  public:
  void clear_h_01();
  float h_01() const;
  void set_h_01(float value);
  private:
  float _internal_h_01() const;
  void _internal_set_h_01(float value);
  public:

  // optional float h_02 = 3 [default = 0];
  bool has_h_02() const;
  private:
  bool _internal_has_h_02() const;
  public:
  void clear_h_02();
  float h_02() const;
  void set_h_02(float value);
  private:
  float _internal_h_02() const;
  void _internal_set_h_02(float value);
  public:

  // optional float h_10 = 4 [default = 0];
  bool has_h_10() const;
  private:
  bool _internal_has_h_10() const;
  public:
  void clear_h_10();
  float h_10() const;
  void set_h_10(float value);
  private:
  float _internal_h_10() const;
  void _internal_set_h_10(float value);
  public:

  // optional float h_12 = 6 [default = 0];
  bool has_h_12() const;
  private:
  bool _internal_has_h_12() const;
  public:
  void clear_h_12();
  float h_12() const;
  void set_h_12(float value);
  private:
  float _internal_h_12() const;
  void _internal_set_h_12(float value);
  public:

  // optional float h_20 = 7 [default = 0];
  bool has_h_20() const;
  private:
  bool _internal_has_h_20() const;
  public:
  void clear_h_20();
  float h_20() const;
  void set_h_20(float value);
  private:
  float _internal_h_20() const;
  void _internal_set_h_20(float value);
  public:

  // optional float h_21 = 8 [default = 0];
  bool has_h_21() const;
  private:
  bool _internal_has_h_21() const;
  public:
  void clear_h_21();
  float h_21() const;
  void set_h_21(float value);
  private:
  float _internal_h_21() const;
  void _internal_set_h_21(float value);
  public:

  // optional float h_00 = 1 [default = 1];
  bool has_h_00() const;
  private:
  bool _internal_has_h_00() const;
  public:
  void clear_h_00();
  float h_00() const;
  void set_h_00(float value);
  private:
  float _internal_h_00() const;
  void _internal_set_h_00(float value);
  public:

  // optional float h_11 = 5 [default = 1];
  bool has_h_11() const;
  private:
  bool _internal_has_h_11() const;
  public:
  void clear_h_11();
  float h_11() const;
  void set_h_11(float value);
  private:
  float _internal_h_11() const;
  void _internal_set_h_11(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.Homography)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float h_01_;
  float h_02_;
  float h_10_;
  float h_12_;
  float h_20_;
  float h_21_;
  float h_00_;
  float h_11_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class MixtureLinearSimilarity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MixtureLinearSimilarity) */ {
 public:
  inline MixtureLinearSimilarity() : MixtureLinearSimilarity(nullptr) {}
  ~MixtureLinearSimilarity() override;
  explicit constexpr MixtureLinearSimilarity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MixtureLinearSimilarity(const MixtureLinearSimilarity& from);
  MixtureLinearSimilarity(MixtureLinearSimilarity&& from) noexcept
    : MixtureLinearSimilarity() {
    *this = ::std::move(from);
  }

  inline MixtureLinearSimilarity& operator=(const MixtureLinearSimilarity& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixtureLinearSimilarity& operator=(MixtureLinearSimilarity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MixtureLinearSimilarity& default_instance() {
    return *internal_default_instance();
  }
  static inline const MixtureLinearSimilarity* internal_default_instance() {
    return reinterpret_cast<const MixtureLinearSimilarity*>(
               &_MixtureLinearSimilarity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MixtureLinearSimilarity& a, MixtureLinearSimilarity& b) {
    a.Swap(&b);
  }
  inline void Swap(MixtureLinearSimilarity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixtureLinearSimilarity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixtureLinearSimilarity* New() const final {
    return CreateMaybeMessage<MixtureLinearSimilarity>(nullptr);
  }

  MixtureLinearSimilarity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixtureLinearSimilarity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixtureLinearSimilarity& from);
  void MergeFrom(const MixtureLinearSimilarity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixtureLinearSimilarity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MixtureLinearSimilarity";
  }
  protected:
  explicit MixtureLinearSimilarity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // repeated .mediapipe.LinearSimilarityModel model = 1;
  int model_size() const;
  private:
  int _internal_model_size() const;
  public:
  void clear_model();
  ::mediapipe::LinearSimilarityModel* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LinearSimilarityModel >*
      mutable_model();
  private:
  const ::mediapipe::LinearSimilarityModel& _internal_model(int index) const;
  ::mediapipe::LinearSimilarityModel* _internal_add_model();
  public:
  const ::mediapipe::LinearSimilarityModel& model(int index) const;
  ::mediapipe::LinearSimilarityModel* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LinearSimilarityModel >&
      model() const;

  // @@protoc_insertion_point(class_scope:mediapipe.MixtureLinearSimilarity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LinearSimilarityModel > model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class MixtureAffine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MixtureAffine) */ {
 public:
  inline MixtureAffine() : MixtureAffine(nullptr) {}
  ~MixtureAffine() override;
  explicit constexpr MixtureAffine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MixtureAffine(const MixtureAffine& from);
  MixtureAffine(MixtureAffine&& from) noexcept
    : MixtureAffine() {
    *this = ::std::move(from);
  }

  inline MixtureAffine& operator=(const MixtureAffine& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixtureAffine& operator=(MixtureAffine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MixtureAffine& default_instance() {
    return *internal_default_instance();
  }
  static inline const MixtureAffine* internal_default_instance() {
    return reinterpret_cast<const MixtureAffine*>(
               &_MixtureAffine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MixtureAffine& a, MixtureAffine& b) {
    a.Swap(&b);
  }
  inline void Swap(MixtureAffine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixtureAffine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixtureAffine* New() const final {
    return CreateMaybeMessage<MixtureAffine>(nullptr);
  }

  MixtureAffine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixtureAffine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixtureAffine& from);
  void MergeFrom(const MixtureAffine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixtureAffine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MixtureAffine";
  }
  protected:
  explicit MixtureAffine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // repeated .mediapipe.AffineModel model = 1;
  int model_size() const;
  private:
  int _internal_model_size() const;
  public:
  void clear_model();
  ::mediapipe::AffineModel* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineModel >*
      mutable_model();
  private:
  const ::mediapipe::AffineModel& _internal_model(int index) const;
  ::mediapipe::AffineModel* _internal_add_model();
  public:
  const ::mediapipe::AffineModel& model(int index) const;
  ::mediapipe::AffineModel* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineModel >&
      model() const;

  // @@protoc_insertion_point(class_scope:mediapipe.MixtureAffine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineModel > model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class MixtureHomography PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MixtureHomography) */ {
 public:
  inline MixtureHomography() : MixtureHomography(nullptr) {}
  ~MixtureHomography() override;
  explicit constexpr MixtureHomography(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MixtureHomography(const MixtureHomography& from);
  MixtureHomography(MixtureHomography&& from) noexcept
    : MixtureHomography() {
    *this = ::std::move(from);
  }

  inline MixtureHomography& operator=(const MixtureHomography& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixtureHomography& operator=(MixtureHomography&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MixtureHomography& default_instance() {
    return *internal_default_instance();
  }
  static inline const MixtureHomography* internal_default_instance() {
    return reinterpret_cast<const MixtureHomography*>(
               &_MixtureHomography_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MixtureHomography& a, MixtureHomography& b) {
    a.Swap(&b);
  }
  inline void Swap(MixtureHomography* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixtureHomography* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixtureHomography* New() const final {
    return CreateMaybeMessage<MixtureHomography>(nullptr);
  }

  MixtureHomography* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixtureHomography>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixtureHomography& from);
  void MergeFrom(const MixtureHomography& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixtureHomography* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MixtureHomography";
  }
  protected:
  explicit MixtureHomography(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MixtureHomography_VariableDOF VariableDOF;
  static constexpr VariableDOF ALL_DOF =
    MixtureHomography_VariableDOF_ALL_DOF;
  static constexpr VariableDOF TRANSLATION_DOF =
    MixtureHomography_VariableDOF_TRANSLATION_DOF;
  static constexpr VariableDOF SKEW_ROTATION_DOF =
    MixtureHomography_VariableDOF_SKEW_ROTATION_DOF;
  static constexpr VariableDOF CONST_DOF =
    MixtureHomography_VariableDOF_CONST_DOF;
  static inline bool VariableDOF_IsValid(int value) {
    return MixtureHomography_VariableDOF_IsValid(value);
  }
  static constexpr VariableDOF VariableDOF_MIN =
    MixtureHomography_VariableDOF_VariableDOF_MIN;
  static constexpr VariableDOF VariableDOF_MAX =
    MixtureHomography_VariableDOF_VariableDOF_MAX;
  static constexpr int VariableDOF_ARRAYSIZE =
    MixtureHomography_VariableDOF_VariableDOF_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VariableDOF_descriptor() {
    return MixtureHomography_VariableDOF_descriptor();
  }
  template<typename T>
  static inline const std::string& VariableDOF_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VariableDOF>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VariableDOF_Name.");
    return MixtureHomography_VariableDOF_Name(enum_t_value);
  }
  static inline bool VariableDOF_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VariableDOF* value) {
    return MixtureHomography_VariableDOF_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kDofFieldNumber = 2,
  };
  // repeated .mediapipe.Homography model = 1;
  int model_size() const;
  private:
  int _internal_model_size() const;
  public:
  void clear_model();
  ::mediapipe::Homography* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Homography >*
      mutable_model();
  private:
  const ::mediapipe::Homography& _internal_model(int index) const;
  ::mediapipe::Homography* _internal_add_model();
  public:
  const ::mediapipe::Homography& model(int index) const;
  ::mediapipe::Homography* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Homography >&
      model() const;

  // optional .mediapipe.MixtureHomography.VariableDOF dof = 2 [default = ALL_DOF];
  bool has_dof() const;
  private:
  bool _internal_has_dof() const;
  public:
  void clear_dof();
  ::mediapipe::MixtureHomography_VariableDOF dof() const;
  void set_dof(::mediapipe::MixtureHomography_VariableDOF value);
  private:
  ::mediapipe::MixtureHomography_VariableDOF _internal_dof() const;
  void _internal_set_dof(::mediapipe::MixtureHomography_VariableDOF value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MixtureHomography)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Homography > model_;
  int dof_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TranslationModel

// optional float dx = 1 [default = 0];
inline bool TranslationModel::_internal_has_dx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TranslationModel::has_dx() const {
  return _internal_has_dx();
}
inline void TranslationModel::clear_dx() {
  dx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TranslationModel::_internal_dx() const {
  return dx_;
}
inline float TranslationModel::dx() const {
  // @@protoc_insertion_point(field_get:mediapipe.TranslationModel.dx)
  return _internal_dx();
}
inline void TranslationModel::_internal_set_dx(float value) {
  _has_bits_[0] |= 0x00000001u;
  dx_ = value;
}
inline void TranslationModel::set_dx(float value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:mediapipe.TranslationModel.dx)
}

// optional float dy = 2 [default = 0];
inline bool TranslationModel::_internal_has_dy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TranslationModel::has_dy() const {
  return _internal_has_dy();
}
inline void TranslationModel::clear_dy() {
  dy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TranslationModel::_internal_dy() const {
  return dy_;
}
inline float TranslationModel::dy() const {
  // @@protoc_insertion_point(field_get:mediapipe.TranslationModel.dy)
  return _internal_dy();
}
inline void TranslationModel::_internal_set_dy(float value) {
  _has_bits_[0] |= 0x00000002u;
  dy_ = value;
}
inline void TranslationModel::set_dy(float value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:mediapipe.TranslationModel.dy)
}

// -------------------------------------------------------------------

// SimilarityModel

// optional float dx = 1 [default = 0];
inline bool SimilarityModel::_internal_has_dx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimilarityModel::has_dx() const {
  return _internal_has_dx();
}
inline void SimilarityModel::clear_dx() {
  dx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SimilarityModel::_internal_dx() const {
  return dx_;
}
inline float SimilarityModel::dx() const {
  // @@protoc_insertion_point(field_get:mediapipe.SimilarityModel.dx)
  return _internal_dx();
}
inline void SimilarityModel::_internal_set_dx(float value) {
  _has_bits_[0] |= 0x00000001u;
  dx_ = value;
}
inline void SimilarityModel::set_dx(float value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:mediapipe.SimilarityModel.dx)
}

// optional float dy = 2 [default = 0];
inline bool SimilarityModel::_internal_has_dy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SimilarityModel::has_dy() const {
  return _internal_has_dy();
}
inline void SimilarityModel::clear_dy() {
  dy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SimilarityModel::_internal_dy() const {
  return dy_;
}
inline float SimilarityModel::dy() const {
  // @@protoc_insertion_point(field_get:mediapipe.SimilarityModel.dy)
  return _internal_dy();
}
inline void SimilarityModel::_internal_set_dy(float value) {
  _has_bits_[0] |= 0x00000002u;
  dy_ = value;
}
inline void SimilarityModel::set_dy(float value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:mediapipe.SimilarityModel.dy)
}

// optional float scale = 3 [default = 1];
inline bool SimilarityModel::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SimilarityModel::has_scale() const {
  return _internal_has_scale();
}
inline void SimilarityModel::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SimilarityModel::_internal_scale() const {
  return scale_;
}
inline float SimilarityModel::scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.SimilarityModel.scale)
  return _internal_scale();
}
inline void SimilarityModel::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  scale_ = value;
}
inline void SimilarityModel::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.SimilarityModel.scale)
}

// optional float rotation = 4 [default = 0];
inline bool SimilarityModel::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimilarityModel::has_rotation() const {
  return _internal_has_rotation();
}
inline void SimilarityModel::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SimilarityModel::_internal_rotation() const {
  return rotation_;
}
inline float SimilarityModel::rotation() const {
  // @@protoc_insertion_point(field_get:mediapipe.SimilarityModel.rotation)
  return _internal_rotation();
}
inline void SimilarityModel::_internal_set_rotation(float value) {
  _has_bits_[0] |= 0x00000004u;
  rotation_ = value;
}
inline void SimilarityModel::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:mediapipe.SimilarityModel.rotation)
}

// -------------------------------------------------------------------

// LinearSimilarityModel

// optional float dx = 1 [default = 0];
inline bool LinearSimilarityModel::_internal_has_dx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinearSimilarityModel::has_dx() const {
  return _internal_has_dx();
}
inline void LinearSimilarityModel::clear_dx() {
  dx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float LinearSimilarityModel::_internal_dx() const {
  return dx_;
}
inline float LinearSimilarityModel::dx() const {
  // @@protoc_insertion_point(field_get:mediapipe.LinearSimilarityModel.dx)
  return _internal_dx();
}
inline void LinearSimilarityModel::_internal_set_dx(float value) {
  _has_bits_[0] |= 0x00000001u;
  dx_ = value;
}
inline void LinearSimilarityModel::set_dx(float value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:mediapipe.LinearSimilarityModel.dx)
}

// optional float dy = 2 [default = 0];
inline bool LinearSimilarityModel::_internal_has_dy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinearSimilarityModel::has_dy() const {
  return _internal_has_dy();
}
inline void LinearSimilarityModel::clear_dy() {
  dy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LinearSimilarityModel::_internal_dy() const {
  return dy_;
}
inline float LinearSimilarityModel::dy() const {
  // @@protoc_insertion_point(field_get:mediapipe.LinearSimilarityModel.dy)
  return _internal_dy();
}
inline void LinearSimilarityModel::_internal_set_dy(float value) {
  _has_bits_[0] |= 0x00000002u;
  dy_ = value;
}
inline void LinearSimilarityModel::set_dy(float value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:mediapipe.LinearSimilarityModel.dy)
}

// optional float a = 3 [default = 1];
inline bool LinearSimilarityModel::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LinearSimilarityModel::has_a() const {
  return _internal_has_a();
}
inline void LinearSimilarityModel::clear_a() {
  a_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LinearSimilarityModel::_internal_a() const {
  return a_;
}
inline float LinearSimilarityModel::a() const {
  // @@protoc_insertion_point(field_get:mediapipe.LinearSimilarityModel.a)
  return _internal_a();
}
inline void LinearSimilarityModel::_internal_set_a(float value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void LinearSimilarityModel::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:mediapipe.LinearSimilarityModel.a)
}

// optional float b = 4 [default = 0];
inline bool LinearSimilarityModel::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinearSimilarityModel::has_b() const {
  return _internal_has_b();
}
inline void LinearSimilarityModel::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LinearSimilarityModel::_internal_b() const {
  return b_;
}
inline float LinearSimilarityModel::b() const {
  // @@protoc_insertion_point(field_get:mediapipe.LinearSimilarityModel.b)
  return _internal_b();
}
inline void LinearSimilarityModel::_internal_set_b(float value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void LinearSimilarityModel::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:mediapipe.LinearSimilarityModel.b)
}

// -------------------------------------------------------------------

// AffineModel

// optional float dx = 1 [default = 0];
inline bool AffineModel::_internal_has_dx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AffineModel::has_dx() const {
  return _internal_has_dx();
}
inline void AffineModel::clear_dx() {
  dx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float AffineModel::_internal_dx() const {
  return dx_;
}
inline float AffineModel::dx() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineModel.dx)
  return _internal_dx();
}
inline void AffineModel::_internal_set_dx(float value) {
  _has_bits_[0] |= 0x00000001u;
  dx_ = value;
}
inline void AffineModel::set_dx(float value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineModel.dx)
}

// optional float dy = 2 [default = 0];
inline bool AffineModel::_internal_has_dy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AffineModel::has_dy() const {
  return _internal_has_dy();
}
inline void AffineModel::clear_dy() {
  dy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float AffineModel::_internal_dy() const {
  return dy_;
}
inline float AffineModel::dy() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineModel.dy)
  return _internal_dy();
}
inline void AffineModel::_internal_set_dy(float value) {
  _has_bits_[0] |= 0x00000002u;
  dy_ = value;
}
inline void AffineModel::set_dy(float value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineModel.dy)
}

// optional float a = 3 [default = 1];
inline bool AffineModel::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AffineModel::has_a() const {
  return _internal_has_a();
}
inline void AffineModel::clear_a() {
  a_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline float AffineModel::_internal_a() const {
  return a_;
}
inline float AffineModel::a() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineModel.a)
  return _internal_a();
}
inline void AffineModel::_internal_set_a(float value) {
  _has_bits_[0] |= 0x00000010u;
  a_ = value;
}
inline void AffineModel::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineModel.a)
}

// optional float b = 4 [default = 0];
inline bool AffineModel::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AffineModel::has_b() const {
  return _internal_has_b();
}
inline void AffineModel::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float AffineModel::_internal_b() const {
  return b_;
}
inline float AffineModel::b() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineModel.b)
  return _internal_b();
}
inline void AffineModel::_internal_set_b(float value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void AffineModel::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineModel.b)
}

// optional float c = 5 [default = 0];
inline bool AffineModel::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AffineModel::has_c() const {
  return _internal_has_c();
}
inline void AffineModel::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float AffineModel::_internal_c() const {
  return c_;
}
inline float AffineModel::c() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineModel.c)
  return _internal_c();
}
inline void AffineModel::_internal_set_c(float value) {
  _has_bits_[0] |= 0x00000008u;
  c_ = value;
}
inline void AffineModel::set_c(float value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineModel.c)
}

// optional float d = 6 [default = 1];
inline bool AffineModel::_internal_has_d() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AffineModel::has_d() const {
  return _internal_has_d();
}
inline void AffineModel::clear_d() {
  d_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AffineModel::_internal_d() const {
  return d_;
}
inline float AffineModel::d() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineModel.d)
  return _internal_d();
}
inline void AffineModel::_internal_set_d(float value) {
  _has_bits_[0] |= 0x00000020u;
  d_ = value;
}
inline void AffineModel::set_d(float value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineModel.d)
}

// -------------------------------------------------------------------

// Homography

// optional float h_00 = 1 [default = 1];
inline bool Homography::_internal_has_h_00() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Homography::has_h_00() const {
  return _internal_has_h_00();
}
inline void Homography::clear_h_00() {
  h_00_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Homography::_internal_h_00() const {
  return h_00_;
}
inline float Homography::h_00() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_00)
  return _internal_h_00();
}
inline void Homography::_internal_set_h_00(float value) {
  _has_bits_[0] |= 0x00000040u;
  h_00_ = value;
}
inline void Homography::set_h_00(float value) {
  _internal_set_h_00(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_00)
}

// optional float h_01 = 2 [default = 0];
inline bool Homography::_internal_has_h_01() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Homography::has_h_01() const {
  return _internal_has_h_01();
}
inline void Homography::clear_h_01() {
  h_01_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Homography::_internal_h_01() const {
  return h_01_;
}
inline float Homography::h_01() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_01)
  return _internal_h_01();
}
inline void Homography::_internal_set_h_01(float value) {
  _has_bits_[0] |= 0x00000001u;
  h_01_ = value;
}
inline void Homography::set_h_01(float value) {
  _internal_set_h_01(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_01)
}

// optional float h_02 = 3 [default = 0];
inline bool Homography::_internal_has_h_02() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Homography::has_h_02() const {
  return _internal_has_h_02();
}
inline void Homography::clear_h_02() {
  h_02_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Homography::_internal_h_02() const {
  return h_02_;
}
inline float Homography::h_02() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_02)
  return _internal_h_02();
}
inline void Homography::_internal_set_h_02(float value) {
  _has_bits_[0] |= 0x00000002u;
  h_02_ = value;
}
inline void Homography::set_h_02(float value) {
  _internal_set_h_02(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_02)
}

// optional float h_10 = 4 [default = 0];
inline bool Homography::_internal_has_h_10() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Homography::has_h_10() const {
  return _internal_has_h_10();
}
inline void Homography::clear_h_10() {
  h_10_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Homography::_internal_h_10() const {
  return h_10_;
}
inline float Homography::h_10() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_10)
  return _internal_h_10();
}
inline void Homography::_internal_set_h_10(float value) {
  _has_bits_[0] |= 0x00000004u;
  h_10_ = value;
}
inline void Homography::set_h_10(float value) {
  _internal_set_h_10(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_10)
}

// optional float h_11 = 5 [default = 1];
inline bool Homography::_internal_has_h_11() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Homography::has_h_11() const {
  return _internal_has_h_11();
}
inline void Homography::clear_h_11() {
  h_11_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Homography::_internal_h_11() const {
  return h_11_;
}
inline float Homography::h_11() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_11)
  return _internal_h_11();
}
inline void Homography::_internal_set_h_11(float value) {
  _has_bits_[0] |= 0x00000080u;
  h_11_ = value;
}
inline void Homography::set_h_11(float value) {
  _internal_set_h_11(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_11)
}

// optional float h_12 = 6 [default = 0];
inline bool Homography::_internal_has_h_12() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Homography::has_h_12() const {
  return _internal_has_h_12();
}
inline void Homography::clear_h_12() {
  h_12_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Homography::_internal_h_12() const {
  return h_12_;
}
inline float Homography::h_12() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_12)
  return _internal_h_12();
}
inline void Homography::_internal_set_h_12(float value) {
  _has_bits_[0] |= 0x00000008u;
  h_12_ = value;
}
inline void Homography::set_h_12(float value) {
  _internal_set_h_12(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_12)
}

// optional float h_20 = 7 [default = 0];
inline bool Homography::_internal_has_h_20() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Homography::has_h_20() const {
  return _internal_has_h_20();
}
inline void Homography::clear_h_20() {
  h_20_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Homography::_internal_h_20() const {
  return h_20_;
}
inline float Homography::h_20() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_20)
  return _internal_h_20();
}
inline void Homography::_internal_set_h_20(float value) {
  _has_bits_[0] |= 0x00000010u;
  h_20_ = value;
}
inline void Homography::set_h_20(float value) {
  _internal_set_h_20(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_20)
}

// optional float h_21 = 8 [default = 0];
inline bool Homography::_internal_has_h_21() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Homography::has_h_21() const {
  return _internal_has_h_21();
}
inline void Homography::clear_h_21() {
  h_21_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Homography::_internal_h_21() const {
  return h_21_;
}
inline float Homography::h_21() const {
  // @@protoc_insertion_point(field_get:mediapipe.Homography.h_21)
  return _internal_h_21();
}
inline void Homography::_internal_set_h_21(float value) {
  _has_bits_[0] |= 0x00000020u;
  h_21_ = value;
}
inline void Homography::set_h_21(float value) {
  _internal_set_h_21(value);
  // @@protoc_insertion_point(field_set:mediapipe.Homography.h_21)
}

// -------------------------------------------------------------------

// MixtureLinearSimilarity

// repeated .mediapipe.LinearSimilarityModel model = 1;
inline int MixtureLinearSimilarity::_internal_model_size() const {
  return model_.size();
}
inline int MixtureLinearSimilarity::model_size() const {
  return _internal_model_size();
}
inline void MixtureLinearSimilarity::clear_model() {
  model_.Clear();
}
inline ::mediapipe::LinearSimilarityModel* MixtureLinearSimilarity::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.MixtureLinearSimilarity.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LinearSimilarityModel >*
MixtureLinearSimilarity::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MixtureLinearSimilarity.model)
  return &model_;
}
inline const ::mediapipe::LinearSimilarityModel& MixtureLinearSimilarity::_internal_model(int index) const {
  return model_.Get(index);
}
inline const ::mediapipe::LinearSimilarityModel& MixtureLinearSimilarity::model(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MixtureLinearSimilarity.model)
  return _internal_model(index);
}
inline ::mediapipe::LinearSimilarityModel* MixtureLinearSimilarity::_internal_add_model() {
  return model_.Add();
}
inline ::mediapipe::LinearSimilarityModel* MixtureLinearSimilarity::add_model() {
  // @@protoc_insertion_point(field_add:mediapipe.MixtureLinearSimilarity.model)
  return _internal_add_model();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::LinearSimilarityModel >&
MixtureLinearSimilarity::model() const {
  // @@protoc_insertion_point(field_list:mediapipe.MixtureLinearSimilarity.model)
  return model_;
}

// -------------------------------------------------------------------

// MixtureAffine

// repeated .mediapipe.AffineModel model = 1;
inline int MixtureAffine::_internal_model_size() const {
  return model_.size();
}
inline int MixtureAffine::model_size() const {
  return _internal_model_size();
}
inline void MixtureAffine::clear_model() {
  model_.Clear();
}
inline ::mediapipe::AffineModel* MixtureAffine::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.MixtureAffine.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineModel >*
MixtureAffine::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MixtureAffine.model)
  return &model_;
}
inline const ::mediapipe::AffineModel& MixtureAffine::_internal_model(int index) const {
  return model_.Get(index);
}
inline const ::mediapipe::AffineModel& MixtureAffine::model(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MixtureAffine.model)
  return _internal_model(index);
}
inline ::mediapipe::AffineModel* MixtureAffine::_internal_add_model() {
  return model_.Add();
}
inline ::mediapipe::AffineModel* MixtureAffine::add_model() {
  // @@protoc_insertion_point(field_add:mediapipe.MixtureAffine.model)
  return _internal_add_model();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineModel >&
MixtureAffine::model() const {
  // @@protoc_insertion_point(field_list:mediapipe.MixtureAffine.model)
  return model_;
}

// -------------------------------------------------------------------

// MixtureHomography

// repeated .mediapipe.Homography model = 1;
inline int MixtureHomography::_internal_model_size() const {
  return model_.size();
}
inline int MixtureHomography::model_size() const {
  return _internal_model_size();
}
inline void MixtureHomography::clear_model() {
  model_.Clear();
}
inline ::mediapipe::Homography* MixtureHomography::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.MixtureHomography.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Homography >*
MixtureHomography::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MixtureHomography.model)
  return &model_;
}
inline const ::mediapipe::Homography& MixtureHomography::_internal_model(int index) const {
  return model_.Get(index);
}
inline const ::mediapipe::Homography& MixtureHomography::model(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MixtureHomography.model)
  return _internal_model(index);
}
inline ::mediapipe::Homography* MixtureHomography::_internal_add_model() {
  return model_.Add();
}
inline ::mediapipe::Homography* MixtureHomography::add_model() {
  // @@protoc_insertion_point(field_add:mediapipe.MixtureHomography.model)
  return _internal_add_model();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::Homography >&
MixtureHomography::model() const {
  // @@protoc_insertion_point(field_list:mediapipe.MixtureHomography.model)
  return model_;
}

// optional .mediapipe.MixtureHomography.VariableDOF dof = 2 [default = ALL_DOF];
inline bool MixtureHomography::_internal_has_dof() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MixtureHomography::has_dof() const {
  return _internal_has_dof();
}
inline void MixtureHomography::clear_dof() {
  dof_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::mediapipe::MixtureHomography_VariableDOF MixtureHomography::_internal_dof() const {
  return static_cast< ::mediapipe::MixtureHomography_VariableDOF >(dof_);
}
inline ::mediapipe::MixtureHomography_VariableDOF MixtureHomography::dof() const {
  // @@protoc_insertion_point(field_get:mediapipe.MixtureHomography.dof)
  return _internal_dof();
}
inline void MixtureHomography::_internal_set_dof(::mediapipe::MixtureHomography_VariableDOF value) {
  assert(::mediapipe::MixtureHomography_VariableDOF_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  dof_ = value;
}
inline void MixtureHomography::set_dof(::mediapipe::MixtureHomography_VariableDOF value) {
  _internal_set_dof(value);
  // @@protoc_insertion_point(field_set:mediapipe.MixtureHomography.dof)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::MixtureHomography_VariableDOF> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::MixtureHomography_VariableDOF>() {
  return ::mediapipe::MixtureHomography_VariableDOF_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto
