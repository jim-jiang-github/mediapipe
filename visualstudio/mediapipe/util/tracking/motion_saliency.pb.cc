// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/motion_saliency.proto

#include "mediapipe/util/tracking/motion_saliency.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr MotionSaliencyOptions::MotionSaliencyOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scale_weight_by_flow_magnitude_(false)
  , use_only_foreground_regions_(false)
  , bound_left_(0.3f)
  , bound_bottom_(0.3f)
  , saliency_weight_(20)
  , min_features_(5)
  , selection_frame_radius_(5)
  , selection_support_distance_(0.2f)
  , selection_minimum_support_(4)
  , min_irls_mode_weight_(10)
  , num_top_irls_modes_(3)
  , mode_band_width_(0.1f)
  , filtering_sigma_space_(0.05f)
  , filtering_sigma_time_(5)
  , bound_right_(0.3f)
  , bound_top_(0.3f){}
struct MotionSaliencyOptionsDefaultTypeInternal {
  constexpr MotionSaliencyOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionSaliencyOptionsDefaultTypeInternal() {}
  union {
    MotionSaliencyOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionSaliencyOptionsDefaultTypeInternal _MotionSaliencyOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, bound_left_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, bound_bottom_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, bound_right_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, bound_top_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, saliency_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, scale_weight_by_flow_magnitude_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, min_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, use_only_foreground_regions_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, min_irls_mode_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, num_top_irls_modes_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, mode_band_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, selection_frame_radius_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, selection_support_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, selection_minimum_support_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, filtering_sigma_space_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionSaliencyOptions, filtering_sigma_time_),
  2,
  3,
  14,
  15,
  4,
  0,
  5,
  1,
  9,
  10,
  11,
  6,
  7,
  8,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::mediapipe::MotionSaliencyOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionSaliencyOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-mediapipe/util/tracking/motion_salienc"
  "y.proto\022\tmediapipe\"\245\004\n\025MotionSaliencyOpt"
  "ions\022\027\n\nbound_left\030\001 \001(\002:\0030.3\022\031\n\014bound_b"
  "ottom\030\002 \001(\002:\0030.3\022\030\n\013bound_right\030\017 \001(\002:\0030"
  ".3\022\026\n\tbound_top\030\020 \001(\002:\0030.3\022\033\n\017saliency_w"
  "eight\030\003 \001(\002:\00220\022-\n\036scale_weight_by_flow_"
  "magnitude\030\010 \001(\010:\005false\022\027\n\014min_features\030\004"
  " \001(\005:\0015\022*\n\033use_only_foreground_regions\030\t"
  " \001(\010:\005false\022 \n\024min_irls_mode_weight\030\n \001("
  "\002:\00210\022\035\n\022num_top_irls_modes\030\013 \001(\005:\0013\022\034\n\017"
  "mode_band_width\030\014 \001(\002:\0030.1\022!\n\026selection_"
  "frame_radius\030\005 \001(\005:\0015\022\'\n\032selection_suppo"
  "rt_distance\030\006 \001(\002:\0030.2\022$\n\031selection_mini"
  "mum_support\030\007 \001(\005:\0014\022#\n\025filtering_sigma_"
  "space\030\r \001(\002:\0040.05\022\037\n\024filtering_sigma_tim"
  "e\030\016 \001(\002:\0015"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto = {
  false, false, 610, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto, "mediapipe/util/tracking/motion_saliency.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto);
namespace mediapipe {

// ===================================================================

class MotionSaliencyOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionSaliencyOptions>()._has_bits_);
  static void set_has_bound_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bound_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bound_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bound_top(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_saliency_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scale_weight_by_flow_magnitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_features(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_only_foreground_regions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_irls_mode_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_top_irls_modes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mode_band_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_selection_frame_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selection_support_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_selection_minimum_support(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_filtering_sigma_space(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_filtering_sigma_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

MotionSaliencyOptions::MotionSaliencyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionSaliencyOptions)
}
MotionSaliencyOptions::MotionSaliencyOptions(const MotionSaliencyOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scale_weight_by_flow_magnitude_, &from.scale_weight_by_flow_magnitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_top_) -
    reinterpret_cast<char*>(&scale_weight_by_flow_magnitude_)) + sizeof(bound_top_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionSaliencyOptions)
}

void MotionSaliencyOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scale_weight_by_flow_magnitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_only_foreground_regions_) -
    reinterpret_cast<char*>(&scale_weight_by_flow_magnitude_)) + sizeof(use_only_foreground_regions_));
bound_left_ = 0.3f;
bound_bottom_ = 0.3f;
saliency_weight_ = 20;
min_features_ = 5;
selection_frame_radius_ = 5;
selection_support_distance_ = 0.2f;
selection_minimum_support_ = 4;
min_irls_mode_weight_ = 10;
num_top_irls_modes_ = 3;
mode_band_width_ = 0.1f;
filtering_sigma_space_ = 0.05f;
filtering_sigma_time_ = 5;
bound_right_ = 0.3f;
bound_top_ = 0.3f;
}

MotionSaliencyOptions::~MotionSaliencyOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionSaliencyOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionSaliencyOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MotionSaliencyOptions::ArenaDtor(void* object) {
  MotionSaliencyOptions* _this = reinterpret_cast< MotionSaliencyOptions* >(object);
  (void)_this;
}
void MotionSaliencyOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionSaliencyOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionSaliencyOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionSaliencyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scale_weight_by_flow_magnitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_only_foreground_regions_) -
      reinterpret_cast<char*>(&scale_weight_by_flow_magnitude_)) + sizeof(use_only_foreground_regions_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    bound_left_ = 0.3f;
    bound_bottom_ = 0.3f;
    saliency_weight_ = 20;
    min_features_ = 5;
    selection_frame_radius_ = 5;
    selection_support_distance_ = 0.2f;
  }
  if (cached_has_bits & 0x0000ff00u) {
    selection_minimum_support_ = 4;
    min_irls_mode_weight_ = 10;
    num_top_irls_modes_ = 3;
    mode_band_width_ = 0.1f;
    filtering_sigma_space_ = 0.05f;
    filtering_sigma_time_ = 5;
    bound_right_ = 0.3f;
    bound_top_ = 0.3f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionSaliencyOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float bound_left = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_bound_left(&has_bits);
          bound_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bound_bottom = 2 [default = 0.3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_bound_bottom(&has_bits);
          bound_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float saliency_weight = 3 [default = 20];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_saliency_weight(&has_bits);
          saliency_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 min_features = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_features(&has_bits);
          min_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 selection_frame_radius = 5 [default = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_selection_frame_radius(&has_bits);
          selection_frame_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float selection_support_distance = 6 [default = 0.2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_selection_support_distance(&has_bits);
          selection_support_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 selection_minimum_support = 7 [default = 4];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_selection_minimum_support(&has_bits);
          selection_minimum_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scale_weight_by_flow_magnitude = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_scale_weight_by_flow_magnitude(&has_bits);
          scale_weight_by_flow_magnitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_only_foreground_regions = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_use_only_foreground_regions(&has_bits);
          use_only_foreground_regions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_irls_mode_weight = 10 [default = 10];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_min_irls_mode_weight(&has_bits);
          min_irls_mode_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 num_top_irls_modes = 11 [default = 3];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_num_top_irls_modes(&has_bits);
          num_top_irls_modes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mode_band_width = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_mode_band_width(&has_bits);
          mode_band_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float filtering_sigma_space = 13 [default = 0.05];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_filtering_sigma_space(&has_bits);
          filtering_sigma_space_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float filtering_sigma_time = 14 [default = 5];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_filtering_sigma_time(&has_bits);
          filtering_sigma_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bound_right = 15 [default = 0.3];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_bound_right(&has_bits);
          bound_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bound_top = 16 [default = 0.3];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_bound_top(&has_bits);
          bound_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionSaliencyOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionSaliencyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float bound_left = 1 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_bound_left(), target);
  }

  // optional float bound_bottom = 2 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bound_bottom(), target);
  }

  // optional float saliency_weight = 3 [default = 20];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_saliency_weight(), target);
  }

  // optional int32 min_features = 4 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_min_features(), target);
  }

  // optional int32 selection_frame_radius = 5 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_selection_frame_radius(), target);
  }

  // optional float selection_support_distance = 6 [default = 0.2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_selection_support_distance(), target);
  }

  // optional int32 selection_minimum_support = 7 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_selection_minimum_support(), target);
  }

  // optional bool scale_weight_by_flow_magnitude = 8 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_scale_weight_by_flow_magnitude(), target);
  }

  // optional bool use_only_foreground_regions = 9 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_use_only_foreground_regions(), target);
  }

  // optional float min_irls_mode_weight = 10 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_min_irls_mode_weight(), target);
  }

  // optional int32 num_top_irls_modes = 11 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_num_top_irls_modes(), target);
  }

  // optional float mode_band_width = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_mode_band_width(), target);
  }

  // optional float filtering_sigma_space = 13 [default = 0.05];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_filtering_sigma_space(), target);
  }

  // optional float filtering_sigma_time = 14 [default = 5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_filtering_sigma_time(), target);
  }

  // optional float bound_right = 15 [default = 0.3];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_bound_right(), target);
  }

  // optional float bound_top = 16 [default = 0.3];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_bound_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionSaliencyOptions)
  return target;
}

size_t MotionSaliencyOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionSaliencyOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool scale_weight_by_flow_magnitude = 8 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool use_only_foreground_regions = 9 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float bound_left = 1 [default = 0.3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float bound_bottom = 2 [default = 0.3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float saliency_weight = 3 [default = 20];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 min_features = 4 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_features());
    }

    // optional int32 selection_frame_radius = 5 [default = 5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_selection_frame_radius());
    }

    // optional float selection_support_distance = 6 [default = 0.2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 selection_minimum_support = 7 [default = 4];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_selection_minimum_support());
    }

    // optional float min_irls_mode_weight = 10 [default = 10];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 num_top_irls_modes = 11 [default = 3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_top_irls_modes());
    }

    // optional float mode_band_width = 12 [default = 0.1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float filtering_sigma_space = 13 [default = 0.05];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float filtering_sigma_time = 14 [default = 5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float bound_right = 15 [default = 0.3];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float bound_top = 16 [default = 0.3];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionSaliencyOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionSaliencyOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionSaliencyOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionSaliencyOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionSaliencyOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionSaliencyOptions)
    MergeFrom(*source);
  }
}

void MotionSaliencyOptions::MergeFrom(const MotionSaliencyOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionSaliencyOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      scale_weight_by_flow_magnitude_ = from.scale_weight_by_flow_magnitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_only_foreground_regions_ = from.use_only_foreground_regions_;
    }
    if (cached_has_bits & 0x00000004u) {
      bound_left_ = from.bound_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      bound_bottom_ = from.bound_bottom_;
    }
    if (cached_has_bits & 0x00000010u) {
      saliency_weight_ = from.saliency_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_features_ = from.min_features_;
    }
    if (cached_has_bits & 0x00000040u) {
      selection_frame_radius_ = from.selection_frame_radius_;
    }
    if (cached_has_bits & 0x00000080u) {
      selection_support_distance_ = from.selection_support_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      selection_minimum_support_ = from.selection_minimum_support_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_irls_mode_weight_ = from.min_irls_mode_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_top_irls_modes_ = from.num_top_irls_modes_;
    }
    if (cached_has_bits & 0x00000800u) {
      mode_band_width_ = from.mode_band_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      filtering_sigma_space_ = from.filtering_sigma_space_;
    }
    if (cached_has_bits & 0x00002000u) {
      filtering_sigma_time_ = from.filtering_sigma_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      bound_right_ = from.bound_right_;
    }
    if (cached_has_bits & 0x00008000u) {
      bound_top_ = from.bound_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionSaliencyOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionSaliencyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionSaliencyOptions::CopyFrom(const MotionSaliencyOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionSaliencyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionSaliencyOptions::IsInitialized() const {
  return true;
}

void MotionSaliencyOptions::InternalSwap(MotionSaliencyOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionSaliencyOptions, use_only_foreground_regions_)
      + sizeof(MotionSaliencyOptions::use_only_foreground_regions_)
      - PROTOBUF_FIELD_OFFSET(MotionSaliencyOptions, scale_weight_by_flow_magnitude_)>(
          reinterpret_cast<char*>(&scale_weight_by_flow_magnitude_),
          reinterpret_cast<char*>(&other->scale_weight_by_flow_magnitude_));
  swap(bound_left_, other->bound_left_);
  swap(bound_bottom_, other->bound_bottom_);
  swap(saliency_weight_, other->saliency_weight_);
  swap(min_features_, other->min_features_);
  swap(selection_frame_radius_, other->selection_frame_radius_);
  swap(selection_support_distance_, other->selection_support_distance_);
  swap(selection_minimum_support_, other->selection_minimum_support_);
  swap(min_irls_mode_weight_, other->min_irls_mode_weight_);
  swap(num_top_irls_modes_, other->num_top_irls_modes_);
  swap(mode_band_width_, other->mode_band_width_);
  swap(filtering_sigma_space_, other->filtering_sigma_space_);
  swap(filtering_sigma_time_, other->filtering_sigma_time_);
  swap(bound_right_, other->bound_right_);
  swap(bound_top_, other->bound_top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionSaliencyOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::MotionSaliencyOptions* Arena::CreateMaybeMessage< ::mediapipe::MotionSaliencyOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionSaliencyOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
