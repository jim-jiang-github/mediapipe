// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/motion_saliency.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto;
namespace mediapipe {
class MotionSaliencyOptions;
struct MotionSaliencyOptionsDefaultTypeInternal;
extern MotionSaliencyOptionsDefaultTypeInternal _MotionSaliencyOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::MotionSaliencyOptions* Arena::CreateMaybeMessage<::mediapipe::MotionSaliencyOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class MotionSaliencyOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionSaliencyOptions) */ {
 public:
  inline MotionSaliencyOptions() : MotionSaliencyOptions(nullptr) {}
  ~MotionSaliencyOptions() override;
  explicit constexpr MotionSaliencyOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionSaliencyOptions(const MotionSaliencyOptions& from);
  MotionSaliencyOptions(MotionSaliencyOptions&& from) noexcept
    : MotionSaliencyOptions() {
    *this = ::std::move(from);
  }

  inline MotionSaliencyOptions& operator=(const MotionSaliencyOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionSaliencyOptions& operator=(MotionSaliencyOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionSaliencyOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionSaliencyOptions* internal_default_instance() {
    return reinterpret_cast<const MotionSaliencyOptions*>(
               &_MotionSaliencyOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MotionSaliencyOptions& a, MotionSaliencyOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionSaliencyOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionSaliencyOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionSaliencyOptions* New() const final {
    return CreateMaybeMessage<MotionSaliencyOptions>(nullptr);
  }

  MotionSaliencyOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionSaliencyOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionSaliencyOptions& from);
  void MergeFrom(const MotionSaliencyOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionSaliencyOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionSaliencyOptions";
  }
  protected:
  explicit MotionSaliencyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleWeightByFlowMagnitudeFieldNumber = 8,
    kUseOnlyForegroundRegionsFieldNumber = 9,
    kBoundLeftFieldNumber = 1,
    kBoundBottomFieldNumber = 2,
    kSaliencyWeightFieldNumber = 3,
    kMinFeaturesFieldNumber = 4,
    kSelectionFrameRadiusFieldNumber = 5,
    kSelectionSupportDistanceFieldNumber = 6,
    kSelectionMinimumSupportFieldNumber = 7,
    kMinIrlsModeWeightFieldNumber = 10,
    kNumTopIrlsModesFieldNumber = 11,
    kModeBandWidthFieldNumber = 12,
    kFilteringSigmaSpaceFieldNumber = 13,
    kFilteringSigmaTimeFieldNumber = 14,
    kBoundRightFieldNumber = 15,
    kBoundTopFieldNumber = 16,
  };
  // optional bool scale_weight_by_flow_magnitude = 8 [default = false];
  bool has_scale_weight_by_flow_magnitude() const;
  private:
  bool _internal_has_scale_weight_by_flow_magnitude() const;
  public:
  void clear_scale_weight_by_flow_magnitude();
  bool scale_weight_by_flow_magnitude() const;
  void set_scale_weight_by_flow_magnitude(bool value);
  private:
  bool _internal_scale_weight_by_flow_magnitude() const;
  void _internal_set_scale_weight_by_flow_magnitude(bool value);
  public:

  // optional bool use_only_foreground_regions = 9 [default = false];
  bool has_use_only_foreground_regions() const;
  private:
  bool _internal_has_use_only_foreground_regions() const;
  public:
  void clear_use_only_foreground_regions();
  bool use_only_foreground_regions() const;
  void set_use_only_foreground_regions(bool value);
  private:
  bool _internal_use_only_foreground_regions() const;
  void _internal_set_use_only_foreground_regions(bool value);
  public:

  // optional float bound_left = 1 [default = 0.3];
  bool has_bound_left() const;
  private:
  bool _internal_has_bound_left() const;
  public:
  void clear_bound_left();
  float bound_left() const;
  void set_bound_left(float value);
  private:
  float _internal_bound_left() const;
  void _internal_set_bound_left(float value);
  public:

  // optional float bound_bottom = 2 [default = 0.3];
  bool has_bound_bottom() const;
  private:
  bool _internal_has_bound_bottom() const;
  public:
  void clear_bound_bottom();
  float bound_bottom() const;
  void set_bound_bottom(float value);
  private:
  float _internal_bound_bottom() const;
  void _internal_set_bound_bottom(float value);
  public:

  // optional float saliency_weight = 3 [default = 20];
  bool has_saliency_weight() const;
  private:
  bool _internal_has_saliency_weight() const;
  public:
  void clear_saliency_weight();
  float saliency_weight() const;
  void set_saliency_weight(float value);
  private:
  float _internal_saliency_weight() const;
  void _internal_set_saliency_weight(float value);
  public:

  // optional int32 min_features = 4 [default = 5];
  bool has_min_features() const;
  private:
  bool _internal_has_min_features() const;
  public:
  void clear_min_features();
  ::PROTOBUF_NAMESPACE_ID::int32 min_features() const;
  void set_min_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_features() const;
  void _internal_set_min_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 selection_frame_radius = 5 [default = 5];
  bool has_selection_frame_radius() const;
  private:
  bool _internal_has_selection_frame_radius() const;
  public:
  void clear_selection_frame_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 selection_frame_radius() const;
  void set_selection_frame_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selection_frame_radius() const;
  void _internal_set_selection_frame_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float selection_support_distance = 6 [default = 0.2];
  bool has_selection_support_distance() const;
  private:
  bool _internal_has_selection_support_distance() const;
  public:
  void clear_selection_support_distance();
  float selection_support_distance() const;
  void set_selection_support_distance(float value);
  private:
  float _internal_selection_support_distance() const;
  void _internal_set_selection_support_distance(float value);
  public:

  // optional int32 selection_minimum_support = 7 [default = 4];
  bool has_selection_minimum_support() const;
  private:
  bool _internal_has_selection_minimum_support() const;
  public:
  void clear_selection_minimum_support();
  ::PROTOBUF_NAMESPACE_ID::int32 selection_minimum_support() const;
  void set_selection_minimum_support(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selection_minimum_support() const;
  void _internal_set_selection_minimum_support(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float min_irls_mode_weight = 10 [default = 10];
  bool has_min_irls_mode_weight() const;
  private:
  bool _internal_has_min_irls_mode_weight() const;
  public:
  void clear_min_irls_mode_weight();
  float min_irls_mode_weight() const;
  void set_min_irls_mode_weight(float value);
  private:
  float _internal_min_irls_mode_weight() const;
  void _internal_set_min_irls_mode_weight(float value);
  public:

  // optional int32 num_top_irls_modes = 11 [default = 3];
  bool has_num_top_irls_modes() const;
  private:
  bool _internal_has_num_top_irls_modes() const;
  public:
  void clear_num_top_irls_modes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_top_irls_modes() const;
  void set_num_top_irls_modes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_top_irls_modes() const;
  void _internal_set_num_top_irls_modes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float mode_band_width = 12 [default = 0.1];
  bool has_mode_band_width() const;
  private:
  bool _internal_has_mode_band_width() const;
  public:
  void clear_mode_band_width();
  float mode_band_width() const;
  void set_mode_band_width(float value);
  private:
  float _internal_mode_band_width() const;
  void _internal_set_mode_band_width(float value);
  public:

  // optional float filtering_sigma_space = 13 [default = 0.05];
  bool has_filtering_sigma_space() const;
  private:
  bool _internal_has_filtering_sigma_space() const;
  public:
  void clear_filtering_sigma_space();
  float filtering_sigma_space() const;
  void set_filtering_sigma_space(float value);
  private:
  float _internal_filtering_sigma_space() const;
  void _internal_set_filtering_sigma_space(float value);
  public:

  // optional float filtering_sigma_time = 14 [default = 5];
  bool has_filtering_sigma_time() const;
  private:
  bool _internal_has_filtering_sigma_time() const;
  public:
  void clear_filtering_sigma_time();
  float filtering_sigma_time() const;
  void set_filtering_sigma_time(float value);
  private:
  float _internal_filtering_sigma_time() const;
  void _internal_set_filtering_sigma_time(float value);
  public:

  // optional float bound_right = 15 [default = 0.3];
  bool has_bound_right() const;
  private:
  bool _internal_has_bound_right() const;
  public:
  void clear_bound_right();
  float bound_right() const;
  void set_bound_right(float value);
  private:
  float _internal_bound_right() const;
  void _internal_set_bound_right(float value);
  public:

  // optional float bound_top = 16 [default = 0.3];
  bool has_bound_top() const;
  private:
  bool _internal_has_bound_top() const;
  public:
  void clear_bound_top();
  float bound_top() const;
  void set_bound_top(float value);
  private:
  float _internal_bound_top() const;
  void _internal_set_bound_top(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MotionSaliencyOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool scale_weight_by_flow_magnitude_;
  bool use_only_foreground_regions_;
  float bound_left_;
  float bound_bottom_;
  float saliency_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_features_;
  ::PROTOBUF_NAMESPACE_ID::int32 selection_frame_radius_;
  float selection_support_distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 selection_minimum_support_;
  float min_irls_mode_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_top_irls_modes_;
  float mode_band_width_;
  float filtering_sigma_space_;
  float filtering_sigma_time_;
  float bound_right_;
  float bound_top_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionSaliencyOptions

// optional float bound_left = 1 [default = 0.3];
inline bool MotionSaliencyOptions::_internal_has_bound_left() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_bound_left() const {
  return _internal_has_bound_left();
}
inline void MotionSaliencyOptions::clear_bound_left() {
  bound_left_ = 0.3f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MotionSaliencyOptions::_internal_bound_left() const {
  return bound_left_;
}
inline float MotionSaliencyOptions::bound_left() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.bound_left)
  return _internal_bound_left();
}
inline void MotionSaliencyOptions::_internal_set_bound_left(float value) {
  _has_bits_[0] |= 0x00000004u;
  bound_left_ = value;
}
inline void MotionSaliencyOptions::set_bound_left(float value) {
  _internal_set_bound_left(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.bound_left)
}

// optional float bound_bottom = 2 [default = 0.3];
inline bool MotionSaliencyOptions::_internal_has_bound_bottom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_bound_bottom() const {
  return _internal_has_bound_bottom();
}
inline void MotionSaliencyOptions::clear_bound_bottom() {
  bound_bottom_ = 0.3f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MotionSaliencyOptions::_internal_bound_bottom() const {
  return bound_bottom_;
}
inline float MotionSaliencyOptions::bound_bottom() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.bound_bottom)
  return _internal_bound_bottom();
}
inline void MotionSaliencyOptions::_internal_set_bound_bottom(float value) {
  _has_bits_[0] |= 0x00000008u;
  bound_bottom_ = value;
}
inline void MotionSaliencyOptions::set_bound_bottom(float value) {
  _internal_set_bound_bottom(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.bound_bottom)
}

// optional float bound_right = 15 [default = 0.3];
inline bool MotionSaliencyOptions::_internal_has_bound_right() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_bound_right() const {
  return _internal_has_bound_right();
}
inline void MotionSaliencyOptions::clear_bound_right() {
  bound_right_ = 0.3f;
  _has_bits_[0] &= ~0x00004000u;
}
inline float MotionSaliencyOptions::_internal_bound_right() const {
  return bound_right_;
}
inline float MotionSaliencyOptions::bound_right() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.bound_right)
  return _internal_bound_right();
}
inline void MotionSaliencyOptions::_internal_set_bound_right(float value) {
  _has_bits_[0] |= 0x00004000u;
  bound_right_ = value;
}
inline void MotionSaliencyOptions::set_bound_right(float value) {
  _internal_set_bound_right(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.bound_right)
}

// optional float bound_top = 16 [default = 0.3];
inline bool MotionSaliencyOptions::_internal_has_bound_top() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_bound_top() const {
  return _internal_has_bound_top();
}
inline void MotionSaliencyOptions::clear_bound_top() {
  bound_top_ = 0.3f;
  _has_bits_[0] &= ~0x00008000u;
}
inline float MotionSaliencyOptions::_internal_bound_top() const {
  return bound_top_;
}
inline float MotionSaliencyOptions::bound_top() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.bound_top)
  return _internal_bound_top();
}
inline void MotionSaliencyOptions::_internal_set_bound_top(float value) {
  _has_bits_[0] |= 0x00008000u;
  bound_top_ = value;
}
inline void MotionSaliencyOptions::set_bound_top(float value) {
  _internal_set_bound_top(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.bound_top)
}

// optional float saliency_weight = 3 [default = 20];
inline bool MotionSaliencyOptions::_internal_has_saliency_weight() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_saliency_weight() const {
  return _internal_has_saliency_weight();
}
inline void MotionSaliencyOptions::clear_saliency_weight() {
  saliency_weight_ = 20;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MotionSaliencyOptions::_internal_saliency_weight() const {
  return saliency_weight_;
}
inline float MotionSaliencyOptions::saliency_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.saliency_weight)
  return _internal_saliency_weight();
}
inline void MotionSaliencyOptions::_internal_set_saliency_weight(float value) {
  _has_bits_[0] |= 0x00000010u;
  saliency_weight_ = value;
}
inline void MotionSaliencyOptions::set_saliency_weight(float value) {
  _internal_set_saliency_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.saliency_weight)
}

// optional bool scale_weight_by_flow_magnitude = 8 [default = false];
inline bool MotionSaliencyOptions::_internal_has_scale_weight_by_flow_magnitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_scale_weight_by_flow_magnitude() const {
  return _internal_has_scale_weight_by_flow_magnitude();
}
inline void MotionSaliencyOptions::clear_scale_weight_by_flow_magnitude() {
  scale_weight_by_flow_magnitude_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MotionSaliencyOptions::_internal_scale_weight_by_flow_magnitude() const {
  return scale_weight_by_flow_magnitude_;
}
inline bool MotionSaliencyOptions::scale_weight_by_flow_magnitude() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.scale_weight_by_flow_magnitude)
  return _internal_scale_weight_by_flow_magnitude();
}
inline void MotionSaliencyOptions::_internal_set_scale_weight_by_flow_magnitude(bool value) {
  _has_bits_[0] |= 0x00000001u;
  scale_weight_by_flow_magnitude_ = value;
}
inline void MotionSaliencyOptions::set_scale_weight_by_flow_magnitude(bool value) {
  _internal_set_scale_weight_by_flow_magnitude(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.scale_weight_by_flow_magnitude)
}

// optional int32 min_features = 4 [default = 5];
inline bool MotionSaliencyOptions::_internal_has_min_features() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_min_features() const {
  return _internal_has_min_features();
}
inline void MotionSaliencyOptions::clear_min_features() {
  min_features_ = 5;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::_internal_min_features() const {
  return min_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::min_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.min_features)
  return _internal_min_features();
}
inline void MotionSaliencyOptions::_internal_set_min_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  min_features_ = value;
}
inline void MotionSaliencyOptions::set_min_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.min_features)
}

// optional bool use_only_foreground_regions = 9 [default = false];
inline bool MotionSaliencyOptions::_internal_has_use_only_foreground_regions() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_use_only_foreground_regions() const {
  return _internal_has_use_only_foreground_regions();
}
inline void MotionSaliencyOptions::clear_use_only_foreground_regions() {
  use_only_foreground_regions_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MotionSaliencyOptions::_internal_use_only_foreground_regions() const {
  return use_only_foreground_regions_;
}
inline bool MotionSaliencyOptions::use_only_foreground_regions() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.use_only_foreground_regions)
  return _internal_use_only_foreground_regions();
}
inline void MotionSaliencyOptions::_internal_set_use_only_foreground_regions(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_only_foreground_regions_ = value;
}
inline void MotionSaliencyOptions::set_use_only_foreground_regions(bool value) {
  _internal_set_use_only_foreground_regions(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.use_only_foreground_regions)
}

// optional float min_irls_mode_weight = 10 [default = 10];
inline bool MotionSaliencyOptions::_internal_has_min_irls_mode_weight() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_min_irls_mode_weight() const {
  return _internal_has_min_irls_mode_weight();
}
inline void MotionSaliencyOptions::clear_min_irls_mode_weight() {
  min_irls_mode_weight_ = 10;
  _has_bits_[0] &= ~0x00000200u;
}
inline float MotionSaliencyOptions::_internal_min_irls_mode_weight() const {
  return min_irls_mode_weight_;
}
inline float MotionSaliencyOptions::min_irls_mode_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.min_irls_mode_weight)
  return _internal_min_irls_mode_weight();
}
inline void MotionSaliencyOptions::_internal_set_min_irls_mode_weight(float value) {
  _has_bits_[0] |= 0x00000200u;
  min_irls_mode_weight_ = value;
}
inline void MotionSaliencyOptions::set_min_irls_mode_weight(float value) {
  _internal_set_min_irls_mode_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.min_irls_mode_weight)
}

// optional int32 num_top_irls_modes = 11 [default = 3];
inline bool MotionSaliencyOptions::_internal_has_num_top_irls_modes() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_num_top_irls_modes() const {
  return _internal_has_num_top_irls_modes();
}
inline void MotionSaliencyOptions::clear_num_top_irls_modes() {
  num_top_irls_modes_ = 3;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::_internal_num_top_irls_modes() const {
  return num_top_irls_modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::num_top_irls_modes() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.num_top_irls_modes)
  return _internal_num_top_irls_modes();
}
inline void MotionSaliencyOptions::_internal_set_num_top_irls_modes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  num_top_irls_modes_ = value;
}
inline void MotionSaliencyOptions::set_num_top_irls_modes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_top_irls_modes(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.num_top_irls_modes)
}

// optional float mode_band_width = 12 [default = 0.1];
inline bool MotionSaliencyOptions::_internal_has_mode_band_width() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_mode_band_width() const {
  return _internal_has_mode_band_width();
}
inline void MotionSaliencyOptions::clear_mode_band_width() {
  mode_band_width_ = 0.1f;
  _has_bits_[0] &= ~0x00000800u;
}
inline float MotionSaliencyOptions::_internal_mode_band_width() const {
  return mode_band_width_;
}
inline float MotionSaliencyOptions::mode_band_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.mode_band_width)
  return _internal_mode_band_width();
}
inline void MotionSaliencyOptions::_internal_set_mode_band_width(float value) {
  _has_bits_[0] |= 0x00000800u;
  mode_band_width_ = value;
}
inline void MotionSaliencyOptions::set_mode_band_width(float value) {
  _internal_set_mode_band_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.mode_band_width)
}

// optional int32 selection_frame_radius = 5 [default = 5];
inline bool MotionSaliencyOptions::_internal_has_selection_frame_radius() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_selection_frame_radius() const {
  return _internal_has_selection_frame_radius();
}
inline void MotionSaliencyOptions::clear_selection_frame_radius() {
  selection_frame_radius_ = 5;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::_internal_selection_frame_radius() const {
  return selection_frame_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::selection_frame_radius() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.selection_frame_radius)
  return _internal_selection_frame_radius();
}
inline void MotionSaliencyOptions::_internal_set_selection_frame_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  selection_frame_radius_ = value;
}
inline void MotionSaliencyOptions::set_selection_frame_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selection_frame_radius(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.selection_frame_radius)
}

// optional float selection_support_distance = 6 [default = 0.2];
inline bool MotionSaliencyOptions::_internal_has_selection_support_distance() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_selection_support_distance() const {
  return _internal_has_selection_support_distance();
}
inline void MotionSaliencyOptions::clear_selection_support_distance() {
  selection_support_distance_ = 0.2f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float MotionSaliencyOptions::_internal_selection_support_distance() const {
  return selection_support_distance_;
}
inline float MotionSaliencyOptions::selection_support_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.selection_support_distance)
  return _internal_selection_support_distance();
}
inline void MotionSaliencyOptions::_internal_set_selection_support_distance(float value) {
  _has_bits_[0] |= 0x00000080u;
  selection_support_distance_ = value;
}
inline void MotionSaliencyOptions::set_selection_support_distance(float value) {
  _internal_set_selection_support_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.selection_support_distance)
}

// optional int32 selection_minimum_support = 7 [default = 4];
inline bool MotionSaliencyOptions::_internal_has_selection_minimum_support() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_selection_minimum_support() const {
  return _internal_has_selection_minimum_support();
}
inline void MotionSaliencyOptions::clear_selection_minimum_support() {
  selection_minimum_support_ = 4;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::_internal_selection_minimum_support() const {
  return selection_minimum_support_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionSaliencyOptions::selection_minimum_support() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.selection_minimum_support)
  return _internal_selection_minimum_support();
}
inline void MotionSaliencyOptions::_internal_set_selection_minimum_support(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  selection_minimum_support_ = value;
}
inline void MotionSaliencyOptions::set_selection_minimum_support(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selection_minimum_support(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.selection_minimum_support)
}

// optional float filtering_sigma_space = 13 [default = 0.05];
inline bool MotionSaliencyOptions::_internal_has_filtering_sigma_space() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_filtering_sigma_space() const {
  return _internal_has_filtering_sigma_space();
}
inline void MotionSaliencyOptions::clear_filtering_sigma_space() {
  filtering_sigma_space_ = 0.05f;
  _has_bits_[0] &= ~0x00001000u;
}
inline float MotionSaliencyOptions::_internal_filtering_sigma_space() const {
  return filtering_sigma_space_;
}
inline float MotionSaliencyOptions::filtering_sigma_space() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.filtering_sigma_space)
  return _internal_filtering_sigma_space();
}
inline void MotionSaliencyOptions::_internal_set_filtering_sigma_space(float value) {
  _has_bits_[0] |= 0x00001000u;
  filtering_sigma_space_ = value;
}
inline void MotionSaliencyOptions::set_filtering_sigma_space(float value) {
  _internal_set_filtering_sigma_space(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.filtering_sigma_space)
}

// optional float filtering_sigma_time = 14 [default = 5];
inline bool MotionSaliencyOptions::_internal_has_filtering_sigma_time() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MotionSaliencyOptions::has_filtering_sigma_time() const {
  return _internal_has_filtering_sigma_time();
}
inline void MotionSaliencyOptions::clear_filtering_sigma_time() {
  filtering_sigma_time_ = 5;
  _has_bits_[0] &= ~0x00002000u;
}
inline float MotionSaliencyOptions::_internal_filtering_sigma_time() const {
  return filtering_sigma_time_;
}
inline float MotionSaliencyOptions::filtering_sigma_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionSaliencyOptions.filtering_sigma_time)
  return _internal_filtering_sigma_time();
}
inline void MotionSaliencyOptions::_internal_set_filtering_sigma_time(float value) {
  _has_bits_[0] |= 0x00002000u;
  filtering_sigma_time_ = value;
}
inline void MotionSaliencyOptions::set_filtering_sigma_time(float value) {
  _internal_set_filtering_sigma_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionSaliencyOptions.filtering_sigma_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fmotion_5fsaliency_2eproto
