// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/push_pull_filtering.proto

#include "mediapipe/util/tracking/push_pull_filtering.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr PushPullOptions::PushPullOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : push_bilateral_scale_(0.9f)
  , bilateral_sigma_(20)
  , pull_propagation_scale_(8)
  , push_propagation_scale_(8)
  , pull_bilateral_scale_(0.7f){}
struct PushPullOptionsDefaultTypeInternal {
  constexpr PushPullOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushPullOptionsDefaultTypeInternal() {}
  union {
    PushPullOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushPullOptionsDefaultTypeInternal _PushPullOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, bilateral_sigma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, pull_propagation_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, push_propagation_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, pull_bilateral_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PushPullOptions, push_bilateral_scale_),
  1,
  2,
  3,
  4,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::mediapipe::PushPullOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_PushPullOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1mediapipe/util/tracking/push_pull_filt"
  "ering.proto\022\tmediapipe\"\300\001\n\017PushPullOptio"
  "ns\022\033\n\017bilateral_sigma\030\001 \001(\002:\00220\022!\n\026pull_"
  "propagation_scale\030\003 \001(\002:\0018\022!\n\026push_propa"
  "gation_scale\030\004 \001(\002:\0018\022!\n\024pull_bilateral_"
  "scale\030\005 \001(\002:\0030.7\022!\n\024push_bilateral_scale"
  "\030\006 \001(\002:\0030.9*\004\010\002\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto = {
  false, false, 257, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto, "mediapipe/util/tracking/push_pull_filtering.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto);
namespace mediapipe {

// ===================================================================

class PushPullOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PushPullOptions>()._has_bits_);
  static void set_has_bilateral_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pull_propagation_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_push_propagation_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pull_bilateral_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_push_bilateral_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PushPullOptions::PushPullOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.PushPullOptions)
}
PushPullOptions::PushPullOptions(const PushPullOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&push_bilateral_scale_, &from.push_bilateral_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&pull_bilateral_scale_) -
    reinterpret_cast<char*>(&push_bilateral_scale_)) + sizeof(pull_bilateral_scale_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.PushPullOptions)
}

void PushPullOptions::SharedCtor() {
push_bilateral_scale_ = 0.9f;
bilateral_sigma_ = 20;
pull_propagation_scale_ = 8;
push_propagation_scale_ = 8;
pull_bilateral_scale_ = 0.7f;
}

PushPullOptions::~PushPullOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.PushPullOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PushPullOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PushPullOptions::ArenaDtor(void* object) {
  PushPullOptions* _this = reinterpret_cast< PushPullOptions* >(object);
  (void)_this;
}
void PushPullOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushPullOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushPullOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.PushPullOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    push_bilateral_scale_ = 0.9f;
    bilateral_sigma_ = 20;
    pull_propagation_scale_ = 8;
    push_propagation_scale_ = 8;
    pull_bilateral_scale_ = 0.7f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushPullOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float bilateral_sigma = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_bilateral_sigma(&has_bits);
          bilateral_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pull_propagation_scale = 3 [default = 8];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_pull_propagation_scale(&has_bits);
          pull_propagation_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float push_propagation_scale = 4 [default = 8];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_push_propagation_scale(&has_bits);
          push_propagation_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pull_bilateral_scale = 5 [default = 0.7];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pull_bilateral_scale(&has_bits);
          pull_bilateral_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float push_bilateral_scale = 6 [default = 0.9];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_push_bilateral_scale(&has_bits);
          push_bilateral_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((16u <= tag && tag < 24u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushPullOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.PushPullOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float bilateral_sigma = 1 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_bilateral_sigma(), target);
  }

  // Extension range [2, 3)
  target = _extensions_._InternalSerialize(
      2, 3, target, stream);

  // optional float pull_propagation_scale = 3 [default = 8];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pull_propagation_scale(), target);
  }

  // optional float push_propagation_scale = 4 [default = 8];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_push_propagation_scale(), target);
  }

  // optional float pull_bilateral_scale = 5 [default = 0.7];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pull_bilateral_scale(), target);
  }

  // optional float push_bilateral_scale = 6 [default = 0.9];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_push_bilateral_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.PushPullOptions)
  return target;
}

size_t PushPullOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.PushPullOptions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float push_bilateral_scale = 6 [default = 0.9];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float bilateral_sigma = 1 [default = 20];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pull_propagation_scale = 3 [default = 8];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float push_propagation_scale = 4 [default = 8];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pull_bilateral_scale = 5 [default = 0.7];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushPullOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.PushPullOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PushPullOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushPullOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.PushPullOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.PushPullOptions)
    MergeFrom(*source);
  }
}

void PushPullOptions::MergeFrom(const PushPullOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.PushPullOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      push_bilateral_scale_ = from.push_bilateral_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      bilateral_sigma_ = from.bilateral_sigma_;
    }
    if (cached_has_bits & 0x00000004u) {
      pull_propagation_scale_ = from.pull_propagation_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      push_propagation_scale_ = from.push_propagation_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      pull_bilateral_scale_ = from.pull_bilateral_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PushPullOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.PushPullOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushPullOptions::CopyFrom(const PushPullOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.PushPullOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushPullOptions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void PushPullOptions::InternalSwap(PushPullOptions* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(push_bilateral_scale_, other->push_bilateral_scale_);
  swap(bilateral_sigma_, other->bilateral_sigma_);
  swap(pull_propagation_scale_, other->pull_propagation_scale_);
  swap(push_propagation_scale_, other->push_propagation_scale_);
  swap(pull_bilateral_scale_, other->pull_bilateral_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushPullOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fpush_5fpull_5ffiltering_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::PushPullOptions* Arena::CreateMaybeMessage< ::mediapipe::PushPullOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::PushPullOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
