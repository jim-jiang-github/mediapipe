// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/region_flow.proto

#include "mediapipe/util/tracking/region_flow.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr PatchDescriptor::PatchDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct PatchDescriptorDefaultTypeInternal {
  constexpr PatchDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchDescriptorDefaultTypeInternal() {}
  union {
    PatchDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchDescriptorDefaultTypeInternal _PatchDescriptor_default_instance_;
constexpr BinaryFeatureDescriptor::BinaryFeatureDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BinaryFeatureDescriptorDefaultTypeInternal {
  constexpr BinaryFeatureDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryFeatureDescriptorDefaultTypeInternal() {}
  union {
    BinaryFeatureDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryFeatureDescriptorDefaultTypeInternal _BinaryFeatureDescriptor_default_instance_;
constexpr TemporalIRLSSmoothing::TemporalIRLSSmoothing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_sum_(0)
  , value_sum_(0){}
struct TemporalIRLSSmoothingDefaultTypeInternal {
  constexpr TemporalIRLSSmoothingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TemporalIRLSSmoothingDefaultTypeInternal() {}
  union {
    TemporalIRLSSmoothing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TemporalIRLSSmoothingDefaultTypeInternal _TemporalIRLSSmoothing_default_instance_;
constexpr RegionFlowFeature::RegionFlowFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , feature_descriptor_(nullptr)
  , feature_match_descriptor_(nullptr)
  , internal_irls_(nullptr)
  , binary_feature_descriptor_(nullptr)
  , x_(0)
  , y_(0)
  , dx_(0)
  , dy_(0)
  , tracking_error_(0)
  , corner_response_(0)
  , flags_(0)
  , feature_id_(0)
  , octave_(0)
  , irls_weight_(1)
  , track_id_(-1){}
struct RegionFlowFeatureDefaultTypeInternal {
  constexpr RegionFlowFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowFeatureDefaultTypeInternal() {}
  union {
    RegionFlowFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowFeatureDefaultTypeInternal _RegionFlowFeature_default_instance_;
constexpr RegionFlowFrame_RegionFlow::RegionFlowFrame_RegionFlow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_()
  , region_id_(0)
  , centroid_x_(0)
  , centroid_y_(0)
  , flow_x_(0)
  , flow_y_(0){}
struct RegionFlowFrame_RegionFlowDefaultTypeInternal {
  constexpr RegionFlowFrame_RegionFlowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowFrame_RegionFlowDefaultTypeInternal() {}
  union {
    RegionFlowFrame_RegionFlow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowFrame_RegionFlowDefaultTypeInternal _RegionFlowFrame_RegionFlow_default_instance_;
constexpr RegionFlowFrame_BlockDescriptor::RegionFlowFrame_BlockDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_width_(0)
  , block_height_(0)
  , num_blocks_x_(0)
  , num_blocks_y_(0){}
struct RegionFlowFrame_BlockDescriptorDefaultTypeInternal {
  constexpr RegionFlowFrame_BlockDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowFrame_BlockDescriptorDefaultTypeInternal() {}
  union {
    RegionFlowFrame_BlockDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowFrame_BlockDescriptorDefaultTypeInternal _RegionFlowFrame_BlockDescriptor_default_instance_;
constexpr RegionFlowFrame::RegionFlowFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : region_flow_()
  , block_descriptor_(nullptr)
  , num_total_features_(0)
  , unstable_frame_(false)
  , blur_score_(0)
  , frame_width_(0)
  , frame_height_(0){}
struct RegionFlowFrameDefaultTypeInternal {
  constexpr RegionFlowFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowFrameDefaultTypeInternal() {}
  union {
    RegionFlowFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowFrameDefaultTypeInternal _RegionFlowFrame_default_instance_;
constexpr RegionFlowFeatureList::RegionFlowFeatureList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_()
  , actively_discarded_tracked_ids_()
  , frame_width_(0)
  , frame_height_(0)
  , distance_from_border_(0)
  , blur_score_(0)
  , unstable_(false)
  , long_tracks_(false)
  , is_duplicated_(false)
  , frac_long_features_rejected_(0)
  , timestamp_usec_(PROTOBUF_LONGLONG(0))
  , match_frame_(0)
  , visual_consistency_(-1){}
struct RegionFlowFeatureListDefaultTypeInternal {
  constexpr RegionFlowFeatureListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowFeatureListDefaultTypeInternal() {}
  union {
    RegionFlowFeatureList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowFeatureListDefaultTypeInternal _RegionFlowFeatureList_default_instance_;
constexpr SalientPoint::SalientPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : norm_point_x_(0)
  , norm_point_y_(0)
  , norm_major_(0)
  , norm_minor_(0)
  , angle_(0)
  , left_(0.3f)
  , bottom_(0.3f)
  , weight_(15)
  , right_(0.3f)
  , top_(0.3f)
  , type_(1)
{}
struct SalientPointDefaultTypeInternal {
  constexpr SalientPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SalientPointDefaultTypeInternal() {}
  union {
    SalientPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SalientPointDefaultTypeInternal _SalientPoint_default_instance_;
constexpr SalientPointFrame::SalientPointFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_(){}
struct SalientPointFrameDefaultTypeInternal {
  constexpr SalientPointFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SalientPointFrameDefaultTypeInternal() {}
  union {
    SalientPointFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SalientPointFrameDefaultTypeInternal _SalientPointFrame_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::PatchDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::PatchDescriptor, data_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BinaryFeatureDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::BinaryFeatureDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::BinaryFeatureDescriptor, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TemporalIRLSSmoothing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TemporalIRLSSmoothing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TemporalIRLSSmoothing, weight_sum_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TemporalIRLSSmoothing, value_sum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, dy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, track_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, tracking_error_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, irls_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, corner_response_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, feature_descriptor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, feature_match_descriptor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, internal_irls_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, label_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, flags_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, feature_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, octave_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeature, binary_feature_descriptor_),
  5,
  6,
  7,
  8,
  15,
  9,
  14,
  10,
  1,
  2,
  3,
  0,
  11,
  12,
  13,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, region_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, centroid_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, centroid_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, flow_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, flow_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_RegionFlow, feature_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_BlockDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_BlockDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_BlockDescriptor, block_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_BlockDescriptor, block_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_BlockDescriptor, num_blocks_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame_BlockDescriptor, num_blocks_y_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, region_flow_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, num_total_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, unstable_frame_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, blur_score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, frame_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, frame_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFrame, block_descriptor_),
  ~0u,
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, feature_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, frame_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, frame_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, unstable_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, distance_from_border_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, blur_score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, long_tracks_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, frac_long_features_rejected_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, visual_consistency_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, timestamp_usec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, match_frame_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, is_duplicated_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowFeatureList, actively_discarded_tracked_ids_),
  ~0u,
  0,
  1,
  4,
  2,
  3,
  5,
  7,
  10,
  8,
  9,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, norm_point_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, norm_point_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, left_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, bottom_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, right_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, top_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, norm_major_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, norm_minor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPoint, angle_),
  0,
  1,
  10,
  5,
  6,
  8,
  9,
  7,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPointFrame, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPointFrame, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::SalientPointFrame, point_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mediapipe::PatchDescriptor)},
  { 6, 12, sizeof(::mediapipe::BinaryFeatureDescriptor)},
  { 13, 20, sizeof(::mediapipe::TemporalIRLSSmoothing)},
  { 22, 43, sizeof(::mediapipe::RegionFlowFeature)},
  { 59, 70, sizeof(::mediapipe::RegionFlowFrame_RegionFlow)},
  { 76, 85, sizeof(::mediapipe::RegionFlowFrame_BlockDescriptor)},
  { 89, 101, sizeof(::mediapipe::RegionFlowFrame)},
  { 108, 126, sizeof(::mediapipe::RegionFlowFeatureList)},
  { 139, 155, sizeof(::mediapipe::SalientPoint)},
  { 166, -1, sizeof(::mediapipe::SalientPointFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_PatchDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_BinaryFeatureDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TemporalIRLSSmoothing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowFrame_RegionFlow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowFrame_BlockDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowFeatureList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_SalientPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_SalientPointFrame_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)mediapipe/util/tracking/region_flow.pr"
  "oto\022\tmediapipe\"\037\n\017PatchDescriptor\022\014\n\004dat"
  "a\030\001 \003(\002\"\'\n\027BinaryFeatureDescriptor\022\014\n\004da"
  "ta\030\001 \001(\014\"D\n\025TemporalIRLSSmoothing\022\025\n\nwei"
  "ght_sum\030\001 \001(\002:\0010\022\024\n\tvalue_sum\030\002 \001(\002:\0010\"\231"
  "\004\n\021RegionFlowFeature\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030"
  "\002 \001(\002:\0010\022\r\n\002dx\030\003 \001(\002:\0010\022\r\n\002dy\030\004 \001(\002:\0010\022\024"
  "\n\010track_id\030\r \001(\005:\002-1\022\031\n\016tracking_error\030\005"
  " \001(\002:\0010\022\026\n\013irls_weight\030\006 \001(\002:\0011\022\032\n\017corne"
  "r_response\030\013 \001(\002:\0010\0226\n\022feature_descripto"
  "r\030\007 \001(\0132\032.mediapipe.PatchDescriptor\022<\n\030f"
  "eature_match_descriptor\030\010 \001(\0132\032.mediapip"
  "e.PatchDescriptor\0227\n\rinternal_irls\030\n \001(\013"
  "2 .mediapipe.TemporalIRLSSmoothing\022\r\n\005la"
  "bel\030\016 \001(\t\022\r\n\005flags\030\017 \001(\005\022\022\n\nfeature_id\030\020"
  " \001(\005\022\021\n\006octave\030\021 \001(\005:\0010\022E\n\031binary_featur"
  "e_descriptor\030\022 \001(\0132\".mediapipe.BinaryFea"
  "tureDescriptor\"\036\n\005Flags\022\025\n\021FLAG_BROKEN_T"
  "RACK\020\001*\004\010\t\020\n*\004\010\014\020\r\"\275\004\n\017RegionFlowFrame\022:"
  "\n\013region_flow\030\001 \003(\0132%.mediapipe.RegionFl"
  "owFrame.RegionFlow\022\035\n\022num_total_features"
  "\030\002 \001(\005:\0010\022\035\n\016unstable_frame\030\004 \001(\010:\005false"
  "\022\022\n\nblur_score\030\007 \001(\002\022\023\n\013frame_width\030\010 \001("
  "\005\022\024\n\014frame_height\030\t \001(\005\022D\n\020block_descrip"
  "tor\030\n \001(\0132*.mediapipe.RegionFlowFrame.Bl"
  "ockDescriptor\032\250\001\n\nRegionFlow\022\021\n\tregion_i"
  "d\030\001 \002(\005\022\025\n\ncentroid_x\030\002 \001(\002:\0010\022\025\n\ncentro"
  "id_y\030\003 \001(\002:\0010\022\021\n\006flow_x\030\004 \001(\002:\0010\022\021\n\006flow"
  "_y\030\005 \001(\002:\0010\022-\n\007feature\030\007 \003(\0132\034.mediapipe"
  ".RegionFlowFeature*\004\010\006\020\007\032n\n\017BlockDescrip"
  "tor\022\023\n\013block_width\030\001 \001(\005\022\024\n\014block_height"
  "\030\002 \001(\005\022\027\n\014num_blocks_x\030\003 \001(\005:\0010\022\027\n\014num_b"
  "locks_y\030\004 \001(\005:\0010*\004\010\003\020\004*\004\010\005\020\006*\004\010\006\020\007\"\234\003\n\025R"
  "egionFlowFeatureList\022-\n\007feature\030\001 \003(\0132\034."
  "mediapipe.RegionFlowFeature\022\023\n\013frame_wid"
  "th\030\002 \001(\005\022\024\n\014frame_height\030\003 \001(\005\022\027\n\010unstab"
  "le\030\004 \001(\010:\005false\022\037\n\024distance_from_border\030"
  "\005 \001(\005:\0010\022\022\n\nblur_score\030\006 \001(\002\022\032\n\013long_tra"
  "cks\030\007 \001(\010:\005false\022&\n\033frac_long_features_r"
  "ejected\030\010 \001(\002:\0010\022\036\n\022visual_consistency\030\t"
  " \001(\002:\002-1\022\031\n\016timestamp_usec\030\n \001(\003:\0010\022\026\n\013m"
  "atch_frame\030\013 \001(\005:\0010\022\034\n\ris_duplicated\030\014 \001"
  "(\010:\005false\022&\n\036actively_discarded_tracked_"
  "ids\030\r \003(\005\"\200\003\n\014SalientPoint\022\027\n\014norm_point"
  "_x\030\001 \001(\002:\0010\022\027\n\014norm_point_y\030\002 \001(\002:\0010\022D\n\004"
  "type\030\013 \001(\0162(.mediapipe.SalientPoint.Sali"
  "entPointType:\014TYPE_INCLUDE\022\021\n\004left\030\003 \001(\002"
  ":\0030.3\022\023\n\006bottom\030\004 \001(\002:\0030.3\022\022\n\005right\030\t \001("
  "\002:\0030.3\022\020\n\003top\030\n \001(\002:\0030.3\022\022\n\006weight\030\005 \001(\002"
  ":\00215\022\022\n\nnorm_major\030\006 \001(\002\022\022\n\nnorm_minor\030\007"
  " \001(\002\022\r\n\005angle\030\010 \001(\002\"S\n\020SalientPointType\022"
  "\020\n\014TYPE_INCLUDE\020\001\022\025\n\021TYPE_EXCLUDE_LEFT\020\002"
  "\022\026\n\022TYPE_EXCLUDE_RIGHT\020\003*\n\010\240\234\001\020\200\200\200\200\002\"G\n\021"
  "SalientPointFrame\022&\n\005point\030\001 \003(\0132\027.media"
  "pipe.SalientPoint*\n\010\240\234\001\020\200\200\200\200\002B!\n\035com.goo"
  "gle.mediapipe.trackingP\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto = {
  false, false, 2224, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto, "mediapipe/util/tracking/region_flow.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowFeature_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[0];
}
bool RegionFlowFeature_Flags_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionFlowFeature_Flags RegionFlowFeature::FLAG_BROKEN_TRACK;
constexpr RegionFlowFeature_Flags RegionFlowFeature::Flags_MIN;
constexpr RegionFlowFeature_Flags RegionFlowFeature::Flags_MAX;
constexpr int RegionFlowFeature::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SalientPoint_SalientPointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[1];
}
bool SalientPoint_SalientPointType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SalientPoint_SalientPointType SalientPoint::TYPE_INCLUDE;
constexpr SalientPoint_SalientPointType SalientPoint::TYPE_EXCLUDE_LEFT;
constexpr SalientPoint_SalientPointType SalientPoint::TYPE_EXCLUDE_RIGHT;
constexpr SalientPoint_SalientPointType SalientPoint::SalientPointType_MIN;
constexpr SalientPoint_SalientPointType SalientPoint::SalientPointType_MAX;
constexpr int SalientPoint::SalientPointType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PatchDescriptor::_Internal {
 public:
};

PatchDescriptor::PatchDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.PatchDescriptor)
}
PatchDescriptor::PatchDescriptor(const PatchDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.PatchDescriptor)
}

void PatchDescriptor::SharedCtor() {
}

PatchDescriptor::~PatchDescriptor() {
  // @@protoc_insertion_point(destructor:mediapipe.PatchDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatchDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PatchDescriptor::ArenaDtor(void* object) {
  PatchDescriptor* _this = reinterpret_cast< PatchDescriptor* >(object);
  (void)_this;
}
void PatchDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.PatchDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.PatchDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_data(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.PatchDescriptor)
  return target;
}

size_t PatchDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.PatchDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.PatchDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.PatchDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.PatchDescriptor)
    MergeFrom(*source);
  }
}

void PatchDescriptor::MergeFrom(const PatchDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.PatchDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void PatchDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.PatchDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchDescriptor::CopyFrom(const PatchDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.PatchDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchDescriptor::IsInitialized() const {
  return true;
}

void PatchDescriptor::InternalSwap(PatchDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[0]);
}

// ===================================================================

class BinaryFeatureDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryFeatureDescriptor>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinaryFeatureDescriptor::BinaryFeatureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.BinaryFeatureDescriptor)
}
BinaryFeatureDescriptor::BinaryFeatureDescriptor(const BinaryFeatureDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.BinaryFeatureDescriptor)
}

void BinaryFeatureDescriptor::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BinaryFeatureDescriptor::~BinaryFeatureDescriptor() {
  // @@protoc_insertion_point(destructor:mediapipe.BinaryFeatureDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryFeatureDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BinaryFeatureDescriptor::ArenaDtor(void* object) {
  BinaryFeatureDescriptor* _this = reinterpret_cast< BinaryFeatureDescriptor* >(object);
  (void)_this;
}
void BinaryFeatureDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryFeatureDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryFeatureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.BinaryFeatureDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryFeatureDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryFeatureDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.BinaryFeatureDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.BinaryFeatureDescriptor)
  return target;
}

size_t BinaryFeatureDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.BinaryFeatureDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryFeatureDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.BinaryFeatureDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryFeatureDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryFeatureDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.BinaryFeatureDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.BinaryFeatureDescriptor)
    MergeFrom(*source);
  }
}

void BinaryFeatureDescriptor::MergeFrom(const BinaryFeatureDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.BinaryFeatureDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void BinaryFeatureDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.BinaryFeatureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryFeatureDescriptor::CopyFrom(const BinaryFeatureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.BinaryFeatureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryFeatureDescriptor::IsInitialized() const {
  return true;
}

void BinaryFeatureDescriptor::InternalSwap(BinaryFeatureDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryFeatureDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[1]);
}

// ===================================================================

class TemporalIRLSSmoothing::_Internal {
 public:
  using HasBits = decltype(std::declval<TemporalIRLSSmoothing>()._has_bits_);
  static void set_has_weight_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TemporalIRLSSmoothing::TemporalIRLSSmoothing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TemporalIRLSSmoothing)
}
TemporalIRLSSmoothing::TemporalIRLSSmoothing(const TemporalIRLSSmoothing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_sum_, &from.weight_sum_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_sum_) -
    reinterpret_cast<char*>(&weight_sum_)) + sizeof(value_sum_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TemporalIRLSSmoothing)
}

void TemporalIRLSSmoothing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_sum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_sum_) -
    reinterpret_cast<char*>(&weight_sum_)) + sizeof(value_sum_));
}

TemporalIRLSSmoothing::~TemporalIRLSSmoothing() {
  // @@protoc_insertion_point(destructor:mediapipe.TemporalIRLSSmoothing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TemporalIRLSSmoothing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TemporalIRLSSmoothing::ArenaDtor(void* object) {
  TemporalIRLSSmoothing* _this = reinterpret_cast< TemporalIRLSSmoothing* >(object);
  (void)_this;
}
void TemporalIRLSSmoothing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TemporalIRLSSmoothing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TemporalIRLSSmoothing::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TemporalIRLSSmoothing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&weight_sum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_sum_) -
        reinterpret_cast<char*>(&weight_sum_)) + sizeof(value_sum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TemporalIRLSSmoothing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float weight_sum = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_weight_sum(&has_bits);
          weight_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float value_sum = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_value_sum(&has_bits);
          value_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TemporalIRLSSmoothing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TemporalIRLSSmoothing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight_sum = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_weight_sum(), target);
  }

  // optional float value_sum = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TemporalIRLSSmoothing)
  return target;
}

size_t TemporalIRLSSmoothing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TemporalIRLSSmoothing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float weight_sum = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float value_sum = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemporalIRLSSmoothing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TemporalIRLSSmoothing)
  GOOGLE_DCHECK_NE(&from, this);
  const TemporalIRLSSmoothing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemporalIRLSSmoothing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TemporalIRLSSmoothing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TemporalIRLSSmoothing)
    MergeFrom(*source);
  }
}

void TemporalIRLSSmoothing::MergeFrom(const TemporalIRLSSmoothing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TemporalIRLSSmoothing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      weight_sum_ = from.weight_sum_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_sum_ = from.value_sum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TemporalIRLSSmoothing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TemporalIRLSSmoothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemporalIRLSSmoothing::CopyFrom(const TemporalIRLSSmoothing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TemporalIRLSSmoothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemporalIRLSSmoothing::IsInitialized() const {
  return true;
}

void TemporalIRLSSmoothing::InternalSwap(TemporalIRLSSmoothing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TemporalIRLSSmoothing, value_sum_)
      + sizeof(TemporalIRLSSmoothing::value_sum_)
      - PROTOBUF_FIELD_OFFSET(TemporalIRLSSmoothing, weight_sum_)>(
          reinterpret_cast<char*>(&weight_sum_),
          reinterpret_cast<char*>(&other->weight_sum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TemporalIRLSSmoothing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[2]);
}

// ===================================================================

class RegionFlowFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowFeature>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dy(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tracking_error(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_irls_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_corner_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::mediapipe::PatchDescriptor& feature_descriptor(const RegionFlowFeature* msg);
  static void set_has_feature_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::PatchDescriptor& feature_match_descriptor(const RegionFlowFeature* msg);
  static void set_has_feature_match_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::TemporalIRLSSmoothing& internal_irls(const RegionFlowFeature* msg);
  static void set_has_internal_irls(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_feature_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_octave(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::mediapipe::BinaryFeatureDescriptor& binary_feature_descriptor(const RegionFlowFeature* msg);
  static void set_has_binary_feature_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mediapipe::PatchDescriptor&
RegionFlowFeature::_Internal::feature_descriptor(const RegionFlowFeature* msg) {
  return *msg->feature_descriptor_;
}
const ::mediapipe::PatchDescriptor&
RegionFlowFeature::_Internal::feature_match_descriptor(const RegionFlowFeature* msg) {
  return *msg->feature_match_descriptor_;
}
const ::mediapipe::TemporalIRLSSmoothing&
RegionFlowFeature::_Internal::internal_irls(const RegionFlowFeature* msg) {
  return *msg->internal_irls_;
}
const ::mediapipe::BinaryFeatureDescriptor&
RegionFlowFeature::_Internal::binary_feature_descriptor(const RegionFlowFeature* msg) {
  return *msg->binary_feature_descriptor_;
}
RegionFlowFeature::RegionFlowFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowFeature)
}
RegionFlowFeature::RegionFlowFeature(const RegionFlowFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  if (from._internal_has_feature_descriptor()) {
    feature_descriptor_ = new ::mediapipe::PatchDescriptor(*from.feature_descriptor_);
  } else {
    feature_descriptor_ = nullptr;
  }
  if (from._internal_has_feature_match_descriptor()) {
    feature_match_descriptor_ = new ::mediapipe::PatchDescriptor(*from.feature_match_descriptor_);
  } else {
    feature_match_descriptor_ = nullptr;
  }
  if (from._internal_has_internal_irls()) {
    internal_irls_ = new ::mediapipe::TemporalIRLSSmoothing(*from.internal_irls_);
  } else {
    internal_irls_ = nullptr;
  }
  if (from._internal_has_binary_feature_descriptor()) {
    binary_feature_descriptor_ = new ::mediapipe::BinaryFeatureDescriptor(*from.binary_feature_descriptor_);
  } else {
    binary_feature_descriptor_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&track_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(track_id_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowFeature)
}

void RegionFlowFeature::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feature_descriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&octave_) -
    reinterpret_cast<char*>(&feature_descriptor_)) + sizeof(octave_));
irls_weight_ = 1;
track_id_ = -1;
}

RegionFlowFeature::~RegionFlowFeature() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete feature_descriptor_;
  if (this != internal_default_instance()) delete feature_match_descriptor_;
  if (this != internal_default_instance()) delete internal_irls_;
  if (this != internal_default_instance()) delete binary_feature_descriptor_;
}

void RegionFlowFeature::ArenaDtor(void* object) {
  RegionFlowFeature* _this = reinterpret_cast< RegionFlowFeature* >(object);
  (void)_this;
}
void RegionFlowFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(feature_descriptor_ != nullptr);
      feature_descriptor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(feature_match_descriptor_ != nullptr);
      feature_match_descriptor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(internal_irls_ != nullptr);
      internal_irls_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(binary_feature_descriptor_ != nullptr);
      binary_feature_descriptor_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dx_) -
        reinterpret_cast<char*>(&x_)) + sizeof(dx_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&dy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&octave_) -
        reinterpret_cast<char*>(&dy_)) + sizeof(octave_));
    irls_weight_ = 1;
    track_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dx = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_dx(&has_bits);
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dy = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_dy(&has_bits);
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tracking_error = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_tracking_error(&has_bits);
          tracking_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float irls_weight = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_irls_weight(&has_bits);
          irls_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.PatchDescriptor feature_descriptor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.PatchDescriptor feature_match_descriptor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_match_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TemporalIRLSSmoothing internal_irls = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_irls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float corner_response = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_corner_response(&has_bits);
          corner_response_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 track_id = 13 [default = -1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_track_id(&has_bits);
          track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.RegionFlowFeature.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 feature_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_feature_id(&has_bits);
          feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 octave = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_octave(&has_bits);
          octave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.BinaryFeatureDescriptor binary_feature_descriptor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_feature_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((72u <= tag && tag < 80u) ||
          (96u <= tag && tag < 104u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float dx = 3 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dx(), target);
  }

  // optional float dy = 4 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dy(), target);
  }

  // optional float tracking_error = 5 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_tracking_error(), target);
  }

  // optional float irls_weight = 6 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_irls_weight(), target);
  }

  // optional .mediapipe.PatchDescriptor feature_descriptor = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::feature_descriptor(this), target, stream);
  }

  // optional .mediapipe.PatchDescriptor feature_match_descriptor = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::feature_match_descriptor(this), target, stream);
  }

  // Extension range [9, 10)
  target = _extensions_._InternalSerialize(
      9, 10, target, stream);

  // optional .mediapipe.TemporalIRLSSmoothing internal_irls = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::internal_irls(this), target, stream);
  }

  // optional float corner_response = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_corner_response(), target);
  }

  // Extension range [12, 13)
  target = _extensions_._InternalSerialize(
      12, 13, target, stream);

  // optional int32 track_id = 13 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_track_id(), target);
  }

  // optional string label = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mediapipe.RegionFlowFeature.label");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_label(), target);
  }

  // optional int32 flags = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_flags(), target);
  }

  // optional int32 feature_id = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_feature_id(), target);
  }

  // optional int32 octave = 17 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_octave(), target);
  }

  // optional .mediapipe.BinaryFeatureDescriptor binary_feature_descriptor = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::binary_feature_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowFeature)
  return target;
}

size_t RegionFlowFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowFeature)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string label = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional .mediapipe.PatchDescriptor feature_descriptor = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_descriptor_);
    }

    // optional .mediapipe.PatchDescriptor feature_match_descriptor = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_match_descriptor_);
    }

    // optional .mediapipe.TemporalIRLSSmoothing internal_irls = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *internal_irls_);
    }

    // optional .mediapipe.BinaryFeatureDescriptor binary_feature_descriptor = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *binary_feature_descriptor_);
    }

    // optional float x = 1 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float dx = 3 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float dy = 4 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float tracking_error = 5 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float corner_response = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 flags = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_flags());
    }

    // optional int32 feature_id = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_feature_id());
    }

    // optional int32 octave = 17 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_octave());
    }

    // optional float irls_weight = 6 [default = 1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional int32 track_id = 13 [default = -1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_track_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowFeature)
    MergeFrom(*source);
  }
}

void RegionFlowFeature::MergeFrom(const RegionFlowFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_feature_descriptor()->::mediapipe::PatchDescriptor::MergeFrom(from._internal_feature_descriptor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_feature_match_descriptor()->::mediapipe::PatchDescriptor::MergeFrom(from._internal_feature_match_descriptor());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_internal_irls()->::mediapipe::TemporalIRLSSmoothing::MergeFrom(from._internal_internal_irls());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_binary_feature_descriptor()->::mediapipe::BinaryFeatureDescriptor::MergeFrom(from._internal_binary_feature_descriptor());
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      dx_ = from.dx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      dy_ = from.dy_;
    }
    if (cached_has_bits & 0x00000200u) {
      tracking_error_ = from.tracking_error_;
    }
    if (cached_has_bits & 0x00000400u) {
      corner_response_ = from.corner_response_;
    }
    if (cached_has_bits & 0x00000800u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00001000u) {
      feature_id_ = from.feature_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      octave_ = from.octave_;
    }
    if (cached_has_bits & 0x00004000u) {
      irls_weight_ = from.irls_weight_;
    }
    if (cached_has_bits & 0x00008000u) {
      track_id_ = from.track_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowFeature::CopyFrom(const RegionFlowFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowFeature::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void RegionFlowFeature::InternalSwap(RegionFlowFeature* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionFlowFeature, octave_)
      + sizeof(RegionFlowFeature::octave_)
      - PROTOBUF_FIELD_OFFSET(RegionFlowFeature, feature_descriptor_)>(
          reinterpret_cast<char*>(&feature_descriptor_),
          reinterpret_cast<char*>(&other->feature_descriptor_));
  swap(irls_weight_, other->irls_weight_);
  swap(track_id_, other->track_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[3]);
}

// ===================================================================

class RegionFlowFrame_RegionFlow::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowFrame_RegionFlow>()._has_bits_);
  static void set_has_region_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_centroid_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_centroid_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flow_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flow_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RegionFlowFrame_RegionFlow::RegionFlowFrame_RegionFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  feature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowFrame.RegionFlow)
}
RegionFlowFrame_RegionFlow::RegionFlowFrame_RegionFlow(const RegionFlowFrame_RegionFlow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flow_y_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(flow_y_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowFrame.RegionFlow)
}

void RegionFlowFrame_RegionFlow::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flow_y_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(flow_y_));
}

RegionFlowFrame_RegionFlow::~RegionFlowFrame_RegionFlow() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowFrame.RegionFlow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowFrame_RegionFlow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegionFlowFrame_RegionFlow::ArenaDtor(void* object) {
  RegionFlowFrame_RegionFlow* _this = reinterpret_cast< RegionFlowFrame_RegionFlow* >(object);
  (void)_this;
}
void RegionFlowFrame_RegionFlow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowFrame_RegionFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowFrame_RegionFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowFrame.RegionFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&region_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flow_y_) -
        reinterpret_cast<char*>(&region_id_)) + sizeof(flow_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowFrame_RegionFlow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_region_id(&has_bits);
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float centroid_x = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_centroid_x(&has_bits);
          centroid_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float centroid_y = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_centroid_y(&has_bits);
          centroid_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float flow_x = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_flow_x(&has_bits);
          flow_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float flow_y = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_flow_y(&has_bits);
          flow_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.RegionFlowFeature feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((48u <= tag && tag < 56u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowFrame_RegionFlow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowFrame.RegionFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 region_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_region_id(), target);
  }

  // optional float centroid_x = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_centroid_x(), target);
  }

  // optional float centroid_y = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_centroid_y(), target);
  }

  // optional float flow_x = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_flow_x(), target);
  }

  // optional float flow_y = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_flow_y(), target);
  }

  // Extension range [6, 7)
  target = _extensions_._InternalSerialize(
      6, 7, target, stream);

  // repeated .mediapipe.RegionFlowFeature feature = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowFrame.RegionFlow)
  return target;
}

size_t RegionFlowFrame_RegionFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowFrame.RegionFlow)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required int32 region_id = 1;
  if (_internal_has_region_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_region_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.RegionFlowFeature feature = 7;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional float centroid_x = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float centroid_y = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float flow_x = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float flow_y = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowFrame_RegionFlow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowFrame.RegionFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowFrame_RegionFlow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowFrame_RegionFlow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowFrame.RegionFlow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowFrame.RegionFlow)
    MergeFrom(*source);
  }
}

void RegionFlowFrame_RegionFlow::MergeFrom(const RegionFlowFrame_RegionFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowFrame.RegionFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      centroid_x_ = from.centroid_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      centroid_y_ = from.centroid_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      flow_x_ = from.flow_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      flow_y_ = from.flow_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowFrame_RegionFlow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowFrame.RegionFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowFrame_RegionFlow::CopyFrom(const RegionFlowFrame_RegionFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowFrame.RegionFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowFrame_RegionFlow::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(feature_)) return false;
  return true;
}

void RegionFlowFrame_RegionFlow::InternalSwap(RegionFlowFrame_RegionFlow* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_.InternalSwap(&other->feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionFlowFrame_RegionFlow, flow_y_)
      + sizeof(RegionFlowFrame_RegionFlow::flow_y_)
      - PROTOBUF_FIELD_OFFSET(RegionFlowFrame_RegionFlow, region_id_)>(
          reinterpret_cast<char*>(&region_id_),
          reinterpret_cast<char*>(&other->region_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowFrame_RegionFlow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[4]);
}

// ===================================================================

class RegionFlowFrame_BlockDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowFrame_BlockDescriptor>()._has_bits_);
  static void set_has_block_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_block_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_blocks_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_blocks_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RegionFlowFrame_BlockDescriptor::RegionFlowFrame_BlockDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowFrame.BlockDescriptor)
}
RegionFlowFrame_BlockDescriptor::RegionFlowFrame_BlockDescriptor(const RegionFlowFrame_BlockDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_width_, &from.block_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_y_) -
    reinterpret_cast<char*>(&block_width_)) + sizeof(num_blocks_y_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowFrame.BlockDescriptor)
}

void RegionFlowFrame_BlockDescriptor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_y_) -
    reinterpret_cast<char*>(&block_width_)) + sizeof(num_blocks_y_));
}

RegionFlowFrame_BlockDescriptor::~RegionFlowFrame_BlockDescriptor() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowFrame.BlockDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowFrame_BlockDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegionFlowFrame_BlockDescriptor::ArenaDtor(void* object) {
  RegionFlowFrame_BlockDescriptor* _this = reinterpret_cast< RegionFlowFrame_BlockDescriptor* >(object);
  (void)_this;
}
void RegionFlowFrame_BlockDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowFrame_BlockDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowFrame_BlockDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowFrame.BlockDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&block_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_blocks_y_) -
        reinterpret_cast<char*>(&block_width_)) + sizeof(num_blocks_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowFrame_BlockDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 block_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_block_width(&has_bits);
          block_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_block_height(&has_bits);
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_blocks_x = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_blocks_x(&has_bits);
          num_blocks_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_blocks_y = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_blocks_y(&has_bits);
          num_blocks_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowFrame_BlockDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowFrame.BlockDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 block_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_block_width(), target);
  }

  // optional int32 block_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_height(), target);
  }

  // optional int32 num_blocks_x = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_blocks_x(), target);
  }

  // optional int32 num_blocks_y = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_blocks_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowFrame.BlockDescriptor)
  return target;
}

size_t RegionFlowFrame_BlockDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowFrame.BlockDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 block_width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_block_width());
    }

    // optional int32 block_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_block_height());
    }

    // optional int32 num_blocks_x = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_blocks_x());
    }

    // optional int32 num_blocks_y = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_blocks_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowFrame_BlockDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowFrame.BlockDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowFrame_BlockDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowFrame_BlockDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowFrame.BlockDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowFrame.BlockDescriptor)
    MergeFrom(*source);
  }
}

void RegionFlowFrame_BlockDescriptor::MergeFrom(const RegionFlowFrame_BlockDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowFrame.BlockDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      block_width_ = from.block_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      block_height_ = from.block_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_blocks_x_ = from.num_blocks_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_blocks_y_ = from.num_blocks_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowFrame_BlockDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowFrame.BlockDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowFrame_BlockDescriptor::CopyFrom(const RegionFlowFrame_BlockDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowFrame.BlockDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowFrame_BlockDescriptor::IsInitialized() const {
  return true;
}

void RegionFlowFrame_BlockDescriptor::InternalSwap(RegionFlowFrame_BlockDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionFlowFrame_BlockDescriptor, num_blocks_y_)
      + sizeof(RegionFlowFrame_BlockDescriptor::num_blocks_y_)
      - PROTOBUF_FIELD_OFFSET(RegionFlowFrame_BlockDescriptor, block_width_)>(
          reinterpret_cast<char*>(&block_width_),
          reinterpret_cast<char*>(&other->block_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowFrame_BlockDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[5]);
}

// ===================================================================

class RegionFlowFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowFrame>()._has_bits_);
  static void set_has_num_total_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unstable_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blur_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mediapipe::RegionFlowFrame_BlockDescriptor& block_descriptor(const RegionFlowFrame* msg);
  static void set_has_block_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mediapipe::RegionFlowFrame_BlockDescriptor&
RegionFlowFrame::_Internal::block_descriptor(const RegionFlowFrame* msg) {
  return *msg->block_descriptor_;
}
RegionFlowFrame::RegionFlowFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  region_flow_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowFrame)
}
RegionFlowFrame::RegionFlowFrame(const RegionFlowFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      region_flow_(from.region_flow_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_block_descriptor()) {
    block_descriptor_ = new ::mediapipe::RegionFlowFrame_BlockDescriptor(*from.block_descriptor_);
  } else {
    block_descriptor_ = nullptr;
  }
  ::memcpy(&num_total_features_, &from.num_total_features_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_height_) -
    reinterpret_cast<char*>(&num_total_features_)) + sizeof(frame_height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowFrame)
}

void RegionFlowFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_descriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_height_) -
    reinterpret_cast<char*>(&block_descriptor_)) + sizeof(frame_height_));
}

RegionFlowFrame::~RegionFlowFrame() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_descriptor_;
}

void RegionFlowFrame::ArenaDtor(void* object) {
  RegionFlowFrame* _this = reinterpret_cast< RegionFlowFrame* >(object);
  (void)_this;
}
void RegionFlowFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  region_flow_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_descriptor_ != nullptr);
    block_descriptor_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&num_total_features_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_height_) -
        reinterpret_cast<char*>(&num_total_features_)) + sizeof(frame_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.RegionFlowFrame.RegionFlow region_flow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_region_flow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 num_total_features = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_total_features(&has_bits);
          num_total_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unstable_frame = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_unstable_frame(&has_bits);
          unstable_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float blur_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_blur_score(&has_bits);
          blur_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_frame_width(&has_bits);
          frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_frame_height(&has_bits);
          frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowFrame.BlockDescriptor block_descriptor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((24u <= tag && tag < 32u) ||
          (40u <= tag && tag < 48u) ||
          (48u <= tag && tag < 56u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.RegionFlowFrame.RegionFlow region_flow = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_region_flow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_region_flow(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_total_features = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_total_features(), target);
  }

  // Extension range [3, 4)
  target = _extensions_._InternalSerialize(
      3, 4, target, stream);

  // optional bool unstable_frame = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_unstable_frame(), target);
  }

  // Extension range [5, 7)
  target = _extensions_._InternalSerialize(
      5, 7, target, stream);

  // optional float blur_score = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_blur_score(), target);
  }

  // optional int32 frame_width = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_frame_width(), target);
  }

  // optional int32 frame_height = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_frame_height(), target);
  }

  // optional .mediapipe.RegionFlowFrame.BlockDescriptor block_descriptor = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::block_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowFrame)
  return target;
}

size_t RegionFlowFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowFrame)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.RegionFlowFrame.RegionFlow region_flow = 1;
  total_size += 1UL * this->_internal_region_flow_size();
  for (const auto& msg : this->region_flow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .mediapipe.RegionFlowFrame.BlockDescriptor block_descriptor = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *block_descriptor_);
    }

    // optional int32 num_total_features = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_total_features());
    }

    // optional bool unstable_frame = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float blur_score = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 frame_width = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_width());
    }

    // optional int32 frame_height = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowFrame)
    MergeFrom(*source);
  }
}

void RegionFlowFrame::MergeFrom(const RegionFlowFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_flow_.MergeFrom(from.region_flow_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_block_descriptor()->::mediapipe::RegionFlowFrame_BlockDescriptor::MergeFrom(from._internal_block_descriptor());
    }
    if (cached_has_bits & 0x00000002u) {
      num_total_features_ = from.num_total_features_;
    }
    if (cached_has_bits & 0x00000004u) {
      unstable_frame_ = from.unstable_frame_;
    }
    if (cached_has_bits & 0x00000008u) {
      blur_score_ = from.blur_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      frame_width_ = from.frame_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_height_ = from.frame_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowFrame::CopyFrom(const RegionFlowFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowFrame::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(region_flow_)) return false;
  return true;
}

void RegionFlowFrame::InternalSwap(RegionFlowFrame* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  region_flow_.InternalSwap(&other->region_flow_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionFlowFrame, frame_height_)
      + sizeof(RegionFlowFrame::frame_height_)
      - PROTOBUF_FIELD_OFFSET(RegionFlowFrame, block_descriptor_)>(
          reinterpret_cast<char*>(&block_descriptor_),
          reinterpret_cast<char*>(&other->block_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[6]);
}

// ===================================================================

class RegionFlowFeatureList::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowFeatureList>()._has_bits_);
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unstable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance_from_border(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blur_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_long_tracks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frac_long_features_rejected(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_visual_consistency(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_duplicated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

RegionFlowFeatureList::RegionFlowFeatureList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_(arena),
  actively_discarded_tracked_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowFeatureList)
}
RegionFlowFeatureList::RegionFlowFeatureList(const RegionFlowFeatureList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      feature_(from.feature_),
      actively_discarded_tracked_ids_(from.actively_discarded_tracked_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_width_, &from.frame_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&visual_consistency_) -
    reinterpret_cast<char*>(&frame_width_)) + sizeof(visual_consistency_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowFeatureList)
}

void RegionFlowFeatureList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_frame_) -
    reinterpret_cast<char*>(&frame_width_)) + sizeof(match_frame_));
visual_consistency_ = -1;
}

RegionFlowFeatureList::~RegionFlowFeatureList() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowFeatureList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowFeatureList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegionFlowFeatureList::ArenaDtor(void* object) {
  RegionFlowFeatureList* _this = reinterpret_cast< RegionFlowFeatureList* >(object);
  (void)_this;
}
void RegionFlowFeatureList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowFeatureList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowFeatureList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowFeatureList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  actively_discarded_tracked_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&frame_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frac_long_features_rejected_) -
        reinterpret_cast<char*>(&frame_width_)) + sizeof(frac_long_features_rejected_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&timestamp_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_frame_) -
        reinterpret_cast<char*>(&timestamp_usec_)) + sizeof(match_frame_));
    visual_consistency_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowFeatureList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.RegionFlowFeature feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 frame_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_width(&has_bits);
          frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frame_height(&has_bits);
          frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unstable = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_unstable(&has_bits);
          unstable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 distance_from_border = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_distance_from_border(&has_bits);
          distance_from_border_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float blur_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_blur_score(&has_bits);
          blur_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool long_tracks = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_long_tracks(&has_bits);
          long_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float frac_long_features_rejected = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_frac_long_features_rejected(&has_bits);
          frac_long_features_rejected_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float visual_consistency = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_visual_consistency(&has_bits);
          visual_consistency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp_usec = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_timestamp_usec(&has_bits);
          timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 match_frame = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_match_frame(&has_bits);
          match_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_duplicated = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_duplicated(&has_bits);
          is_duplicated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 actively_discarded_tracked_ids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_actively_discarded_tracked_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowFeatureList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowFeatureList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.RegionFlowFeature feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_feature(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 frame_width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frame_width(), target);
  }

  // optional int32 frame_height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_frame_height(), target);
  }

  // optional bool unstable = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_unstable(), target);
  }

  // optional int32 distance_from_border = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_distance_from_border(), target);
  }

  // optional float blur_score = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_blur_score(), target);
  }

  // optional bool long_tracks = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_long_tracks(), target);
  }

  // optional float frac_long_features_rejected = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_frac_long_features_rejected(), target);
  }

  // optional float visual_consistency = 9 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_visual_consistency(), target);
  }

  // optional int64 timestamp_usec = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp_usec(), target);
  }

  // optional int32 match_frame = 11 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_match_frame(), target);
  }

  // optional bool is_duplicated = 12 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_duplicated(), target);
  }

  // repeated int32 actively_discarded_tracked_ids = 13;
  for (int i = 0, n = this->_internal_actively_discarded_tracked_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_actively_discarded_tracked_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowFeatureList)
  return target;
}

size_t RegionFlowFeatureList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowFeatureList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.RegionFlowFeature feature = 1;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 actively_discarded_tracked_ids = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->actively_discarded_tracked_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_actively_discarded_tracked_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 frame_width = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_width());
    }

    // optional int32 frame_height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frame_height());
    }

    // optional int32 distance_from_border = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_distance_from_border());
    }

    // optional float blur_score = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool unstable = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool long_tracks = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_duplicated = 12 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional float frac_long_features_rejected = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 timestamp_usec = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp_usec());
    }

    // optional int32 match_frame = 11 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_frame());
    }

    // optional float visual_consistency = 9 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowFeatureList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowFeatureList)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowFeatureList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowFeatureList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowFeatureList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowFeatureList)
    MergeFrom(*source);
  }
}

void RegionFlowFeatureList::MergeFrom(const RegionFlowFeatureList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowFeatureList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  actively_discarded_tracked_ids_.MergeFrom(from.actively_discarded_tracked_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      frame_width_ = from.frame_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_height_ = from.frame_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      distance_from_border_ = from.distance_from_border_;
    }
    if (cached_has_bits & 0x00000008u) {
      blur_score_ = from.blur_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      unstable_ = from.unstable_;
    }
    if (cached_has_bits & 0x00000020u) {
      long_tracks_ = from.long_tracks_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_duplicated_ = from.is_duplicated_;
    }
    if (cached_has_bits & 0x00000080u) {
      frac_long_features_rejected_ = from.frac_long_features_rejected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      timestamp_usec_ = from.timestamp_usec_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_frame_ = from.match_frame_;
    }
    if (cached_has_bits & 0x00000400u) {
      visual_consistency_ = from.visual_consistency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowFeatureList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowFeatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowFeatureList::CopyFrom(const RegionFlowFeatureList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowFeatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowFeatureList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(feature_)) return false;
  return true;
}

void RegionFlowFeatureList::InternalSwap(RegionFlowFeatureList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_.InternalSwap(&other->feature_);
  actively_discarded_tracked_ids_.InternalSwap(&other->actively_discarded_tracked_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionFlowFeatureList, match_frame_)
      + sizeof(RegionFlowFeatureList::match_frame_)
      - PROTOBUF_FIELD_OFFSET(RegionFlowFeatureList, frame_width_)>(
          reinterpret_cast<char*>(&frame_width_),
          reinterpret_cast<char*>(&other->frame_width_));
  swap(visual_consistency_, other->visual_consistency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowFeatureList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[7]);
}

// ===================================================================

class SalientPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<SalientPoint>()._has_bits_);
  static void set_has_norm_point_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_norm_point_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_norm_major(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_norm_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SalientPoint::SalientPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.SalientPoint)
}
SalientPoint::SalientPoint(const SalientPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&norm_point_x_, &from.norm_point_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&norm_point_x_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.SalientPoint)
}

void SalientPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&norm_point_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&norm_point_x_)) + sizeof(angle_));
left_ = 0.3f;
bottom_ = 0.3f;
weight_ = 15;
right_ = 0.3f;
top_ = 0.3f;
type_ = 1;
}

SalientPoint::~SalientPoint() {
  // @@protoc_insertion_point(destructor:mediapipe.SalientPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SalientPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SalientPoint::ArenaDtor(void* object) {
  SalientPoint* _this = reinterpret_cast< SalientPoint* >(object);
  (void)_this;
}
void SalientPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SalientPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SalientPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.SalientPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&norm_point_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&norm_point_x_)) + sizeof(angle_));
    left_ = 0.3f;
    bottom_ = 0.3f;
    weight_ = 15;
  }
  if (cached_has_bits & 0x00000700u) {
    right_ = 0.3f;
    top_ = 0.3f;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SalientPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float norm_point_x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_norm_point_x(&has_bits);
          norm_point_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float norm_point_y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_norm_point_y(&has_bits);
          norm_point_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float left = 3 [default = 0.3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bottom = 4 [default = 0.3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight = 5 [default = 15];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float norm_major = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_norm_major(&has_bits);
          norm_major_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float norm_minor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_norm_minor(&has_bits);
          norm_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right = 9 [default = 0.3];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float top = 10 [default = 0.3];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.SalientPoint.SalientPointType type = 11 [default = TYPE_INCLUDE];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::SalientPoint_SalientPointType_IsValid(val))) {
            _internal_set_type(static_cast<::mediapipe::SalientPoint_SalientPointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((160000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SalientPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.SalientPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float norm_point_x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_norm_point_x(), target);
  }

  // optional float norm_point_y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_norm_point_y(), target);
  }

  // optional float left = 3 [default = 0.3];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_left(), target);
  }

  // optional float bottom = 4 [default = 0.3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bottom(), target);
  }

  // optional float weight = 5 [default = 15];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_weight(), target);
  }

  // optional float norm_major = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_norm_major(), target);
  }

  // optional float norm_minor = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_norm_minor(), target);
  }

  // optional float angle = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_angle(), target);
  }

  // optional float right = 9 [default = 0.3];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_right(), target);
  }

  // optional float top = 10 [default = 0.3];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_top(), target);
  }

  // optional .mediapipe.SalientPoint.SalientPointType type = 11 [default = TYPE_INCLUDE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_type(), target);
  }

  // Extension range [20000, 536870912)
  target = _extensions_._InternalSerialize(
      20000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.SalientPoint)
  return target;
}

size_t SalientPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.SalientPoint)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float norm_point_x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float norm_point_y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float norm_major = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float norm_minor = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float angle = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float left = 3 [default = 0.3];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float bottom = 4 [default = 0.3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float weight = 5 [default = 15];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float right = 9 [default = 0.3];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float top = 10 [default = 0.3];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional .mediapipe.SalientPoint.SalientPointType type = 11 [default = TYPE_INCLUDE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SalientPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.SalientPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SalientPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SalientPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.SalientPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.SalientPoint)
    MergeFrom(*source);
  }
}

void SalientPoint::MergeFrom(const SalientPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.SalientPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      norm_point_x_ = from.norm_point_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      norm_point_y_ = from.norm_point_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      norm_major_ = from.norm_major_;
    }
    if (cached_has_bits & 0x00000008u) {
      norm_minor_ = from.norm_minor_;
    }
    if (cached_has_bits & 0x00000010u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000040u) {
      bottom_ = from.bottom_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000200u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SalientPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.SalientPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalientPoint::CopyFrom(const SalientPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.SalientPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalientPoint::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void SalientPoint::InternalSwap(SalientPoint* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SalientPoint, angle_)
      + sizeof(SalientPoint::angle_)
      - PROTOBUF_FIELD_OFFSET(SalientPoint, norm_point_x_)>(
          reinterpret_cast<char*>(&norm_point_x_),
          reinterpret_cast<char*>(&other->norm_point_x_));
  swap(left_, other->left_);
  swap(bottom_, other->bottom_);
  swap(weight_, other->weight_);
  swap(right_, other->right_);
  swap(top_, other->top_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SalientPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[8]);
}

// ===================================================================

class SalientPointFrame::_Internal {
 public:
};

SalientPointFrame::SalientPointFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.SalientPointFrame)
}
SalientPointFrame::SalientPointFrame(const SalientPointFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_(from.point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.SalientPointFrame)
}

void SalientPointFrame::SharedCtor() {
}

SalientPointFrame::~SalientPointFrame() {
  // @@protoc_insertion_point(destructor:mediapipe.SalientPointFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SalientPointFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SalientPointFrame::ArenaDtor(void* object) {
  SalientPointFrame* _this = reinterpret_cast< SalientPointFrame* >(object);
  (void)_this;
}
void SalientPointFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SalientPointFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SalientPointFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.SalientPointFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SalientPointFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.SalientPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((160000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SalientPointFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.SalientPointFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.SalientPoint point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  // Extension range [20000, 536870912)
  target = _extensions_._InternalSerialize(
      20000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.SalientPointFrame)
  return target;
}

size_t SalientPointFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.SalientPointFrame)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.SalientPoint point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SalientPointFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.SalientPointFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SalientPointFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SalientPointFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.SalientPointFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.SalientPointFrame)
    MergeFrom(*source);
  }
}

void SalientPointFrame::MergeFrom(const SalientPointFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.SalientPointFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void SalientPointFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.SalientPointFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalientPointFrame::CopyFrom(const SalientPointFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.SalientPointFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalientPointFrame::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(point_)) return false;
  return true;
}

void SalientPointFrame::InternalSwap(SalientPointFrame* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  point_.InternalSwap(&other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SalientPointFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::PatchDescriptor* Arena::CreateMaybeMessage< ::mediapipe::PatchDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::PatchDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::BinaryFeatureDescriptor* Arena::CreateMaybeMessage< ::mediapipe::BinaryFeatureDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::BinaryFeatureDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TemporalIRLSSmoothing* Arena::CreateMaybeMessage< ::mediapipe::TemporalIRLSSmoothing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TemporalIRLSSmoothing >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowFeature* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowFrame_RegionFlow* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowFrame_RegionFlow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowFrame_RegionFlow >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowFrame_BlockDescriptor* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowFrame_BlockDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowFrame_BlockDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowFrame* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowFeatureList* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowFeatureList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowFeatureList >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::SalientPoint* Arena::CreateMaybeMessage< ::mediapipe::SalientPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::SalientPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::SalientPointFrame* Arena::CreateMaybeMessage< ::mediapipe::SalientPointFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::SalientPointFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
