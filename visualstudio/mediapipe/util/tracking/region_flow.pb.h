// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/region_flow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
namespace mediapipe {
class BinaryFeatureDescriptor;
struct BinaryFeatureDescriptorDefaultTypeInternal;
extern BinaryFeatureDescriptorDefaultTypeInternal _BinaryFeatureDescriptor_default_instance_;
class PatchDescriptor;
struct PatchDescriptorDefaultTypeInternal;
extern PatchDescriptorDefaultTypeInternal _PatchDescriptor_default_instance_;
class RegionFlowFeature;
struct RegionFlowFeatureDefaultTypeInternal;
extern RegionFlowFeatureDefaultTypeInternal _RegionFlowFeature_default_instance_;
class RegionFlowFeatureList;
struct RegionFlowFeatureListDefaultTypeInternal;
extern RegionFlowFeatureListDefaultTypeInternal _RegionFlowFeatureList_default_instance_;
class RegionFlowFrame;
struct RegionFlowFrameDefaultTypeInternal;
extern RegionFlowFrameDefaultTypeInternal _RegionFlowFrame_default_instance_;
class RegionFlowFrame_BlockDescriptor;
struct RegionFlowFrame_BlockDescriptorDefaultTypeInternal;
extern RegionFlowFrame_BlockDescriptorDefaultTypeInternal _RegionFlowFrame_BlockDescriptor_default_instance_;
class RegionFlowFrame_RegionFlow;
struct RegionFlowFrame_RegionFlowDefaultTypeInternal;
extern RegionFlowFrame_RegionFlowDefaultTypeInternal _RegionFlowFrame_RegionFlow_default_instance_;
class SalientPoint;
struct SalientPointDefaultTypeInternal;
extern SalientPointDefaultTypeInternal _SalientPoint_default_instance_;
class SalientPointFrame;
struct SalientPointFrameDefaultTypeInternal;
extern SalientPointFrameDefaultTypeInternal _SalientPointFrame_default_instance_;
class TemporalIRLSSmoothing;
struct TemporalIRLSSmoothingDefaultTypeInternal;
extern TemporalIRLSSmoothingDefaultTypeInternal _TemporalIRLSSmoothing_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::BinaryFeatureDescriptor* Arena::CreateMaybeMessage<::mediapipe::BinaryFeatureDescriptor>(Arena*);
template<> ::mediapipe::PatchDescriptor* Arena::CreateMaybeMessage<::mediapipe::PatchDescriptor>(Arena*);
template<> ::mediapipe::RegionFlowFeature* Arena::CreateMaybeMessage<::mediapipe::RegionFlowFeature>(Arena*);
template<> ::mediapipe::RegionFlowFeatureList* Arena::CreateMaybeMessage<::mediapipe::RegionFlowFeatureList>(Arena*);
template<> ::mediapipe::RegionFlowFrame* Arena::CreateMaybeMessage<::mediapipe::RegionFlowFrame>(Arena*);
template<> ::mediapipe::RegionFlowFrame_BlockDescriptor* Arena::CreateMaybeMessage<::mediapipe::RegionFlowFrame_BlockDescriptor>(Arena*);
template<> ::mediapipe::RegionFlowFrame_RegionFlow* Arena::CreateMaybeMessage<::mediapipe::RegionFlowFrame_RegionFlow>(Arena*);
template<> ::mediapipe::SalientPoint* Arena::CreateMaybeMessage<::mediapipe::SalientPoint>(Arena*);
template<> ::mediapipe::SalientPointFrame* Arena::CreateMaybeMessage<::mediapipe::SalientPointFrame>(Arena*);
template<> ::mediapipe::TemporalIRLSSmoothing* Arena::CreateMaybeMessage<::mediapipe::TemporalIRLSSmoothing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum RegionFlowFeature_Flags : int {
  RegionFlowFeature_Flags_FLAG_BROKEN_TRACK = 1
};
bool RegionFlowFeature_Flags_IsValid(int value);
constexpr RegionFlowFeature_Flags RegionFlowFeature_Flags_Flags_MIN = RegionFlowFeature_Flags_FLAG_BROKEN_TRACK;
constexpr RegionFlowFeature_Flags RegionFlowFeature_Flags_Flags_MAX = RegionFlowFeature_Flags_FLAG_BROKEN_TRACK;
constexpr int RegionFlowFeature_Flags_Flags_ARRAYSIZE = RegionFlowFeature_Flags_Flags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowFeature_Flags_descriptor();
template<typename T>
inline const std::string& RegionFlowFeature_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegionFlowFeature_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegionFlowFeature_Flags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegionFlowFeature_Flags_descriptor(), enum_t_value);
}
inline bool RegionFlowFeature_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegionFlowFeature_Flags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegionFlowFeature_Flags>(
    RegionFlowFeature_Flags_descriptor(), name, value);
}
enum SalientPoint_SalientPointType : int {
  SalientPoint_SalientPointType_TYPE_INCLUDE = 1,
  SalientPoint_SalientPointType_TYPE_EXCLUDE_LEFT = 2,
  SalientPoint_SalientPointType_TYPE_EXCLUDE_RIGHT = 3
};
bool SalientPoint_SalientPointType_IsValid(int value);
constexpr SalientPoint_SalientPointType SalientPoint_SalientPointType_SalientPointType_MIN = SalientPoint_SalientPointType_TYPE_INCLUDE;
constexpr SalientPoint_SalientPointType SalientPoint_SalientPointType_SalientPointType_MAX = SalientPoint_SalientPointType_TYPE_EXCLUDE_RIGHT;
constexpr int SalientPoint_SalientPointType_SalientPointType_ARRAYSIZE = SalientPoint_SalientPointType_SalientPointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SalientPoint_SalientPointType_descriptor();
template<typename T>
inline const std::string& SalientPoint_SalientPointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SalientPoint_SalientPointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SalientPoint_SalientPointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SalientPoint_SalientPointType_descriptor(), enum_t_value);
}
inline bool SalientPoint_SalientPointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SalientPoint_SalientPointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SalientPoint_SalientPointType>(
    SalientPoint_SalientPointType_descriptor(), name, value);
}
// ===================================================================

class PatchDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.PatchDescriptor) */ {
 public:
  inline PatchDescriptor() : PatchDescriptor(nullptr) {}
  ~PatchDescriptor() override;
  explicit constexpr PatchDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchDescriptor(const PatchDescriptor& from);
  PatchDescriptor(PatchDescriptor&& from) noexcept
    : PatchDescriptor() {
    *this = ::std::move(from);
  }

  inline PatchDescriptor& operator=(const PatchDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchDescriptor& operator=(PatchDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchDescriptor* internal_default_instance() {
    return reinterpret_cast<const PatchDescriptor*>(
               &_PatchDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PatchDescriptor& a, PatchDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchDescriptor* New() const final {
    return CreateMaybeMessage<PatchDescriptor>(nullptr);
  }

  PatchDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchDescriptor& from);
  void MergeFrom(const PatchDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.PatchDescriptor";
  }
  protected:
  explicit PatchDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:mediapipe.PatchDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class BinaryFeatureDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.BinaryFeatureDescriptor) */ {
 public:
  inline BinaryFeatureDescriptor() : BinaryFeatureDescriptor(nullptr) {}
  ~BinaryFeatureDescriptor() override;
  explicit constexpr BinaryFeatureDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryFeatureDescriptor(const BinaryFeatureDescriptor& from);
  BinaryFeatureDescriptor(BinaryFeatureDescriptor&& from) noexcept
    : BinaryFeatureDescriptor() {
    *this = ::std::move(from);
  }

  inline BinaryFeatureDescriptor& operator=(const BinaryFeatureDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryFeatureDescriptor& operator=(BinaryFeatureDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryFeatureDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryFeatureDescriptor* internal_default_instance() {
    return reinterpret_cast<const BinaryFeatureDescriptor*>(
               &_BinaryFeatureDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BinaryFeatureDescriptor& a, BinaryFeatureDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryFeatureDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryFeatureDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryFeatureDescriptor* New() const final {
    return CreateMaybeMessage<BinaryFeatureDescriptor>(nullptr);
  }

  BinaryFeatureDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryFeatureDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryFeatureDescriptor& from);
  void MergeFrom(const BinaryFeatureDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryFeatureDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.BinaryFeatureDescriptor";
  }
  protected:
  explicit BinaryFeatureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.BinaryFeatureDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class TemporalIRLSSmoothing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TemporalIRLSSmoothing) */ {
 public:
  inline TemporalIRLSSmoothing() : TemporalIRLSSmoothing(nullptr) {}
  ~TemporalIRLSSmoothing() override;
  explicit constexpr TemporalIRLSSmoothing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TemporalIRLSSmoothing(const TemporalIRLSSmoothing& from);
  TemporalIRLSSmoothing(TemporalIRLSSmoothing&& from) noexcept
    : TemporalIRLSSmoothing() {
    *this = ::std::move(from);
  }

  inline TemporalIRLSSmoothing& operator=(const TemporalIRLSSmoothing& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporalIRLSSmoothing& operator=(TemporalIRLSSmoothing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporalIRLSSmoothing& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporalIRLSSmoothing* internal_default_instance() {
    return reinterpret_cast<const TemporalIRLSSmoothing*>(
               &_TemporalIRLSSmoothing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TemporalIRLSSmoothing& a, TemporalIRLSSmoothing& b) {
    a.Swap(&b);
  }
  inline void Swap(TemporalIRLSSmoothing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporalIRLSSmoothing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TemporalIRLSSmoothing* New() const final {
    return CreateMaybeMessage<TemporalIRLSSmoothing>(nullptr);
  }

  TemporalIRLSSmoothing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TemporalIRLSSmoothing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TemporalIRLSSmoothing& from);
  void MergeFrom(const TemporalIRLSSmoothing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemporalIRLSSmoothing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TemporalIRLSSmoothing";
  }
  protected:
  explicit TemporalIRLSSmoothing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightSumFieldNumber = 1,
    kValueSumFieldNumber = 2,
  };
  // optional float weight_sum = 1 [default = 0];
  bool has_weight_sum() const;
  private:
  bool _internal_has_weight_sum() const;
  public:
  void clear_weight_sum();
  float weight_sum() const;
  void set_weight_sum(float value);
  private:
  float _internal_weight_sum() const;
  void _internal_set_weight_sum(float value);
  public:

  // optional float value_sum = 2 [default = 0];
  bool has_value_sum() const;
  private:
  bool _internal_has_value_sum() const;
  public:
  void clear_value_sum();
  float value_sum() const;
  void set_value_sum(float value);
  private:
  float _internal_value_sum() const;
  void _internal_set_value_sum(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TemporalIRLSSmoothing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float weight_sum_;
  float value_sum_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowFeature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowFeature) */ {
 public:
  inline RegionFlowFeature() : RegionFlowFeature(nullptr) {}
  ~RegionFlowFeature() override;
  explicit constexpr RegionFlowFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowFeature(const RegionFlowFeature& from);
  RegionFlowFeature(RegionFlowFeature&& from) noexcept
    : RegionFlowFeature() {
    *this = ::std::move(from);
  }

  inline RegionFlowFeature& operator=(const RegionFlowFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowFeature& operator=(RegionFlowFeature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowFeature* internal_default_instance() {
    return reinterpret_cast<const RegionFlowFeature*>(
               &_RegionFlowFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegionFlowFeature& a, RegionFlowFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowFeature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowFeature* New() const final {
    return CreateMaybeMessage<RegionFlowFeature>(nullptr);
  }

  RegionFlowFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowFeature& from);
  void MergeFrom(const RegionFlowFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowFeature";
  }
  protected:
  explicit RegionFlowFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegionFlowFeature_Flags Flags;
  static constexpr Flags FLAG_BROKEN_TRACK =
    RegionFlowFeature_Flags_FLAG_BROKEN_TRACK;
  static inline bool Flags_IsValid(int value) {
    return RegionFlowFeature_Flags_IsValid(value);
  }
  static constexpr Flags Flags_MIN =
    RegionFlowFeature_Flags_Flags_MIN;
  static constexpr Flags Flags_MAX =
    RegionFlowFeature_Flags_Flags_MAX;
  static constexpr int Flags_ARRAYSIZE =
    RegionFlowFeature_Flags_Flags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flags_descriptor() {
    return RegionFlowFeature_Flags_descriptor();
  }
  template<typename T>
  static inline const std::string& Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flags_Name.");
    return RegionFlowFeature_Flags_Name(enum_t_value);
  }
  static inline bool Flags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flags* value) {
    return RegionFlowFeature_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 14,
    kFeatureDescriptorFieldNumber = 7,
    kFeatureMatchDescriptorFieldNumber = 8,
    kInternalIrlsFieldNumber = 10,
    kBinaryFeatureDescriptorFieldNumber = 18,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kDxFieldNumber = 3,
    kDyFieldNumber = 4,
    kTrackingErrorFieldNumber = 5,
    kCornerResponseFieldNumber = 11,
    kFlagsFieldNumber = 15,
    kFeatureIdFieldNumber = 16,
    kOctaveFieldNumber = 17,
    kIrlsWeightFieldNumber = 6,
    kTrackIdFieldNumber = 13,
  };
  // optional string label = 14;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional .mediapipe.PatchDescriptor feature_descriptor = 7;
  bool has_feature_descriptor() const;
  private:
  bool _internal_has_feature_descriptor() const;
  public:
  void clear_feature_descriptor();
  const ::mediapipe::PatchDescriptor& feature_descriptor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::PatchDescriptor* release_feature_descriptor();
  ::mediapipe::PatchDescriptor* mutable_feature_descriptor();
  void set_allocated_feature_descriptor(::mediapipe::PatchDescriptor* feature_descriptor);
  private:
  const ::mediapipe::PatchDescriptor& _internal_feature_descriptor() const;
  ::mediapipe::PatchDescriptor* _internal_mutable_feature_descriptor();
  public:
  void unsafe_arena_set_allocated_feature_descriptor(
      ::mediapipe::PatchDescriptor* feature_descriptor);
  ::mediapipe::PatchDescriptor* unsafe_arena_release_feature_descriptor();

  // optional .mediapipe.PatchDescriptor feature_match_descriptor = 8;
  bool has_feature_match_descriptor() const;
  private:
  bool _internal_has_feature_match_descriptor() const;
  public:
  void clear_feature_match_descriptor();
  const ::mediapipe::PatchDescriptor& feature_match_descriptor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::PatchDescriptor* release_feature_match_descriptor();
  ::mediapipe::PatchDescriptor* mutable_feature_match_descriptor();
  void set_allocated_feature_match_descriptor(::mediapipe::PatchDescriptor* feature_match_descriptor);
  private:
  const ::mediapipe::PatchDescriptor& _internal_feature_match_descriptor() const;
  ::mediapipe::PatchDescriptor* _internal_mutable_feature_match_descriptor();
  public:
  void unsafe_arena_set_allocated_feature_match_descriptor(
      ::mediapipe::PatchDescriptor* feature_match_descriptor);
  ::mediapipe::PatchDescriptor* unsafe_arena_release_feature_match_descriptor();

  // optional .mediapipe.TemporalIRLSSmoothing internal_irls = 10;
  bool has_internal_irls() const;
  private:
  bool _internal_has_internal_irls() const;
  public:
  void clear_internal_irls();
  const ::mediapipe::TemporalIRLSSmoothing& internal_irls() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TemporalIRLSSmoothing* release_internal_irls();
  ::mediapipe::TemporalIRLSSmoothing* mutable_internal_irls();
  void set_allocated_internal_irls(::mediapipe::TemporalIRLSSmoothing* internal_irls);
  private:
  const ::mediapipe::TemporalIRLSSmoothing& _internal_internal_irls() const;
  ::mediapipe::TemporalIRLSSmoothing* _internal_mutable_internal_irls();
  public:
  void unsafe_arena_set_allocated_internal_irls(
      ::mediapipe::TemporalIRLSSmoothing* internal_irls);
  ::mediapipe::TemporalIRLSSmoothing* unsafe_arena_release_internal_irls();

  // optional .mediapipe.BinaryFeatureDescriptor binary_feature_descriptor = 18;
  bool has_binary_feature_descriptor() const;
  private:
  bool _internal_has_binary_feature_descriptor() const;
  public:
  void clear_binary_feature_descriptor();
  const ::mediapipe::BinaryFeatureDescriptor& binary_feature_descriptor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::BinaryFeatureDescriptor* release_binary_feature_descriptor();
  ::mediapipe::BinaryFeatureDescriptor* mutable_binary_feature_descriptor();
  void set_allocated_binary_feature_descriptor(::mediapipe::BinaryFeatureDescriptor* binary_feature_descriptor);
  private:
  const ::mediapipe::BinaryFeatureDescriptor& _internal_binary_feature_descriptor() const;
  ::mediapipe::BinaryFeatureDescriptor* _internal_mutable_binary_feature_descriptor();
  public:
  void unsafe_arena_set_allocated_binary_feature_descriptor(
      ::mediapipe::BinaryFeatureDescriptor* binary_feature_descriptor);
  ::mediapipe::BinaryFeatureDescriptor* unsafe_arena_release_binary_feature_descriptor();

  // optional float x = 1 [default = 0];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2 [default = 0];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float dx = 3 [default = 0];
  bool has_dx() const;
  private:
  bool _internal_has_dx() const;
  public:
  void clear_dx();
  float dx() const;
  void set_dx(float value);
  private:
  float _internal_dx() const;
  void _internal_set_dx(float value);
  public:

  // optional float dy = 4 [default = 0];
  bool has_dy() const;
  private:
  bool _internal_has_dy() const;
  public:
  void clear_dy();
  float dy() const;
  void set_dy(float value);
  private:
  float _internal_dy() const;
  void _internal_set_dy(float value);
  public:

  // optional float tracking_error = 5 [default = 0];
  bool has_tracking_error() const;
  private:
  bool _internal_has_tracking_error() const;
  public:
  void clear_tracking_error();
  float tracking_error() const;
  void set_tracking_error(float value);
  private:
  float _internal_tracking_error() const;
  void _internal_set_tracking_error(float value);
  public:

  // optional float corner_response = 11 [default = 0];
  bool has_corner_response() const;
  private:
  bool _internal_has_corner_response() const;
  public:
  void clear_corner_response();
  float corner_response() const;
  void set_corner_response(float value);
  private:
  float _internal_corner_response() const;
  void _internal_set_corner_response(float value);
  public:

  // optional int32 flags = 15;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 feature_id = 16;
  bool has_feature_id() const;
  private:
  bool _internal_has_feature_id() const;
  public:
  void clear_feature_id();
  ::PROTOBUF_NAMESPACE_ID::int32 feature_id() const;
  void set_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_feature_id() const;
  void _internal_set_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 octave = 17 [default = 0];
  bool has_octave() const;
  private:
  bool _internal_has_octave() const;
  public:
  void clear_octave();
  ::PROTOBUF_NAMESPACE_ID::int32 octave() const;
  void set_octave(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_octave() const;
  void _internal_set_octave(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float irls_weight = 6 [default = 1];
  bool has_irls_weight() const;
  private:
  bool _internal_has_irls_weight() const;
  public:
  void clear_irls_weight();
  float irls_weight() const;
  void set_irls_weight(float value);
  private:
  float _internal_irls_weight() const;
  void _internal_set_irls_weight(float value);
  public:

  // optional int32 track_id = 13 [default = -1];
  bool has_track_id() const;
  private:
  bool _internal_has_track_id() const;
  public:
  void clear_track_id();
  ::PROTOBUF_NAMESPACE_ID::int32 track_id() const;
  void set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_id() const;
  void _internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RegionFlowFeature)
  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowFeature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::mediapipe::PatchDescriptor* feature_descriptor_;
  ::mediapipe::PatchDescriptor* feature_match_descriptor_;
  ::mediapipe::TemporalIRLSSmoothing* internal_irls_;
  ::mediapipe::BinaryFeatureDescriptor* binary_feature_descriptor_;
  float x_;
  float y_;
  float dx_;
  float dy_;
  float tracking_error_;
  float corner_response_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 feature_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 octave_;
  float irls_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_id_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowFrame_RegionFlow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowFrame.RegionFlow) */ {
 public:
  inline RegionFlowFrame_RegionFlow() : RegionFlowFrame_RegionFlow(nullptr) {}
  ~RegionFlowFrame_RegionFlow() override;
  explicit constexpr RegionFlowFrame_RegionFlow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowFrame_RegionFlow(const RegionFlowFrame_RegionFlow& from);
  RegionFlowFrame_RegionFlow(RegionFlowFrame_RegionFlow&& from) noexcept
    : RegionFlowFrame_RegionFlow() {
    *this = ::std::move(from);
  }

  inline RegionFlowFrame_RegionFlow& operator=(const RegionFlowFrame_RegionFlow& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowFrame_RegionFlow& operator=(RegionFlowFrame_RegionFlow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowFrame_RegionFlow& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowFrame_RegionFlow* internal_default_instance() {
    return reinterpret_cast<const RegionFlowFrame_RegionFlow*>(
               &_RegionFlowFrame_RegionFlow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegionFlowFrame_RegionFlow& a, RegionFlowFrame_RegionFlow& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowFrame_RegionFlow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowFrame_RegionFlow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowFrame_RegionFlow* New() const final {
    return CreateMaybeMessage<RegionFlowFrame_RegionFlow>(nullptr);
  }

  RegionFlowFrame_RegionFlow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowFrame_RegionFlow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowFrame_RegionFlow& from);
  void MergeFrom(const RegionFlowFrame_RegionFlow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowFrame_RegionFlow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowFrame.RegionFlow";
  }
  protected:
  explicit RegionFlowFrame_RegionFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 7,
    kRegionIdFieldNumber = 1,
    kCentroidXFieldNumber = 2,
    kCentroidYFieldNumber = 3,
    kFlowXFieldNumber = 4,
    kFlowYFieldNumber = 5,
  };
  // repeated .mediapipe.RegionFlowFeature feature = 7;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::mediapipe::RegionFlowFeature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >*
      mutable_feature();
  private:
  const ::mediapipe::RegionFlowFeature& _internal_feature(int index) const;
  ::mediapipe::RegionFlowFeature* _internal_add_feature();
  public:
  const ::mediapipe::RegionFlowFeature& feature(int index) const;
  ::mediapipe::RegionFlowFeature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >&
      feature() const;

  // required int32 region_id = 1;
  bool has_region_id() const;
  private:
  bool _internal_has_region_id() const;
  public:
  void clear_region_id();
  ::PROTOBUF_NAMESPACE_ID::int32 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_region_id() const;
  void _internal_set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float centroid_x = 2 [default = 0];
  bool has_centroid_x() const;
  private:
  bool _internal_has_centroid_x() const;
  public:
  void clear_centroid_x();
  float centroid_x() const;
  void set_centroid_x(float value);
  private:
  float _internal_centroid_x() const;
  void _internal_set_centroid_x(float value);
  public:

  // optional float centroid_y = 3 [default = 0];
  bool has_centroid_y() const;
  private:
  bool _internal_has_centroid_y() const;
  public:
  void clear_centroid_y();
  float centroid_y() const;
  void set_centroid_y(float value);
  private:
  float _internal_centroid_y() const;
  void _internal_set_centroid_y(float value);
  public:

  // optional float flow_x = 4 [default = 0];
  bool has_flow_x() const;
  private:
  bool _internal_has_flow_x() const;
  public:
  void clear_flow_x();
  float flow_x() const;
  void set_flow_x(float value);
  private:
  float _internal_flow_x() const;
  void _internal_set_flow_x(float value);
  public:

  // optional float flow_y = 5 [default = 0];
  bool has_flow_y() const;
  private:
  bool _internal_has_flow_y() const;
  public:
  void clear_flow_y();
  float flow_y() const;
  void set_flow_y(float value);
  private:
  float _internal_flow_y() const;
  void _internal_set_flow_y(float value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RegionFlowFrame_RegionFlow)
  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowFrame.RegionFlow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature > feature_;
  ::PROTOBUF_NAMESPACE_ID::int32 region_id_;
  float centroid_x_;
  float centroid_y_;
  float flow_x_;
  float flow_y_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowFrame_BlockDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowFrame.BlockDescriptor) */ {
 public:
  inline RegionFlowFrame_BlockDescriptor() : RegionFlowFrame_BlockDescriptor(nullptr) {}
  ~RegionFlowFrame_BlockDescriptor() override;
  explicit constexpr RegionFlowFrame_BlockDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowFrame_BlockDescriptor(const RegionFlowFrame_BlockDescriptor& from);
  RegionFlowFrame_BlockDescriptor(RegionFlowFrame_BlockDescriptor&& from) noexcept
    : RegionFlowFrame_BlockDescriptor() {
    *this = ::std::move(from);
  }

  inline RegionFlowFrame_BlockDescriptor& operator=(const RegionFlowFrame_BlockDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowFrame_BlockDescriptor& operator=(RegionFlowFrame_BlockDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowFrame_BlockDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowFrame_BlockDescriptor* internal_default_instance() {
    return reinterpret_cast<const RegionFlowFrame_BlockDescriptor*>(
               &_RegionFlowFrame_BlockDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegionFlowFrame_BlockDescriptor& a, RegionFlowFrame_BlockDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowFrame_BlockDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowFrame_BlockDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowFrame_BlockDescriptor* New() const final {
    return CreateMaybeMessage<RegionFlowFrame_BlockDescriptor>(nullptr);
  }

  RegionFlowFrame_BlockDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowFrame_BlockDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowFrame_BlockDescriptor& from);
  void MergeFrom(const RegionFlowFrame_BlockDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowFrame_BlockDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowFrame.BlockDescriptor";
  }
  protected:
  explicit RegionFlowFrame_BlockDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockWidthFieldNumber = 1,
    kBlockHeightFieldNumber = 2,
    kNumBlocksXFieldNumber = 3,
    kNumBlocksYFieldNumber = 4,
  };
  // optional int32 block_width = 1;
  bool has_block_width() const;
  private:
  bool _internal_has_block_width() const;
  public:
  void clear_block_width();
  ::PROTOBUF_NAMESPACE_ID::int32 block_width() const;
  void set_block_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_width() const;
  void _internal_set_block_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 block_height = 2;
  bool has_block_height() const;
  private:
  bool _internal_has_block_height() const;
  public:
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int32 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_blocks_x = 3 [default = 0];
  bool has_num_blocks_x() const;
  private:
  bool _internal_has_num_blocks_x() const;
  public:
  void clear_num_blocks_x();
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks_x() const;
  void set_num_blocks_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_blocks_x() const;
  void _internal_set_num_blocks_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_blocks_y = 4 [default = 0];
  bool has_num_blocks_y() const;
  private:
  bool _internal_has_num_blocks_y() const;
  public:
  void clear_num_blocks_y();
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks_y() const;
  void set_num_blocks_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_blocks_y() const;
  void _internal_set_num_blocks_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowFrame.BlockDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_blocks_y_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowFrame) */ {
 public:
  inline RegionFlowFrame() : RegionFlowFrame(nullptr) {}
  ~RegionFlowFrame() override;
  explicit constexpr RegionFlowFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowFrame(const RegionFlowFrame& from);
  RegionFlowFrame(RegionFlowFrame&& from) noexcept
    : RegionFlowFrame() {
    *this = ::std::move(from);
  }

  inline RegionFlowFrame& operator=(const RegionFlowFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowFrame& operator=(RegionFlowFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowFrame* internal_default_instance() {
    return reinterpret_cast<const RegionFlowFrame*>(
               &_RegionFlowFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegionFlowFrame& a, RegionFlowFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowFrame* New() const final {
    return CreateMaybeMessage<RegionFlowFrame>(nullptr);
  }

  RegionFlowFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowFrame& from);
  void MergeFrom(const RegionFlowFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowFrame";
  }
  protected:
  explicit RegionFlowFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegionFlowFrame_RegionFlow RegionFlow;
  typedef RegionFlowFrame_BlockDescriptor BlockDescriptor;

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFlowFieldNumber = 1,
    kBlockDescriptorFieldNumber = 10,
    kNumTotalFeaturesFieldNumber = 2,
    kUnstableFrameFieldNumber = 4,
    kBlurScoreFieldNumber = 7,
    kFrameWidthFieldNumber = 8,
    kFrameHeightFieldNumber = 9,
  };
  // repeated .mediapipe.RegionFlowFrame.RegionFlow region_flow = 1;
  int region_flow_size() const;
  private:
  int _internal_region_flow_size() const;
  public:
  void clear_region_flow();
  ::mediapipe::RegionFlowFrame_RegionFlow* mutable_region_flow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFrame_RegionFlow >*
      mutable_region_flow();
  private:
  const ::mediapipe::RegionFlowFrame_RegionFlow& _internal_region_flow(int index) const;
  ::mediapipe::RegionFlowFrame_RegionFlow* _internal_add_region_flow();
  public:
  const ::mediapipe::RegionFlowFrame_RegionFlow& region_flow(int index) const;
  ::mediapipe::RegionFlowFrame_RegionFlow* add_region_flow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFrame_RegionFlow >&
      region_flow() const;

  // optional .mediapipe.RegionFlowFrame.BlockDescriptor block_descriptor = 10;
  bool has_block_descriptor() const;
  private:
  bool _internal_has_block_descriptor() const;
  public:
  void clear_block_descriptor();
  const ::mediapipe::RegionFlowFrame_BlockDescriptor& block_descriptor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::RegionFlowFrame_BlockDescriptor* release_block_descriptor();
  ::mediapipe::RegionFlowFrame_BlockDescriptor* mutable_block_descriptor();
  void set_allocated_block_descriptor(::mediapipe::RegionFlowFrame_BlockDescriptor* block_descriptor);
  private:
  const ::mediapipe::RegionFlowFrame_BlockDescriptor& _internal_block_descriptor() const;
  ::mediapipe::RegionFlowFrame_BlockDescriptor* _internal_mutable_block_descriptor();
  public:
  void unsafe_arena_set_allocated_block_descriptor(
      ::mediapipe::RegionFlowFrame_BlockDescriptor* block_descriptor);
  ::mediapipe::RegionFlowFrame_BlockDescriptor* unsafe_arena_release_block_descriptor();

  // optional int32 num_total_features = 2 [default = 0];
  bool has_num_total_features() const;
  private:
  bool _internal_has_num_total_features() const;
  public:
  void clear_num_total_features();
  ::PROTOBUF_NAMESPACE_ID::int32 num_total_features() const;
  void set_num_total_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_total_features() const;
  void _internal_set_num_total_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool unstable_frame = 4 [default = false];
  bool has_unstable_frame() const;
  private:
  bool _internal_has_unstable_frame() const;
  public:
  void clear_unstable_frame();
  bool unstable_frame() const;
  void set_unstable_frame(bool value);
  private:
  bool _internal_unstable_frame() const;
  void _internal_set_unstable_frame(bool value);
  public:

  // optional float blur_score = 7;
  bool has_blur_score() const;
  private:
  bool _internal_has_blur_score() const;
  public:
  void clear_blur_score();
  float blur_score() const;
  void set_blur_score(float value);
  private:
  float _internal_blur_score() const;
  void _internal_set_blur_score(float value);
  public:

  // optional int32 frame_width = 8;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_width() const;
  void set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_width() const;
  void _internal_set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 frame_height = 9;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_height() const;
  void set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_height() const;
  void _internal_set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RegionFlowFrame)
  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFrame_RegionFlow > region_flow_;
  ::mediapipe::RegionFlowFrame_BlockDescriptor* block_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_total_features_;
  bool unstable_frame_;
  float blur_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_height_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowFeatureList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowFeatureList) */ {
 public:
  inline RegionFlowFeatureList() : RegionFlowFeatureList(nullptr) {}
  ~RegionFlowFeatureList() override;
  explicit constexpr RegionFlowFeatureList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowFeatureList(const RegionFlowFeatureList& from);
  RegionFlowFeatureList(RegionFlowFeatureList&& from) noexcept
    : RegionFlowFeatureList() {
    *this = ::std::move(from);
  }

  inline RegionFlowFeatureList& operator=(const RegionFlowFeatureList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowFeatureList& operator=(RegionFlowFeatureList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowFeatureList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowFeatureList* internal_default_instance() {
    return reinterpret_cast<const RegionFlowFeatureList*>(
               &_RegionFlowFeatureList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegionFlowFeatureList& a, RegionFlowFeatureList& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowFeatureList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowFeatureList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowFeatureList* New() const final {
    return CreateMaybeMessage<RegionFlowFeatureList>(nullptr);
  }

  RegionFlowFeatureList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowFeatureList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowFeatureList& from);
  void MergeFrom(const RegionFlowFeatureList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowFeatureList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowFeatureList";
  }
  protected:
  explicit RegionFlowFeatureList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
    kActivelyDiscardedTrackedIdsFieldNumber = 13,
    kFrameWidthFieldNumber = 2,
    kFrameHeightFieldNumber = 3,
    kDistanceFromBorderFieldNumber = 5,
    kBlurScoreFieldNumber = 6,
    kUnstableFieldNumber = 4,
    kLongTracksFieldNumber = 7,
    kIsDuplicatedFieldNumber = 12,
    kFracLongFeaturesRejectedFieldNumber = 8,
    kTimestampUsecFieldNumber = 10,
    kMatchFrameFieldNumber = 11,
    kVisualConsistencyFieldNumber = 9,
  };
  // repeated .mediapipe.RegionFlowFeature feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::mediapipe::RegionFlowFeature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >*
      mutable_feature();
  private:
  const ::mediapipe::RegionFlowFeature& _internal_feature(int index) const;
  ::mediapipe::RegionFlowFeature* _internal_add_feature();
  public:
  const ::mediapipe::RegionFlowFeature& feature(int index) const;
  ::mediapipe::RegionFlowFeature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >&
      feature() const;

  // repeated int32 actively_discarded_tracked_ids = 13;
  int actively_discarded_tracked_ids_size() const;
  private:
  int _internal_actively_discarded_tracked_ids_size() const;
  public:
  void clear_actively_discarded_tracked_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actively_discarded_tracked_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_actively_discarded_tracked_ids() const;
  void _internal_add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_actively_discarded_tracked_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 actively_discarded_tracked_ids(int index) const;
  void set_actively_discarded_tracked_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      actively_discarded_tracked_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_actively_discarded_tracked_ids();

  // optional int32 frame_width = 2;
  bool has_frame_width() const;
  private:
  bool _internal_has_frame_width() const;
  public:
  void clear_frame_width();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_width() const;
  void set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_width() const;
  void _internal_set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 frame_height = 3;
  bool has_frame_height() const;
  private:
  bool _internal_has_frame_height() const;
  public:
  void clear_frame_height();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_height() const;
  void set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_height() const;
  void _internal_set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 distance_from_border = 5 [default = 0];
  bool has_distance_from_border() const;
  private:
  bool _internal_has_distance_from_border() const;
  public:
  void clear_distance_from_border();
  ::PROTOBUF_NAMESPACE_ID::int32 distance_from_border() const;
  void set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distance_from_border() const;
  void _internal_set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float blur_score = 6;
  bool has_blur_score() const;
  private:
  bool _internal_has_blur_score() const;
  public:
  void clear_blur_score();
  float blur_score() const;
  void set_blur_score(float value);
  private:
  float _internal_blur_score() const;
  void _internal_set_blur_score(float value);
  public:

  // optional bool unstable = 4 [default = false];
  bool has_unstable() const;
  private:
  bool _internal_has_unstable() const;
  public:
  void clear_unstable();
  bool unstable() const;
  void set_unstable(bool value);
  private:
  bool _internal_unstable() const;
  void _internal_set_unstable(bool value);
  public:

  // optional bool long_tracks = 7 [default = false];
  bool has_long_tracks() const;
  private:
  bool _internal_has_long_tracks() const;
  public:
  void clear_long_tracks();
  bool long_tracks() const;
  void set_long_tracks(bool value);
  private:
  bool _internal_long_tracks() const;
  void _internal_set_long_tracks(bool value);
  public:

  // optional bool is_duplicated = 12 [default = false];
  bool has_is_duplicated() const;
  private:
  bool _internal_has_is_duplicated() const;
  public:
  void clear_is_duplicated();
  bool is_duplicated() const;
  void set_is_duplicated(bool value);
  private:
  bool _internal_is_duplicated() const;
  void _internal_set_is_duplicated(bool value);
  public:

  // optional float frac_long_features_rejected = 8 [default = 0];
  bool has_frac_long_features_rejected() const;
  private:
  bool _internal_has_frac_long_features_rejected() const;
  public:
  void clear_frac_long_features_rejected();
  float frac_long_features_rejected() const;
  void set_frac_long_features_rejected(float value);
  private:
  float _internal_frac_long_features_rejected() const;
  void _internal_set_frac_long_features_rejected(float value);
  public:

  // optional int64 timestamp_usec = 10 [default = 0];
  bool has_timestamp_usec() const;
  private:
  bool _internal_has_timestamp_usec() const;
  public:
  void clear_timestamp_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec() const;
  void set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_usec() const;
  void _internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 match_frame = 11 [default = 0];
  bool has_match_frame() const;
  private:
  bool _internal_has_match_frame() const;
  public:
  void clear_match_frame();
  ::PROTOBUF_NAMESPACE_ID::int32 match_frame() const;
  void set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_frame() const;
  void _internal_set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float visual_consistency = 9 [default = -1];
  bool has_visual_consistency() const;
  private:
  bool _internal_has_visual_consistency() const;
  public:
  void clear_visual_consistency();
  float visual_consistency() const;
  void set_visual_consistency(float value);
  private:
  float _internal_visual_consistency() const;
  void _internal_set_visual_consistency(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowFeatureList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature > feature_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > actively_discarded_tracked_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 distance_from_border_;
  float blur_score_;
  bool unstable_;
  bool long_tracks_;
  bool is_duplicated_;
  float frac_long_features_rejected_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_frame_;
  float visual_consistency_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class SalientPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.SalientPoint) */ {
 public:
  inline SalientPoint() : SalientPoint(nullptr) {}
  ~SalientPoint() override;
  explicit constexpr SalientPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SalientPoint(const SalientPoint& from);
  SalientPoint(SalientPoint&& from) noexcept
    : SalientPoint() {
    *this = ::std::move(from);
  }

  inline SalientPoint& operator=(const SalientPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SalientPoint& operator=(SalientPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SalientPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SalientPoint* internal_default_instance() {
    return reinterpret_cast<const SalientPoint*>(
               &_SalientPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SalientPoint& a, SalientPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SalientPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SalientPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SalientPoint* New() const final {
    return CreateMaybeMessage<SalientPoint>(nullptr);
  }

  SalientPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SalientPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SalientPoint& from);
  void MergeFrom(const SalientPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SalientPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.SalientPoint";
  }
  protected:
  explicit SalientPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SalientPoint_SalientPointType SalientPointType;
  static constexpr SalientPointType TYPE_INCLUDE =
    SalientPoint_SalientPointType_TYPE_INCLUDE;
  static constexpr SalientPointType TYPE_EXCLUDE_LEFT =
    SalientPoint_SalientPointType_TYPE_EXCLUDE_LEFT;
  static constexpr SalientPointType TYPE_EXCLUDE_RIGHT =
    SalientPoint_SalientPointType_TYPE_EXCLUDE_RIGHT;
  static inline bool SalientPointType_IsValid(int value) {
    return SalientPoint_SalientPointType_IsValid(value);
  }
  static constexpr SalientPointType SalientPointType_MIN =
    SalientPoint_SalientPointType_SalientPointType_MIN;
  static constexpr SalientPointType SalientPointType_MAX =
    SalientPoint_SalientPointType_SalientPointType_MAX;
  static constexpr int SalientPointType_ARRAYSIZE =
    SalientPoint_SalientPointType_SalientPointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SalientPointType_descriptor() {
    return SalientPoint_SalientPointType_descriptor();
  }
  template<typename T>
  static inline const std::string& SalientPointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SalientPointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SalientPointType_Name.");
    return SalientPoint_SalientPointType_Name(enum_t_value);
  }
  static inline bool SalientPointType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SalientPointType* value) {
    return SalientPoint_SalientPointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormPointXFieldNumber = 1,
    kNormPointYFieldNumber = 2,
    kNormMajorFieldNumber = 6,
    kNormMinorFieldNumber = 7,
    kAngleFieldNumber = 8,
    kLeftFieldNumber = 3,
    kBottomFieldNumber = 4,
    kWeightFieldNumber = 5,
    kRightFieldNumber = 9,
    kTopFieldNumber = 10,
    kTypeFieldNumber = 11,
  };
  // optional float norm_point_x = 1 [default = 0];
  bool has_norm_point_x() const;
  private:
  bool _internal_has_norm_point_x() const;
  public:
  void clear_norm_point_x();
  float norm_point_x() const;
  void set_norm_point_x(float value);
  private:
  float _internal_norm_point_x() const;
  void _internal_set_norm_point_x(float value);
  public:

  // optional float norm_point_y = 2 [default = 0];
  bool has_norm_point_y() const;
  private:
  bool _internal_has_norm_point_y() const;
  public:
  void clear_norm_point_y();
  float norm_point_y() const;
  void set_norm_point_y(float value);
  private:
  float _internal_norm_point_y() const;
  void _internal_set_norm_point_y(float value);
  public:

  // optional float norm_major = 6;
  bool has_norm_major() const;
  private:
  bool _internal_has_norm_major() const;
  public:
  void clear_norm_major();
  float norm_major() const;
  void set_norm_major(float value);
  private:
  float _internal_norm_major() const;
  void _internal_set_norm_major(float value);
  public:

  // optional float norm_minor = 7;
  bool has_norm_minor() const;
  private:
  bool _internal_has_norm_minor() const;
  public:
  void clear_norm_minor();
  float norm_minor() const;
  void set_norm_minor(float value);
  private:
  float _internal_norm_minor() const;
  void _internal_set_norm_minor(float value);
  public:

  // optional float angle = 8;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // optional float left = 3 [default = 0.3];
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // optional float bottom = 4 [default = 0.3];
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);
  private:
  float _internal_bottom() const;
  void _internal_set_bottom(float value);
  public:

  // optional float weight = 5 [default = 15];
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // optional float right = 9 [default = 0.3];
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // optional float top = 10 [default = 0.3];
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  float top() const;
  void set_top(float value);
  private:
  float _internal_top() const;
  void _internal_set_top(float value);
  public:

  // optional .mediapipe.SalientPoint.SalientPointType type = 11 [default = TYPE_INCLUDE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mediapipe::SalientPoint_SalientPointType type() const;
  void set_type(::mediapipe::SalientPoint_SalientPointType value);
  private:
  ::mediapipe::SalientPoint_SalientPointType _internal_type() const;
  void _internal_set_type(::mediapipe::SalientPoint_SalientPointType value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SalientPoint)
  // @@protoc_insertion_point(class_scope:mediapipe.SalientPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float norm_point_x_;
  float norm_point_y_;
  float norm_major_;
  float norm_minor_;
  float angle_;
  float left_;
  float bottom_;
  float weight_;
  float right_;
  float top_;
  int type_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// -------------------------------------------------------------------

class SalientPointFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.SalientPointFrame) */ {
 public:
  inline SalientPointFrame() : SalientPointFrame(nullptr) {}
  ~SalientPointFrame() override;
  explicit constexpr SalientPointFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SalientPointFrame(const SalientPointFrame& from);
  SalientPointFrame(SalientPointFrame&& from) noexcept
    : SalientPointFrame() {
    *this = ::std::move(from);
  }

  inline SalientPointFrame& operator=(const SalientPointFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SalientPointFrame& operator=(SalientPointFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SalientPointFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SalientPointFrame* internal_default_instance() {
    return reinterpret_cast<const SalientPointFrame*>(
               &_SalientPointFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SalientPointFrame& a, SalientPointFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SalientPointFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SalientPointFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SalientPointFrame* New() const final {
    return CreateMaybeMessage<SalientPointFrame>(nullptr);
  }

  SalientPointFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SalientPointFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SalientPointFrame& from);
  void MergeFrom(const SalientPointFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SalientPointFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.SalientPointFrame";
  }
  protected:
  explicit SalientPointFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .mediapipe.SalientPoint point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::mediapipe::SalientPoint* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::SalientPoint >*
      mutable_point();
  private:
  const ::mediapipe::SalientPoint& _internal_point(int index) const;
  ::mediapipe::SalientPoint* _internal_add_point();
  public:
  const ::mediapipe::SalientPoint& point(int index) const;
  ::mediapipe::SalientPoint* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::SalientPoint >&
      point() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SalientPointFrame)
  // @@protoc_insertion_point(class_scope:mediapipe.SalientPointFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::SalientPoint > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PatchDescriptor

// repeated float data = 1;
inline int PatchDescriptor::_internal_data_size() const {
  return data_.size();
}
inline int PatchDescriptor::data_size() const {
  return _internal_data_size();
}
inline void PatchDescriptor::clear_data() {
  data_.Clear();
}
inline float PatchDescriptor::_internal_data(int index) const {
  return data_.Get(index);
}
inline float PatchDescriptor::data(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.PatchDescriptor.data)
  return _internal_data(index);
}
inline void PatchDescriptor::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.PatchDescriptor.data)
}
inline void PatchDescriptor::_internal_add_data(float value) {
  data_.Add(value);
}
inline void PatchDescriptor::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:mediapipe.PatchDescriptor.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PatchDescriptor::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PatchDescriptor::data() const {
  // @@protoc_insertion_point(field_list:mediapipe.PatchDescriptor.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PatchDescriptor::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PatchDescriptor::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.PatchDescriptor.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// BinaryFeatureDescriptor

// optional bytes data = 1;
inline bool BinaryFeatureDescriptor::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BinaryFeatureDescriptor::has_data() const {
  return _internal_has_data();
}
inline void BinaryFeatureDescriptor::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BinaryFeatureDescriptor::data() const {
  // @@protoc_insertion_point(field_get:mediapipe.BinaryFeatureDescriptor.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BinaryFeatureDescriptor::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.BinaryFeatureDescriptor.data)
}
inline std::string* BinaryFeatureDescriptor::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mediapipe.BinaryFeatureDescriptor.data)
  return _internal_mutable_data();
}
inline const std::string& BinaryFeatureDescriptor::_internal_data() const {
  return data_.Get();
}
inline void BinaryFeatureDescriptor::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BinaryFeatureDescriptor::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BinaryFeatureDescriptor::release_data() {
  // @@protoc_insertion_point(field_release:mediapipe.BinaryFeatureDescriptor.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BinaryFeatureDescriptor::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.BinaryFeatureDescriptor.data)
}

// -------------------------------------------------------------------

// TemporalIRLSSmoothing

// optional float weight_sum = 1 [default = 0];
inline bool TemporalIRLSSmoothing::_internal_has_weight_sum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TemporalIRLSSmoothing::has_weight_sum() const {
  return _internal_has_weight_sum();
}
inline void TemporalIRLSSmoothing::clear_weight_sum() {
  weight_sum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TemporalIRLSSmoothing::_internal_weight_sum() const {
  return weight_sum_;
}
inline float TemporalIRLSSmoothing::weight_sum() const {
  // @@protoc_insertion_point(field_get:mediapipe.TemporalIRLSSmoothing.weight_sum)
  return _internal_weight_sum();
}
inline void TemporalIRLSSmoothing::_internal_set_weight_sum(float value) {
  _has_bits_[0] |= 0x00000001u;
  weight_sum_ = value;
}
inline void TemporalIRLSSmoothing::set_weight_sum(float value) {
  _internal_set_weight_sum(value);
  // @@protoc_insertion_point(field_set:mediapipe.TemporalIRLSSmoothing.weight_sum)
}

// optional float value_sum = 2 [default = 0];
inline bool TemporalIRLSSmoothing::_internal_has_value_sum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TemporalIRLSSmoothing::has_value_sum() const {
  return _internal_has_value_sum();
}
inline void TemporalIRLSSmoothing::clear_value_sum() {
  value_sum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TemporalIRLSSmoothing::_internal_value_sum() const {
  return value_sum_;
}
inline float TemporalIRLSSmoothing::value_sum() const {
  // @@protoc_insertion_point(field_get:mediapipe.TemporalIRLSSmoothing.value_sum)
  return _internal_value_sum();
}
inline void TemporalIRLSSmoothing::_internal_set_value_sum(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_sum_ = value;
}
inline void TemporalIRLSSmoothing::set_value_sum(float value) {
  _internal_set_value_sum(value);
  // @@protoc_insertion_point(field_set:mediapipe.TemporalIRLSSmoothing.value_sum)
}

// -------------------------------------------------------------------

// RegionFlowFeature

// optional float x = 1 [default = 0];
inline bool RegionFlowFeature::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_x() const {
  return _internal_has_x();
}
inline void RegionFlowFeature::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RegionFlowFeature::_internal_x() const {
  return x_;
}
inline float RegionFlowFeature::x() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.x)
  return _internal_x();
}
inline void RegionFlowFeature::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
}
inline void RegionFlowFeature::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.x)
}

// optional float y = 2 [default = 0];
inline bool RegionFlowFeature::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_y() const {
  return _internal_has_y();
}
inline void RegionFlowFeature::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float RegionFlowFeature::_internal_y() const {
  return y_;
}
inline float RegionFlowFeature::y() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.y)
  return _internal_y();
}
inline void RegionFlowFeature::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
}
inline void RegionFlowFeature::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.y)
}

// optional float dx = 3 [default = 0];
inline bool RegionFlowFeature::_internal_has_dx() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_dx() const {
  return _internal_has_dx();
}
inline void RegionFlowFeature::clear_dx() {
  dx_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float RegionFlowFeature::_internal_dx() const {
  return dx_;
}
inline float RegionFlowFeature::dx() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.dx)
  return _internal_dx();
}
inline void RegionFlowFeature::_internal_set_dx(float value) {
  _has_bits_[0] |= 0x00000080u;
  dx_ = value;
}
inline void RegionFlowFeature::set_dx(float value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.dx)
}

// optional float dy = 4 [default = 0];
inline bool RegionFlowFeature::_internal_has_dy() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_dy() const {
  return _internal_has_dy();
}
inline void RegionFlowFeature::clear_dy() {
  dy_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float RegionFlowFeature::_internal_dy() const {
  return dy_;
}
inline float RegionFlowFeature::dy() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.dy)
  return _internal_dy();
}
inline void RegionFlowFeature::_internal_set_dy(float value) {
  _has_bits_[0] |= 0x00000100u;
  dy_ = value;
}
inline void RegionFlowFeature::set_dy(float value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.dy)
}

// optional int32 track_id = 13 [default = -1];
inline bool RegionFlowFeature::_internal_has_track_id() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_track_id() const {
  return _internal_has_track_id();
}
inline void RegionFlowFeature::clear_track_id() {
  track_id_ = -1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::_internal_track_id() const {
  return track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::track_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.track_id)
  return _internal_track_id();
}
inline void RegionFlowFeature::_internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  track_id_ = value;
}
inline void RegionFlowFeature::set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.track_id)
}

// optional float tracking_error = 5 [default = 0];
inline bool RegionFlowFeature::_internal_has_tracking_error() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_tracking_error() const {
  return _internal_has_tracking_error();
}
inline void RegionFlowFeature::clear_tracking_error() {
  tracking_error_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float RegionFlowFeature::_internal_tracking_error() const {
  return tracking_error_;
}
inline float RegionFlowFeature::tracking_error() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.tracking_error)
  return _internal_tracking_error();
}
inline void RegionFlowFeature::_internal_set_tracking_error(float value) {
  _has_bits_[0] |= 0x00000200u;
  tracking_error_ = value;
}
inline void RegionFlowFeature::set_tracking_error(float value) {
  _internal_set_tracking_error(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.tracking_error)
}

// optional float irls_weight = 6 [default = 1];
inline bool RegionFlowFeature::_internal_has_irls_weight() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_irls_weight() const {
  return _internal_has_irls_weight();
}
inline void RegionFlowFeature::clear_irls_weight() {
  irls_weight_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline float RegionFlowFeature::_internal_irls_weight() const {
  return irls_weight_;
}
inline float RegionFlowFeature::irls_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.irls_weight)
  return _internal_irls_weight();
}
inline void RegionFlowFeature::_internal_set_irls_weight(float value) {
  _has_bits_[0] |= 0x00004000u;
  irls_weight_ = value;
}
inline void RegionFlowFeature::set_irls_weight(float value) {
  _internal_set_irls_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.irls_weight)
}

// optional float corner_response = 11 [default = 0];
inline bool RegionFlowFeature::_internal_has_corner_response() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_corner_response() const {
  return _internal_has_corner_response();
}
inline void RegionFlowFeature::clear_corner_response() {
  corner_response_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float RegionFlowFeature::_internal_corner_response() const {
  return corner_response_;
}
inline float RegionFlowFeature::corner_response() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.corner_response)
  return _internal_corner_response();
}
inline void RegionFlowFeature::_internal_set_corner_response(float value) {
  _has_bits_[0] |= 0x00000400u;
  corner_response_ = value;
}
inline void RegionFlowFeature::set_corner_response(float value) {
  _internal_set_corner_response(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.corner_response)
}

// optional .mediapipe.PatchDescriptor feature_descriptor = 7;
inline bool RegionFlowFeature::_internal_has_feature_descriptor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || feature_descriptor_ != nullptr);
  return value;
}
inline bool RegionFlowFeature::has_feature_descriptor() const {
  return _internal_has_feature_descriptor();
}
inline void RegionFlowFeature::clear_feature_descriptor() {
  if (feature_descriptor_ != nullptr) feature_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::PatchDescriptor& RegionFlowFeature::_internal_feature_descriptor() const {
  const ::mediapipe::PatchDescriptor* p = feature_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::PatchDescriptor&>(
      ::mediapipe::_PatchDescriptor_default_instance_);
}
inline const ::mediapipe::PatchDescriptor& RegionFlowFeature::feature_descriptor() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.feature_descriptor)
  return _internal_feature_descriptor();
}
inline void RegionFlowFeature::unsafe_arena_set_allocated_feature_descriptor(
    ::mediapipe::PatchDescriptor* feature_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature_descriptor_);
  }
  feature_descriptor_ = feature_descriptor;
  if (feature_descriptor) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowFeature.feature_descriptor)
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::release_feature_descriptor() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::PatchDescriptor* temp = feature_descriptor_;
  feature_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::unsafe_arena_release_feature_descriptor() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowFeature.feature_descriptor)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::PatchDescriptor* temp = feature_descriptor_;
  feature_descriptor_ = nullptr;
  return temp;
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::_internal_mutable_feature_descriptor() {
  _has_bits_[0] |= 0x00000002u;
  if (feature_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::PatchDescriptor>(GetArena());
    feature_descriptor_ = p;
  }
  return feature_descriptor_;
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::mutable_feature_descriptor() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFeature.feature_descriptor)
  return _internal_mutable_feature_descriptor();
}
inline void RegionFlowFeature::set_allocated_feature_descriptor(::mediapipe::PatchDescriptor* feature_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete feature_descriptor_;
  }
  if (feature_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(feature_descriptor);
    if (message_arena != submessage_arena) {
      feature_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  feature_descriptor_ = feature_descriptor;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowFeature.feature_descriptor)
}

// optional .mediapipe.PatchDescriptor feature_match_descriptor = 8;
inline bool RegionFlowFeature::_internal_has_feature_match_descriptor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || feature_match_descriptor_ != nullptr);
  return value;
}
inline bool RegionFlowFeature::has_feature_match_descriptor() const {
  return _internal_has_feature_match_descriptor();
}
inline void RegionFlowFeature::clear_feature_match_descriptor() {
  if (feature_match_descriptor_ != nullptr) feature_match_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::PatchDescriptor& RegionFlowFeature::_internal_feature_match_descriptor() const {
  const ::mediapipe::PatchDescriptor* p = feature_match_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::PatchDescriptor&>(
      ::mediapipe::_PatchDescriptor_default_instance_);
}
inline const ::mediapipe::PatchDescriptor& RegionFlowFeature::feature_match_descriptor() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.feature_match_descriptor)
  return _internal_feature_match_descriptor();
}
inline void RegionFlowFeature::unsafe_arena_set_allocated_feature_match_descriptor(
    ::mediapipe::PatchDescriptor* feature_match_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature_match_descriptor_);
  }
  feature_match_descriptor_ = feature_match_descriptor;
  if (feature_match_descriptor) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowFeature.feature_match_descriptor)
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::release_feature_match_descriptor() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::PatchDescriptor* temp = feature_match_descriptor_;
  feature_match_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::unsafe_arena_release_feature_match_descriptor() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowFeature.feature_match_descriptor)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::PatchDescriptor* temp = feature_match_descriptor_;
  feature_match_descriptor_ = nullptr;
  return temp;
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::_internal_mutable_feature_match_descriptor() {
  _has_bits_[0] |= 0x00000004u;
  if (feature_match_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::PatchDescriptor>(GetArena());
    feature_match_descriptor_ = p;
  }
  return feature_match_descriptor_;
}
inline ::mediapipe::PatchDescriptor* RegionFlowFeature::mutable_feature_match_descriptor() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFeature.feature_match_descriptor)
  return _internal_mutable_feature_match_descriptor();
}
inline void RegionFlowFeature::set_allocated_feature_match_descriptor(::mediapipe::PatchDescriptor* feature_match_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete feature_match_descriptor_;
  }
  if (feature_match_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(feature_match_descriptor);
    if (message_arena != submessage_arena) {
      feature_match_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_match_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  feature_match_descriptor_ = feature_match_descriptor;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowFeature.feature_match_descriptor)
}

// optional .mediapipe.TemporalIRLSSmoothing internal_irls = 10;
inline bool RegionFlowFeature::_internal_has_internal_irls() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || internal_irls_ != nullptr);
  return value;
}
inline bool RegionFlowFeature::has_internal_irls() const {
  return _internal_has_internal_irls();
}
inline void RegionFlowFeature::clear_internal_irls() {
  if (internal_irls_ != nullptr) internal_irls_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mediapipe::TemporalIRLSSmoothing& RegionFlowFeature::_internal_internal_irls() const {
  const ::mediapipe::TemporalIRLSSmoothing* p = internal_irls_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TemporalIRLSSmoothing&>(
      ::mediapipe::_TemporalIRLSSmoothing_default_instance_);
}
inline const ::mediapipe::TemporalIRLSSmoothing& RegionFlowFeature::internal_irls() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.internal_irls)
  return _internal_internal_irls();
}
inline void RegionFlowFeature::unsafe_arena_set_allocated_internal_irls(
    ::mediapipe::TemporalIRLSSmoothing* internal_irls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_irls_);
  }
  internal_irls_ = internal_irls;
  if (internal_irls) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowFeature.internal_irls)
}
inline ::mediapipe::TemporalIRLSSmoothing* RegionFlowFeature::release_internal_irls() {
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::TemporalIRLSSmoothing* temp = internal_irls_;
  internal_irls_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TemporalIRLSSmoothing* RegionFlowFeature::unsafe_arena_release_internal_irls() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowFeature.internal_irls)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::TemporalIRLSSmoothing* temp = internal_irls_;
  internal_irls_ = nullptr;
  return temp;
}
inline ::mediapipe::TemporalIRLSSmoothing* RegionFlowFeature::_internal_mutable_internal_irls() {
  _has_bits_[0] |= 0x00000008u;
  if (internal_irls_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TemporalIRLSSmoothing>(GetArena());
    internal_irls_ = p;
  }
  return internal_irls_;
}
inline ::mediapipe::TemporalIRLSSmoothing* RegionFlowFeature::mutable_internal_irls() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFeature.internal_irls)
  return _internal_mutable_internal_irls();
}
inline void RegionFlowFeature::set_allocated_internal_irls(::mediapipe::TemporalIRLSSmoothing* internal_irls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete internal_irls_;
  }
  if (internal_irls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(internal_irls);
    if (message_arena != submessage_arena) {
      internal_irls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_irls, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  internal_irls_ = internal_irls;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowFeature.internal_irls)
}

// optional string label = 14;
inline bool RegionFlowFeature::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_label() const {
  return _internal_has_label();
}
inline void RegionFlowFeature::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegionFlowFeature::label() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void RegionFlowFeature::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.label)
}
inline std::string* RegionFlowFeature::mutable_label() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFeature.label)
  return _internal_mutable_label();
}
inline const std::string& RegionFlowFeature::_internal_label() const {
  return label_.Get();
}
inline void RegionFlowFeature::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* RegionFlowFeature::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegionFlowFeature::release_label() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowFeature.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegionFlowFeature::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowFeature.label)
}

// optional int32 flags = 15;
inline bool RegionFlowFeature::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_flags() const {
  return _internal_has_flags();
}
inline void RegionFlowFeature::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::flags() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.flags)
  return _internal_flags();
}
inline void RegionFlowFeature::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  flags_ = value;
}
inline void RegionFlowFeature::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.flags)
}

// optional int32 feature_id = 16;
inline bool RegionFlowFeature::_internal_has_feature_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_feature_id() const {
  return _internal_has_feature_id();
}
inline void RegionFlowFeature::clear_feature_id() {
  feature_id_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::_internal_feature_id() const {
  return feature_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::feature_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.feature_id)
  return _internal_feature_id();
}
inline void RegionFlowFeature::_internal_set_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  feature_id_ = value;
}
inline void RegionFlowFeature::set_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_feature_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.feature_id)
}

// optional int32 octave = 17 [default = 0];
inline bool RegionFlowFeature::_internal_has_octave() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RegionFlowFeature::has_octave() const {
  return _internal_has_octave();
}
inline void RegionFlowFeature::clear_octave() {
  octave_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::_internal_octave() const {
  return octave_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeature::octave() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.octave)
  return _internal_octave();
}
inline void RegionFlowFeature::_internal_set_octave(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  octave_ = value;
}
inline void RegionFlowFeature::set_octave(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_octave(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeature.octave)
}

// optional .mediapipe.BinaryFeatureDescriptor binary_feature_descriptor = 18;
inline bool RegionFlowFeature::_internal_has_binary_feature_descriptor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || binary_feature_descriptor_ != nullptr);
  return value;
}
inline bool RegionFlowFeature::has_binary_feature_descriptor() const {
  return _internal_has_binary_feature_descriptor();
}
inline void RegionFlowFeature::clear_binary_feature_descriptor() {
  if (binary_feature_descriptor_ != nullptr) binary_feature_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mediapipe::BinaryFeatureDescriptor& RegionFlowFeature::_internal_binary_feature_descriptor() const {
  const ::mediapipe::BinaryFeatureDescriptor* p = binary_feature_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::BinaryFeatureDescriptor&>(
      ::mediapipe::_BinaryFeatureDescriptor_default_instance_);
}
inline const ::mediapipe::BinaryFeatureDescriptor& RegionFlowFeature::binary_feature_descriptor() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeature.binary_feature_descriptor)
  return _internal_binary_feature_descriptor();
}
inline void RegionFlowFeature::unsafe_arena_set_allocated_binary_feature_descriptor(
    ::mediapipe::BinaryFeatureDescriptor* binary_feature_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binary_feature_descriptor_);
  }
  binary_feature_descriptor_ = binary_feature_descriptor;
  if (binary_feature_descriptor) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowFeature.binary_feature_descriptor)
}
inline ::mediapipe::BinaryFeatureDescriptor* RegionFlowFeature::release_binary_feature_descriptor() {
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::BinaryFeatureDescriptor* temp = binary_feature_descriptor_;
  binary_feature_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::BinaryFeatureDescriptor* RegionFlowFeature::unsafe_arena_release_binary_feature_descriptor() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowFeature.binary_feature_descriptor)
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::BinaryFeatureDescriptor* temp = binary_feature_descriptor_;
  binary_feature_descriptor_ = nullptr;
  return temp;
}
inline ::mediapipe::BinaryFeatureDescriptor* RegionFlowFeature::_internal_mutable_binary_feature_descriptor() {
  _has_bits_[0] |= 0x00000010u;
  if (binary_feature_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::BinaryFeatureDescriptor>(GetArena());
    binary_feature_descriptor_ = p;
  }
  return binary_feature_descriptor_;
}
inline ::mediapipe::BinaryFeatureDescriptor* RegionFlowFeature::mutable_binary_feature_descriptor() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFeature.binary_feature_descriptor)
  return _internal_mutable_binary_feature_descriptor();
}
inline void RegionFlowFeature::set_allocated_binary_feature_descriptor(::mediapipe::BinaryFeatureDescriptor* binary_feature_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete binary_feature_descriptor_;
  }
  if (binary_feature_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(binary_feature_descriptor);
    if (message_arena != submessage_arena) {
      binary_feature_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_feature_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  binary_feature_descriptor_ = binary_feature_descriptor;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowFeature.binary_feature_descriptor)
}

// -------------------------------------------------------------------

// RegionFlowFrame_RegionFlow

// required int32 region_id = 1;
inline bool RegionFlowFrame_RegionFlow::_internal_has_region_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowFrame_RegionFlow::has_region_id() const {
  return _internal_has_region_id();
}
inline void RegionFlowFrame_RegionFlow::clear_region_id() {
  region_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_RegionFlow::_internal_region_id() const {
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_RegionFlow::region_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.RegionFlow.region_id)
  return _internal_region_id();
}
inline void RegionFlowFrame_RegionFlow::_internal_set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  region_id_ = value;
}
inline void RegionFlowFrame_RegionFlow::set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.RegionFlow.region_id)
}

// optional float centroid_x = 2 [default = 0];
inline bool RegionFlowFrame_RegionFlow::_internal_has_centroid_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowFrame_RegionFlow::has_centroid_x() const {
  return _internal_has_centroid_x();
}
inline void RegionFlowFrame_RegionFlow::clear_centroid_x() {
  centroid_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RegionFlowFrame_RegionFlow::_internal_centroid_x() const {
  return centroid_x_;
}
inline float RegionFlowFrame_RegionFlow::centroid_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.RegionFlow.centroid_x)
  return _internal_centroid_x();
}
inline void RegionFlowFrame_RegionFlow::_internal_set_centroid_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  centroid_x_ = value;
}
inline void RegionFlowFrame_RegionFlow::set_centroid_x(float value) {
  _internal_set_centroid_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.RegionFlow.centroid_x)
}

// optional float centroid_y = 3 [default = 0];
inline bool RegionFlowFrame_RegionFlow::_internal_has_centroid_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionFlowFrame_RegionFlow::has_centroid_y() const {
  return _internal_has_centroid_y();
}
inline void RegionFlowFrame_RegionFlow::clear_centroid_y() {
  centroid_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RegionFlowFrame_RegionFlow::_internal_centroid_y() const {
  return centroid_y_;
}
inline float RegionFlowFrame_RegionFlow::centroid_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.RegionFlow.centroid_y)
  return _internal_centroid_y();
}
inline void RegionFlowFrame_RegionFlow::_internal_set_centroid_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  centroid_y_ = value;
}
inline void RegionFlowFrame_RegionFlow::set_centroid_y(float value) {
  _internal_set_centroid_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.RegionFlow.centroid_y)
}

// optional float flow_x = 4 [default = 0];
inline bool RegionFlowFrame_RegionFlow::_internal_has_flow_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionFlowFrame_RegionFlow::has_flow_x() const {
  return _internal_has_flow_x();
}
inline void RegionFlowFrame_RegionFlow::clear_flow_x() {
  flow_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RegionFlowFrame_RegionFlow::_internal_flow_x() const {
  return flow_x_;
}
inline float RegionFlowFrame_RegionFlow::flow_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.RegionFlow.flow_x)
  return _internal_flow_x();
}
inline void RegionFlowFrame_RegionFlow::_internal_set_flow_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  flow_x_ = value;
}
inline void RegionFlowFrame_RegionFlow::set_flow_x(float value) {
  _internal_set_flow_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.RegionFlow.flow_x)
}

// optional float flow_y = 5 [default = 0];
inline bool RegionFlowFrame_RegionFlow::_internal_has_flow_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionFlowFrame_RegionFlow::has_flow_y() const {
  return _internal_has_flow_y();
}
inline void RegionFlowFrame_RegionFlow::clear_flow_y() {
  flow_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RegionFlowFrame_RegionFlow::_internal_flow_y() const {
  return flow_y_;
}
inline float RegionFlowFrame_RegionFlow::flow_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.RegionFlow.flow_y)
  return _internal_flow_y();
}
inline void RegionFlowFrame_RegionFlow::_internal_set_flow_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  flow_y_ = value;
}
inline void RegionFlowFrame_RegionFlow::set_flow_y(float value) {
  _internal_set_flow_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.RegionFlow.flow_y)
}

// repeated .mediapipe.RegionFlowFeature feature = 7;
inline int RegionFlowFrame_RegionFlow::_internal_feature_size() const {
  return feature_.size();
}
inline int RegionFlowFrame_RegionFlow::feature_size() const {
  return _internal_feature_size();
}
inline void RegionFlowFrame_RegionFlow::clear_feature() {
  feature_.Clear();
}
inline ::mediapipe::RegionFlowFeature* RegionFlowFrame_RegionFlow::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFrame.RegionFlow.feature)
  return feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >*
RegionFlowFrame_RegionFlow::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.RegionFlowFrame.RegionFlow.feature)
  return &feature_;
}
inline const ::mediapipe::RegionFlowFeature& RegionFlowFrame_RegionFlow::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline const ::mediapipe::RegionFlowFeature& RegionFlowFrame_RegionFlow::feature(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.RegionFlow.feature)
  return _internal_feature(index);
}
inline ::mediapipe::RegionFlowFeature* RegionFlowFrame_RegionFlow::_internal_add_feature() {
  return feature_.Add();
}
inline ::mediapipe::RegionFlowFeature* RegionFlowFrame_RegionFlow::add_feature() {
  // @@protoc_insertion_point(field_add:mediapipe.RegionFlowFrame.RegionFlow.feature)
  return _internal_add_feature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >&
RegionFlowFrame_RegionFlow::feature() const {
  // @@protoc_insertion_point(field_list:mediapipe.RegionFlowFrame.RegionFlow.feature)
  return feature_;
}

// -------------------------------------------------------------------

// RegionFlowFrame_BlockDescriptor

// optional int32 block_width = 1;
inline bool RegionFlowFrame_BlockDescriptor::_internal_has_block_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowFrame_BlockDescriptor::has_block_width() const {
  return _internal_has_block_width();
}
inline void RegionFlowFrame_BlockDescriptor::clear_block_width() {
  block_width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::_internal_block_width() const {
  return block_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::block_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.BlockDescriptor.block_width)
  return _internal_block_width();
}
inline void RegionFlowFrame_BlockDescriptor::_internal_set_block_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  block_width_ = value;
}
inline void RegionFlowFrame_BlockDescriptor::set_block_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.BlockDescriptor.block_width)
}

// optional int32 block_height = 2;
inline bool RegionFlowFrame_BlockDescriptor::_internal_has_block_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowFrame_BlockDescriptor::has_block_height() const {
  return _internal_has_block_height();
}
inline void RegionFlowFrame_BlockDescriptor::clear_block_height() {
  block_height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::block_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.BlockDescriptor.block_height)
  return _internal_block_height();
}
inline void RegionFlowFrame_BlockDescriptor::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  block_height_ = value;
}
inline void RegionFlowFrame_BlockDescriptor::set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.BlockDescriptor.block_height)
}

// optional int32 num_blocks_x = 3 [default = 0];
inline bool RegionFlowFrame_BlockDescriptor::_internal_has_num_blocks_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionFlowFrame_BlockDescriptor::has_num_blocks_x() const {
  return _internal_has_num_blocks_x();
}
inline void RegionFlowFrame_BlockDescriptor::clear_num_blocks_x() {
  num_blocks_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::_internal_num_blocks_x() const {
  return num_blocks_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::num_blocks_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.BlockDescriptor.num_blocks_x)
  return _internal_num_blocks_x();
}
inline void RegionFlowFrame_BlockDescriptor::_internal_set_num_blocks_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_blocks_x_ = value;
}
inline void RegionFlowFrame_BlockDescriptor::set_num_blocks_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_blocks_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.BlockDescriptor.num_blocks_x)
}

// optional int32 num_blocks_y = 4 [default = 0];
inline bool RegionFlowFrame_BlockDescriptor::_internal_has_num_blocks_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionFlowFrame_BlockDescriptor::has_num_blocks_y() const {
  return _internal_has_num_blocks_y();
}
inline void RegionFlowFrame_BlockDescriptor::clear_num_blocks_y() {
  num_blocks_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::_internal_num_blocks_y() const {
  return num_blocks_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame_BlockDescriptor::num_blocks_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.BlockDescriptor.num_blocks_y)
  return _internal_num_blocks_y();
}
inline void RegionFlowFrame_BlockDescriptor::_internal_set_num_blocks_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_blocks_y_ = value;
}
inline void RegionFlowFrame_BlockDescriptor::set_num_blocks_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_blocks_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.BlockDescriptor.num_blocks_y)
}

// -------------------------------------------------------------------

// RegionFlowFrame

// repeated .mediapipe.RegionFlowFrame.RegionFlow region_flow = 1;
inline int RegionFlowFrame::_internal_region_flow_size() const {
  return region_flow_.size();
}
inline int RegionFlowFrame::region_flow_size() const {
  return _internal_region_flow_size();
}
inline void RegionFlowFrame::clear_region_flow() {
  region_flow_.Clear();
}
inline ::mediapipe::RegionFlowFrame_RegionFlow* RegionFlowFrame::mutable_region_flow(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFrame.region_flow)
  return region_flow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFrame_RegionFlow >*
RegionFlowFrame::mutable_region_flow() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.RegionFlowFrame.region_flow)
  return &region_flow_;
}
inline const ::mediapipe::RegionFlowFrame_RegionFlow& RegionFlowFrame::_internal_region_flow(int index) const {
  return region_flow_.Get(index);
}
inline const ::mediapipe::RegionFlowFrame_RegionFlow& RegionFlowFrame::region_flow(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.region_flow)
  return _internal_region_flow(index);
}
inline ::mediapipe::RegionFlowFrame_RegionFlow* RegionFlowFrame::_internal_add_region_flow() {
  return region_flow_.Add();
}
inline ::mediapipe::RegionFlowFrame_RegionFlow* RegionFlowFrame::add_region_flow() {
  // @@protoc_insertion_point(field_add:mediapipe.RegionFlowFrame.region_flow)
  return _internal_add_region_flow();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFrame_RegionFlow >&
RegionFlowFrame::region_flow() const {
  // @@protoc_insertion_point(field_list:mediapipe.RegionFlowFrame.region_flow)
  return region_flow_;
}

// optional int32 num_total_features = 2 [default = 0];
inline bool RegionFlowFrame::_internal_has_num_total_features() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowFrame::has_num_total_features() const {
  return _internal_has_num_total_features();
}
inline void RegionFlowFrame::clear_num_total_features() {
  num_total_features_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame::_internal_num_total_features() const {
  return num_total_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame::num_total_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.num_total_features)
  return _internal_num_total_features();
}
inline void RegionFlowFrame::_internal_set_num_total_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_total_features_ = value;
}
inline void RegionFlowFrame::set_num_total_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_total_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.num_total_features)
}

// optional bool unstable_frame = 4 [default = false];
inline bool RegionFlowFrame::_internal_has_unstable_frame() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionFlowFrame::has_unstable_frame() const {
  return _internal_has_unstable_frame();
}
inline void RegionFlowFrame::clear_unstable_frame() {
  unstable_frame_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RegionFlowFrame::_internal_unstable_frame() const {
  return unstable_frame_;
}
inline bool RegionFlowFrame::unstable_frame() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.unstable_frame)
  return _internal_unstable_frame();
}
inline void RegionFlowFrame::_internal_set_unstable_frame(bool value) {
  _has_bits_[0] |= 0x00000004u;
  unstable_frame_ = value;
}
inline void RegionFlowFrame::set_unstable_frame(bool value) {
  _internal_set_unstable_frame(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.unstable_frame)
}

// optional float blur_score = 7;
inline bool RegionFlowFrame::_internal_has_blur_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionFlowFrame::has_blur_score() const {
  return _internal_has_blur_score();
}
inline void RegionFlowFrame::clear_blur_score() {
  blur_score_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RegionFlowFrame::_internal_blur_score() const {
  return blur_score_;
}
inline float RegionFlowFrame::blur_score() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.blur_score)
  return _internal_blur_score();
}
inline void RegionFlowFrame::_internal_set_blur_score(float value) {
  _has_bits_[0] |= 0x00000008u;
  blur_score_ = value;
}
inline void RegionFlowFrame::set_blur_score(float value) {
  _internal_set_blur_score(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.blur_score)
}

// optional int32 frame_width = 8;
inline bool RegionFlowFrame::_internal_has_frame_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionFlowFrame::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void RegionFlowFrame::clear_frame_width() {
  frame_width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame::_internal_frame_width() const {
  return frame_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame::frame_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.frame_width)
  return _internal_frame_width();
}
inline void RegionFlowFrame::_internal_set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  frame_width_ = value;
}
inline void RegionFlowFrame::set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.frame_width)
}

// optional int32 frame_height = 9;
inline bool RegionFlowFrame::_internal_has_frame_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionFlowFrame::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void RegionFlowFrame::clear_frame_height() {
  frame_height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame::_internal_frame_height() const {
  return frame_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFrame::frame_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.frame_height)
  return _internal_frame_height();
}
inline void RegionFlowFrame::_internal_set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  frame_height_ = value;
}
inline void RegionFlowFrame::set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFrame.frame_height)
}

// optional .mediapipe.RegionFlowFrame.BlockDescriptor block_descriptor = 10;
inline bool RegionFlowFrame::_internal_has_block_descriptor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || block_descriptor_ != nullptr);
  return value;
}
inline bool RegionFlowFrame::has_block_descriptor() const {
  return _internal_has_block_descriptor();
}
inline void RegionFlowFrame::clear_block_descriptor() {
  if (block_descriptor_ != nullptr) block_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::RegionFlowFrame_BlockDescriptor& RegionFlowFrame::_internal_block_descriptor() const {
  const ::mediapipe::RegionFlowFrame_BlockDescriptor* p = block_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::RegionFlowFrame_BlockDescriptor&>(
      ::mediapipe::_RegionFlowFrame_BlockDescriptor_default_instance_);
}
inline const ::mediapipe::RegionFlowFrame_BlockDescriptor& RegionFlowFrame::block_descriptor() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFrame.block_descriptor)
  return _internal_block_descriptor();
}
inline void RegionFlowFrame::unsafe_arena_set_allocated_block_descriptor(
    ::mediapipe::RegionFlowFrame_BlockDescriptor* block_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_descriptor_);
  }
  block_descriptor_ = block_descriptor;
  if (block_descriptor) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowFrame.block_descriptor)
}
inline ::mediapipe::RegionFlowFrame_BlockDescriptor* RegionFlowFrame::release_block_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::RegionFlowFrame_BlockDescriptor* temp = block_descriptor_;
  block_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::RegionFlowFrame_BlockDescriptor* RegionFlowFrame::unsafe_arena_release_block_descriptor() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowFrame.block_descriptor)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::RegionFlowFrame_BlockDescriptor* temp = block_descriptor_;
  block_descriptor_ = nullptr;
  return temp;
}
inline ::mediapipe::RegionFlowFrame_BlockDescriptor* RegionFlowFrame::_internal_mutable_block_descriptor() {
  _has_bits_[0] |= 0x00000001u;
  if (block_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::RegionFlowFrame_BlockDescriptor>(GetArena());
    block_descriptor_ = p;
  }
  return block_descriptor_;
}
inline ::mediapipe::RegionFlowFrame_BlockDescriptor* RegionFlowFrame::mutable_block_descriptor() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFrame.block_descriptor)
  return _internal_mutable_block_descriptor();
}
inline void RegionFlowFrame::set_allocated_block_descriptor(::mediapipe::RegionFlowFrame_BlockDescriptor* block_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_descriptor_;
  }
  if (block_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_descriptor);
    if (message_arena != submessage_arena) {
      block_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  block_descriptor_ = block_descriptor;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowFrame.block_descriptor)
}

// -------------------------------------------------------------------

// RegionFlowFeatureList

// repeated .mediapipe.RegionFlowFeature feature = 1;
inline int RegionFlowFeatureList::_internal_feature_size() const {
  return feature_.size();
}
inline int RegionFlowFeatureList::feature_size() const {
  return _internal_feature_size();
}
inline void RegionFlowFeatureList::clear_feature() {
  feature_.Clear();
}
inline ::mediapipe::RegionFlowFeature* RegionFlowFeatureList::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowFeatureList.feature)
  return feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >*
RegionFlowFeatureList::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.RegionFlowFeatureList.feature)
  return &feature_;
}
inline const ::mediapipe::RegionFlowFeature& RegionFlowFeatureList::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline const ::mediapipe::RegionFlowFeature& RegionFlowFeatureList::feature(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.feature)
  return _internal_feature(index);
}
inline ::mediapipe::RegionFlowFeature* RegionFlowFeatureList::_internal_add_feature() {
  return feature_.Add();
}
inline ::mediapipe::RegionFlowFeature* RegionFlowFeatureList::add_feature() {
  // @@protoc_insertion_point(field_add:mediapipe.RegionFlowFeatureList.feature)
  return _internal_add_feature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::RegionFlowFeature >&
RegionFlowFeatureList::feature() const {
  // @@protoc_insertion_point(field_list:mediapipe.RegionFlowFeatureList.feature)
  return feature_;
}

// optional int32 frame_width = 2;
inline bool RegionFlowFeatureList::_internal_has_frame_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_frame_width() const {
  return _internal_has_frame_width();
}
inline void RegionFlowFeatureList::clear_frame_width() {
  frame_width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::_internal_frame_width() const {
  return frame_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::frame_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.frame_width)
  return _internal_frame_width();
}
inline void RegionFlowFeatureList::_internal_set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  frame_width_ = value;
}
inline void RegionFlowFeatureList::set_frame_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.frame_width)
}

// optional int32 frame_height = 3;
inline bool RegionFlowFeatureList::_internal_has_frame_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_frame_height() const {
  return _internal_has_frame_height();
}
inline void RegionFlowFeatureList::clear_frame_height() {
  frame_height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::_internal_frame_height() const {
  return frame_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::frame_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.frame_height)
  return _internal_frame_height();
}
inline void RegionFlowFeatureList::_internal_set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_height_ = value;
}
inline void RegionFlowFeatureList::set_frame_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.frame_height)
}

// optional bool unstable = 4 [default = false];
inline bool RegionFlowFeatureList::_internal_has_unstable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_unstable() const {
  return _internal_has_unstable();
}
inline void RegionFlowFeatureList::clear_unstable() {
  unstable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RegionFlowFeatureList::_internal_unstable() const {
  return unstable_;
}
inline bool RegionFlowFeatureList::unstable() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.unstable)
  return _internal_unstable();
}
inline void RegionFlowFeatureList::_internal_set_unstable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  unstable_ = value;
}
inline void RegionFlowFeatureList::set_unstable(bool value) {
  _internal_set_unstable(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.unstable)
}

// optional int32 distance_from_border = 5 [default = 0];
inline bool RegionFlowFeatureList::_internal_has_distance_from_border() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_distance_from_border() const {
  return _internal_has_distance_from_border();
}
inline void RegionFlowFeatureList::clear_distance_from_border() {
  distance_from_border_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::_internal_distance_from_border() const {
  return distance_from_border_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::distance_from_border() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.distance_from_border)
  return _internal_distance_from_border();
}
inline void RegionFlowFeatureList::_internal_set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  distance_from_border_ = value;
}
inline void RegionFlowFeatureList::set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distance_from_border(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.distance_from_border)
}

// optional float blur_score = 6;
inline bool RegionFlowFeatureList::_internal_has_blur_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_blur_score() const {
  return _internal_has_blur_score();
}
inline void RegionFlowFeatureList::clear_blur_score() {
  blur_score_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RegionFlowFeatureList::_internal_blur_score() const {
  return blur_score_;
}
inline float RegionFlowFeatureList::blur_score() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.blur_score)
  return _internal_blur_score();
}
inline void RegionFlowFeatureList::_internal_set_blur_score(float value) {
  _has_bits_[0] |= 0x00000008u;
  blur_score_ = value;
}
inline void RegionFlowFeatureList::set_blur_score(float value) {
  _internal_set_blur_score(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.blur_score)
}

// optional bool long_tracks = 7 [default = false];
inline bool RegionFlowFeatureList::_internal_has_long_tracks() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_long_tracks() const {
  return _internal_has_long_tracks();
}
inline void RegionFlowFeatureList::clear_long_tracks() {
  long_tracks_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RegionFlowFeatureList::_internal_long_tracks() const {
  return long_tracks_;
}
inline bool RegionFlowFeatureList::long_tracks() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.long_tracks)
  return _internal_long_tracks();
}
inline void RegionFlowFeatureList::_internal_set_long_tracks(bool value) {
  _has_bits_[0] |= 0x00000020u;
  long_tracks_ = value;
}
inline void RegionFlowFeatureList::set_long_tracks(bool value) {
  _internal_set_long_tracks(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.long_tracks)
}

// optional float frac_long_features_rejected = 8 [default = 0];
inline bool RegionFlowFeatureList::_internal_has_frac_long_features_rejected() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_frac_long_features_rejected() const {
  return _internal_has_frac_long_features_rejected();
}
inline void RegionFlowFeatureList::clear_frac_long_features_rejected() {
  frac_long_features_rejected_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float RegionFlowFeatureList::_internal_frac_long_features_rejected() const {
  return frac_long_features_rejected_;
}
inline float RegionFlowFeatureList::frac_long_features_rejected() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.frac_long_features_rejected)
  return _internal_frac_long_features_rejected();
}
inline void RegionFlowFeatureList::_internal_set_frac_long_features_rejected(float value) {
  _has_bits_[0] |= 0x00000080u;
  frac_long_features_rejected_ = value;
}
inline void RegionFlowFeatureList::set_frac_long_features_rejected(float value) {
  _internal_set_frac_long_features_rejected(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.frac_long_features_rejected)
}

// optional float visual_consistency = 9 [default = -1];
inline bool RegionFlowFeatureList::_internal_has_visual_consistency() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_visual_consistency() const {
  return _internal_has_visual_consistency();
}
inline void RegionFlowFeatureList::clear_visual_consistency() {
  visual_consistency_ = -1;
  _has_bits_[0] &= ~0x00000400u;
}
inline float RegionFlowFeatureList::_internal_visual_consistency() const {
  return visual_consistency_;
}
inline float RegionFlowFeatureList::visual_consistency() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.visual_consistency)
  return _internal_visual_consistency();
}
inline void RegionFlowFeatureList::_internal_set_visual_consistency(float value) {
  _has_bits_[0] |= 0x00000400u;
  visual_consistency_ = value;
}
inline void RegionFlowFeatureList::set_visual_consistency(float value) {
  _internal_set_visual_consistency(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.visual_consistency)
}

// optional int64 timestamp_usec = 10 [default = 0];
inline bool RegionFlowFeatureList::_internal_has_timestamp_usec() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_timestamp_usec() const {
  return _internal_has_timestamp_usec();
}
inline void RegionFlowFeatureList::clear_timestamp_usec() {
  timestamp_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegionFlowFeatureList::_internal_timestamp_usec() const {
  return timestamp_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegionFlowFeatureList::timestamp_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.timestamp_usec)
  return _internal_timestamp_usec();
}
inline void RegionFlowFeatureList::_internal_set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_usec_ = value;
}
inline void RegionFlowFeatureList::set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.timestamp_usec)
}

// optional int32 match_frame = 11 [default = 0];
inline bool RegionFlowFeatureList::_internal_has_match_frame() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_match_frame() const {
  return _internal_has_match_frame();
}
inline void RegionFlowFeatureList::clear_match_frame() {
  match_frame_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::_internal_match_frame() const {
  return match_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::match_frame() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.match_frame)
  return _internal_match_frame();
}
inline void RegionFlowFeatureList::_internal_set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  match_frame_ = value;
}
inline void RegionFlowFeatureList::set_match_frame(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_frame(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.match_frame)
}

// optional bool is_duplicated = 12 [default = false];
inline bool RegionFlowFeatureList::_internal_has_is_duplicated() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegionFlowFeatureList::has_is_duplicated() const {
  return _internal_has_is_duplicated();
}
inline void RegionFlowFeatureList::clear_is_duplicated() {
  is_duplicated_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RegionFlowFeatureList::_internal_is_duplicated() const {
  return is_duplicated_;
}
inline bool RegionFlowFeatureList::is_duplicated() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.is_duplicated)
  return _internal_is_duplicated();
}
inline void RegionFlowFeatureList::_internal_set_is_duplicated(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_duplicated_ = value;
}
inline void RegionFlowFeatureList::set_is_duplicated(bool value) {
  _internal_set_is_duplicated(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.is_duplicated)
}

// repeated int32 actively_discarded_tracked_ids = 13;
inline int RegionFlowFeatureList::_internal_actively_discarded_tracked_ids_size() const {
  return actively_discarded_tracked_ids_.size();
}
inline int RegionFlowFeatureList::actively_discarded_tracked_ids_size() const {
  return _internal_actively_discarded_tracked_ids_size();
}
inline void RegionFlowFeatureList::clear_actively_discarded_tracked_ids() {
  actively_discarded_tracked_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::_internal_actively_discarded_tracked_ids(int index) const {
  return actively_discarded_tracked_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowFeatureList::actively_discarded_tracked_ids(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowFeatureList.actively_discarded_tracked_ids)
  return _internal_actively_discarded_tracked_ids(index);
}
inline void RegionFlowFeatureList::set_actively_discarded_tracked_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  actively_discarded_tracked_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowFeatureList.actively_discarded_tracked_ids)
}
inline void RegionFlowFeatureList::_internal_add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  actively_discarded_tracked_ids_.Add(value);
}
inline void RegionFlowFeatureList::add_actively_discarded_tracked_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_actively_discarded_tracked_ids(value);
  // @@protoc_insertion_point(field_add:mediapipe.RegionFlowFeatureList.actively_discarded_tracked_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RegionFlowFeatureList::_internal_actively_discarded_tracked_ids() const {
  return actively_discarded_tracked_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RegionFlowFeatureList::actively_discarded_tracked_ids() const {
  // @@protoc_insertion_point(field_list:mediapipe.RegionFlowFeatureList.actively_discarded_tracked_ids)
  return _internal_actively_discarded_tracked_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RegionFlowFeatureList::_internal_mutable_actively_discarded_tracked_ids() {
  return &actively_discarded_tracked_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RegionFlowFeatureList::mutable_actively_discarded_tracked_ids() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.RegionFlowFeatureList.actively_discarded_tracked_ids)
  return _internal_mutable_actively_discarded_tracked_ids();
}

// -------------------------------------------------------------------

// SalientPoint

// optional float norm_point_x = 1 [default = 0];
inline bool SalientPoint::_internal_has_norm_point_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SalientPoint::has_norm_point_x() const {
  return _internal_has_norm_point_x();
}
inline void SalientPoint::clear_norm_point_x() {
  norm_point_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SalientPoint::_internal_norm_point_x() const {
  return norm_point_x_;
}
inline float SalientPoint::norm_point_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.norm_point_x)
  return _internal_norm_point_x();
}
inline void SalientPoint::_internal_set_norm_point_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  norm_point_x_ = value;
}
inline void SalientPoint::set_norm_point_x(float value) {
  _internal_set_norm_point_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.norm_point_x)
}

// optional float norm_point_y = 2 [default = 0];
inline bool SalientPoint::_internal_has_norm_point_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SalientPoint::has_norm_point_y() const {
  return _internal_has_norm_point_y();
}
inline void SalientPoint::clear_norm_point_y() {
  norm_point_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SalientPoint::_internal_norm_point_y() const {
  return norm_point_y_;
}
inline float SalientPoint::norm_point_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.norm_point_y)
  return _internal_norm_point_y();
}
inline void SalientPoint::_internal_set_norm_point_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  norm_point_y_ = value;
}
inline void SalientPoint::set_norm_point_y(float value) {
  _internal_set_norm_point_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.norm_point_y)
}

// optional .mediapipe.SalientPoint.SalientPointType type = 11 [default = TYPE_INCLUDE];
inline bool SalientPoint::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SalientPoint::has_type() const {
  return _internal_has_type();
}
inline void SalientPoint::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::mediapipe::SalientPoint_SalientPointType SalientPoint::_internal_type() const {
  return static_cast< ::mediapipe::SalientPoint_SalientPointType >(type_);
}
inline ::mediapipe::SalientPoint_SalientPointType SalientPoint::type() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.type)
  return _internal_type();
}
inline void SalientPoint::_internal_set_type(::mediapipe::SalientPoint_SalientPointType value) {
  assert(::mediapipe::SalientPoint_SalientPointType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  type_ = value;
}
inline void SalientPoint::set_type(::mediapipe::SalientPoint_SalientPointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.type)
}

// optional float left = 3 [default = 0.3];
inline bool SalientPoint::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SalientPoint::has_left() const {
  return _internal_has_left();
}
inline void SalientPoint::clear_left() {
  left_ = 0.3f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SalientPoint::_internal_left() const {
  return left_;
}
inline float SalientPoint::left() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.left)
  return _internal_left();
}
inline void SalientPoint::_internal_set_left(float value) {
  _has_bits_[0] |= 0x00000020u;
  left_ = value;
}
inline void SalientPoint::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.left)
}

// optional float bottom = 4 [default = 0.3];
inline bool SalientPoint::_internal_has_bottom() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SalientPoint::has_bottom() const {
  return _internal_has_bottom();
}
inline void SalientPoint::clear_bottom() {
  bottom_ = 0.3f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SalientPoint::_internal_bottom() const {
  return bottom_;
}
inline float SalientPoint::bottom() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.bottom)
  return _internal_bottom();
}
inline void SalientPoint::_internal_set_bottom(float value) {
  _has_bits_[0] |= 0x00000040u;
  bottom_ = value;
}
inline void SalientPoint::set_bottom(float value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.bottom)
}

// optional float right = 9 [default = 0.3];
inline bool SalientPoint::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SalientPoint::has_right() const {
  return _internal_has_right();
}
inline void SalientPoint::clear_right() {
  right_ = 0.3f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float SalientPoint::_internal_right() const {
  return right_;
}
inline float SalientPoint::right() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.right)
  return _internal_right();
}
inline void SalientPoint::_internal_set_right(float value) {
  _has_bits_[0] |= 0x00000100u;
  right_ = value;
}
inline void SalientPoint::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.right)
}

// optional float top = 10 [default = 0.3];
inline bool SalientPoint::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SalientPoint::has_top() const {
  return _internal_has_top();
}
inline void SalientPoint::clear_top() {
  top_ = 0.3f;
  _has_bits_[0] &= ~0x00000200u;
}
inline float SalientPoint::_internal_top() const {
  return top_;
}
inline float SalientPoint::top() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.top)
  return _internal_top();
}
inline void SalientPoint::_internal_set_top(float value) {
  _has_bits_[0] |= 0x00000200u;
  top_ = value;
}
inline void SalientPoint::set_top(float value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.top)
}

// optional float weight = 5 [default = 15];
inline bool SalientPoint::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SalientPoint::has_weight() const {
  return _internal_has_weight();
}
inline void SalientPoint::clear_weight() {
  weight_ = 15;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SalientPoint::_internal_weight() const {
  return weight_;
}
inline float SalientPoint::weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.weight)
  return _internal_weight();
}
inline void SalientPoint::_internal_set_weight(float value) {
  _has_bits_[0] |= 0x00000080u;
  weight_ = value;
}
inline void SalientPoint::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.weight)
}

// optional float norm_major = 6;
inline bool SalientPoint::_internal_has_norm_major() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SalientPoint::has_norm_major() const {
  return _internal_has_norm_major();
}
inline void SalientPoint::clear_norm_major() {
  norm_major_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SalientPoint::_internal_norm_major() const {
  return norm_major_;
}
inline float SalientPoint::norm_major() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.norm_major)
  return _internal_norm_major();
}
inline void SalientPoint::_internal_set_norm_major(float value) {
  _has_bits_[0] |= 0x00000004u;
  norm_major_ = value;
}
inline void SalientPoint::set_norm_major(float value) {
  _internal_set_norm_major(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.norm_major)
}

// optional float norm_minor = 7;
inline bool SalientPoint::_internal_has_norm_minor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SalientPoint::has_norm_minor() const {
  return _internal_has_norm_minor();
}
inline void SalientPoint::clear_norm_minor() {
  norm_minor_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SalientPoint::_internal_norm_minor() const {
  return norm_minor_;
}
inline float SalientPoint::norm_minor() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.norm_minor)
  return _internal_norm_minor();
}
inline void SalientPoint::_internal_set_norm_minor(float value) {
  _has_bits_[0] |= 0x00000008u;
  norm_minor_ = value;
}
inline void SalientPoint::set_norm_minor(float value) {
  _internal_set_norm_minor(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.norm_minor)
}

// optional float angle = 8;
inline bool SalientPoint::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SalientPoint::has_angle() const {
  return _internal_has_angle();
}
inline void SalientPoint::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SalientPoint::_internal_angle() const {
  return angle_;
}
inline float SalientPoint::angle() const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPoint.angle)
  return _internal_angle();
}
inline void SalientPoint::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000010u;
  angle_ = value;
}
inline void SalientPoint::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:mediapipe.SalientPoint.angle)
}

// -------------------------------------------------------------------

// SalientPointFrame

// repeated .mediapipe.SalientPoint point = 1;
inline int SalientPointFrame::_internal_point_size() const {
  return point_.size();
}
inline int SalientPointFrame::point_size() const {
  return _internal_point_size();
}
inline void SalientPointFrame::clear_point() {
  point_.Clear();
}
inline ::mediapipe::SalientPoint* SalientPointFrame::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.SalientPointFrame.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::SalientPoint >*
SalientPointFrame::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.SalientPointFrame.point)
  return &point_;
}
inline const ::mediapipe::SalientPoint& SalientPointFrame::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::mediapipe::SalientPoint& SalientPointFrame::point(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.SalientPointFrame.point)
  return _internal_point(index);
}
inline ::mediapipe::SalientPoint* SalientPointFrame::_internal_add_point() {
  return point_.Add();
}
inline ::mediapipe::SalientPoint* SalientPointFrame::add_point() {
  // @@protoc_insertion_point(field_add:mediapipe.SalientPointFrame.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::SalientPoint >&
SalientPointFrame::point() const {
  // @@protoc_insertion_point(field_list:mediapipe.SalientPointFrame.point)
  return point_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::RegionFlowFeature_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::RegionFlowFeature_Flags>() {
  return ::mediapipe::RegionFlowFeature_Flags_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::SalientPoint_SalientPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::SalientPoint_SalientPointType>() {
  return ::mediapipe::SalientPoint_SalientPointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fregion_5fflow_2eproto
