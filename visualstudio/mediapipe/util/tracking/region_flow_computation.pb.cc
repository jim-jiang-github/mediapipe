// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/region_flow_computation.proto

#include "mediapipe/util/tracking/region_flow_computation.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr TrackingOptions_MinEigValExtractionSettings::TrackingOptions_MinEigValExtractionSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_quality_level_(0.01f)
  , adaptive_lowest_quality_level_(8e-05f){}
struct TrackingOptions_MinEigValExtractionSettingsDefaultTypeInternal {
  constexpr TrackingOptions_MinEigValExtractionSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingOptions_MinEigValExtractionSettingsDefaultTypeInternal() {}
  union {
    TrackingOptions_MinEigValExtractionSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingOptions_MinEigValExtractionSettingsDefaultTypeInternal _TrackingOptions_MinEigValExtractionSettings_default_instance_;
constexpr TrackingOptions_HarrisExtractionSettings::TrackingOptions_HarrisExtractionSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : feature_quality_level_(0.00025f){}
struct TrackingOptions_HarrisExtractionSettingsDefaultTypeInternal {
  constexpr TrackingOptions_HarrisExtractionSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingOptions_HarrisExtractionSettingsDefaultTypeInternal() {}
  union {
    TrackingOptions_HarrisExtractionSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingOptions_HarrisExtractionSettingsDefaultTypeInternal _TrackingOptions_HarrisExtractionSettings_default_instance_;
constexpr TrackingOptions_FastExtractionSettings::TrackingOptions_FastExtractionSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_(10){}
struct TrackingOptions_FastExtractionSettingsDefaultTypeInternal {
  constexpr TrackingOptions_FastExtractionSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingOptions_FastExtractionSettingsDefaultTypeInternal() {}
  union {
    TrackingOptions_FastExtractionSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingOptions_FastExtractionSettingsDefaultTypeInternal _TrackingOptions_FastExtractionSettings_default_instance_;
constexpr TrackingOptions::TrackingOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_eig_val_settings_(nullptr)
  , harris_settings_(nullptr)
  , fast_settings_(nullptr)
  , reuse_features_max_frame_distance_(0)
  , adaptive_tracking_distance_(false)
  , wide_baseline_matching_(false)
  , refine_wide_baseline_matches_(false)
  , adaptive_extraction_levels_lowest_size_(0)
  , klt_tracker_implementation_(1)

  , multi_frames_to_track_(1)
  , max_features_(2000)
  , tracking_window_size_(10)
  , tracking_iterations_(10)
  , fractional_tracking_distance_(0.15f)
  , min_feature_distance_(7)
  , adaptive_features_block_size_(0.26f)
  , adaptive_features_levels_(1)
  , synthetic_zero_motion_grid_step_(0.04f)
  , ratio_test_threshold_(0.8f)
  , reuse_features_min_survived_frac_(0.7f)
  , internal_tracking_direction_(2)

  , distance_downscale_sqrt_(true)
  , adaptive_good_features_to_track_(true)
  , use_cv_tracking_algorithm_(true)
  , output_flow_direction_(2)

  , adaptive_extraction_levels_(1)
  , tracking_policy_(1)

  , long_tracks_max_frames_(300)
  , corner_extraction_method_(2)
{}
struct TrackingOptionsDefaultTypeInternal {
  constexpr TrackingOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackingOptionsDefaultTypeInternal() {}
  union {
    TrackingOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackingOptionsDefaultTypeInternal _TrackingOptions_default_instance_;
constexpr RegionFlowComputationOptions_DownSampleSchedule::RegionFlowComputationOptions_DownSampleSchedule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : downsample_factor_360p_(1)
  , downsample_factor_480p_(1)
  , downsample_factor_720p_(2)
  , downsample_factor_1080p_(2){}
struct RegionFlowComputationOptions_DownSampleScheduleDefaultTypeInternal {
  constexpr RegionFlowComputationOptions_DownSampleScheduleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowComputationOptions_DownSampleScheduleDefaultTypeInternal() {}
  union {
    RegionFlowComputationOptions_DownSampleSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowComputationOptions_DownSampleScheduleDefaultTypeInternal _RegionFlowComputationOptions_DownSampleSchedule_default_instance_;
constexpr RegionFlowComputationOptions_BlurScoreOptions::RegionFlowComputationOptions_BlurScoreOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : box_filter_diam_(3)
  , relative_cornerness_threshold_(0.03f)
  , absolute_cornerness_threshold_(0.0001f)
  , median_percentile_(0.85f){}
struct RegionFlowComputationOptions_BlurScoreOptionsDefaultTypeInternal {
  constexpr RegionFlowComputationOptions_BlurScoreOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowComputationOptions_BlurScoreOptionsDefaultTypeInternal() {}
  union {
    RegionFlowComputationOptions_BlurScoreOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowComputationOptions_BlurScoreOptionsDefaultTypeInternal _RegionFlowComputationOptions_BlurScoreOptions_default_instance_;
constexpr RegionFlowComputationOptions_VisualConsistencyOptions::RegionFlowComputationOptions_VisualConsistencyOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compute_consistency_(true)
  , tiny_image_dimension_(20){}
struct RegionFlowComputationOptions_VisualConsistencyOptionsDefaultTypeInternal {
  constexpr RegionFlowComputationOptions_VisualConsistencyOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowComputationOptions_VisualConsistencyOptionsDefaultTypeInternal() {}
  union {
    RegionFlowComputationOptions_VisualConsistencyOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowComputationOptions_VisualConsistencyOptionsDefaultTypeInternal _RegionFlowComputationOptions_VisualConsistencyOptions_default_instance_;
constexpr RegionFlowComputationOptions::RegionFlowComputationOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracking_options_(nullptr)
  , downsample_schedule_(nullptr)
  , blur_score_options_(nullptr)
  , gain_bias_bounds_(nullptr)
  , visual_consistency_options_(nullptr)
  , no_estimation_mode_(false)
  , round_downsample_factor_(false)
  , compute_blur_score_(false)
  , verify_features_(false)
  , verify_long_feature_acceleration_(false)
  , histogram_equalization_(false)
  , use_synthetic_zero_motion_tracks_all_frames_(false)
  , use_synthetic_zero_motion_tracks_first_frame_(false)
  , median_magnitude_bounds_(0)
  , frac_inlier_error_threshold_(0)
  , gain_correction_(false)
  , fast_gain_correction_(false)
  , gain_correction_bright_reference_(false)
  , gain_correction_triggering_ratio_(0)
  , verify_long_feature_trigger_ratio_(0)
  , descriptor_extractor_type_(0)

  , min_feature_inliers_(3)
  , ransac_rounds_per_region_(15)
  , absolute_inlier_error_threshold_(2)
  , fast_estimation_block_size_(0.25f)
  , downsample_mode_(1)

  , downsampling_size_(256)
  , min_feature_requirement_(20)
  , min_feature_cover_(0.15f)
  , downsample_factor_(2)
  , min_feature_cover_grid_(8)
  , patch_descriptor_radius_(3)
  , fast_estimation_overlap_grids_(3)
  , max_magnitude_threshold_ratio_(0.2f)
  , fast_estimation_min_block_size_(100)
  , corner_response_scale_(1500)
  , verification_distance_(0.5f)
  , pre_blur_sigma_(0.8f)
  , frac_gain_feature_size_(0.3f)
  , frac_gain_step_(0.1f)
  , gain_correct_mode_(1)

  , relative_inlier_error_threshold_(0.1f)
  , top_inlier_sets_(2)
  , relative_min_feature_inliers_(0.2f)
  , gain_correction_inlier_improvement_frac_(0.1f)
  , irls_initialization_(2)

  , distance_from_border_(3)
  , long_feature_verification_threshold_(0.04f)
  , verify_long_features_(true)
  , gain_correction_multiple_hypotheses_(true)
  , compute_derivative_in_pyramid_(true)
  , max_long_feature_acceleration_(5)
  , image_format_(2)
{}
struct RegionFlowComputationOptionsDefaultTypeInternal {
  constexpr RegionFlowComputationOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionFlowComputationOptionsDefaultTypeInternal() {}
  union {
    RegionFlowComputationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionFlowComputationOptionsDefaultTypeInternal _RegionFlowComputationOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_MinEigValExtractionSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_MinEigValExtractionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_MinEigValExtractionSettings, feature_quality_level_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_MinEigValExtractionSettings, adaptive_lowest_quality_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_HarrisExtractionSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_HarrisExtractionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_HarrisExtractionSettings, feature_quality_level_),
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_FastExtractionSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_FastExtractionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions_FastExtractionSettings, threshold_),
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, internal_tracking_direction_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, output_flow_direction_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, tracking_policy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, multi_frames_to_track_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, long_tracks_max_frames_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, max_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, corner_extraction_method_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, min_eig_val_settings_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, harris_settings_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, fast_settings_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, tracking_window_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, tracking_iterations_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, fractional_tracking_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, adaptive_tracking_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, min_feature_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, distance_downscale_sqrt_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, adaptive_good_features_to_track_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, adaptive_features_block_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, adaptive_features_levels_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, adaptive_extraction_levels_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, adaptive_extraction_levels_lowest_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, synthetic_zero_motion_grid_step_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, wide_baseline_matching_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, ratio_test_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, refine_wide_baseline_matches_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, reuse_features_max_frame_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, reuse_features_min_survived_frac_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, use_cv_tracking_algorithm_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackingOptions, klt_tracker_implementation_),
  20,
  24,
  26,
  9,
  27,
  10,
  28,
  0,
  1,
  2,
  11,
  12,
  13,
  4,
  14,
  21,
  22,
  15,
  16,
  25,
  7,
  17,
  5,
  18,
  6,
  3,
  19,
  23,
  8,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule, downsample_factor_360p_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule, downsample_factor_480p_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule, downsample_factor_720p_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule, downsample_factor_1080p_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions, box_filter_diam_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions, relative_cornerness_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions, absolute_cornerness_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions, median_percentile_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions, compute_consistency_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions, tiny_image_dimension_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, tracking_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, min_feature_inliers_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, relative_min_feature_inliers_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, pre_blur_sigma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, ransac_rounds_per_region_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, absolute_inlier_error_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, frac_inlier_error_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, relative_inlier_error_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, top_inlier_sets_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, no_estimation_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, fast_estimation_block_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, fast_estimation_min_block_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, fast_estimation_overlap_grids_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, max_magnitude_threshold_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, median_magnitude_bounds_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, irls_initialization_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, downsample_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, downsampling_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, downsample_factor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, round_downsample_factor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, downsample_schedule_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, min_feature_requirement_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, min_feature_cover_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, min_feature_cover_grid_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, compute_blur_score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, blur_score_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, visual_consistency_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, patch_descriptor_radius_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, distance_from_border_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, corner_response_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, verify_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, verification_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, verify_long_features_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, long_feature_verification_threshold_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, max_long_feature_acceleration_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, verify_long_feature_acceleration_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, verify_long_feature_trigger_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, histogram_equalization_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, use_synthetic_zero_motion_tracks_all_frames_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, use_synthetic_zero_motion_tracks_first_frame_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, gain_correction_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, fast_gain_correction_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, gain_correction_multiple_hypotheses_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, gain_correction_inlier_improvement_frac_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, gain_correction_bright_reference_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, gain_correction_triggering_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, frac_gain_feature_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, frac_gain_step_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, gain_correct_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, gain_bias_bounds_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, image_format_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, descriptor_extractor_type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RegionFlowComputationOptions, compute_derivative_in_pyramid_),
  0,
  21,
  43,
  37,
  22,
  23,
  14,
  41,
  42,
  5,
  24,
  34,
  32,
  33,
  13,
  45,
  25,
  26,
  29,
  6,
  1,
  27,
  28,
  30,
  7,
  2,
  4,
  31,
  46,
  35,
  8,
  36,
  48,
  47,
  51,
  9,
  19,
  10,
  11,
  12,
  15,
  16,
  49,
  44,
  17,
  18,
  38,
  39,
  40,
  3,
  52,
  20,
  50,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mediapipe::TrackingOptions_MinEigValExtractionSettings)},
  { 9, 15, sizeof(::mediapipe::TrackingOptions_HarrisExtractionSettings)},
  { 16, 22, sizeof(::mediapipe::TrackingOptions_FastExtractionSettings)},
  { 23, 57, sizeof(::mediapipe::TrackingOptions)},
  { 86, 95, sizeof(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule)},
  { 99, 108, sizeof(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions)},
  { 112, 119, sizeof(::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions)},
  { 121, 179, sizeof(::mediapipe::RegionFlowComputationOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingOptions_MinEigValExtractionSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingOptions_HarrisExtractionSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingOptions_FastExtractionSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackingOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowComputationOptions_DownSampleSchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowComputationOptions_BlurScoreOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowComputationOptions_VisualConsistencyOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RegionFlowComputationOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5mediapipe/util/tracking/region_flow_co"
  "mputation.proto\022\tmediapipe\032-mediapipe/ut"
  "il/tracking/tone_estimation.proto\"\323\020\n\017Tr"
  "ackingOptions\022W\n\033internal_tracking_direc"
  "tion\030\023 \001(\0162(.mediapipe.TrackingOptions.F"
  "lowDirection:\010BACKWARD\022Q\n\025output_flow_di"
  "rection\030\024 \001(\0162(.mediapipe.TrackingOption"
  "s.FlowDirection:\010BACKWARD\022W\n\017tracking_po"
  "licy\030\031 \001(\0162).mediapipe.TrackingOptions.T"
  "rackingPolicy:\023POLICY_SINGLE_FRAME\022 \n\025mu"
  "lti_frames_to_track\030\001 \001(\005:\0011\022#\n\026long_tra"
  "cks_max_frames\030\032 \001(\005:\003300\022\032\n\014max_feature"
  "s\030\002 \001(\005:\0042000\022k\n\030corner_extraction_metho"
  "d\030\033 \001(\01621.mediapipe.TrackingOptions.Corn"
  "erExtractionMethod:\026EXTRACTION_MIN_EIG_V"
  "AL\022T\n\024min_eig_val_settings\030\034 \001(\01326.media"
  "pipe.TrackingOptions.MinEigValExtraction"
  "Settings\022L\n\017harris_settings\030\035 \001(\01323.medi"
  "apipe.TrackingOptions.HarrisExtractionSe"
  "ttings\022H\n\rfast_settings\030\037 \001(\01321.mediapip"
  "e.TrackingOptions.FastExtractionSettings"
  "\022 \n\024tracking_window_size\030\004 \001(\005:\00210\022\037\n\023tr"
  "acking_iterations\030\005 \001(\005:\00210\022*\n\034fractiona"
  "l_tracking_distance\030\006 \001(\002:\0040.15\022)\n\032adapt"
  "ive_tracking_distance\030\030 \001(\010:\005false\022\037\n\024mi"
  "n_feature_distance\030\007 \001(\002:\0017\022%\n\027distance_"
  "downscale_sqrt\030\025 \001(\010:\004true\022-\n\037adaptive_g"
  "ood_features_to_track\030\010 \001(\010:\004true\022*\n\034ada"
  "ptive_features_block_size\030\t \001(\002:\0040.26\022#\n"
  "\030adaptive_features_levels\030\n \001(\005:\0011\022%\n\032ad"
  "aptive_extraction_levels\030\026 \001(\005:\0011\0221\n&ada"
  "ptive_extraction_levels_lowest_size\030\027 \001("
  "\005:\0010\022-\n\037synthetic_zero_motion_grid_step\030"
  "\r \001(\002:\0040.04\022%\n\026wide_baseline_matching\030\016 "
  "\001(\010:\005false\022!\n\024ratio_test_threshold\030\017 \001(\002"
  ":\0030.8\022+\n\034refine_wide_baseline_matches\030\020 "
  "\001(\010:\005false\022,\n!reuse_features_max_frame_d"
  "istance\030\021 \001(\005:\0010\022-\n reuse_features_min_s"
  "urvived_frac\030\022 \001(\002:\0030.7\022\'\n\031use_cv_tracki"
  "ng_algorithm\030\036 \001(\010:\004true\022c\n\032klt_tracker_"
  "implementation\030  \001(\01623.mediapipe.Trackin"
  "gOptions.KltTrackerImplementation:\nKLT_O"
  "PENCV\032p\n\033MinEigValExtractionSettings\022#\n\025"
  "feature_quality_level\030\001 \001(\002:\0040.01\022,\n\035ada"
  "ptive_lowest_quality_level\030\002 \001(\002:\0058e-05\032"
  "B\n\030HarrisExtractionSettings\022&\n\025feature_q"
  "uality_level\030\001 \001(\002:\0070.00025\032/\n\026FastExtra"
  "ctionSettings\022\025\n\tthreshold\030\001 \001(\005:\00210\"=\n\r"
  "FlowDirection\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002"
  "\022\021\n\rCONSECUTIVELY\020\003\"Y\n\016TrackingPolicy\022\027\n"
  "\023POLICY_SINGLE_FRAME\020\001\022\026\n\022POLICY_MULTI_F"
  "RAME\020\002\022\026\n\022POLICY_LONG_TRACKS\020\003\"`\n\026Corner"
  "ExtractionMethod\022\025\n\021EXTRACTION_HARRIS\020\001\022"
  "\032\n\026EXTRACTION_MIN_EIG_VAL\020\002\022\023\n\017EXTRACTIO"
  "N_FAST\020\003\";\n\030KltTrackerImplementation\022\017\n\013"
  "UNSPECIFIED\020\000\022\016\n\nKLT_OPENCV\020\001*\004\010\003\020\004*\004\010\013\020"
  "\014*\004\010\014\020\r\"\347\034\n\034RegionFlowComputationOptions"
  "\0224\n\020tracking_options\030\001 \001(\0132\032.mediapipe.T"
  "rackingOptions\022\036\n\023min_feature_inliers\030\002 "
  "\001(\005:\0013\022)\n\034relative_min_feature_inliers\030."
  " \001(\002:\0030.2\022\033\n\016pre_blur_sigma\030! \001(\002:\0030.8\022$"
  "\n\030ransac_rounds_per_region\030\003 \001(\005:\00215\022*\n\037"
  "absolute_inlier_error_threshold\030\004 \001(\002:\0012"
  "\022&\n\033frac_inlier_error_threshold\0304 \001(\002:\0010"
  "\022,\n\037relative_inlier_error_threshold\030, \001("
  "\002:\0030.1\022\032\n\017top_inlier_sets\030- \001(\005:\0012\022!\n\022no"
  "_estimation_mode\030( \001(\010:\005false\022(\n\032fast_es"
  "timation_block_size\030\006 \001(\002:\0040.25\022+\n\036fast_"
  "estimation_min_block_size\030\031 \001(\005:\003100\022(\n\035"
  "fast_estimation_overlap_grids\030\026 \001(\005:\0013\022*"
  "\n\035max_magnitude_threshold_ratio\030\027 \001(\002:\0030"
  ".2\022\"\n\027median_magnitude_bounds\0303 \001(\002:\0010\022i"
  "\n\023irls_initialization\0301 \001(\0162:.mediapipe."
  "RegionFlowComputationOptions.IrlsInitial"
  "ization:\020INIT_CONSISTENCY\022`\n\017downsample_"
  "mode\030\013 \001(\01626.mediapipe.RegionFlowComputa"
  "tionOptions.DownsampleMode:\017DOWNSAMPLE_N"
  "ONE\022\036\n\021downsampling_size\030\014 \001(\005:\003256\022\034\n\021d"
  "ownsample_factor\030\022 \001(\002:\0012\022&\n\027round_downs"
  "ample_factor\030> \001(\010:\005false\022W\n\023downsample_"
  "schedule\030\023 \001(\0132:.mediapipe.RegionFlowCom"
  "putationOptions.DownSampleSchedule\022#\n\027mi"
  "n_feature_requirement\030\r \001(\005:\00220\022\037\n\021min_f"
  "eature_cover\030\016 \001(\002:\0040.15\022!\n\026min_feature_"
  "cover_grid\030\024 \001(\005:\0018\022!\n\022compute_blur_scor"
  "e\030\021 \001(\010:\005false\022T\n\022blur_score_options\030\037 \001"
  "(\01328.mediapipe.RegionFlowComputationOpti"
  "ons.BlurScoreOptions\022d\n\032visual_consisten"
  "cy_options\0307 \001(\0132@.mediapipe.RegionFlowC"
  "omputationOptions.VisualConsistencyOptio"
  "ns\022\"\n\027patch_descriptor_radius\030\025 \001(\005:\0013\022\037"
  "\n\024distance_from_border\0302 \001(\005:\0013\022#\n\025corne"
  "r_response_scale\030\032 \001(\002:\0041500\022\036\n\017verify_f"
  "eatures\030\033 \001(\010:\005false\022\"\n\025verification_dis"
  "tance\030\034 \001(\002:\0030.5\022\"\n\024verify_long_features"
  "\0305 \001(\010:\004true\0221\n#long_feature_verificatio"
  "n_threshold\0306 \001(\002:\0040.04\022(\n\035max_long_feat"
  "ure_acceleration\0308 \001(\002:\0015\022/\n verify_long"
  "_feature_acceleration\030\? \001(\010:\005false\022,\n!ve"
  "rify_long_feature_trigger_ratio\030@ \001(\002:\0010"
  "\022%\n\026histogram_equalization\0309 \001(\010:\005false\022"
  ":\n+use_synthetic_zero_motion_tracks_all_"
  "frames\030\" \001(\010:\005false\022;\n,use_synthetic_zer"
  "o_motion_tracks_first_frame\030# \001(\010:\005false"
  "\022\036\n\017gain_correction\030$ \001(\010:\005false\022#\n\024fast"
  "_gain_correction\030= \001(\010:\005false\0221\n#gain_co"
  "rrection_multiple_hypotheses\030/ \001(\010:\004true"
  "\0224\n\'gain_correction_inlier_improvement_f"
  "rac\0300 \001(\002:\0030.1\022/\n gain_correction_bright"
  "_reference\030; \001(\010:\005false\022+\n gain_correcti"
  "on_triggering_ratio\030< \001(\002:\0010\022#\n\026frac_gai"
  "n_feature_size\030% \001(\002:\0030.3\022\033\n\016frac_gain_s"
  "tep\030& \001(\002:\0030.1\022m\n\021gain_correct_mode\030) \001("
  "\01627.mediapipe.RegionFlowComputationOptio"
  "ns.GainCorrectMode:\031GAIN_CORRECT_DEFAULT"
  "_USER\022I\n\020gain_bias_bounds\030\' \001(\0132/.mediap"
  "ipe.ToneEstimationOptions.GainBiasBounds"
  "\022U\n\014image_format\030: \001(\01623.mediapipe.Regio"
  "nFlowComputationOptions.ImageFormat:\nFOR"
  "MAT_RGB\022g\n\031descriptor_extractor_type\030A \001"
  "(\0162\?.mediapipe.RegionFlowComputationOpti"
  "ons.DescriptorExtractorType:\003ORB\022+\n\035comp"
  "ute_derivative_in_pyramid\030B \001(\010:\004true\032\241\001"
  "\n\022DownSampleSchedule\022!\n\026downsample_facto"
  "r_360p\030\001 \001(\002:\0011\022!\n\026downsample_factor_480"
  "p\030\002 \001(\002:\0011\022!\n\026downsample_factor_720p\030\003 \001"
  "(\002:\0012\022\"\n\027downsample_factor_1080p\030\004 \001(\002:\001"
  "2\032\253\001\n\020BlurScoreOptions\022\032\n\017box_filter_dia"
  "m\030\001 \001(\005:\0013\022+\n\035relative_cornerness_thresh"
  "old\030\002 \001(\002:\0040.03\022-\n\035absolute_cornerness_t"
  "hreshold\030\003 \001(\002:\0060.0001\022\037\n\021median_percent"
  "ile\030\005 \001(\002:\0040.85\032_\n\030VisualConsistencyOpti"
  "ons\022!\n\023compute_consistency\030\001 \001(\010:\004true\022 "
  "\n\024tiny_image_dimension\030\002 \001(\005:\00220\"<\n\022Irls"
  "Initialization\022\020\n\014INIT_UNIFORM\020\001\022\024\n\020INIT"
  "_CONSISTENCY\020\002\"\261\001\n\016DownsampleMode\022\023\n\017DOW"
  "NSAMPLE_NONE\020\001\022\032\n\026DOWNSAMPLE_TO_MAX_SIZE"
  "\020\002\022\030\n\024DOWNSAMPLE_BY_FACTOR\020\003\022\032\n\026DOWNSAMP"
  "LE_BY_SCHEDULE\020\004\022\032\n\026DOWNSAMPLE_TO_MIN_SI"
  "ZE\020\005\022\034\n\030DOWNSAMPLE_TO_INPUT_SIZE\020\006\"|\n\017Ga"
  "inCorrectMode\022\035\n\031GAIN_CORRECT_DEFAULT_US"
  "ER\020\001\022\026\n\022GAIN_CORRECT_VIDEO\020\002\022\024\n\020GAIN_COR"
  "RECT_HDR\020\003\022\034\n\030GAIN_CORRECT_PHOTO_BURST\020\004"
  "\"e\n\013ImageFormat\022\024\n\020FORMAT_GRAYSCALE\020\001\022\016\n"
  "\nFORMAT_RGB\020\002\022\017\n\013FORMAT_RGBA\020\003\022\016\n\nFORMAT"
  "_BGR\020\004\022\017\n\013FORMAT_BGRA\020\005\"\"\n\027DescriptorExt"
  "ractorType\022\007\n\003ORB\020\000*\004\010\005\020\006*\004\010\007\020\010*\004\010\010\020\t*\004\010"
  "\t\020\n*\004\010\n\020\013*\004\010\017\020\020*\004\010\020\020\021*\004\010\030\020\031*\004\010\035\020\036*\004\010\036\020\037*"
  "\004\010 \020!*\004\010*\020+*\004\010+\020,"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto = {
  false, false, 5937, descriptor_table_protodef_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto, "mediapipe/util/tracking/region_flow_computation.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_FlowDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[0];
}
bool TrackingOptions_FlowDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackingOptions_FlowDirection TrackingOptions::FORWARD;
constexpr TrackingOptions_FlowDirection TrackingOptions::BACKWARD;
constexpr TrackingOptions_FlowDirection TrackingOptions::CONSECUTIVELY;
constexpr TrackingOptions_FlowDirection TrackingOptions::FlowDirection_MIN;
constexpr TrackingOptions_FlowDirection TrackingOptions::FlowDirection_MAX;
constexpr int TrackingOptions::FlowDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_TrackingPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[1];
}
bool TrackingOptions_TrackingPolicy_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackingOptions_TrackingPolicy TrackingOptions::POLICY_SINGLE_FRAME;
constexpr TrackingOptions_TrackingPolicy TrackingOptions::POLICY_MULTI_FRAME;
constexpr TrackingOptions_TrackingPolicy TrackingOptions::POLICY_LONG_TRACKS;
constexpr TrackingOptions_TrackingPolicy TrackingOptions::TrackingPolicy_MIN;
constexpr TrackingOptions_TrackingPolicy TrackingOptions::TrackingPolicy_MAX;
constexpr int TrackingOptions::TrackingPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_CornerExtractionMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[2];
}
bool TrackingOptions_CornerExtractionMethod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackingOptions_CornerExtractionMethod TrackingOptions::EXTRACTION_HARRIS;
constexpr TrackingOptions_CornerExtractionMethod TrackingOptions::EXTRACTION_MIN_EIG_VAL;
constexpr TrackingOptions_CornerExtractionMethod TrackingOptions::EXTRACTION_FAST;
constexpr TrackingOptions_CornerExtractionMethod TrackingOptions::CornerExtractionMethod_MIN;
constexpr TrackingOptions_CornerExtractionMethod TrackingOptions::CornerExtractionMethod_MAX;
constexpr int TrackingOptions::CornerExtractionMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_KltTrackerImplementation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[3];
}
bool TrackingOptions_KltTrackerImplementation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackingOptions_KltTrackerImplementation TrackingOptions::UNSPECIFIED;
constexpr TrackingOptions_KltTrackerImplementation TrackingOptions::KLT_OPENCV;
constexpr TrackingOptions_KltTrackerImplementation TrackingOptions::KltTrackerImplementation_MIN;
constexpr TrackingOptions_KltTrackerImplementation TrackingOptions::KltTrackerImplementation_MAX;
constexpr int TrackingOptions::KltTrackerImplementation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_IrlsInitialization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[4];
}
bool RegionFlowComputationOptions_IrlsInitialization_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions::INIT_UNIFORM;
constexpr RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions::INIT_CONSISTENCY;
constexpr RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions::IrlsInitialization_MIN;
constexpr RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions::IrlsInitialization_MAX;
constexpr int RegionFlowComputationOptions::IrlsInitialization_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_DownsampleMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[5];
}
bool RegionFlowComputationOptions_DownsampleMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DOWNSAMPLE_NONE;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DOWNSAMPLE_TO_MAX_SIZE;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DOWNSAMPLE_BY_FACTOR;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DOWNSAMPLE_BY_SCHEDULE;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DOWNSAMPLE_TO_MIN_SIZE;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DOWNSAMPLE_TO_INPUT_SIZE;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DownsampleMode_MIN;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::DownsampleMode_MAX;
constexpr int RegionFlowComputationOptions::DownsampleMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_GainCorrectMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[6];
}
bool RegionFlowComputationOptions_GainCorrectMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::GAIN_CORRECT_DEFAULT_USER;
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::GAIN_CORRECT_VIDEO;
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::GAIN_CORRECT_HDR;
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::GAIN_CORRECT_PHOTO_BURST;
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::GainCorrectMode_MIN;
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::GainCorrectMode_MAX;
constexpr int RegionFlowComputationOptions::GainCorrectMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[7];
}
bool RegionFlowComputationOptions_ImageFormat_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::FORMAT_GRAYSCALE;
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::FORMAT_RGB;
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::FORMAT_RGBA;
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::FORMAT_BGR;
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::FORMAT_BGRA;
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::ImageFormat_MIN;
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::ImageFormat_MAX;
constexpr int RegionFlowComputationOptions::ImageFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_DescriptorExtractorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[8];
}
bool RegionFlowComputationOptions_DescriptorExtractorType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionFlowComputationOptions_DescriptorExtractorType RegionFlowComputationOptions::ORB;
constexpr RegionFlowComputationOptions_DescriptorExtractorType RegionFlowComputationOptions::DescriptorExtractorType_MIN;
constexpr RegionFlowComputationOptions_DescriptorExtractorType RegionFlowComputationOptions::DescriptorExtractorType_MAX;
constexpr int RegionFlowComputationOptions::DescriptorExtractorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TrackingOptions_MinEigValExtractionSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingOptions_MinEigValExtractionSettings>()._has_bits_);
  static void set_has_feature_quality_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adaptive_lowest_quality_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrackingOptions_MinEigValExtractionSettings::TrackingOptions_MinEigValExtractionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingOptions.MinEigValExtractionSettings)
}
TrackingOptions_MinEigValExtractionSettings::TrackingOptions_MinEigValExtractionSettings(const TrackingOptions_MinEigValExtractionSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&feature_quality_level_, &from.feature_quality_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&adaptive_lowest_quality_level_) -
    reinterpret_cast<char*>(&feature_quality_level_)) + sizeof(adaptive_lowest_quality_level_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingOptions.MinEigValExtractionSettings)
}

void TrackingOptions_MinEigValExtractionSettings::SharedCtor() {
feature_quality_level_ = 0.01f;
adaptive_lowest_quality_level_ = 8e-05f;
}

TrackingOptions_MinEigValExtractionSettings::~TrackingOptions_MinEigValExtractionSettings() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingOptions_MinEigValExtractionSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackingOptions_MinEigValExtractionSettings::ArenaDtor(void* object) {
  TrackingOptions_MinEigValExtractionSettings* _this = reinterpret_cast< TrackingOptions_MinEigValExtractionSettings* >(object);
  (void)_this;
}
void TrackingOptions_MinEigValExtractionSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingOptions_MinEigValExtractionSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingOptions_MinEigValExtractionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    feature_quality_level_ = 0.01f;
    adaptive_lowest_quality_level_ = 8e-05f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingOptions_MinEigValExtractionSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float feature_quality_level = 1 [default = 0.01];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_feature_quality_level(&has_bits);
          feature_quality_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float adaptive_lowest_quality_level = 2 [default = 8e-05];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_adaptive_lowest_quality_level(&has_bits);
          adaptive_lowest_quality_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingOptions_MinEigValExtractionSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float feature_quality_level = 1 [default = 0.01];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_feature_quality_level(), target);
  }

  // optional float adaptive_lowest_quality_level = 2 [default = 8e-05];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_adaptive_lowest_quality_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  return target;
}

size_t TrackingOptions_MinEigValExtractionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float feature_quality_level = 1 [default = 0.01];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float adaptive_lowest_quality_level = 2 [default = 8e-05];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingOptions_MinEigValExtractionSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingOptions_MinEigValExtractionSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingOptions_MinEigValExtractionSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingOptions.MinEigValExtractionSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingOptions.MinEigValExtractionSettings)
    MergeFrom(*source);
  }
}

void TrackingOptions_MinEigValExtractionSettings::MergeFrom(const TrackingOptions_MinEigValExtractionSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      feature_quality_level_ = from.feature_quality_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      adaptive_lowest_quality_level_ = from.adaptive_lowest_quality_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingOptions_MinEigValExtractionSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingOptions_MinEigValExtractionSettings::CopyFrom(const TrackingOptions_MinEigValExtractionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingOptions.MinEigValExtractionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingOptions_MinEigValExtractionSettings::IsInitialized() const {
  return true;
}

void TrackingOptions_MinEigValExtractionSettings::InternalSwap(TrackingOptions_MinEigValExtractionSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(feature_quality_level_, other->feature_quality_level_);
  swap(adaptive_lowest_quality_level_, other->adaptive_lowest_quality_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingOptions_MinEigValExtractionSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[0]);
}

// ===================================================================

class TrackingOptions_HarrisExtractionSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingOptions_HarrisExtractionSettings>()._has_bits_);
  static void set_has_feature_quality_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrackingOptions_HarrisExtractionSettings::TrackingOptions_HarrisExtractionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingOptions.HarrisExtractionSettings)
}
TrackingOptions_HarrisExtractionSettings::TrackingOptions_HarrisExtractionSettings(const TrackingOptions_HarrisExtractionSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  feature_quality_level_ = from.feature_quality_level_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingOptions.HarrisExtractionSettings)
}

void TrackingOptions_HarrisExtractionSettings::SharedCtor() {
feature_quality_level_ = 0.00025f;
}

TrackingOptions_HarrisExtractionSettings::~TrackingOptions_HarrisExtractionSettings() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingOptions.HarrisExtractionSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingOptions_HarrisExtractionSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackingOptions_HarrisExtractionSettings::ArenaDtor(void* object) {
  TrackingOptions_HarrisExtractionSettings* _this = reinterpret_cast< TrackingOptions_HarrisExtractionSettings* >(object);
  (void)_this;
}
void TrackingOptions_HarrisExtractionSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingOptions_HarrisExtractionSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingOptions_HarrisExtractionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingOptions.HarrisExtractionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_quality_level_ = 0.00025f;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingOptions_HarrisExtractionSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float feature_quality_level = 1 [default = 0.00025];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_feature_quality_level(&has_bits);
          feature_quality_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingOptions_HarrisExtractionSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingOptions.HarrisExtractionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float feature_quality_level = 1 [default = 0.00025];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_feature_quality_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingOptions.HarrisExtractionSettings)
  return target;
}

size_t TrackingOptions_HarrisExtractionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingOptions.HarrisExtractionSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float feature_quality_level = 1 [default = 0.00025];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingOptions_HarrisExtractionSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingOptions.HarrisExtractionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingOptions_HarrisExtractionSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingOptions_HarrisExtractionSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingOptions.HarrisExtractionSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingOptions.HarrisExtractionSettings)
    MergeFrom(*source);
  }
}

void TrackingOptions_HarrisExtractionSettings::MergeFrom(const TrackingOptions_HarrisExtractionSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingOptions.HarrisExtractionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feature_quality_level()) {
    _internal_set_feature_quality_level(from._internal_feature_quality_level());
  }
}

void TrackingOptions_HarrisExtractionSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingOptions.HarrisExtractionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingOptions_HarrisExtractionSettings::CopyFrom(const TrackingOptions_HarrisExtractionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingOptions.HarrisExtractionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingOptions_HarrisExtractionSettings::IsInitialized() const {
  return true;
}

void TrackingOptions_HarrisExtractionSettings::InternalSwap(TrackingOptions_HarrisExtractionSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(feature_quality_level_, other->feature_quality_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingOptions_HarrisExtractionSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[1]);
}

// ===================================================================

class TrackingOptions_FastExtractionSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingOptions_FastExtractionSettings>()._has_bits_);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrackingOptions_FastExtractionSettings::TrackingOptions_FastExtractionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingOptions.FastExtractionSettings)
}
TrackingOptions_FastExtractionSettings::TrackingOptions_FastExtractionSettings(const TrackingOptions_FastExtractionSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingOptions.FastExtractionSettings)
}

void TrackingOptions_FastExtractionSettings::SharedCtor() {
threshold_ = 10;
}

TrackingOptions_FastExtractionSettings::~TrackingOptions_FastExtractionSettings() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingOptions.FastExtractionSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingOptions_FastExtractionSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackingOptions_FastExtractionSettings::ArenaDtor(void* object) {
  TrackingOptions_FastExtractionSettings* _this = reinterpret_cast< TrackingOptions_FastExtractionSettings* >(object);
  (void)_this;
}
void TrackingOptions_FastExtractionSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingOptions_FastExtractionSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingOptions_FastExtractionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingOptions.FastExtractionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingOptions_FastExtractionSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 threshold = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingOptions_FastExtractionSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingOptions.FastExtractionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 threshold = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingOptions.FastExtractionSettings)
  return target;
}

size_t TrackingOptions_FastExtractionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingOptions.FastExtractionSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 threshold = 1 [default = 10];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingOptions_FastExtractionSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingOptions.FastExtractionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingOptions_FastExtractionSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingOptions_FastExtractionSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingOptions.FastExtractionSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingOptions.FastExtractionSettings)
    MergeFrom(*source);
  }
}

void TrackingOptions_FastExtractionSettings::MergeFrom(const TrackingOptions_FastExtractionSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingOptions.FastExtractionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_threshold()) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void TrackingOptions_FastExtractionSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingOptions.FastExtractionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingOptions_FastExtractionSettings::CopyFrom(const TrackingOptions_FastExtractionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingOptions.FastExtractionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingOptions_FastExtractionSettings::IsInitialized() const {
  return true;
}

void TrackingOptions_FastExtractionSettings::InternalSwap(TrackingOptions_FastExtractionSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingOptions_FastExtractionSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[2]);
}

// ===================================================================

class TrackingOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackingOptions>()._has_bits_);
  static void set_has_internal_tracking_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_output_flow_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tracking_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_multi_frames_to_track(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_long_tracks_max_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_max_features(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_corner_extraction_method(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::mediapipe::TrackingOptions_MinEigValExtractionSettings& min_eig_val_settings(const TrackingOptions* msg);
  static void set_has_min_eig_val_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::TrackingOptions_HarrisExtractionSettings& harris_settings(const TrackingOptions* msg);
  static void set_has_harris_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::TrackingOptions_FastExtractionSettings& fast_settings(const TrackingOptions* msg);
  static void set_has_fast_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tracking_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tracking_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fractional_tracking_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_adaptive_tracking_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_feature_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_distance_downscale_sqrt(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_adaptive_good_features_to_track(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_adaptive_features_block_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_adaptive_features_levels(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_adaptive_extraction_levels(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_adaptive_extraction_levels_lowest_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_synthetic_zero_motion_grid_step(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_wide_baseline_matching(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ratio_test_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_refine_wide_baseline_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reuse_features_max_frame_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reuse_features_min_survived_frac(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_use_cv_tracking_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_klt_tracker_implementation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::mediapipe::TrackingOptions_MinEigValExtractionSettings&
TrackingOptions::_Internal::min_eig_val_settings(const TrackingOptions* msg) {
  return *msg->min_eig_val_settings_;
}
const ::mediapipe::TrackingOptions_HarrisExtractionSettings&
TrackingOptions::_Internal::harris_settings(const TrackingOptions* msg) {
  return *msg->harris_settings_;
}
const ::mediapipe::TrackingOptions_FastExtractionSettings&
TrackingOptions::_Internal::fast_settings(const TrackingOptions* msg) {
  return *msg->fast_settings_;
}
TrackingOptions::TrackingOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackingOptions)
}
TrackingOptions::TrackingOptions(const TrackingOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_min_eig_val_settings()) {
    min_eig_val_settings_ = new ::mediapipe::TrackingOptions_MinEigValExtractionSettings(*from.min_eig_val_settings_);
  } else {
    min_eig_val_settings_ = nullptr;
  }
  if (from._internal_has_harris_settings()) {
    harris_settings_ = new ::mediapipe::TrackingOptions_HarrisExtractionSettings(*from.harris_settings_);
  } else {
    harris_settings_ = nullptr;
  }
  if (from._internal_has_fast_settings()) {
    fast_settings_ = new ::mediapipe::TrackingOptions_FastExtractionSettings(*from.fast_settings_);
  } else {
    fast_settings_ = nullptr;
  }
  ::memcpy(&reuse_features_max_frame_distance_, &from.reuse_features_max_frame_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&corner_extraction_method_) -
    reinterpret_cast<char*>(&reuse_features_max_frame_distance_)) + sizeof(corner_extraction_method_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackingOptions)
}

void TrackingOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_eig_val_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adaptive_extraction_levels_lowest_size_) -
    reinterpret_cast<char*>(&min_eig_val_settings_)) + sizeof(adaptive_extraction_levels_lowest_size_));
klt_tracker_implementation_ = 1;
multi_frames_to_track_ = 1;
max_features_ = 2000;
tracking_window_size_ = 10;
tracking_iterations_ = 10;
fractional_tracking_distance_ = 0.15f;
min_feature_distance_ = 7;
adaptive_features_block_size_ = 0.26f;
adaptive_features_levels_ = 1;
synthetic_zero_motion_grid_step_ = 0.04f;
ratio_test_threshold_ = 0.8f;
reuse_features_min_survived_frac_ = 0.7f;
internal_tracking_direction_ = 2;
distance_downscale_sqrt_ = true;
adaptive_good_features_to_track_ = true;
use_cv_tracking_algorithm_ = true;
output_flow_direction_ = 2;
adaptive_extraction_levels_ = 1;
tracking_policy_ = 1;
long_tracks_max_frames_ = 300;
corner_extraction_method_ = 2;
}

TrackingOptions::~TrackingOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackingOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackingOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_eig_val_settings_;
  if (this != internal_default_instance()) delete harris_settings_;
  if (this != internal_default_instance()) delete fast_settings_;
}

void TrackingOptions::ArenaDtor(void* object) {
  TrackingOptions* _this = reinterpret_cast< TrackingOptions* >(object);
  (void)_this;
}
void TrackingOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackingOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackingOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(min_eig_val_settings_ != nullptr);
      min_eig_val_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(harris_settings_ != nullptr);
      harris_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fast_settings_ != nullptr);
      fast_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&reuse_features_max_frame_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adaptive_extraction_levels_lowest_size_) -
        reinterpret_cast<char*>(&reuse_features_max_frame_distance_)) + sizeof(adaptive_extraction_levels_lowest_size_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    klt_tracker_implementation_ = 1;
    multi_frames_to_track_ = 1;
    max_features_ = 2000;
    tracking_window_size_ = 10;
    tracking_iterations_ = 10;
    fractional_tracking_distance_ = 0.15f;
    min_feature_distance_ = 7;
    adaptive_features_block_size_ = 0.26f;
  }
  if (cached_has_bits & 0x00ff0000u) {
    adaptive_features_levels_ = 1;
    synthetic_zero_motion_grid_step_ = 0.04f;
    ratio_test_threshold_ = 0.8f;
    reuse_features_min_survived_frac_ = 0.7f;
    internal_tracking_direction_ = 2;
    distance_downscale_sqrt_ = true;
    adaptive_good_features_to_track_ = true;
    use_cv_tracking_algorithm_ = true;
  }
  if (cached_has_bits & 0x1f000000u) {
    output_flow_direction_ = 2;
    adaptive_extraction_levels_ = 1;
    tracking_policy_ = 1;
    long_tracks_max_frames_ = 300;
    corner_extraction_method_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackingOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 multi_frames_to_track = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_multi_frames_to_track(&has_bits);
          multi_frames_to_track_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_features = 2 [default = 2000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_features(&has_bits);
          max_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tracking_window_size = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tracking_window_size(&has_bits);
          tracking_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tracking_iterations = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tracking_iterations(&has_bits);
          tracking_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fractional_tracking_distance = 6 [default = 0.15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_fractional_tracking_distance(&has_bits);
          fractional_tracking_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_feature_distance = 7 [default = 7];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_min_feature_distance(&has_bits);
          min_feature_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool adaptive_good_features_to_track = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_adaptive_good_features_to_track(&has_bits);
          adaptive_good_features_to_track_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float adaptive_features_block_size = 9 [default = 0.26];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_adaptive_features_block_size(&has_bits);
          adaptive_features_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 adaptive_features_levels = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_adaptive_features_levels(&has_bits);
          adaptive_features_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float synthetic_zero_motion_grid_step = 13 [default = 0.04];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_synthetic_zero_motion_grid_step(&has_bits);
          synthetic_zero_motion_grid_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wide_baseline_matching = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_wide_baseline_matching(&has_bits);
          wide_baseline_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ratio_test_threshold = 15 [default = 0.8];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ratio_test_threshold(&has_bits);
          ratio_test_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool refine_wide_baseline_matches = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_refine_wide_baseline_matches(&has_bits);
          refine_wide_baseline_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reuse_features_max_frame_distance = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_reuse_features_max_frame_distance(&has_bits);
          reuse_features_max_frame_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float reuse_features_min_survived_frac = 18 [default = 0.7];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_reuse_features_min_survived_frac(&has_bits);
          reuse_features_min_survived_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.FlowDirection internal_tracking_direction = 19 [default = BACKWARD];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::TrackingOptions_FlowDirection_IsValid(val))) {
            _internal_set_internal_tracking_direction(static_cast<::mediapipe::TrackingOptions_FlowDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.FlowDirection output_flow_direction = 20 [default = BACKWARD];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::TrackingOptions_FlowDirection_IsValid(val))) {
            _internal_set_output_flow_direction(static_cast<::mediapipe::TrackingOptions_FlowDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool distance_downscale_sqrt = 21 [default = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_distance_downscale_sqrt(&has_bits);
          distance_downscale_sqrt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 adaptive_extraction_levels = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_adaptive_extraction_levels(&has_bits);
          adaptive_extraction_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 adaptive_extraction_levels_lowest_size = 23 [default = 0];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_adaptive_extraction_levels_lowest_size(&has_bits);
          adaptive_extraction_levels_lowest_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adaptive_tracking_distance = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_adaptive_tracking_distance(&has_bits);
          adaptive_tracking_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.TrackingPolicy tracking_policy = 25 [default = POLICY_SINGLE_FRAME];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::TrackingOptions_TrackingPolicy_IsValid(val))) {
            _internal_set_tracking_policy(static_cast<::mediapipe::TrackingOptions_TrackingPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 long_tracks_max_frames = 26 [default = 300];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_long_tracks_max_frames(&has_bits);
          long_tracks_max_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.CornerExtractionMethod corner_extraction_method = 27 [default = EXTRACTION_MIN_EIG_VAL];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::TrackingOptions_CornerExtractionMethod_IsValid(val))) {
            _internal_set_corner_extraction_method(static_cast<::mediapipe::TrackingOptions_CornerExtractionMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.MinEigValExtractionSettings min_eig_val_settings = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_eig_val_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.HarrisExtractionSettings harris_settings = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_harris_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_cv_tracking_algorithm = 30 [default = true];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_use_cv_tracking_algorithm(&has_bits);
          use_cv_tracking_algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.FastExtractionSettings fast_settings = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackingOptions.KltTrackerImplementation klt_tracker_implementation = 32 [default = KLT_OPENCV];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::TrackingOptions_KltTrackerImplementation_IsValid(val))) {
            _internal_set_klt_tracker_implementation(static_cast<::mediapipe::TrackingOptions_KltTrackerImplementation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(32, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((24u <= tag && tag < 32u) ||
          (88u <= tag && tag < 96u) ||
          (96u <= tag && tag < 104u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackingOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 multi_frames_to_track = 1 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_multi_frames_to_track(), target);
  }

  // optional int32 max_features = 2 [default = 2000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_features(), target);
  }

  // Extension range [3, 4)
  target = _extensions_._InternalSerialize(
      3, 4, target, stream);

  // optional int32 tracking_window_size = 4 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tracking_window_size(), target);
  }

  // optional int32 tracking_iterations = 5 [default = 10];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tracking_iterations(), target);
  }

  // optional float fractional_tracking_distance = 6 [default = 0.15];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fractional_tracking_distance(), target);
  }

  // optional float min_feature_distance = 7 [default = 7];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_min_feature_distance(), target);
  }

  // optional bool adaptive_good_features_to_track = 8 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_adaptive_good_features_to_track(), target);
  }

  // optional float adaptive_features_block_size = 9 [default = 0.26];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_adaptive_features_block_size(), target);
  }

  // optional int32 adaptive_features_levels = 10 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_adaptive_features_levels(), target);
  }

  // Extension range [11, 13)
  target = _extensions_._InternalSerialize(
      11, 13, target, stream);

  // optional float synthetic_zero_motion_grid_step = 13 [default = 0.04];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_synthetic_zero_motion_grid_step(), target);
  }

  // optional bool wide_baseline_matching = 14 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_wide_baseline_matching(), target);
  }

  // optional float ratio_test_threshold = 15 [default = 0.8];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_ratio_test_threshold(), target);
  }

  // optional bool refine_wide_baseline_matches = 16 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_refine_wide_baseline_matches(), target);
  }

  // optional int32 reuse_features_max_frame_distance = 17 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_reuse_features_max_frame_distance(), target);
  }

  // optional float reuse_features_min_survived_frac = 18 [default = 0.7];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_reuse_features_min_survived_frac(), target);
  }

  // optional .mediapipe.TrackingOptions.FlowDirection internal_tracking_direction = 19 [default = BACKWARD];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_internal_tracking_direction(), target);
  }

  // optional .mediapipe.TrackingOptions.FlowDirection output_flow_direction = 20 [default = BACKWARD];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_output_flow_direction(), target);
  }

  // optional bool distance_downscale_sqrt = 21 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_distance_downscale_sqrt(), target);
  }

  // optional int32 adaptive_extraction_levels = 22 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_adaptive_extraction_levels(), target);
  }

  // optional int32 adaptive_extraction_levels_lowest_size = 23 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_adaptive_extraction_levels_lowest_size(), target);
  }

  // optional bool adaptive_tracking_distance = 24 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_adaptive_tracking_distance(), target);
  }

  // optional .mediapipe.TrackingOptions.TrackingPolicy tracking_policy = 25 [default = POLICY_SINGLE_FRAME];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_tracking_policy(), target);
  }

  // optional int32 long_tracks_max_frames = 26 [default = 300];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_long_tracks_max_frames(), target);
  }

  // optional .mediapipe.TrackingOptions.CornerExtractionMethod corner_extraction_method = 27 [default = EXTRACTION_MIN_EIG_VAL];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_corner_extraction_method(), target);
  }

  // optional .mediapipe.TrackingOptions.MinEigValExtractionSettings min_eig_val_settings = 28;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::min_eig_val_settings(this), target, stream);
  }

  // optional .mediapipe.TrackingOptions.HarrisExtractionSettings harris_settings = 29;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::harris_settings(this), target, stream);
  }

  // optional bool use_cv_tracking_algorithm = 30 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_use_cv_tracking_algorithm(), target);
  }

  // optional .mediapipe.TrackingOptions.FastExtractionSettings fast_settings = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::fast_settings(this), target, stream);
  }

  // optional .mediapipe.TrackingOptions.KltTrackerImplementation klt_tracker_implementation = 32 [default = KLT_OPENCV];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      32, this->_internal_klt_tracker_implementation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackingOptions)
  return target;
}

size_t TrackingOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackingOptions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.TrackingOptions.MinEigValExtractionSettings min_eig_val_settings = 28;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_eig_val_settings_);
    }

    // optional .mediapipe.TrackingOptions.HarrisExtractionSettings harris_settings = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *harris_settings_);
    }

    // optional .mediapipe.TrackingOptions.FastExtractionSettings fast_settings = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fast_settings_);
    }

    // optional int32 reuse_features_max_frame_distance = 17 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reuse_features_max_frame_distance());
    }

    // optional bool adaptive_tracking_distance = 24 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool wide_baseline_matching = 14 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool refine_wide_baseline_matches = 16 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional int32 adaptive_extraction_levels_lowest_size = 23 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adaptive_extraction_levels_lowest_size());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .mediapipe.TrackingOptions.KltTrackerImplementation klt_tracker_implementation = 32 [default = KLT_OPENCV];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_klt_tracker_implementation());
    }

    // optional int32 multi_frames_to_track = 1 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_multi_frames_to_track());
    }

    // optional int32 max_features = 2 [default = 2000];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_features());
    }

    // optional int32 tracking_window_size = 4 [default = 10];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tracking_window_size());
    }

    // optional int32 tracking_iterations = 5 [default = 10];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tracking_iterations());
    }

    // optional float fractional_tracking_distance = 6 [default = 0.15];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float min_feature_distance = 7 [default = 7];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float adaptive_features_block_size = 9 [default = 0.26];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 adaptive_features_levels = 10 [default = 1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adaptive_features_levels());
    }

    // optional float synthetic_zero_motion_grid_step = 13 [default = 0.04];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float ratio_test_threshold = 15 [default = 0.8];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float reuse_features_min_survived_frac = 18 [default = 0.7];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional .mediapipe.TrackingOptions.FlowDirection internal_tracking_direction = 19 [default = BACKWARD];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_internal_tracking_direction());
    }

    // optional bool distance_downscale_sqrt = 21 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool adaptive_good_features_to_track = 8 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool use_cv_tracking_algorithm = 30 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional .mediapipe.TrackingOptions.FlowDirection output_flow_direction = 20 [default = BACKWARD];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_flow_direction());
    }

    // optional int32 adaptive_extraction_levels = 22 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adaptive_extraction_levels());
    }

    // optional .mediapipe.TrackingOptions.TrackingPolicy tracking_policy = 25 [default = POLICY_SINGLE_FRAME];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tracking_policy());
    }

    // optional int32 long_tracks_max_frames = 26 [default = 300];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_long_tracks_max_frames());
    }

    // optional .mediapipe.TrackingOptions.CornerExtractionMethod corner_extraction_method = 27 [default = EXTRACTION_MIN_EIG_VAL];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_corner_extraction_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackingOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackingOptions)
    MergeFrom(*source);
  }
}

void TrackingOptions::MergeFrom(const TrackingOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_min_eig_val_settings()->::mediapipe::TrackingOptions_MinEigValExtractionSettings::MergeFrom(from._internal_min_eig_val_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_harris_settings()->::mediapipe::TrackingOptions_HarrisExtractionSettings::MergeFrom(from._internal_harris_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fast_settings()->::mediapipe::TrackingOptions_FastExtractionSettings::MergeFrom(from._internal_fast_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      reuse_features_max_frame_distance_ = from.reuse_features_max_frame_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      adaptive_tracking_distance_ = from.adaptive_tracking_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      wide_baseline_matching_ = from.wide_baseline_matching_;
    }
    if (cached_has_bits & 0x00000040u) {
      refine_wide_baseline_matches_ = from.refine_wide_baseline_matches_;
    }
    if (cached_has_bits & 0x00000080u) {
      adaptive_extraction_levels_lowest_size_ = from.adaptive_extraction_levels_lowest_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      klt_tracker_implementation_ = from.klt_tracker_implementation_;
    }
    if (cached_has_bits & 0x00000200u) {
      multi_frames_to_track_ = from.multi_frames_to_track_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_features_ = from.max_features_;
    }
    if (cached_has_bits & 0x00000800u) {
      tracking_window_size_ = from.tracking_window_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      tracking_iterations_ = from.tracking_iterations_;
    }
    if (cached_has_bits & 0x00002000u) {
      fractional_tracking_distance_ = from.fractional_tracking_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_feature_distance_ = from.min_feature_distance_;
    }
    if (cached_has_bits & 0x00008000u) {
      adaptive_features_block_size_ = from.adaptive_features_block_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      adaptive_features_levels_ = from.adaptive_features_levels_;
    }
    if (cached_has_bits & 0x00020000u) {
      synthetic_zero_motion_grid_step_ = from.synthetic_zero_motion_grid_step_;
    }
    if (cached_has_bits & 0x00040000u) {
      ratio_test_threshold_ = from.ratio_test_threshold_;
    }
    if (cached_has_bits & 0x00080000u) {
      reuse_features_min_survived_frac_ = from.reuse_features_min_survived_frac_;
    }
    if (cached_has_bits & 0x00100000u) {
      internal_tracking_direction_ = from.internal_tracking_direction_;
    }
    if (cached_has_bits & 0x00200000u) {
      distance_downscale_sqrt_ = from.distance_downscale_sqrt_;
    }
    if (cached_has_bits & 0x00400000u) {
      adaptive_good_features_to_track_ = from.adaptive_good_features_to_track_;
    }
    if (cached_has_bits & 0x00800000u) {
      use_cv_tracking_algorithm_ = from.use_cv_tracking_algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      output_flow_direction_ = from.output_flow_direction_;
    }
    if (cached_has_bits & 0x02000000u) {
      adaptive_extraction_levels_ = from.adaptive_extraction_levels_;
    }
    if (cached_has_bits & 0x04000000u) {
      tracking_policy_ = from.tracking_policy_;
    }
    if (cached_has_bits & 0x08000000u) {
      long_tracks_max_frames_ = from.long_tracks_max_frames_;
    }
    if (cached_has_bits & 0x10000000u) {
      corner_extraction_method_ = from.corner_extraction_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackingOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingOptions::CopyFrom(const TrackingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingOptions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TrackingOptions::InternalSwap(TrackingOptions* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackingOptions, adaptive_extraction_levels_lowest_size_)
      + sizeof(TrackingOptions::adaptive_extraction_levels_lowest_size_)
      - PROTOBUF_FIELD_OFFSET(TrackingOptions, min_eig_val_settings_)>(
          reinterpret_cast<char*>(&min_eig_val_settings_),
          reinterpret_cast<char*>(&other->min_eig_val_settings_));
  swap(klt_tracker_implementation_, other->klt_tracker_implementation_);
  swap(multi_frames_to_track_, other->multi_frames_to_track_);
  swap(max_features_, other->max_features_);
  swap(tracking_window_size_, other->tracking_window_size_);
  swap(tracking_iterations_, other->tracking_iterations_);
  swap(fractional_tracking_distance_, other->fractional_tracking_distance_);
  swap(min_feature_distance_, other->min_feature_distance_);
  swap(adaptive_features_block_size_, other->adaptive_features_block_size_);
  swap(adaptive_features_levels_, other->adaptive_features_levels_);
  swap(synthetic_zero_motion_grid_step_, other->synthetic_zero_motion_grid_step_);
  swap(ratio_test_threshold_, other->ratio_test_threshold_);
  swap(reuse_features_min_survived_frac_, other->reuse_features_min_survived_frac_);
  swap(internal_tracking_direction_, other->internal_tracking_direction_);
  swap(distance_downscale_sqrt_, other->distance_downscale_sqrt_);
  swap(adaptive_good_features_to_track_, other->adaptive_good_features_to_track_);
  swap(use_cv_tracking_algorithm_, other->use_cv_tracking_algorithm_);
  swap(output_flow_direction_, other->output_flow_direction_);
  swap(adaptive_extraction_levels_, other->adaptive_extraction_levels_);
  swap(tracking_policy_, other->tracking_policy_);
  swap(long_tracks_max_frames_, other->long_tracks_max_frames_);
  swap(corner_extraction_method_, other->corner_extraction_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[3]);
}

// ===================================================================

class RegionFlowComputationOptions_DownSampleSchedule::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowComputationOptions_DownSampleSchedule>()._has_bits_);
  static void set_has_downsample_factor_360p(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_downsample_factor_480p(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_downsample_factor_720p(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_downsample_factor_1080p(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RegionFlowComputationOptions_DownSampleSchedule::RegionFlowComputationOptions_DownSampleSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
}
RegionFlowComputationOptions_DownSampleSchedule::RegionFlowComputationOptions_DownSampleSchedule(const RegionFlowComputationOptions_DownSampleSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&downsample_factor_360p_, &from.downsample_factor_360p_,
    static_cast<size_t>(reinterpret_cast<char*>(&downsample_factor_1080p_) -
    reinterpret_cast<char*>(&downsample_factor_360p_)) + sizeof(downsample_factor_1080p_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
}

void RegionFlowComputationOptions_DownSampleSchedule::SharedCtor() {
downsample_factor_360p_ = 1;
downsample_factor_480p_ = 1;
downsample_factor_720p_ = 2;
downsample_factor_1080p_ = 2;
}

RegionFlowComputationOptions_DownSampleSchedule::~RegionFlowComputationOptions_DownSampleSchedule() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowComputationOptions_DownSampleSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegionFlowComputationOptions_DownSampleSchedule::ArenaDtor(void* object) {
  RegionFlowComputationOptions_DownSampleSchedule* _this = reinterpret_cast< RegionFlowComputationOptions_DownSampleSchedule* >(object);
  (void)_this;
}
void RegionFlowComputationOptions_DownSampleSchedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowComputationOptions_DownSampleSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowComputationOptions_DownSampleSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    downsample_factor_360p_ = 1;
    downsample_factor_480p_ = 1;
    downsample_factor_720p_ = 2;
    downsample_factor_1080p_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowComputationOptions_DownSampleSchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float downsample_factor_360p = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_downsample_factor_360p(&has_bits);
          downsample_factor_360p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float downsample_factor_480p = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_downsample_factor_480p(&has_bits);
          downsample_factor_480p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float downsample_factor_720p = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_downsample_factor_720p(&has_bits);
          downsample_factor_720p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float downsample_factor_1080p = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_downsample_factor_1080p(&has_bits);
          downsample_factor_1080p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowComputationOptions_DownSampleSchedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float downsample_factor_360p = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_downsample_factor_360p(), target);
  }

  // optional float downsample_factor_480p = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_downsample_factor_480p(), target);
  }

  // optional float downsample_factor_720p = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_downsample_factor_720p(), target);
  }

  // optional float downsample_factor_1080p = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_downsample_factor_1080p(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  return target;
}

size_t RegionFlowComputationOptions_DownSampleSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float downsample_factor_360p = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float downsample_factor_480p = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float downsample_factor_720p = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float downsample_factor_1080p = 4 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowComputationOptions_DownSampleSchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowComputationOptions_DownSampleSchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowComputationOptions_DownSampleSchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
    MergeFrom(*source);
  }
}

void RegionFlowComputationOptions_DownSampleSchedule::MergeFrom(const RegionFlowComputationOptions_DownSampleSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      downsample_factor_360p_ = from.downsample_factor_360p_;
    }
    if (cached_has_bits & 0x00000002u) {
      downsample_factor_480p_ = from.downsample_factor_480p_;
    }
    if (cached_has_bits & 0x00000004u) {
      downsample_factor_720p_ = from.downsample_factor_720p_;
    }
    if (cached_has_bits & 0x00000008u) {
      downsample_factor_1080p_ = from.downsample_factor_1080p_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowComputationOptions_DownSampleSchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowComputationOptions_DownSampleSchedule::CopyFrom(const RegionFlowComputationOptions_DownSampleSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowComputationOptions_DownSampleSchedule::IsInitialized() const {
  return true;
}

void RegionFlowComputationOptions_DownSampleSchedule::InternalSwap(RegionFlowComputationOptions_DownSampleSchedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(downsample_factor_360p_, other->downsample_factor_360p_);
  swap(downsample_factor_480p_, other->downsample_factor_480p_);
  swap(downsample_factor_720p_, other->downsample_factor_720p_);
  swap(downsample_factor_1080p_, other->downsample_factor_1080p_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowComputationOptions_DownSampleSchedule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[4]);
}

// ===================================================================

class RegionFlowComputationOptions_BlurScoreOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowComputationOptions_BlurScoreOptions>()._has_bits_);
  static void set_has_box_filter_diam(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relative_cornerness_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_absolute_cornerness_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_median_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RegionFlowComputationOptions_BlurScoreOptions::RegionFlowComputationOptions_BlurScoreOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
}
RegionFlowComputationOptions_BlurScoreOptions::RegionFlowComputationOptions_BlurScoreOptions(const RegionFlowComputationOptions_BlurScoreOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&box_filter_diam_, &from.box_filter_diam_,
    static_cast<size_t>(reinterpret_cast<char*>(&median_percentile_) -
    reinterpret_cast<char*>(&box_filter_diam_)) + sizeof(median_percentile_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
}

void RegionFlowComputationOptions_BlurScoreOptions::SharedCtor() {
box_filter_diam_ = 3;
relative_cornerness_threshold_ = 0.03f;
absolute_cornerness_threshold_ = 0.0001f;
median_percentile_ = 0.85f;
}

RegionFlowComputationOptions_BlurScoreOptions::~RegionFlowComputationOptions_BlurScoreOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowComputationOptions_BlurScoreOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegionFlowComputationOptions_BlurScoreOptions::ArenaDtor(void* object) {
  RegionFlowComputationOptions_BlurScoreOptions* _this = reinterpret_cast< RegionFlowComputationOptions_BlurScoreOptions* >(object);
  (void)_this;
}
void RegionFlowComputationOptions_BlurScoreOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowComputationOptions_BlurScoreOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowComputationOptions_BlurScoreOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    box_filter_diam_ = 3;
    relative_cornerness_threshold_ = 0.03f;
    absolute_cornerness_threshold_ = 0.0001f;
    median_percentile_ = 0.85f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowComputationOptions_BlurScoreOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 box_filter_diam = 1 [default = 3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_box_filter_diam(&has_bits);
          box_filter_diam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float relative_cornerness_threshold = 2 [default = 0.03];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_relative_cornerness_threshold(&has_bits);
          relative_cornerness_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float absolute_cornerness_threshold = 3 [default = 0.0001];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_absolute_cornerness_threshold(&has_bits);
          absolute_cornerness_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float median_percentile = 5 [default = 0.85];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_median_percentile(&has_bits);
          median_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowComputationOptions_BlurScoreOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 box_filter_diam = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_box_filter_diam(), target);
  }

  // optional float relative_cornerness_threshold = 2 [default = 0.03];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_relative_cornerness_threshold(), target);
  }

  // optional float absolute_cornerness_threshold = 3 [default = 0.0001];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_cornerness_threshold(), target);
  }

  // optional float median_percentile = 5 [default = 0.85];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_median_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  return target;
}

size_t RegionFlowComputationOptions_BlurScoreOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 box_filter_diam = 1 [default = 3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_box_filter_diam());
    }

    // optional float relative_cornerness_threshold = 2 [default = 0.03];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float absolute_cornerness_threshold = 3 [default = 0.0001];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float median_percentile = 5 [default = 0.85];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowComputationOptions_BlurScoreOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowComputationOptions_BlurScoreOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowComputationOptions_BlurScoreOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
    MergeFrom(*source);
  }
}

void RegionFlowComputationOptions_BlurScoreOptions::MergeFrom(const RegionFlowComputationOptions_BlurScoreOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      box_filter_diam_ = from.box_filter_diam_;
    }
    if (cached_has_bits & 0x00000002u) {
      relative_cornerness_threshold_ = from.relative_cornerness_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      absolute_cornerness_threshold_ = from.absolute_cornerness_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      median_percentile_ = from.median_percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowComputationOptions_BlurScoreOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowComputationOptions_BlurScoreOptions::CopyFrom(const RegionFlowComputationOptions_BlurScoreOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowComputationOptions_BlurScoreOptions::IsInitialized() const {
  return true;
}

void RegionFlowComputationOptions_BlurScoreOptions::InternalSwap(RegionFlowComputationOptions_BlurScoreOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(box_filter_diam_, other->box_filter_diam_);
  swap(relative_cornerness_threshold_, other->relative_cornerness_threshold_);
  swap(absolute_cornerness_threshold_, other->absolute_cornerness_threshold_);
  swap(median_percentile_, other->median_percentile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowComputationOptions_BlurScoreOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[5]);
}

// ===================================================================

class RegionFlowComputationOptions_VisualConsistencyOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowComputationOptions_VisualConsistencyOptions>()._has_bits_);
  static void set_has_compute_consistency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tiny_image_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RegionFlowComputationOptions_VisualConsistencyOptions::RegionFlowComputationOptions_VisualConsistencyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
}
RegionFlowComputationOptions_VisualConsistencyOptions::RegionFlowComputationOptions_VisualConsistencyOptions(const RegionFlowComputationOptions_VisualConsistencyOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&compute_consistency_, &from.compute_consistency_,
    static_cast<size_t>(reinterpret_cast<char*>(&tiny_image_dimension_) -
    reinterpret_cast<char*>(&compute_consistency_)) + sizeof(tiny_image_dimension_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
}

void RegionFlowComputationOptions_VisualConsistencyOptions::SharedCtor() {
compute_consistency_ = true;
tiny_image_dimension_ = 20;
}

RegionFlowComputationOptions_VisualConsistencyOptions::~RegionFlowComputationOptions_VisualConsistencyOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowComputationOptions_VisualConsistencyOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegionFlowComputationOptions_VisualConsistencyOptions::ArenaDtor(void* object) {
  RegionFlowComputationOptions_VisualConsistencyOptions* _this = reinterpret_cast< RegionFlowComputationOptions_VisualConsistencyOptions* >(object);
  (void)_this;
}
void RegionFlowComputationOptions_VisualConsistencyOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowComputationOptions_VisualConsistencyOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowComputationOptions_VisualConsistencyOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    compute_consistency_ = true;
    tiny_image_dimension_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowComputationOptions_VisualConsistencyOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool compute_consistency = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_compute_consistency(&has_bits);
          compute_consistency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tiny_image_dimension = 2 [default = 20];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tiny_image_dimension(&has_bits);
          tiny_image_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowComputationOptions_VisualConsistencyOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool compute_consistency = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_compute_consistency(), target);
  }

  // optional int32 tiny_image_dimension = 2 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tiny_image_dimension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  return target;
}

size_t RegionFlowComputationOptions_VisualConsistencyOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool compute_consistency = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 tiny_image_dimension = 2 [default = 20];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tiny_image_dimension());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowComputationOptions_VisualConsistencyOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowComputationOptions_VisualConsistencyOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowComputationOptions_VisualConsistencyOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
    MergeFrom(*source);
  }
}

void RegionFlowComputationOptions_VisualConsistencyOptions::MergeFrom(const RegionFlowComputationOptions_VisualConsistencyOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      compute_consistency_ = from.compute_consistency_;
    }
    if (cached_has_bits & 0x00000002u) {
      tiny_image_dimension_ = from.tiny_image_dimension_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionFlowComputationOptions_VisualConsistencyOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowComputationOptions_VisualConsistencyOptions::CopyFrom(const RegionFlowComputationOptions_VisualConsistencyOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowComputationOptions_VisualConsistencyOptions::IsInitialized() const {
  return true;
}

void RegionFlowComputationOptions_VisualConsistencyOptions::InternalSwap(RegionFlowComputationOptions_VisualConsistencyOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compute_consistency_, other->compute_consistency_);
  swap(tiny_image_dimension_, other->tiny_image_dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowComputationOptions_VisualConsistencyOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[6]);
}

// ===================================================================

class RegionFlowComputationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionFlowComputationOptions>()._has_bits_);
  static const ::mediapipe::TrackingOptions& tracking_options(const RegionFlowComputationOptions* msg);
  static void set_has_tracking_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_feature_inliers(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_relative_min_feature_inliers(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_pre_blur_sigma(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ransac_rounds_per_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_absolute_inlier_error_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_frac_inlier_error_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_relative_inlier_error_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_top_inlier_sets(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_no_estimation_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fast_estimation_block_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_fast_estimation_min_block_size(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_fast_estimation_overlap_grids(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_max_magnitude_threshold_ratio(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_median_magnitude_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_irls_initialization(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_downsample_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_downsampling_size(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_downsample_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_round_downsample_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule& downsample_schedule(const RegionFlowComputationOptions* msg);
  static void set_has_downsample_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_feature_requirement(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_min_feature_cover(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_min_feature_cover_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_compute_blur_score(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions& blur_score_options(const RegionFlowComputationOptions* msg);
  static void set_has_blur_score_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions& visual_consistency_options(const RegionFlowComputationOptions* msg);
  static void set_has_visual_consistency_options(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_patch_descriptor_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_distance_from_border(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_corner_response_scale(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_verify_features(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_verification_distance(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_verify_long_features(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_long_feature_verification_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_max_long_feature_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_verify_long_feature_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_verify_long_feature_trigger_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_histogram_equalization(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_use_synthetic_zero_motion_tracks_all_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_synthetic_zero_motion_tracks_first_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gain_correction(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_fast_gain_correction(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_gain_correction_multiple_hypotheses(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_gain_correction_inlier_improvement_frac(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_gain_correction_bright_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gain_correction_triggering_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_frac_gain_feature_size(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_frac_gain_step(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_gain_correct_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::mediapipe::ToneEstimationOptions_GainBiasBounds& gain_bias_bounds(const RegionFlowComputationOptions* msg);
  static void set_has_gain_bias_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_image_format(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_descriptor_extractor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_compute_derivative_in_pyramid(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
};

const ::mediapipe::TrackingOptions&
RegionFlowComputationOptions::_Internal::tracking_options(const RegionFlowComputationOptions* msg) {
  return *msg->tracking_options_;
}
const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule&
RegionFlowComputationOptions::_Internal::downsample_schedule(const RegionFlowComputationOptions* msg) {
  return *msg->downsample_schedule_;
}
const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions&
RegionFlowComputationOptions::_Internal::blur_score_options(const RegionFlowComputationOptions* msg) {
  return *msg->blur_score_options_;
}
const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions&
RegionFlowComputationOptions::_Internal::visual_consistency_options(const RegionFlowComputationOptions* msg) {
  return *msg->visual_consistency_options_;
}
const ::mediapipe::ToneEstimationOptions_GainBiasBounds&
RegionFlowComputationOptions::_Internal::gain_bias_bounds(const RegionFlowComputationOptions* msg) {
  return *msg->gain_bias_bounds_;
}
void RegionFlowComputationOptions::clear_gain_bias_bounds() {
  if (gain_bias_bounds_ != nullptr) gain_bias_bounds_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
RegionFlowComputationOptions::RegionFlowComputationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.RegionFlowComputationOptions)
}
RegionFlowComputationOptions::RegionFlowComputationOptions(const RegionFlowComputationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_tracking_options()) {
    tracking_options_ = new ::mediapipe::TrackingOptions(*from.tracking_options_);
  } else {
    tracking_options_ = nullptr;
  }
  if (from._internal_has_downsample_schedule()) {
    downsample_schedule_ = new ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule(*from.downsample_schedule_);
  } else {
    downsample_schedule_ = nullptr;
  }
  if (from._internal_has_blur_score_options()) {
    blur_score_options_ = new ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions(*from.blur_score_options_);
  } else {
    blur_score_options_ = nullptr;
  }
  if (from._internal_has_gain_bias_bounds()) {
    gain_bias_bounds_ = new ::mediapipe::ToneEstimationOptions_GainBiasBounds(*from.gain_bias_bounds_);
  } else {
    gain_bias_bounds_ = nullptr;
  }
  if (from._internal_has_visual_consistency_options()) {
    visual_consistency_options_ = new ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions(*from.visual_consistency_options_);
  } else {
    visual_consistency_options_ = nullptr;
  }
  ::memcpy(&no_estimation_mode_, &from.no_estimation_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_format_) -
    reinterpret_cast<char*>(&no_estimation_mode_)) + sizeof(image_format_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RegionFlowComputationOptions)
}

void RegionFlowComputationOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracking_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&descriptor_extractor_type_) -
    reinterpret_cast<char*>(&tracking_options_)) + sizeof(descriptor_extractor_type_));
min_feature_inliers_ = 3;
ransac_rounds_per_region_ = 15;
absolute_inlier_error_threshold_ = 2;
fast_estimation_block_size_ = 0.25f;
downsample_mode_ = 1;
downsampling_size_ = 256;
min_feature_requirement_ = 20;
min_feature_cover_ = 0.15f;
downsample_factor_ = 2;
min_feature_cover_grid_ = 8;
patch_descriptor_radius_ = 3;
fast_estimation_overlap_grids_ = 3;
max_magnitude_threshold_ratio_ = 0.2f;
fast_estimation_min_block_size_ = 100;
corner_response_scale_ = 1500;
verification_distance_ = 0.5f;
pre_blur_sigma_ = 0.8f;
frac_gain_feature_size_ = 0.3f;
frac_gain_step_ = 0.1f;
gain_correct_mode_ = 1;
relative_inlier_error_threshold_ = 0.1f;
top_inlier_sets_ = 2;
relative_min_feature_inliers_ = 0.2f;
gain_correction_inlier_improvement_frac_ = 0.1f;
irls_initialization_ = 2;
distance_from_border_ = 3;
long_feature_verification_threshold_ = 0.04f;
verify_long_features_ = true;
gain_correction_multiple_hypotheses_ = true;
compute_derivative_in_pyramid_ = true;
max_long_feature_acceleration_ = 5;
image_format_ = 2;
}

RegionFlowComputationOptions::~RegionFlowComputationOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.RegionFlowComputationOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionFlowComputationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tracking_options_;
  if (this != internal_default_instance()) delete downsample_schedule_;
  if (this != internal_default_instance()) delete blur_score_options_;
  if (this != internal_default_instance()) delete gain_bias_bounds_;
  if (this != internal_default_instance()) delete visual_consistency_options_;
}

void RegionFlowComputationOptions::ArenaDtor(void* object) {
  RegionFlowComputationOptions* _this = reinterpret_cast< RegionFlowComputationOptions* >(object);
  (void)_this;
}
void RegionFlowComputationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionFlowComputationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionFlowComputationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RegionFlowComputationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tracking_options_ != nullptr);
      tracking_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(downsample_schedule_ != nullptr);
      downsample_schedule_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(blur_score_options_ != nullptr);
      blur_score_options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gain_bias_bounds_ != nullptr);
      gain_bias_bounds_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(visual_consistency_options_ != nullptr);
      visual_consistency_options_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&no_estimation_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compute_blur_score_) -
        reinterpret_cast<char*>(&no_estimation_mode_)) + sizeof(compute_blur_score_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&verify_features_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gain_correction_) -
        reinterpret_cast<char*>(&verify_features_)) + sizeof(gain_correction_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&fast_gain_correction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&descriptor_extractor_type_) -
        reinterpret_cast<char*>(&fast_gain_correction_)) + sizeof(descriptor_extractor_type_));
    min_feature_inliers_ = 3;
    ransac_rounds_per_region_ = 15;
    absolute_inlier_error_threshold_ = 2;
  }
  if (cached_has_bits & 0xff000000u) {
    fast_estimation_block_size_ = 0.25f;
    downsample_mode_ = 1;
    downsampling_size_ = 256;
    min_feature_requirement_ = 20;
    min_feature_cover_ = 0.15f;
    downsample_factor_ = 2;
    min_feature_cover_grid_ = 8;
    patch_descriptor_radius_ = 3;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    fast_estimation_overlap_grids_ = 3;
    max_magnitude_threshold_ratio_ = 0.2f;
    fast_estimation_min_block_size_ = 100;
    corner_response_scale_ = 1500;
    verification_distance_ = 0.5f;
    pre_blur_sigma_ = 0.8f;
    frac_gain_feature_size_ = 0.3f;
    frac_gain_step_ = 0.1f;
  }
  if (cached_has_bits & 0x0000ff00u) {
    gain_correct_mode_ = 1;
    relative_inlier_error_threshold_ = 0.1f;
    top_inlier_sets_ = 2;
    relative_min_feature_inliers_ = 0.2f;
    gain_correction_inlier_improvement_frac_ = 0.1f;
    irls_initialization_ = 2;
    distance_from_border_ = 3;
    long_feature_verification_threshold_ = 0.04f;
  }
  if (cached_has_bits & 0x001f0000u) {
    verify_long_features_ = true;
    gain_correction_multiple_hypotheses_ = true;
    compute_derivative_in_pyramid_ = true;
    max_long_feature_acceleration_ = 5;
    image_format_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionFlowComputationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.TrackingOptions tracking_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracking_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_feature_inliers = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_feature_inliers(&_has_bits_);
          min_feature_inliers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ransac_rounds_per_region = 3 [default = 15];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ransac_rounds_per_region(&_has_bits_);
          ransac_rounds_per_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float absolute_inlier_error_threshold = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_absolute_inlier_error_threshold(&_has_bits_);
          absolute_inlier_error_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fast_estimation_block_size = 6 [default = 0.25];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_fast_estimation_block_size(&_has_bits_);
          fast_estimation_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.DownsampleMode downsample_mode = 11 [default = DOWNSAMPLE_NONE];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::RegionFlowComputationOptions_DownsampleMode_IsValid(val))) {
            _internal_set_downsample_mode(static_cast<::mediapipe::RegionFlowComputationOptions_DownsampleMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 downsampling_size = 12 [default = 256];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_downsampling_size(&_has_bits_);
          downsampling_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_feature_requirement = 13 [default = 20];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_min_feature_requirement(&_has_bits_);
          min_feature_requirement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_feature_cover = 14 [default = 0.15];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_min_feature_cover(&_has_bits_);
          min_feature_cover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool compute_blur_score = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_compute_blur_score(&_has_bits_);
          compute_blur_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float downsample_factor = 18 [default = 2];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_downsample_factor(&_has_bits_);
          downsample_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.DownSampleSchedule downsample_schedule = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_downsample_schedule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_feature_cover_grid = 20 [default = 8];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_min_feature_cover_grid(&_has_bits_);
          min_feature_cover_grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 patch_descriptor_radius = 21 [default = 3];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_patch_descriptor_radius(&_has_bits_);
          patch_descriptor_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fast_estimation_overlap_grids = 22 [default = 3];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_fast_estimation_overlap_grids(&_has_bits_);
          fast_estimation_overlap_grids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_magnitude_threshold_ratio = 23 [default = 0.2];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_max_magnitude_threshold_ratio(&_has_bits_);
          max_magnitude_threshold_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 fast_estimation_min_block_size = 25 [default = 100];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_fast_estimation_min_block_size(&_has_bits_);
          fast_estimation_min_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float corner_response_scale = 26 [default = 1500];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_corner_response_scale(&_has_bits_);
          corner_response_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool verify_features = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_verify_features(&_has_bits_);
          verify_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float verification_distance = 28 [default = 0.5];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_verification_distance(&_has_bits_);
          verification_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.BlurScoreOptions blur_score_options = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_blur_score_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pre_blur_sigma = 33 [default = 0.8];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pre_blur_sigma(&_has_bits_);
          pre_blur_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_synthetic_zero_motion_tracks_all_frames = 34 [default = false];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_synthetic_zero_motion_tracks_all_frames(&_has_bits_);
          use_synthetic_zero_motion_tracks_all_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_synthetic_zero_motion_tracks_first_frame = 35 [default = false];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_synthetic_zero_motion_tracks_first_frame(&_has_bits_);
          use_synthetic_zero_motion_tracks_first_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gain_correction = 36 [default = false];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gain_correction(&_has_bits_);
          gain_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float frac_gain_feature_size = 37 [default = 0.3];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_frac_gain_feature_size(&_has_bits_);
          frac_gain_feature_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frac_gain_step = 38 [default = 0.1];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_frac_gain_step(&_has_bits_);
          frac_gain_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ToneEstimationOptions.GainBiasBounds gain_bias_bounds = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_bias_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_estimation_mode = 40 [default = false];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_no_estimation_mode(&_has_bits_);
          no_estimation_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.GainCorrectMode gain_correct_mode = 41 [default = GAIN_CORRECT_DEFAULT_USER];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::RegionFlowComputationOptions_GainCorrectMode_IsValid(val))) {
            _internal_set_gain_correct_mode(static_cast<::mediapipe::RegionFlowComputationOptions_GainCorrectMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(41, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float relative_inlier_error_threshold = 44 [default = 0.1];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_relative_inlier_error_threshold(&_has_bits_);
          relative_inlier_error_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 top_inlier_sets = 45 [default = 2];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_top_inlier_sets(&_has_bits_);
          top_inlier_sets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float relative_min_feature_inliers = 46 [default = 0.2];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_relative_min_feature_inliers(&_has_bits_);
          relative_min_feature_inliers_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool gain_correction_multiple_hypotheses = 47 [default = true];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_gain_correction_multiple_hypotheses(&_has_bits_);
          gain_correction_multiple_hypotheses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gain_correction_inlier_improvement_frac = 48 [default = 0.1];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_gain_correction_inlier_improvement_frac(&_has_bits_);
          gain_correction_inlier_improvement_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.IrlsInitialization irls_initialization = 49 [default = INIT_CONSISTENCY];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::RegionFlowComputationOptions_IrlsInitialization_IsValid(val))) {
            _internal_set_irls_initialization(static_cast<::mediapipe::RegionFlowComputationOptions_IrlsInitialization>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(49, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 distance_from_border = 50 [default = 3];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_distance_from_border(&_has_bits_);
          distance_from_border_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float median_magnitude_bounds = 51 [default = 0];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_median_magnitude_bounds(&_has_bits_);
          median_magnitude_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frac_inlier_error_threshold = 52 [default = 0];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_frac_inlier_error_threshold(&_has_bits_);
          frac_inlier_error_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool verify_long_features = 53 [default = true];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_verify_long_features(&_has_bits_);
          verify_long_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float long_feature_verification_threshold = 54 [default = 0.04];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_long_feature_verification_threshold(&_has_bits_);
          long_feature_verification_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions visual_consistency_options = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_visual_consistency_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_long_feature_acceleration = 56 [default = 5];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_max_long_feature_acceleration(&_has_bits_);
          max_long_feature_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool histogram_equalization = 57 [default = false];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_histogram_equalization(&_has_bits_);
          histogram_equalization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.ImageFormat image_format = 58 [default = FORMAT_RGB];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::RegionFlowComputationOptions_ImageFormat_IsValid(val))) {
            _internal_set_image_format(static_cast<::mediapipe::RegionFlowComputationOptions_ImageFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(58, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool gain_correction_bright_reference = 59 [default = false];
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_gain_correction_bright_reference(&_has_bits_);
          gain_correction_bright_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gain_correction_triggering_ratio = 60 [default = 0];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_gain_correction_triggering_ratio(&_has_bits_);
          gain_correction_triggering_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool fast_gain_correction = 61 [default = false];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_fast_gain_correction(&_has_bits_);
          fast_gain_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool round_downsample_factor = 62 [default = false];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_round_downsample_factor(&_has_bits_);
          round_downsample_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verify_long_feature_acceleration = 63 [default = false];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_verify_long_feature_acceleration(&_has_bits_);
          verify_long_feature_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float verify_long_feature_trigger_ratio = 64 [default = 0];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_verify_long_feature_trigger_ratio(&_has_bits_);
          verify_long_feature_trigger_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.RegionFlowComputationOptions.DescriptorExtractorType descriptor_extractor_type = 65 [default = ORB];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType_IsValid(val))) {
            _internal_set_descriptor_extractor_type(static_cast<::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(65, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool compute_derivative_in_pyramid = 66 [default = true];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_compute_derivative_in_pyramid(&_has_bits_);
          compute_derivative_in_pyramid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((40u <= tag && tag < 48u) ||
          (56u <= tag && tag < 64u) ||
          (64u <= tag && tag < 72u) ||
          (72u <= tag && tag < 80u) ||
          (80u <= tag && tag < 88u) ||
          (120u <= tag && tag < 128u) ||
          (128u <= tag && tag < 136u) ||
          (192u <= tag && tag < 200u) ||
          (232u <= tag && tag < 240u) ||
          (240u <= tag && tag < 248u) ||
          (256u <= tag && tag < 264u) ||
          (336u <= tag && tag < 344u) ||
          (344u <= tag && tag < 352u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionFlowComputationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RegionFlowComputationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.TrackingOptions tracking_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tracking_options(this), target, stream);
  }

  // optional int32 min_feature_inliers = 2 [default = 3];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_feature_inliers(), target);
  }

  // optional int32 ransac_rounds_per_region = 3 [default = 15];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ransac_rounds_per_region(), target);
  }

  // optional float absolute_inlier_error_threshold = 4 [default = 2];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_absolute_inlier_error_threshold(), target);
  }

  // Extension range [5, 6)
  target = _extensions_._InternalSerialize(
      5, 6, target, stream);

  // optional float fast_estimation_block_size = 6 [default = 0.25];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fast_estimation_block_size(), target);
  }

  // Extension range [7, 11)
  target = _extensions_._InternalSerialize(
      7, 11, target, stream);

  // optional .mediapipe.RegionFlowComputationOptions.DownsampleMode downsample_mode = 11 [default = DOWNSAMPLE_NONE];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_downsample_mode(), target);
  }

  // optional int32 downsampling_size = 12 [default = 256];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_downsampling_size(), target);
  }

  // optional int32 min_feature_requirement = 13 [default = 20];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_min_feature_requirement(), target);
  }

  // optional float min_feature_cover = 14 [default = 0.15];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_min_feature_cover(), target);
  }

  // Extension range [15, 17)
  target = _extensions_._InternalSerialize(
      15, 17, target, stream);

  // optional bool compute_blur_score = 17 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_compute_blur_score(), target);
  }

  // optional float downsample_factor = 18 [default = 2];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_downsample_factor(), target);
  }

  // optional .mediapipe.RegionFlowComputationOptions.DownSampleSchedule downsample_schedule = 19;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::downsample_schedule(this), target, stream);
  }

  // optional int32 min_feature_cover_grid = 20 [default = 8];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_min_feature_cover_grid(), target);
  }

  // optional int32 patch_descriptor_radius = 21 [default = 3];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_patch_descriptor_radius(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 fast_estimation_overlap_grids = 22 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_fast_estimation_overlap_grids(), target);
  }

  // optional float max_magnitude_threshold_ratio = 23 [default = 0.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_max_magnitude_threshold_ratio(), target);
  }

  // Extension range [24, 25)
  target = _extensions_._InternalSerialize(
      24, 25, target, stream);

  // optional int32 fast_estimation_min_block_size = 25 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_fast_estimation_min_block_size(), target);
  }

  // optional float corner_response_scale = 26 [default = 1500];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_corner_response_scale(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool verify_features = 27 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_verify_features(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float verification_distance = 28 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_verification_distance(), target);
  }

  // Extension range [29, 31)
  target = _extensions_._InternalSerialize(
      29, 31, target, stream);

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.RegionFlowComputationOptions.BlurScoreOptions blur_score_options = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::blur_score_options(this), target, stream);
  }

  // Extension range [32, 33)
  target = _extensions_._InternalSerialize(
      32, 33, target, stream);

  cached_has_bits = _has_bits_[1];
  // optional float pre_blur_sigma = 33 [default = 0.8];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_pre_blur_sigma(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_synthetic_zero_motion_tracks_all_frames = 34 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_use_synthetic_zero_motion_tracks_all_frames(), target);
  }

  // optional bool use_synthetic_zero_motion_tracks_first_frame = 35 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_use_synthetic_zero_motion_tracks_first_frame(), target);
  }

  // optional bool gain_correction = 36 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_gain_correction(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float frac_gain_feature_size = 37 [default = 0.3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_frac_gain_feature_size(), target);
  }

  // optional float frac_gain_step = 38 [default = 0.1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_frac_gain_step(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.ToneEstimationOptions.GainBiasBounds gain_bias_bounds = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::gain_bias_bounds(this), target, stream);
  }

  // optional bool no_estimation_mode = 40 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_no_estimation_mode(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .mediapipe.RegionFlowComputationOptions.GainCorrectMode gain_correct_mode = 41 [default = GAIN_CORRECT_DEFAULT_USER];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      41, this->_internal_gain_correct_mode(), target);
  }

  // Extension range [42, 44)
  target = _extensions_._InternalSerialize(
      42, 44, target, stream);

  // optional float relative_inlier_error_threshold = 44 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->_internal_relative_inlier_error_threshold(), target);
  }

  // optional int32 top_inlier_sets = 45 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_top_inlier_sets(), target);
  }

  // optional float relative_min_feature_inliers = 46 [default = 0.2];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_relative_min_feature_inliers(), target);
  }

  // optional bool gain_correction_multiple_hypotheses = 47 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_gain_correction_multiple_hypotheses(), target);
  }

  // optional float gain_correction_inlier_improvement_frac = 48 [default = 0.1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(48, this->_internal_gain_correction_inlier_improvement_frac(), target);
  }

  // optional .mediapipe.RegionFlowComputationOptions.IrlsInitialization irls_initialization = 49 [default = INIT_CONSISTENCY];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      49, this->_internal_irls_initialization(), target);
  }

  // optional int32 distance_from_border = 50 [default = 3];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_distance_from_border(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float median_magnitude_bounds = 51 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_median_magnitude_bounds(), target);
  }

  // optional float frac_inlier_error_threshold = 52 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(52, this->_internal_frac_inlier_error_threshold(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool verify_long_features = 53 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_verify_long_features(), target);
  }

  // optional float long_feature_verification_threshold = 54 [default = 0.04];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(54, this->_internal_long_feature_verification_threshold(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions visual_consistency_options = 55;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::visual_consistency_options(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float max_long_feature_acceleration = 56 [default = 5];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(56, this->_internal_max_long_feature_acceleration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool histogram_equalization = 57 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_histogram_equalization(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .mediapipe.RegionFlowComputationOptions.ImageFormat image_format = 58 [default = FORMAT_RGB];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      58, this->_internal_image_format(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool gain_correction_bright_reference = 59 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_gain_correction_bright_reference(), target);
  }

  // optional float gain_correction_triggering_ratio = 60 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(60, this->_internal_gain_correction_triggering_ratio(), target);
  }

  // optional bool fast_gain_correction = 61 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_fast_gain_correction(), target);
  }

  // optional bool round_downsample_factor = 62 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_round_downsample_factor(), target);
  }

  // optional bool verify_long_feature_acceleration = 63 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_verify_long_feature_acceleration(), target);
  }

  // optional float verify_long_feature_trigger_ratio = 64 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(64, this->_internal_verify_long_feature_trigger_ratio(), target);
  }

  // optional .mediapipe.RegionFlowComputationOptions.DescriptorExtractorType descriptor_extractor_type = 65 [default = ORB];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      65, this->_internal_descriptor_extractor_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool compute_derivative_in_pyramid = 66 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_compute_derivative_in_pyramid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RegionFlowComputationOptions)
  return target;
}

size_t RegionFlowComputationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RegionFlowComputationOptions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.TrackingOptions tracking_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracking_options_);
    }

    // optional .mediapipe.RegionFlowComputationOptions.DownSampleSchedule downsample_schedule = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *downsample_schedule_);
    }

    // optional .mediapipe.RegionFlowComputationOptions.BlurScoreOptions blur_score_options = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blur_score_options_);
    }

    // optional .mediapipe.ToneEstimationOptions.GainBiasBounds gain_bias_bounds = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gain_bias_bounds_);
    }

    // optional .mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions visual_consistency_options = 55;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visual_consistency_options_);
    }

    // optional bool no_estimation_mode = 40 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool round_downsample_factor = 62 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool compute_blur_score = 17 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool verify_features = 27 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool verify_long_feature_acceleration = 63 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool histogram_equalization = 57 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool use_synthetic_zero_motion_tracks_all_frames = 34 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool use_synthetic_zero_motion_tracks_first_frame = 35 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional float median_magnitude_bounds = 51 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float frac_inlier_error_threshold = 52 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional bool gain_correction = 36 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool fast_gain_correction = 61 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool gain_correction_bright_reference = 59 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional float gain_correction_triggering_ratio = 60 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float verify_long_feature_trigger_ratio = 64 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional .mediapipe.RegionFlowComputationOptions.DescriptorExtractorType descriptor_extractor_type = 65 [default = ORB];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_descriptor_extractor_type());
    }

    // optional int32 min_feature_inliers = 2 [default = 3];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_feature_inliers());
    }

    // optional int32 ransac_rounds_per_region = 3 [default = 15];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ransac_rounds_per_region());
    }

    // optional float absolute_inlier_error_threshold = 4 [default = 2];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float fast_estimation_block_size = 6 [default = 0.25];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional .mediapipe.RegionFlowComputationOptions.DownsampleMode downsample_mode = 11 [default = DOWNSAMPLE_NONE];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_downsample_mode());
    }

    // optional int32 downsampling_size = 12 [default = 256];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_downsampling_size());
    }

    // optional int32 min_feature_requirement = 13 [default = 20];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_feature_requirement());
    }

    // optional float min_feature_cover = 14 [default = 0.15];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 4;
    }

    // optional float downsample_factor = 18 [default = 2];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional int32 min_feature_cover_grid = 20 [default = 8];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_feature_cover_grid());
    }

    // optional int32 patch_descriptor_radius = 21 [default = 3];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_patch_descriptor_radius());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 fast_estimation_overlap_grids = 22 [default = 3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fast_estimation_overlap_grids());
    }

    // optional float max_magnitude_threshold_ratio = 23 [default = 0.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional int32 fast_estimation_min_block_size = 25 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fast_estimation_min_block_size());
    }

    // optional float corner_response_scale = 26 [default = 1500];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float verification_distance = 28 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float pre_blur_sigma = 33 [default = 0.8];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float frac_gain_feature_size = 37 [default = 0.3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float frac_gain_step = 38 [default = 0.1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .mediapipe.RegionFlowComputationOptions.GainCorrectMode gain_correct_mode = 41 [default = GAIN_CORRECT_DEFAULT_USER];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gain_correct_mode());
    }

    // optional float relative_inlier_error_threshold = 44 [default = 0.1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional int32 top_inlier_sets = 45 [default = 2];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_top_inlier_sets());
    }

    // optional float relative_min_feature_inliers = 46 [default = 0.2];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float gain_correction_inlier_improvement_frac = 48 [default = 0.1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional .mediapipe.RegionFlowComputationOptions.IrlsInitialization irls_initialization = 49 [default = INIT_CONSISTENCY];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_irls_initialization());
    }

    // optional int32 distance_from_border = 50 [default = 3];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_distance_from_border());
    }

    // optional float long_feature_verification_threshold = 54 [default = 0.04];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool verify_long_features = 53 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool gain_correction_multiple_hypotheses = 47 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool compute_derivative_in_pyramid = 66 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional float max_long_feature_acceleration = 56 [default = 5];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional .mediapipe.RegionFlowComputationOptions.ImageFormat image_format = 58 [default = FORMAT_RGB];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_format());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionFlowComputationOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RegionFlowComputationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionFlowComputationOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionFlowComputationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RegionFlowComputationOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RegionFlowComputationOptions)
    MergeFrom(*source);
  }
}

void RegionFlowComputationOptions::MergeFrom(const RegionFlowComputationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RegionFlowComputationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tracking_options()->::mediapipe::TrackingOptions::MergeFrom(from._internal_tracking_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_downsample_schedule()->::mediapipe::RegionFlowComputationOptions_DownSampleSchedule::MergeFrom(from._internal_downsample_schedule());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_blur_score_options()->::mediapipe::RegionFlowComputationOptions_BlurScoreOptions::MergeFrom(from._internal_blur_score_options());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_gain_bias_bounds()->::mediapipe::ToneEstimationOptions_GainBiasBounds::MergeFrom(from._internal_gain_bias_bounds());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_visual_consistency_options()->::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions::MergeFrom(from._internal_visual_consistency_options());
    }
    if (cached_has_bits & 0x00000020u) {
      no_estimation_mode_ = from.no_estimation_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      round_downsample_factor_ = from.round_downsample_factor_;
    }
    if (cached_has_bits & 0x00000080u) {
      compute_blur_score_ = from.compute_blur_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      verify_features_ = from.verify_features_;
    }
    if (cached_has_bits & 0x00000200u) {
      verify_long_feature_acceleration_ = from.verify_long_feature_acceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      histogram_equalization_ = from.histogram_equalization_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_synthetic_zero_motion_tracks_all_frames_ = from.use_synthetic_zero_motion_tracks_all_frames_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_synthetic_zero_motion_tracks_first_frame_ = from.use_synthetic_zero_motion_tracks_first_frame_;
    }
    if (cached_has_bits & 0x00002000u) {
      median_magnitude_bounds_ = from.median_magnitude_bounds_;
    }
    if (cached_has_bits & 0x00004000u) {
      frac_inlier_error_threshold_ = from.frac_inlier_error_threshold_;
    }
    if (cached_has_bits & 0x00008000u) {
      gain_correction_ = from.gain_correction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      fast_gain_correction_ = from.fast_gain_correction_;
    }
    if (cached_has_bits & 0x00020000u) {
      gain_correction_bright_reference_ = from.gain_correction_bright_reference_;
    }
    if (cached_has_bits & 0x00040000u) {
      gain_correction_triggering_ratio_ = from.gain_correction_triggering_ratio_;
    }
    if (cached_has_bits & 0x00080000u) {
      verify_long_feature_trigger_ratio_ = from.verify_long_feature_trigger_ratio_;
    }
    if (cached_has_bits & 0x00100000u) {
      descriptor_extractor_type_ = from.descriptor_extractor_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      min_feature_inliers_ = from.min_feature_inliers_;
    }
    if (cached_has_bits & 0x00400000u) {
      ransac_rounds_per_region_ = from.ransac_rounds_per_region_;
    }
    if (cached_has_bits & 0x00800000u) {
      absolute_inlier_error_threshold_ = from.absolute_inlier_error_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      fast_estimation_block_size_ = from.fast_estimation_block_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      downsample_mode_ = from.downsample_mode_;
    }
    if (cached_has_bits & 0x04000000u) {
      downsampling_size_ = from.downsampling_size_;
    }
    if (cached_has_bits & 0x08000000u) {
      min_feature_requirement_ = from.min_feature_requirement_;
    }
    if (cached_has_bits & 0x10000000u) {
      min_feature_cover_ = from.min_feature_cover_;
    }
    if (cached_has_bits & 0x20000000u) {
      downsample_factor_ = from.downsample_factor_;
    }
    if (cached_has_bits & 0x40000000u) {
      min_feature_cover_grid_ = from.min_feature_cover_grid_;
    }
    if (cached_has_bits & 0x80000000u) {
      patch_descriptor_radius_ = from.patch_descriptor_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fast_estimation_overlap_grids_ = from.fast_estimation_overlap_grids_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_magnitude_threshold_ratio_ = from.max_magnitude_threshold_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      fast_estimation_min_block_size_ = from.fast_estimation_min_block_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      corner_response_scale_ = from.corner_response_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      verification_distance_ = from.verification_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      pre_blur_sigma_ = from.pre_blur_sigma_;
    }
    if (cached_has_bits & 0x00000040u) {
      frac_gain_feature_size_ = from.frac_gain_feature_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      frac_gain_step_ = from.frac_gain_step_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      gain_correct_mode_ = from.gain_correct_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      relative_inlier_error_threshold_ = from.relative_inlier_error_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      top_inlier_sets_ = from.top_inlier_sets_;
    }
    if (cached_has_bits & 0x00000800u) {
      relative_min_feature_inliers_ = from.relative_min_feature_inliers_;
    }
    if (cached_has_bits & 0x00001000u) {
      gain_correction_inlier_improvement_frac_ = from.gain_correction_inlier_improvement_frac_;
    }
    if (cached_has_bits & 0x00002000u) {
      irls_initialization_ = from.irls_initialization_;
    }
    if (cached_has_bits & 0x00004000u) {
      distance_from_border_ = from.distance_from_border_;
    }
    if (cached_has_bits & 0x00008000u) {
      long_feature_verification_threshold_ = from.long_feature_verification_threshold_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      verify_long_features_ = from.verify_long_features_;
    }
    if (cached_has_bits & 0x00020000u) {
      gain_correction_multiple_hypotheses_ = from.gain_correction_multiple_hypotheses_;
    }
    if (cached_has_bits & 0x00040000u) {
      compute_derivative_in_pyramid_ = from.compute_derivative_in_pyramid_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_long_feature_acceleration_ = from.max_long_feature_acceleration_;
    }
    if (cached_has_bits & 0x00100000u) {
      image_format_ = from.image_format_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void RegionFlowComputationOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RegionFlowComputationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionFlowComputationOptions::CopyFrom(const RegionFlowComputationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RegionFlowComputationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionFlowComputationOptions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_tracking_options()) {
    if (!tracking_options_->IsInitialized()) return false;
  }
  return true;
}

void RegionFlowComputationOptions::InternalSwap(RegionFlowComputationOptions* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionFlowComputationOptions, descriptor_extractor_type_)
      + sizeof(RegionFlowComputationOptions::descriptor_extractor_type_)
      - PROTOBUF_FIELD_OFFSET(RegionFlowComputationOptions, tracking_options_)>(
          reinterpret_cast<char*>(&tracking_options_),
          reinterpret_cast<char*>(&other->tracking_options_));
  swap(min_feature_inliers_, other->min_feature_inliers_);
  swap(ransac_rounds_per_region_, other->ransac_rounds_per_region_);
  swap(absolute_inlier_error_threshold_, other->absolute_inlier_error_threshold_);
  swap(fast_estimation_block_size_, other->fast_estimation_block_size_);
  swap(downsample_mode_, other->downsample_mode_);
  swap(downsampling_size_, other->downsampling_size_);
  swap(min_feature_requirement_, other->min_feature_requirement_);
  swap(min_feature_cover_, other->min_feature_cover_);
  swap(downsample_factor_, other->downsample_factor_);
  swap(min_feature_cover_grid_, other->min_feature_cover_grid_);
  swap(patch_descriptor_radius_, other->patch_descriptor_radius_);
  swap(fast_estimation_overlap_grids_, other->fast_estimation_overlap_grids_);
  swap(max_magnitude_threshold_ratio_, other->max_magnitude_threshold_ratio_);
  swap(fast_estimation_min_block_size_, other->fast_estimation_min_block_size_);
  swap(corner_response_scale_, other->corner_response_scale_);
  swap(verification_distance_, other->verification_distance_);
  swap(pre_blur_sigma_, other->pre_blur_sigma_);
  swap(frac_gain_feature_size_, other->frac_gain_feature_size_);
  swap(frac_gain_step_, other->frac_gain_step_);
  swap(gain_correct_mode_, other->gain_correct_mode_);
  swap(relative_inlier_error_threshold_, other->relative_inlier_error_threshold_);
  swap(top_inlier_sets_, other->top_inlier_sets_);
  swap(relative_min_feature_inliers_, other->relative_min_feature_inliers_);
  swap(gain_correction_inlier_improvement_frac_, other->gain_correction_inlier_improvement_frac_);
  swap(irls_initialization_, other->irls_initialization_);
  swap(distance_from_border_, other->distance_from_border_);
  swap(long_feature_verification_threshold_, other->long_feature_verification_threshold_);
  swap(verify_long_features_, other->verify_long_features_);
  swap(gain_correction_multiple_hypotheses_, other->gain_correction_multiple_hypotheses_);
  swap(compute_derivative_in_pyramid_, other->compute_derivative_in_pyramid_);
  swap(max_long_feature_acceleration_, other->max_long_feature_acceleration_);
  swap(image_format_, other->image_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionFlowComputationOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingOptions_MinEigValExtractionSettings* Arena::CreateMaybeMessage< ::mediapipe::TrackingOptions_MinEigValExtractionSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingOptions_MinEigValExtractionSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingOptions_HarrisExtractionSettings* Arena::CreateMaybeMessage< ::mediapipe::TrackingOptions_HarrisExtractionSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingOptions_HarrisExtractionSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingOptions_FastExtractionSettings* Arena::CreateMaybeMessage< ::mediapipe::TrackingOptions_FastExtractionSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingOptions_FastExtractionSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackingOptions* Arena::CreateMaybeMessage< ::mediapipe::TrackingOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackingOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::RegionFlowComputationOptions* Arena::CreateMaybeMessage< ::mediapipe::RegionFlowComputationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::RegionFlowComputationOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
