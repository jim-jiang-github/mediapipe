// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/region_flow_computation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/tone_estimation.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
namespace mediapipe {
class RegionFlowComputationOptions;
struct RegionFlowComputationOptionsDefaultTypeInternal;
extern RegionFlowComputationOptionsDefaultTypeInternal _RegionFlowComputationOptions_default_instance_;
class RegionFlowComputationOptions_BlurScoreOptions;
struct RegionFlowComputationOptions_BlurScoreOptionsDefaultTypeInternal;
extern RegionFlowComputationOptions_BlurScoreOptionsDefaultTypeInternal _RegionFlowComputationOptions_BlurScoreOptions_default_instance_;
class RegionFlowComputationOptions_DownSampleSchedule;
struct RegionFlowComputationOptions_DownSampleScheduleDefaultTypeInternal;
extern RegionFlowComputationOptions_DownSampleScheduleDefaultTypeInternal _RegionFlowComputationOptions_DownSampleSchedule_default_instance_;
class RegionFlowComputationOptions_VisualConsistencyOptions;
struct RegionFlowComputationOptions_VisualConsistencyOptionsDefaultTypeInternal;
extern RegionFlowComputationOptions_VisualConsistencyOptionsDefaultTypeInternal _RegionFlowComputationOptions_VisualConsistencyOptions_default_instance_;
class TrackingOptions;
struct TrackingOptionsDefaultTypeInternal;
extern TrackingOptionsDefaultTypeInternal _TrackingOptions_default_instance_;
class TrackingOptions_FastExtractionSettings;
struct TrackingOptions_FastExtractionSettingsDefaultTypeInternal;
extern TrackingOptions_FastExtractionSettingsDefaultTypeInternal _TrackingOptions_FastExtractionSettings_default_instance_;
class TrackingOptions_HarrisExtractionSettings;
struct TrackingOptions_HarrisExtractionSettingsDefaultTypeInternal;
extern TrackingOptions_HarrisExtractionSettingsDefaultTypeInternal _TrackingOptions_HarrisExtractionSettings_default_instance_;
class TrackingOptions_MinEigValExtractionSettings;
struct TrackingOptions_MinEigValExtractionSettingsDefaultTypeInternal;
extern TrackingOptions_MinEigValExtractionSettingsDefaultTypeInternal _TrackingOptions_MinEigValExtractionSettings_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::RegionFlowComputationOptions* Arena::CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions>(Arena*);
template<> ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* Arena::CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions_BlurScoreOptions>(Arena*);
template<> ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* Arena::CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions_DownSampleSchedule>(Arena*);
template<> ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* Arena::CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions>(Arena*);
template<> ::mediapipe::TrackingOptions* Arena::CreateMaybeMessage<::mediapipe::TrackingOptions>(Arena*);
template<> ::mediapipe::TrackingOptions_FastExtractionSettings* Arena::CreateMaybeMessage<::mediapipe::TrackingOptions_FastExtractionSettings>(Arena*);
template<> ::mediapipe::TrackingOptions_HarrisExtractionSettings* Arena::CreateMaybeMessage<::mediapipe::TrackingOptions_HarrisExtractionSettings>(Arena*);
template<> ::mediapipe::TrackingOptions_MinEigValExtractionSettings* Arena::CreateMaybeMessage<::mediapipe::TrackingOptions_MinEigValExtractionSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum TrackingOptions_FlowDirection : int {
  TrackingOptions_FlowDirection_FORWARD = 1,
  TrackingOptions_FlowDirection_BACKWARD = 2,
  TrackingOptions_FlowDirection_CONSECUTIVELY = 3
};
bool TrackingOptions_FlowDirection_IsValid(int value);
constexpr TrackingOptions_FlowDirection TrackingOptions_FlowDirection_FlowDirection_MIN = TrackingOptions_FlowDirection_FORWARD;
constexpr TrackingOptions_FlowDirection TrackingOptions_FlowDirection_FlowDirection_MAX = TrackingOptions_FlowDirection_CONSECUTIVELY;
constexpr int TrackingOptions_FlowDirection_FlowDirection_ARRAYSIZE = TrackingOptions_FlowDirection_FlowDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_FlowDirection_descriptor();
template<typename T>
inline const std::string& TrackingOptions_FlowDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackingOptions_FlowDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackingOptions_FlowDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackingOptions_FlowDirection_descriptor(), enum_t_value);
}
inline bool TrackingOptions_FlowDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackingOptions_FlowDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackingOptions_FlowDirection>(
    TrackingOptions_FlowDirection_descriptor(), name, value);
}
enum TrackingOptions_TrackingPolicy : int {
  TrackingOptions_TrackingPolicy_POLICY_SINGLE_FRAME = 1,
  TrackingOptions_TrackingPolicy_POLICY_MULTI_FRAME = 2,
  TrackingOptions_TrackingPolicy_POLICY_LONG_TRACKS = 3
};
bool TrackingOptions_TrackingPolicy_IsValid(int value);
constexpr TrackingOptions_TrackingPolicy TrackingOptions_TrackingPolicy_TrackingPolicy_MIN = TrackingOptions_TrackingPolicy_POLICY_SINGLE_FRAME;
constexpr TrackingOptions_TrackingPolicy TrackingOptions_TrackingPolicy_TrackingPolicy_MAX = TrackingOptions_TrackingPolicy_POLICY_LONG_TRACKS;
constexpr int TrackingOptions_TrackingPolicy_TrackingPolicy_ARRAYSIZE = TrackingOptions_TrackingPolicy_TrackingPolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_TrackingPolicy_descriptor();
template<typename T>
inline const std::string& TrackingOptions_TrackingPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackingOptions_TrackingPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackingOptions_TrackingPolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackingOptions_TrackingPolicy_descriptor(), enum_t_value);
}
inline bool TrackingOptions_TrackingPolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackingOptions_TrackingPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackingOptions_TrackingPolicy>(
    TrackingOptions_TrackingPolicy_descriptor(), name, value);
}
enum TrackingOptions_CornerExtractionMethod : int {
  TrackingOptions_CornerExtractionMethod_EXTRACTION_HARRIS = 1,
  TrackingOptions_CornerExtractionMethod_EXTRACTION_MIN_EIG_VAL = 2,
  TrackingOptions_CornerExtractionMethod_EXTRACTION_FAST = 3
};
bool TrackingOptions_CornerExtractionMethod_IsValid(int value);
constexpr TrackingOptions_CornerExtractionMethod TrackingOptions_CornerExtractionMethod_CornerExtractionMethod_MIN = TrackingOptions_CornerExtractionMethod_EXTRACTION_HARRIS;
constexpr TrackingOptions_CornerExtractionMethod TrackingOptions_CornerExtractionMethod_CornerExtractionMethod_MAX = TrackingOptions_CornerExtractionMethod_EXTRACTION_FAST;
constexpr int TrackingOptions_CornerExtractionMethod_CornerExtractionMethod_ARRAYSIZE = TrackingOptions_CornerExtractionMethod_CornerExtractionMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_CornerExtractionMethod_descriptor();
template<typename T>
inline const std::string& TrackingOptions_CornerExtractionMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackingOptions_CornerExtractionMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackingOptions_CornerExtractionMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackingOptions_CornerExtractionMethod_descriptor(), enum_t_value);
}
inline bool TrackingOptions_CornerExtractionMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackingOptions_CornerExtractionMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackingOptions_CornerExtractionMethod>(
    TrackingOptions_CornerExtractionMethod_descriptor(), name, value);
}
enum TrackingOptions_KltTrackerImplementation : int {
  TrackingOptions_KltTrackerImplementation_UNSPECIFIED = 0,
  TrackingOptions_KltTrackerImplementation_KLT_OPENCV = 1
};
bool TrackingOptions_KltTrackerImplementation_IsValid(int value);
constexpr TrackingOptions_KltTrackerImplementation TrackingOptions_KltTrackerImplementation_KltTrackerImplementation_MIN = TrackingOptions_KltTrackerImplementation_UNSPECIFIED;
constexpr TrackingOptions_KltTrackerImplementation TrackingOptions_KltTrackerImplementation_KltTrackerImplementation_MAX = TrackingOptions_KltTrackerImplementation_KLT_OPENCV;
constexpr int TrackingOptions_KltTrackerImplementation_KltTrackerImplementation_ARRAYSIZE = TrackingOptions_KltTrackerImplementation_KltTrackerImplementation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingOptions_KltTrackerImplementation_descriptor();
template<typename T>
inline const std::string& TrackingOptions_KltTrackerImplementation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackingOptions_KltTrackerImplementation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackingOptions_KltTrackerImplementation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackingOptions_KltTrackerImplementation_descriptor(), enum_t_value);
}
inline bool TrackingOptions_KltTrackerImplementation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackingOptions_KltTrackerImplementation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackingOptions_KltTrackerImplementation>(
    TrackingOptions_KltTrackerImplementation_descriptor(), name, value);
}
enum RegionFlowComputationOptions_IrlsInitialization : int {
  RegionFlowComputationOptions_IrlsInitialization_INIT_UNIFORM = 1,
  RegionFlowComputationOptions_IrlsInitialization_INIT_CONSISTENCY = 2
};
bool RegionFlowComputationOptions_IrlsInitialization_IsValid(int value);
constexpr RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions_IrlsInitialization_IrlsInitialization_MIN = RegionFlowComputationOptions_IrlsInitialization_INIT_UNIFORM;
constexpr RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions_IrlsInitialization_IrlsInitialization_MAX = RegionFlowComputationOptions_IrlsInitialization_INIT_CONSISTENCY;
constexpr int RegionFlowComputationOptions_IrlsInitialization_IrlsInitialization_ARRAYSIZE = RegionFlowComputationOptions_IrlsInitialization_IrlsInitialization_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_IrlsInitialization_descriptor();
template<typename T>
inline const std::string& RegionFlowComputationOptions_IrlsInitialization_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegionFlowComputationOptions_IrlsInitialization>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegionFlowComputationOptions_IrlsInitialization_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegionFlowComputationOptions_IrlsInitialization_descriptor(), enum_t_value);
}
inline bool RegionFlowComputationOptions_IrlsInitialization_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegionFlowComputationOptions_IrlsInitialization* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegionFlowComputationOptions_IrlsInitialization>(
    RegionFlowComputationOptions_IrlsInitialization_descriptor(), name, value);
}
enum RegionFlowComputationOptions_DownsampleMode : int {
  RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_NONE = 1,
  RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_TO_MAX_SIZE = 2,
  RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_BY_FACTOR = 3,
  RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_BY_SCHEDULE = 4,
  RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_TO_MIN_SIZE = 5,
  RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_TO_INPUT_SIZE = 6
};
bool RegionFlowComputationOptions_DownsampleMode_IsValid(int value);
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions_DownsampleMode_DownsampleMode_MIN = RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_NONE;
constexpr RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions_DownsampleMode_DownsampleMode_MAX = RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_TO_INPUT_SIZE;
constexpr int RegionFlowComputationOptions_DownsampleMode_DownsampleMode_ARRAYSIZE = RegionFlowComputationOptions_DownsampleMode_DownsampleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_DownsampleMode_descriptor();
template<typename T>
inline const std::string& RegionFlowComputationOptions_DownsampleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegionFlowComputationOptions_DownsampleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegionFlowComputationOptions_DownsampleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegionFlowComputationOptions_DownsampleMode_descriptor(), enum_t_value);
}
inline bool RegionFlowComputationOptions_DownsampleMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegionFlowComputationOptions_DownsampleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegionFlowComputationOptions_DownsampleMode>(
    RegionFlowComputationOptions_DownsampleMode_descriptor(), name, value);
}
enum RegionFlowComputationOptions_GainCorrectMode : int {
  RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_DEFAULT_USER = 1,
  RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_VIDEO = 2,
  RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_HDR = 3,
  RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_PHOTO_BURST = 4
};
bool RegionFlowComputationOptions_GainCorrectMode_IsValid(int value);
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions_GainCorrectMode_GainCorrectMode_MIN = RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_DEFAULT_USER;
constexpr RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions_GainCorrectMode_GainCorrectMode_MAX = RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_PHOTO_BURST;
constexpr int RegionFlowComputationOptions_GainCorrectMode_GainCorrectMode_ARRAYSIZE = RegionFlowComputationOptions_GainCorrectMode_GainCorrectMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_GainCorrectMode_descriptor();
template<typename T>
inline const std::string& RegionFlowComputationOptions_GainCorrectMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegionFlowComputationOptions_GainCorrectMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegionFlowComputationOptions_GainCorrectMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegionFlowComputationOptions_GainCorrectMode_descriptor(), enum_t_value);
}
inline bool RegionFlowComputationOptions_GainCorrectMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegionFlowComputationOptions_GainCorrectMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegionFlowComputationOptions_GainCorrectMode>(
    RegionFlowComputationOptions_GainCorrectMode_descriptor(), name, value);
}
enum RegionFlowComputationOptions_ImageFormat : int {
  RegionFlowComputationOptions_ImageFormat_FORMAT_GRAYSCALE = 1,
  RegionFlowComputationOptions_ImageFormat_FORMAT_RGB = 2,
  RegionFlowComputationOptions_ImageFormat_FORMAT_RGBA = 3,
  RegionFlowComputationOptions_ImageFormat_FORMAT_BGR = 4,
  RegionFlowComputationOptions_ImageFormat_FORMAT_BGRA = 5
};
bool RegionFlowComputationOptions_ImageFormat_IsValid(int value);
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions_ImageFormat_ImageFormat_MIN = RegionFlowComputationOptions_ImageFormat_FORMAT_GRAYSCALE;
constexpr RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions_ImageFormat_ImageFormat_MAX = RegionFlowComputationOptions_ImageFormat_FORMAT_BGRA;
constexpr int RegionFlowComputationOptions_ImageFormat_ImageFormat_ARRAYSIZE = RegionFlowComputationOptions_ImageFormat_ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_ImageFormat_descriptor();
template<typename T>
inline const std::string& RegionFlowComputationOptions_ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegionFlowComputationOptions_ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegionFlowComputationOptions_ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegionFlowComputationOptions_ImageFormat_descriptor(), enum_t_value);
}
inline bool RegionFlowComputationOptions_ImageFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegionFlowComputationOptions_ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegionFlowComputationOptions_ImageFormat>(
    RegionFlowComputationOptions_ImageFormat_descriptor(), name, value);
}
enum RegionFlowComputationOptions_DescriptorExtractorType : int {
  RegionFlowComputationOptions_DescriptorExtractorType_ORB = 0
};
bool RegionFlowComputationOptions_DescriptorExtractorType_IsValid(int value);
constexpr RegionFlowComputationOptions_DescriptorExtractorType RegionFlowComputationOptions_DescriptorExtractorType_DescriptorExtractorType_MIN = RegionFlowComputationOptions_DescriptorExtractorType_ORB;
constexpr RegionFlowComputationOptions_DescriptorExtractorType RegionFlowComputationOptions_DescriptorExtractorType_DescriptorExtractorType_MAX = RegionFlowComputationOptions_DescriptorExtractorType_ORB;
constexpr int RegionFlowComputationOptions_DescriptorExtractorType_DescriptorExtractorType_ARRAYSIZE = RegionFlowComputationOptions_DescriptorExtractorType_DescriptorExtractorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionFlowComputationOptions_DescriptorExtractorType_descriptor();
template<typename T>
inline const std::string& RegionFlowComputationOptions_DescriptorExtractorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegionFlowComputationOptions_DescriptorExtractorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegionFlowComputationOptions_DescriptorExtractorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegionFlowComputationOptions_DescriptorExtractorType_descriptor(), enum_t_value);
}
inline bool RegionFlowComputationOptions_DescriptorExtractorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegionFlowComputationOptions_DescriptorExtractorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegionFlowComputationOptions_DescriptorExtractorType>(
    RegionFlowComputationOptions_DescriptorExtractorType_descriptor(), name, value);
}
// ===================================================================

class TrackingOptions_MinEigValExtractionSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingOptions.MinEigValExtractionSettings) */ {
 public:
  inline TrackingOptions_MinEigValExtractionSettings() : TrackingOptions_MinEigValExtractionSettings(nullptr) {}
  ~TrackingOptions_MinEigValExtractionSettings() override;
  explicit constexpr TrackingOptions_MinEigValExtractionSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingOptions_MinEigValExtractionSettings(const TrackingOptions_MinEigValExtractionSettings& from);
  TrackingOptions_MinEigValExtractionSettings(TrackingOptions_MinEigValExtractionSettings&& from) noexcept
    : TrackingOptions_MinEigValExtractionSettings() {
    *this = ::std::move(from);
  }

  inline TrackingOptions_MinEigValExtractionSettings& operator=(const TrackingOptions_MinEigValExtractionSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingOptions_MinEigValExtractionSettings& operator=(TrackingOptions_MinEigValExtractionSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingOptions_MinEigValExtractionSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingOptions_MinEigValExtractionSettings* internal_default_instance() {
    return reinterpret_cast<const TrackingOptions_MinEigValExtractionSettings*>(
               &_TrackingOptions_MinEigValExtractionSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackingOptions_MinEigValExtractionSettings& a, TrackingOptions_MinEigValExtractionSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingOptions_MinEigValExtractionSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingOptions_MinEigValExtractionSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingOptions_MinEigValExtractionSettings* New() const final {
    return CreateMaybeMessage<TrackingOptions_MinEigValExtractionSettings>(nullptr);
  }

  TrackingOptions_MinEigValExtractionSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingOptions_MinEigValExtractionSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingOptions_MinEigValExtractionSettings& from);
  void MergeFrom(const TrackingOptions_MinEigValExtractionSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingOptions_MinEigValExtractionSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingOptions.MinEigValExtractionSettings";
  }
  protected:
  explicit TrackingOptions_MinEigValExtractionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureQualityLevelFieldNumber = 1,
    kAdaptiveLowestQualityLevelFieldNumber = 2,
  };
  // optional float feature_quality_level = 1 [default = 0.01];
  bool has_feature_quality_level() const;
  private:
  bool _internal_has_feature_quality_level() const;
  public:
  void clear_feature_quality_level();
  float feature_quality_level() const;
  void set_feature_quality_level(float value);
  private:
  float _internal_feature_quality_level() const;
  void _internal_set_feature_quality_level(float value);
  public:

  // optional float adaptive_lowest_quality_level = 2 [default = 8e-05];
  bool has_adaptive_lowest_quality_level() const;
  private:
  bool _internal_has_adaptive_lowest_quality_level() const;
  public:
  void clear_adaptive_lowest_quality_level();
  float adaptive_lowest_quality_level() const;
  void set_adaptive_lowest_quality_level(float value);
  private:
  float _internal_adaptive_lowest_quality_level() const;
  void _internal_set_adaptive_lowest_quality_level(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingOptions.MinEigValExtractionSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float feature_quality_level_;
  float adaptive_lowest_quality_level_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// -------------------------------------------------------------------

class TrackingOptions_HarrisExtractionSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingOptions.HarrisExtractionSettings) */ {
 public:
  inline TrackingOptions_HarrisExtractionSettings() : TrackingOptions_HarrisExtractionSettings(nullptr) {}
  ~TrackingOptions_HarrisExtractionSettings() override;
  explicit constexpr TrackingOptions_HarrisExtractionSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingOptions_HarrisExtractionSettings(const TrackingOptions_HarrisExtractionSettings& from);
  TrackingOptions_HarrisExtractionSettings(TrackingOptions_HarrisExtractionSettings&& from) noexcept
    : TrackingOptions_HarrisExtractionSettings() {
    *this = ::std::move(from);
  }

  inline TrackingOptions_HarrisExtractionSettings& operator=(const TrackingOptions_HarrisExtractionSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingOptions_HarrisExtractionSettings& operator=(TrackingOptions_HarrisExtractionSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingOptions_HarrisExtractionSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingOptions_HarrisExtractionSettings* internal_default_instance() {
    return reinterpret_cast<const TrackingOptions_HarrisExtractionSettings*>(
               &_TrackingOptions_HarrisExtractionSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrackingOptions_HarrisExtractionSettings& a, TrackingOptions_HarrisExtractionSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingOptions_HarrisExtractionSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingOptions_HarrisExtractionSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingOptions_HarrisExtractionSettings* New() const final {
    return CreateMaybeMessage<TrackingOptions_HarrisExtractionSettings>(nullptr);
  }

  TrackingOptions_HarrisExtractionSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingOptions_HarrisExtractionSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingOptions_HarrisExtractionSettings& from);
  void MergeFrom(const TrackingOptions_HarrisExtractionSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingOptions_HarrisExtractionSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingOptions.HarrisExtractionSettings";
  }
  protected:
  explicit TrackingOptions_HarrisExtractionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureQualityLevelFieldNumber = 1,
  };
  // optional float feature_quality_level = 1 [default = 0.00025];
  bool has_feature_quality_level() const;
  private:
  bool _internal_has_feature_quality_level() const;
  public:
  void clear_feature_quality_level();
  float feature_quality_level() const;
  void set_feature_quality_level(float value);
  private:
  float _internal_feature_quality_level() const;
  void _internal_set_feature_quality_level(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingOptions.HarrisExtractionSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float feature_quality_level_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// -------------------------------------------------------------------

class TrackingOptions_FastExtractionSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingOptions.FastExtractionSettings) */ {
 public:
  inline TrackingOptions_FastExtractionSettings() : TrackingOptions_FastExtractionSettings(nullptr) {}
  ~TrackingOptions_FastExtractionSettings() override;
  explicit constexpr TrackingOptions_FastExtractionSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingOptions_FastExtractionSettings(const TrackingOptions_FastExtractionSettings& from);
  TrackingOptions_FastExtractionSettings(TrackingOptions_FastExtractionSettings&& from) noexcept
    : TrackingOptions_FastExtractionSettings() {
    *this = ::std::move(from);
  }

  inline TrackingOptions_FastExtractionSettings& operator=(const TrackingOptions_FastExtractionSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingOptions_FastExtractionSettings& operator=(TrackingOptions_FastExtractionSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingOptions_FastExtractionSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingOptions_FastExtractionSettings* internal_default_instance() {
    return reinterpret_cast<const TrackingOptions_FastExtractionSettings*>(
               &_TrackingOptions_FastExtractionSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackingOptions_FastExtractionSettings& a, TrackingOptions_FastExtractionSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingOptions_FastExtractionSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingOptions_FastExtractionSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingOptions_FastExtractionSettings* New() const final {
    return CreateMaybeMessage<TrackingOptions_FastExtractionSettings>(nullptr);
  }

  TrackingOptions_FastExtractionSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingOptions_FastExtractionSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingOptions_FastExtractionSettings& from);
  void MergeFrom(const TrackingOptions_FastExtractionSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingOptions_FastExtractionSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingOptions.FastExtractionSettings";
  }
  protected:
  explicit TrackingOptions_FastExtractionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 1,
  };
  // optional int32 threshold = 1 [default = 10];
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackingOptions.FastExtractionSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// -------------------------------------------------------------------

class TrackingOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackingOptions) */ {
 public:
  inline TrackingOptions() : TrackingOptions(nullptr) {}
  ~TrackingOptions() override;
  explicit constexpr TrackingOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackingOptions(const TrackingOptions& from);
  TrackingOptions(TrackingOptions&& from) noexcept
    : TrackingOptions() {
    *this = ::std::move(from);
  }

  inline TrackingOptions& operator=(const TrackingOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingOptions& operator=(TrackingOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackingOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackingOptions* internal_default_instance() {
    return reinterpret_cast<const TrackingOptions*>(
               &_TrackingOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackingOptions& a, TrackingOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackingOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackingOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackingOptions* New() const final {
    return CreateMaybeMessage<TrackingOptions>(nullptr);
  }

  TrackingOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingOptions& from);
  void MergeFrom(const TrackingOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackingOptions";
  }
  protected:
  explicit TrackingOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrackingOptions_MinEigValExtractionSettings MinEigValExtractionSettings;
  typedef TrackingOptions_HarrisExtractionSettings HarrisExtractionSettings;
  typedef TrackingOptions_FastExtractionSettings FastExtractionSettings;

  typedef TrackingOptions_FlowDirection FlowDirection;
  static constexpr FlowDirection FORWARD =
    TrackingOptions_FlowDirection_FORWARD;
  static constexpr FlowDirection BACKWARD =
    TrackingOptions_FlowDirection_BACKWARD;
  static constexpr FlowDirection CONSECUTIVELY =
    TrackingOptions_FlowDirection_CONSECUTIVELY;
  static inline bool FlowDirection_IsValid(int value) {
    return TrackingOptions_FlowDirection_IsValid(value);
  }
  static constexpr FlowDirection FlowDirection_MIN =
    TrackingOptions_FlowDirection_FlowDirection_MIN;
  static constexpr FlowDirection FlowDirection_MAX =
    TrackingOptions_FlowDirection_FlowDirection_MAX;
  static constexpr int FlowDirection_ARRAYSIZE =
    TrackingOptions_FlowDirection_FlowDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FlowDirection_descriptor() {
    return TrackingOptions_FlowDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& FlowDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FlowDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FlowDirection_Name.");
    return TrackingOptions_FlowDirection_Name(enum_t_value);
  }
  static inline bool FlowDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FlowDirection* value) {
    return TrackingOptions_FlowDirection_Parse(name, value);
  }

  typedef TrackingOptions_TrackingPolicy TrackingPolicy;
  static constexpr TrackingPolicy POLICY_SINGLE_FRAME =
    TrackingOptions_TrackingPolicy_POLICY_SINGLE_FRAME;
  static constexpr TrackingPolicy POLICY_MULTI_FRAME =
    TrackingOptions_TrackingPolicy_POLICY_MULTI_FRAME;
  static constexpr TrackingPolicy POLICY_LONG_TRACKS =
    TrackingOptions_TrackingPolicy_POLICY_LONG_TRACKS;
  static inline bool TrackingPolicy_IsValid(int value) {
    return TrackingOptions_TrackingPolicy_IsValid(value);
  }
  static constexpr TrackingPolicy TrackingPolicy_MIN =
    TrackingOptions_TrackingPolicy_TrackingPolicy_MIN;
  static constexpr TrackingPolicy TrackingPolicy_MAX =
    TrackingOptions_TrackingPolicy_TrackingPolicy_MAX;
  static constexpr int TrackingPolicy_ARRAYSIZE =
    TrackingOptions_TrackingPolicy_TrackingPolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrackingPolicy_descriptor() {
    return TrackingOptions_TrackingPolicy_descriptor();
  }
  template<typename T>
  static inline const std::string& TrackingPolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrackingPolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrackingPolicy_Name.");
    return TrackingOptions_TrackingPolicy_Name(enum_t_value);
  }
  static inline bool TrackingPolicy_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrackingPolicy* value) {
    return TrackingOptions_TrackingPolicy_Parse(name, value);
  }

  typedef TrackingOptions_CornerExtractionMethod CornerExtractionMethod;
  static constexpr CornerExtractionMethod EXTRACTION_HARRIS =
    TrackingOptions_CornerExtractionMethod_EXTRACTION_HARRIS;
  static constexpr CornerExtractionMethod EXTRACTION_MIN_EIG_VAL =
    TrackingOptions_CornerExtractionMethod_EXTRACTION_MIN_EIG_VAL;
  static constexpr CornerExtractionMethod EXTRACTION_FAST =
    TrackingOptions_CornerExtractionMethod_EXTRACTION_FAST;
  static inline bool CornerExtractionMethod_IsValid(int value) {
    return TrackingOptions_CornerExtractionMethod_IsValid(value);
  }
  static constexpr CornerExtractionMethod CornerExtractionMethod_MIN =
    TrackingOptions_CornerExtractionMethod_CornerExtractionMethod_MIN;
  static constexpr CornerExtractionMethod CornerExtractionMethod_MAX =
    TrackingOptions_CornerExtractionMethod_CornerExtractionMethod_MAX;
  static constexpr int CornerExtractionMethod_ARRAYSIZE =
    TrackingOptions_CornerExtractionMethod_CornerExtractionMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CornerExtractionMethod_descriptor() {
    return TrackingOptions_CornerExtractionMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& CornerExtractionMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CornerExtractionMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CornerExtractionMethod_Name.");
    return TrackingOptions_CornerExtractionMethod_Name(enum_t_value);
  }
  static inline bool CornerExtractionMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CornerExtractionMethod* value) {
    return TrackingOptions_CornerExtractionMethod_Parse(name, value);
  }

  typedef TrackingOptions_KltTrackerImplementation KltTrackerImplementation;
  static constexpr KltTrackerImplementation UNSPECIFIED =
    TrackingOptions_KltTrackerImplementation_UNSPECIFIED;
  static constexpr KltTrackerImplementation KLT_OPENCV =
    TrackingOptions_KltTrackerImplementation_KLT_OPENCV;
  static inline bool KltTrackerImplementation_IsValid(int value) {
    return TrackingOptions_KltTrackerImplementation_IsValid(value);
  }
  static constexpr KltTrackerImplementation KltTrackerImplementation_MIN =
    TrackingOptions_KltTrackerImplementation_KltTrackerImplementation_MIN;
  static constexpr KltTrackerImplementation KltTrackerImplementation_MAX =
    TrackingOptions_KltTrackerImplementation_KltTrackerImplementation_MAX;
  static constexpr int KltTrackerImplementation_ARRAYSIZE =
    TrackingOptions_KltTrackerImplementation_KltTrackerImplementation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KltTrackerImplementation_descriptor() {
    return TrackingOptions_KltTrackerImplementation_descriptor();
  }
  template<typename T>
  static inline const std::string& KltTrackerImplementation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KltTrackerImplementation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KltTrackerImplementation_Name.");
    return TrackingOptions_KltTrackerImplementation_Name(enum_t_value);
  }
  static inline bool KltTrackerImplementation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KltTrackerImplementation* value) {
    return TrackingOptions_KltTrackerImplementation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMinEigValSettingsFieldNumber = 28,
    kHarrisSettingsFieldNumber = 29,
    kFastSettingsFieldNumber = 31,
    kReuseFeaturesMaxFrameDistanceFieldNumber = 17,
    kAdaptiveTrackingDistanceFieldNumber = 24,
    kWideBaselineMatchingFieldNumber = 14,
    kRefineWideBaselineMatchesFieldNumber = 16,
    kAdaptiveExtractionLevelsLowestSizeFieldNumber = 23,
    kKltTrackerImplementationFieldNumber = 32,
    kMultiFramesToTrackFieldNumber = 1,
    kMaxFeaturesFieldNumber = 2,
    kTrackingWindowSizeFieldNumber = 4,
    kTrackingIterationsFieldNumber = 5,
    kFractionalTrackingDistanceFieldNumber = 6,
    kMinFeatureDistanceFieldNumber = 7,
    kAdaptiveFeaturesBlockSizeFieldNumber = 9,
    kAdaptiveFeaturesLevelsFieldNumber = 10,
    kSyntheticZeroMotionGridStepFieldNumber = 13,
    kRatioTestThresholdFieldNumber = 15,
    kReuseFeaturesMinSurvivedFracFieldNumber = 18,
    kInternalTrackingDirectionFieldNumber = 19,
    kDistanceDownscaleSqrtFieldNumber = 21,
    kAdaptiveGoodFeaturesToTrackFieldNumber = 8,
    kUseCvTrackingAlgorithmFieldNumber = 30,
    kOutputFlowDirectionFieldNumber = 20,
    kAdaptiveExtractionLevelsFieldNumber = 22,
    kTrackingPolicyFieldNumber = 25,
    kLongTracksMaxFramesFieldNumber = 26,
    kCornerExtractionMethodFieldNumber = 27,
  };
  // optional .mediapipe.TrackingOptions.MinEigValExtractionSettings min_eig_val_settings = 28;
  bool has_min_eig_val_settings() const;
  private:
  bool _internal_has_min_eig_val_settings() const;
  public:
  void clear_min_eig_val_settings();
  const ::mediapipe::TrackingOptions_MinEigValExtractionSettings& min_eig_val_settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingOptions_MinEigValExtractionSettings* release_min_eig_val_settings();
  ::mediapipe::TrackingOptions_MinEigValExtractionSettings* mutable_min_eig_val_settings();
  void set_allocated_min_eig_val_settings(::mediapipe::TrackingOptions_MinEigValExtractionSettings* min_eig_val_settings);
  private:
  const ::mediapipe::TrackingOptions_MinEigValExtractionSettings& _internal_min_eig_val_settings() const;
  ::mediapipe::TrackingOptions_MinEigValExtractionSettings* _internal_mutable_min_eig_val_settings();
  public:
  void unsafe_arena_set_allocated_min_eig_val_settings(
      ::mediapipe::TrackingOptions_MinEigValExtractionSettings* min_eig_val_settings);
  ::mediapipe::TrackingOptions_MinEigValExtractionSettings* unsafe_arena_release_min_eig_val_settings();

  // optional .mediapipe.TrackingOptions.HarrisExtractionSettings harris_settings = 29;
  bool has_harris_settings() const;
  private:
  bool _internal_has_harris_settings() const;
  public:
  void clear_harris_settings();
  const ::mediapipe::TrackingOptions_HarrisExtractionSettings& harris_settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingOptions_HarrisExtractionSettings* release_harris_settings();
  ::mediapipe::TrackingOptions_HarrisExtractionSettings* mutable_harris_settings();
  void set_allocated_harris_settings(::mediapipe::TrackingOptions_HarrisExtractionSettings* harris_settings);
  private:
  const ::mediapipe::TrackingOptions_HarrisExtractionSettings& _internal_harris_settings() const;
  ::mediapipe::TrackingOptions_HarrisExtractionSettings* _internal_mutable_harris_settings();
  public:
  void unsafe_arena_set_allocated_harris_settings(
      ::mediapipe::TrackingOptions_HarrisExtractionSettings* harris_settings);
  ::mediapipe::TrackingOptions_HarrisExtractionSettings* unsafe_arena_release_harris_settings();

  // optional .mediapipe.TrackingOptions.FastExtractionSettings fast_settings = 31;
  bool has_fast_settings() const;
  private:
  bool _internal_has_fast_settings() const;
  public:
  void clear_fast_settings();
  const ::mediapipe::TrackingOptions_FastExtractionSettings& fast_settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingOptions_FastExtractionSettings* release_fast_settings();
  ::mediapipe::TrackingOptions_FastExtractionSettings* mutable_fast_settings();
  void set_allocated_fast_settings(::mediapipe::TrackingOptions_FastExtractionSettings* fast_settings);
  private:
  const ::mediapipe::TrackingOptions_FastExtractionSettings& _internal_fast_settings() const;
  ::mediapipe::TrackingOptions_FastExtractionSettings* _internal_mutable_fast_settings();
  public:
  void unsafe_arena_set_allocated_fast_settings(
      ::mediapipe::TrackingOptions_FastExtractionSettings* fast_settings);
  ::mediapipe::TrackingOptions_FastExtractionSettings* unsafe_arena_release_fast_settings();

  // optional int32 reuse_features_max_frame_distance = 17 [default = 0];
  bool has_reuse_features_max_frame_distance() const;
  private:
  bool _internal_has_reuse_features_max_frame_distance() const;
  public:
  void clear_reuse_features_max_frame_distance();
  ::PROTOBUF_NAMESPACE_ID::int32 reuse_features_max_frame_distance() const;
  void set_reuse_features_max_frame_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reuse_features_max_frame_distance() const;
  void _internal_set_reuse_features_max_frame_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool adaptive_tracking_distance = 24 [default = false];
  bool has_adaptive_tracking_distance() const;
  private:
  bool _internal_has_adaptive_tracking_distance() const;
  public:
  void clear_adaptive_tracking_distance();
  bool adaptive_tracking_distance() const;
  void set_adaptive_tracking_distance(bool value);
  private:
  bool _internal_adaptive_tracking_distance() const;
  void _internal_set_adaptive_tracking_distance(bool value);
  public:

  // optional bool wide_baseline_matching = 14 [default = false];
  bool has_wide_baseline_matching() const;
  private:
  bool _internal_has_wide_baseline_matching() const;
  public:
  void clear_wide_baseline_matching();
  bool wide_baseline_matching() const;
  void set_wide_baseline_matching(bool value);
  private:
  bool _internal_wide_baseline_matching() const;
  void _internal_set_wide_baseline_matching(bool value);
  public:

  // optional bool refine_wide_baseline_matches = 16 [default = false];
  bool has_refine_wide_baseline_matches() const;
  private:
  bool _internal_has_refine_wide_baseline_matches() const;
  public:
  void clear_refine_wide_baseline_matches();
  bool refine_wide_baseline_matches() const;
  void set_refine_wide_baseline_matches(bool value);
  private:
  bool _internal_refine_wide_baseline_matches() const;
  void _internal_set_refine_wide_baseline_matches(bool value);
  public:

  // optional int32 adaptive_extraction_levels_lowest_size = 23 [default = 0];
  bool has_adaptive_extraction_levels_lowest_size() const;
  private:
  bool _internal_has_adaptive_extraction_levels_lowest_size() const;
  public:
  void clear_adaptive_extraction_levels_lowest_size();
  ::PROTOBUF_NAMESPACE_ID::int32 adaptive_extraction_levels_lowest_size() const;
  void set_adaptive_extraction_levels_lowest_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adaptive_extraction_levels_lowest_size() const;
  void _internal_set_adaptive_extraction_levels_lowest_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.TrackingOptions.KltTrackerImplementation klt_tracker_implementation = 32 [default = KLT_OPENCV];
  bool has_klt_tracker_implementation() const;
  private:
  bool _internal_has_klt_tracker_implementation() const;
  public:
  void clear_klt_tracker_implementation();
  ::mediapipe::TrackingOptions_KltTrackerImplementation klt_tracker_implementation() const;
  void set_klt_tracker_implementation(::mediapipe::TrackingOptions_KltTrackerImplementation value);
  private:
  ::mediapipe::TrackingOptions_KltTrackerImplementation _internal_klt_tracker_implementation() const;
  void _internal_set_klt_tracker_implementation(::mediapipe::TrackingOptions_KltTrackerImplementation value);
  public:

  // optional int32 multi_frames_to_track = 1 [default = 1];
  bool has_multi_frames_to_track() const;
  private:
  bool _internal_has_multi_frames_to_track() const;
  public:
  void clear_multi_frames_to_track();
  ::PROTOBUF_NAMESPACE_ID::int32 multi_frames_to_track() const;
  void set_multi_frames_to_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multi_frames_to_track() const;
  void _internal_set_multi_frames_to_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_features = 2 [default = 2000];
  bool has_max_features() const;
  private:
  bool _internal_has_max_features() const;
  public:
  void clear_max_features();
  ::PROTOBUF_NAMESPACE_ID::int32 max_features() const;
  void set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_features() const;
  void _internal_set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tracking_window_size = 4 [default = 10];
  bool has_tracking_window_size() const;
  private:
  bool _internal_has_tracking_window_size() const;
  public:
  void clear_tracking_window_size();
  ::PROTOBUF_NAMESPACE_ID::int32 tracking_window_size() const;
  void set_tracking_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracking_window_size() const;
  void _internal_set_tracking_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tracking_iterations = 5 [default = 10];
  bool has_tracking_iterations() const;
  private:
  bool _internal_has_tracking_iterations() const;
  public:
  void clear_tracking_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 tracking_iterations() const;
  void set_tracking_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracking_iterations() const;
  void _internal_set_tracking_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float fractional_tracking_distance = 6 [default = 0.15];
  bool has_fractional_tracking_distance() const;
  private:
  bool _internal_has_fractional_tracking_distance() const;
  public:
  void clear_fractional_tracking_distance();
  float fractional_tracking_distance() const;
  void set_fractional_tracking_distance(float value);
  private:
  float _internal_fractional_tracking_distance() const;
  void _internal_set_fractional_tracking_distance(float value);
  public:

  // optional float min_feature_distance = 7 [default = 7];
  bool has_min_feature_distance() const;
  private:
  bool _internal_has_min_feature_distance() const;
  public:
  void clear_min_feature_distance();
  float min_feature_distance() const;
  void set_min_feature_distance(float value);
  private:
  float _internal_min_feature_distance() const;
  void _internal_set_min_feature_distance(float value);
  public:

  // optional float adaptive_features_block_size = 9 [default = 0.26];
  bool has_adaptive_features_block_size() const;
  private:
  bool _internal_has_adaptive_features_block_size() const;
  public:
  void clear_adaptive_features_block_size();
  float adaptive_features_block_size() const;
  void set_adaptive_features_block_size(float value);
  private:
  float _internal_adaptive_features_block_size() const;
  void _internal_set_adaptive_features_block_size(float value);
  public:

  // optional int32 adaptive_features_levels = 10 [default = 1];
  bool has_adaptive_features_levels() const;
  private:
  bool _internal_has_adaptive_features_levels() const;
  public:
  void clear_adaptive_features_levels();
  ::PROTOBUF_NAMESPACE_ID::int32 adaptive_features_levels() const;
  void set_adaptive_features_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adaptive_features_levels() const;
  void _internal_set_adaptive_features_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float synthetic_zero_motion_grid_step = 13 [default = 0.04];
  bool has_synthetic_zero_motion_grid_step() const;
  private:
  bool _internal_has_synthetic_zero_motion_grid_step() const;
  public:
  void clear_synthetic_zero_motion_grid_step();
  float synthetic_zero_motion_grid_step() const;
  void set_synthetic_zero_motion_grid_step(float value);
  private:
  float _internal_synthetic_zero_motion_grid_step() const;
  void _internal_set_synthetic_zero_motion_grid_step(float value);
  public:

  // optional float ratio_test_threshold = 15 [default = 0.8];
  bool has_ratio_test_threshold() const;
  private:
  bool _internal_has_ratio_test_threshold() const;
  public:
  void clear_ratio_test_threshold();
  float ratio_test_threshold() const;
  void set_ratio_test_threshold(float value);
  private:
  float _internal_ratio_test_threshold() const;
  void _internal_set_ratio_test_threshold(float value);
  public:

  // optional float reuse_features_min_survived_frac = 18 [default = 0.7];
  bool has_reuse_features_min_survived_frac() const;
  private:
  bool _internal_has_reuse_features_min_survived_frac() const;
  public:
  void clear_reuse_features_min_survived_frac();
  float reuse_features_min_survived_frac() const;
  void set_reuse_features_min_survived_frac(float value);
  private:
  float _internal_reuse_features_min_survived_frac() const;
  void _internal_set_reuse_features_min_survived_frac(float value);
  public:

  // optional .mediapipe.TrackingOptions.FlowDirection internal_tracking_direction = 19 [default = BACKWARD];
  bool has_internal_tracking_direction() const;
  private:
  bool _internal_has_internal_tracking_direction() const;
  public:
  void clear_internal_tracking_direction();
  ::mediapipe::TrackingOptions_FlowDirection internal_tracking_direction() const;
  void set_internal_tracking_direction(::mediapipe::TrackingOptions_FlowDirection value);
  private:
  ::mediapipe::TrackingOptions_FlowDirection _internal_internal_tracking_direction() const;
  void _internal_set_internal_tracking_direction(::mediapipe::TrackingOptions_FlowDirection value);
  public:

  // optional bool distance_downscale_sqrt = 21 [default = true];
  bool has_distance_downscale_sqrt() const;
  private:
  bool _internal_has_distance_downscale_sqrt() const;
  public:
  void clear_distance_downscale_sqrt();
  bool distance_downscale_sqrt() const;
  void set_distance_downscale_sqrt(bool value);
  private:
  bool _internal_distance_downscale_sqrt() const;
  void _internal_set_distance_downscale_sqrt(bool value);
  public:

  // optional bool adaptive_good_features_to_track = 8 [default = true];
  bool has_adaptive_good_features_to_track() const;
  private:
  bool _internal_has_adaptive_good_features_to_track() const;
  public:
  void clear_adaptive_good_features_to_track();
  bool adaptive_good_features_to_track() const;
  void set_adaptive_good_features_to_track(bool value);
  private:
  bool _internal_adaptive_good_features_to_track() const;
  void _internal_set_adaptive_good_features_to_track(bool value);
  public:

  // optional bool use_cv_tracking_algorithm = 30 [default = true];
  bool has_use_cv_tracking_algorithm() const;
  private:
  bool _internal_has_use_cv_tracking_algorithm() const;
  public:
  void clear_use_cv_tracking_algorithm();
  bool use_cv_tracking_algorithm() const;
  void set_use_cv_tracking_algorithm(bool value);
  private:
  bool _internal_use_cv_tracking_algorithm() const;
  void _internal_set_use_cv_tracking_algorithm(bool value);
  public:

  // optional .mediapipe.TrackingOptions.FlowDirection output_flow_direction = 20 [default = BACKWARD];
  bool has_output_flow_direction() const;
  private:
  bool _internal_has_output_flow_direction() const;
  public:
  void clear_output_flow_direction();
  ::mediapipe::TrackingOptions_FlowDirection output_flow_direction() const;
  void set_output_flow_direction(::mediapipe::TrackingOptions_FlowDirection value);
  private:
  ::mediapipe::TrackingOptions_FlowDirection _internal_output_flow_direction() const;
  void _internal_set_output_flow_direction(::mediapipe::TrackingOptions_FlowDirection value);
  public:

  // optional int32 adaptive_extraction_levels = 22 [default = 1];
  bool has_adaptive_extraction_levels() const;
  private:
  bool _internal_has_adaptive_extraction_levels() const;
  public:
  void clear_adaptive_extraction_levels();
  ::PROTOBUF_NAMESPACE_ID::int32 adaptive_extraction_levels() const;
  void set_adaptive_extraction_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adaptive_extraction_levels() const;
  void _internal_set_adaptive_extraction_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.TrackingOptions.TrackingPolicy tracking_policy = 25 [default = POLICY_SINGLE_FRAME];
  bool has_tracking_policy() const;
  private:
  bool _internal_has_tracking_policy() const;
  public:
  void clear_tracking_policy();
  ::mediapipe::TrackingOptions_TrackingPolicy tracking_policy() const;
  void set_tracking_policy(::mediapipe::TrackingOptions_TrackingPolicy value);
  private:
  ::mediapipe::TrackingOptions_TrackingPolicy _internal_tracking_policy() const;
  void _internal_set_tracking_policy(::mediapipe::TrackingOptions_TrackingPolicy value);
  public:

  // optional int32 long_tracks_max_frames = 26 [default = 300];
  bool has_long_tracks_max_frames() const;
  private:
  bool _internal_has_long_tracks_max_frames() const;
  public:
  void clear_long_tracks_max_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 long_tracks_max_frames() const;
  void set_long_tracks_max_frames(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_long_tracks_max_frames() const;
  void _internal_set_long_tracks_max_frames(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.TrackingOptions.CornerExtractionMethod corner_extraction_method = 27 [default = EXTRACTION_MIN_EIG_VAL];
  bool has_corner_extraction_method() const;
  private:
  bool _internal_has_corner_extraction_method() const;
  public:
  void clear_corner_extraction_method();
  ::mediapipe::TrackingOptions_CornerExtractionMethod corner_extraction_method() const;
  void set_corner_extraction_method(::mediapipe::TrackingOptions_CornerExtractionMethod value);
  private:
  ::mediapipe::TrackingOptions_CornerExtractionMethod _internal_corner_extraction_method() const;
  void _internal_set_corner_extraction_method(::mediapipe::TrackingOptions_CornerExtractionMethod value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TrackingOptions)
  // @@protoc_insertion_point(class_scope:mediapipe.TrackingOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::TrackingOptions_MinEigValExtractionSettings* min_eig_val_settings_;
  ::mediapipe::TrackingOptions_HarrisExtractionSettings* harris_settings_;
  ::mediapipe::TrackingOptions_FastExtractionSettings* fast_settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 reuse_features_max_frame_distance_;
  bool adaptive_tracking_distance_;
  bool wide_baseline_matching_;
  bool refine_wide_baseline_matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 adaptive_extraction_levels_lowest_size_;
  int klt_tracker_implementation_;
  ::PROTOBUF_NAMESPACE_ID::int32 multi_frames_to_track_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_features_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracking_window_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracking_iterations_;
  float fractional_tracking_distance_;
  float min_feature_distance_;
  float adaptive_features_block_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adaptive_features_levels_;
  float synthetic_zero_motion_grid_step_;
  float ratio_test_threshold_;
  float reuse_features_min_survived_frac_;
  int internal_tracking_direction_;
  bool distance_downscale_sqrt_;
  bool adaptive_good_features_to_track_;
  bool use_cv_tracking_algorithm_;
  int output_flow_direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 adaptive_extraction_levels_;
  int tracking_policy_;
  ::PROTOBUF_NAMESPACE_ID::int32 long_tracks_max_frames_;
  int corner_extraction_method_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowComputationOptions_DownSampleSchedule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowComputationOptions.DownSampleSchedule) */ {
 public:
  inline RegionFlowComputationOptions_DownSampleSchedule() : RegionFlowComputationOptions_DownSampleSchedule(nullptr) {}
  ~RegionFlowComputationOptions_DownSampleSchedule() override;
  explicit constexpr RegionFlowComputationOptions_DownSampleSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowComputationOptions_DownSampleSchedule(const RegionFlowComputationOptions_DownSampleSchedule& from);
  RegionFlowComputationOptions_DownSampleSchedule(RegionFlowComputationOptions_DownSampleSchedule&& from) noexcept
    : RegionFlowComputationOptions_DownSampleSchedule() {
    *this = ::std::move(from);
  }

  inline RegionFlowComputationOptions_DownSampleSchedule& operator=(const RegionFlowComputationOptions_DownSampleSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowComputationOptions_DownSampleSchedule& operator=(RegionFlowComputationOptions_DownSampleSchedule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowComputationOptions_DownSampleSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowComputationOptions_DownSampleSchedule* internal_default_instance() {
    return reinterpret_cast<const RegionFlowComputationOptions_DownSampleSchedule*>(
               &_RegionFlowComputationOptions_DownSampleSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegionFlowComputationOptions_DownSampleSchedule& a, RegionFlowComputationOptions_DownSampleSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowComputationOptions_DownSampleSchedule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowComputationOptions_DownSampleSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowComputationOptions_DownSampleSchedule* New() const final {
    return CreateMaybeMessage<RegionFlowComputationOptions_DownSampleSchedule>(nullptr);
  }

  RegionFlowComputationOptions_DownSampleSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowComputationOptions_DownSampleSchedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowComputationOptions_DownSampleSchedule& from);
  void MergeFrom(const RegionFlowComputationOptions_DownSampleSchedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowComputationOptions_DownSampleSchedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowComputationOptions.DownSampleSchedule";
  }
  protected:
  explicit RegionFlowComputationOptions_DownSampleSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownsampleFactor360PFieldNumber = 1,
    kDownsampleFactor480PFieldNumber = 2,
    kDownsampleFactor720PFieldNumber = 3,
    kDownsampleFactor1080PFieldNumber = 4,
  };
  // optional float downsample_factor_360p = 1 [default = 1];
  bool has_downsample_factor_360p() const;
  private:
  bool _internal_has_downsample_factor_360p() const;
  public:
  void clear_downsample_factor_360p();
  float downsample_factor_360p() const;
  void set_downsample_factor_360p(float value);
  private:
  float _internal_downsample_factor_360p() const;
  void _internal_set_downsample_factor_360p(float value);
  public:

  // optional float downsample_factor_480p = 2 [default = 1];
  bool has_downsample_factor_480p() const;
  private:
  bool _internal_has_downsample_factor_480p() const;
  public:
  void clear_downsample_factor_480p();
  float downsample_factor_480p() const;
  void set_downsample_factor_480p(float value);
  private:
  float _internal_downsample_factor_480p() const;
  void _internal_set_downsample_factor_480p(float value);
  public:

  // optional float downsample_factor_720p = 3 [default = 2];
  bool has_downsample_factor_720p() const;
  private:
  bool _internal_has_downsample_factor_720p() const;
  public:
  void clear_downsample_factor_720p();
  float downsample_factor_720p() const;
  void set_downsample_factor_720p(float value);
  private:
  float _internal_downsample_factor_720p() const;
  void _internal_set_downsample_factor_720p(float value);
  public:

  // optional float downsample_factor_1080p = 4 [default = 2];
  bool has_downsample_factor_1080p() const;
  private:
  bool _internal_has_downsample_factor_1080p() const;
  public:
  void clear_downsample_factor_1080p();
  float downsample_factor_1080p() const;
  void set_downsample_factor_1080p(float value);
  private:
  float _internal_downsample_factor_1080p() const;
  void _internal_set_downsample_factor_1080p(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowComputationOptions.DownSampleSchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float downsample_factor_360p_;
  float downsample_factor_480p_;
  float downsample_factor_720p_;
  float downsample_factor_1080p_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowComputationOptions_BlurScoreOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowComputationOptions.BlurScoreOptions) */ {
 public:
  inline RegionFlowComputationOptions_BlurScoreOptions() : RegionFlowComputationOptions_BlurScoreOptions(nullptr) {}
  ~RegionFlowComputationOptions_BlurScoreOptions() override;
  explicit constexpr RegionFlowComputationOptions_BlurScoreOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowComputationOptions_BlurScoreOptions(const RegionFlowComputationOptions_BlurScoreOptions& from);
  RegionFlowComputationOptions_BlurScoreOptions(RegionFlowComputationOptions_BlurScoreOptions&& from) noexcept
    : RegionFlowComputationOptions_BlurScoreOptions() {
    *this = ::std::move(from);
  }

  inline RegionFlowComputationOptions_BlurScoreOptions& operator=(const RegionFlowComputationOptions_BlurScoreOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowComputationOptions_BlurScoreOptions& operator=(RegionFlowComputationOptions_BlurScoreOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowComputationOptions_BlurScoreOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowComputationOptions_BlurScoreOptions* internal_default_instance() {
    return reinterpret_cast<const RegionFlowComputationOptions_BlurScoreOptions*>(
               &_RegionFlowComputationOptions_BlurScoreOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegionFlowComputationOptions_BlurScoreOptions& a, RegionFlowComputationOptions_BlurScoreOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowComputationOptions_BlurScoreOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowComputationOptions_BlurScoreOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowComputationOptions_BlurScoreOptions* New() const final {
    return CreateMaybeMessage<RegionFlowComputationOptions_BlurScoreOptions>(nullptr);
  }

  RegionFlowComputationOptions_BlurScoreOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowComputationOptions_BlurScoreOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowComputationOptions_BlurScoreOptions& from);
  void MergeFrom(const RegionFlowComputationOptions_BlurScoreOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowComputationOptions_BlurScoreOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowComputationOptions.BlurScoreOptions";
  }
  protected:
  explicit RegionFlowComputationOptions_BlurScoreOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxFilterDiamFieldNumber = 1,
    kRelativeCornernessThresholdFieldNumber = 2,
    kAbsoluteCornernessThresholdFieldNumber = 3,
    kMedianPercentileFieldNumber = 5,
  };
  // optional int32 box_filter_diam = 1 [default = 3];
  bool has_box_filter_diam() const;
  private:
  bool _internal_has_box_filter_diam() const;
  public:
  void clear_box_filter_diam();
  ::PROTOBUF_NAMESPACE_ID::int32 box_filter_diam() const;
  void set_box_filter_diam(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_box_filter_diam() const;
  void _internal_set_box_filter_diam(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float relative_cornerness_threshold = 2 [default = 0.03];
  bool has_relative_cornerness_threshold() const;
  private:
  bool _internal_has_relative_cornerness_threshold() const;
  public:
  void clear_relative_cornerness_threshold();
  float relative_cornerness_threshold() const;
  void set_relative_cornerness_threshold(float value);
  private:
  float _internal_relative_cornerness_threshold() const;
  void _internal_set_relative_cornerness_threshold(float value);
  public:

  // optional float absolute_cornerness_threshold = 3 [default = 0.0001];
  bool has_absolute_cornerness_threshold() const;
  private:
  bool _internal_has_absolute_cornerness_threshold() const;
  public:
  void clear_absolute_cornerness_threshold();
  float absolute_cornerness_threshold() const;
  void set_absolute_cornerness_threshold(float value);
  private:
  float _internal_absolute_cornerness_threshold() const;
  void _internal_set_absolute_cornerness_threshold(float value);
  public:

  // optional float median_percentile = 5 [default = 0.85];
  bool has_median_percentile() const;
  private:
  bool _internal_has_median_percentile() const;
  public:
  void clear_median_percentile();
  float median_percentile() const;
  void set_median_percentile(float value);
  private:
  float _internal_median_percentile() const;
  void _internal_set_median_percentile(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowComputationOptions.BlurScoreOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 box_filter_diam_;
  float relative_cornerness_threshold_;
  float absolute_cornerness_threshold_;
  float median_percentile_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowComputationOptions_VisualConsistencyOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions) */ {
 public:
  inline RegionFlowComputationOptions_VisualConsistencyOptions() : RegionFlowComputationOptions_VisualConsistencyOptions(nullptr) {}
  ~RegionFlowComputationOptions_VisualConsistencyOptions() override;
  explicit constexpr RegionFlowComputationOptions_VisualConsistencyOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowComputationOptions_VisualConsistencyOptions(const RegionFlowComputationOptions_VisualConsistencyOptions& from);
  RegionFlowComputationOptions_VisualConsistencyOptions(RegionFlowComputationOptions_VisualConsistencyOptions&& from) noexcept
    : RegionFlowComputationOptions_VisualConsistencyOptions() {
    *this = ::std::move(from);
  }

  inline RegionFlowComputationOptions_VisualConsistencyOptions& operator=(const RegionFlowComputationOptions_VisualConsistencyOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowComputationOptions_VisualConsistencyOptions& operator=(RegionFlowComputationOptions_VisualConsistencyOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowComputationOptions_VisualConsistencyOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowComputationOptions_VisualConsistencyOptions* internal_default_instance() {
    return reinterpret_cast<const RegionFlowComputationOptions_VisualConsistencyOptions*>(
               &_RegionFlowComputationOptions_VisualConsistencyOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegionFlowComputationOptions_VisualConsistencyOptions& a, RegionFlowComputationOptions_VisualConsistencyOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowComputationOptions_VisualConsistencyOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowComputationOptions_VisualConsistencyOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowComputationOptions_VisualConsistencyOptions* New() const final {
    return CreateMaybeMessage<RegionFlowComputationOptions_VisualConsistencyOptions>(nullptr);
  }

  RegionFlowComputationOptions_VisualConsistencyOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowComputationOptions_VisualConsistencyOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowComputationOptions_VisualConsistencyOptions& from);
  void MergeFrom(const RegionFlowComputationOptions_VisualConsistencyOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowComputationOptions_VisualConsistencyOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions";
  }
  protected:
  explicit RegionFlowComputationOptions_VisualConsistencyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputeConsistencyFieldNumber = 1,
    kTinyImageDimensionFieldNumber = 2,
  };
  // optional bool compute_consistency = 1 [default = true];
  bool has_compute_consistency() const;
  private:
  bool _internal_has_compute_consistency() const;
  public:
  void clear_compute_consistency();
  bool compute_consistency() const;
  void set_compute_consistency(bool value);
  private:
  bool _internal_compute_consistency() const;
  void _internal_set_compute_consistency(bool value);
  public:

  // optional int32 tiny_image_dimension = 2 [default = 20];
  bool has_tiny_image_dimension() const;
  private:
  bool _internal_has_tiny_image_dimension() const;
  public:
  void clear_tiny_image_dimension();
  ::PROTOBUF_NAMESPACE_ID::int32 tiny_image_dimension() const;
  void set_tiny_image_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiny_image_dimension() const;
  void _internal_set_tiny_image_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool compute_consistency_;
  ::PROTOBUF_NAMESPACE_ID::int32 tiny_image_dimension_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// -------------------------------------------------------------------

class RegionFlowComputationOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.RegionFlowComputationOptions) */ {
 public:
  inline RegionFlowComputationOptions() : RegionFlowComputationOptions(nullptr) {}
  ~RegionFlowComputationOptions() override;
  explicit constexpr RegionFlowComputationOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionFlowComputationOptions(const RegionFlowComputationOptions& from);
  RegionFlowComputationOptions(RegionFlowComputationOptions&& from) noexcept
    : RegionFlowComputationOptions() {
    *this = ::std::move(from);
  }

  inline RegionFlowComputationOptions& operator=(const RegionFlowComputationOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionFlowComputationOptions& operator=(RegionFlowComputationOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionFlowComputationOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionFlowComputationOptions* internal_default_instance() {
    return reinterpret_cast<const RegionFlowComputationOptions*>(
               &_RegionFlowComputationOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegionFlowComputationOptions& a, RegionFlowComputationOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionFlowComputationOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionFlowComputationOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionFlowComputationOptions* New() const final {
    return CreateMaybeMessage<RegionFlowComputationOptions>(nullptr);
  }

  RegionFlowComputationOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionFlowComputationOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionFlowComputationOptions& from);
  void MergeFrom(const RegionFlowComputationOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionFlowComputationOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.RegionFlowComputationOptions";
  }
  protected:
  explicit RegionFlowComputationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegionFlowComputationOptions_DownSampleSchedule DownSampleSchedule;
  typedef RegionFlowComputationOptions_BlurScoreOptions BlurScoreOptions;
  typedef RegionFlowComputationOptions_VisualConsistencyOptions VisualConsistencyOptions;

  typedef RegionFlowComputationOptions_IrlsInitialization IrlsInitialization;
  static constexpr IrlsInitialization INIT_UNIFORM =
    RegionFlowComputationOptions_IrlsInitialization_INIT_UNIFORM;
  static constexpr IrlsInitialization INIT_CONSISTENCY =
    RegionFlowComputationOptions_IrlsInitialization_INIT_CONSISTENCY;
  static inline bool IrlsInitialization_IsValid(int value) {
    return RegionFlowComputationOptions_IrlsInitialization_IsValid(value);
  }
  static constexpr IrlsInitialization IrlsInitialization_MIN =
    RegionFlowComputationOptions_IrlsInitialization_IrlsInitialization_MIN;
  static constexpr IrlsInitialization IrlsInitialization_MAX =
    RegionFlowComputationOptions_IrlsInitialization_IrlsInitialization_MAX;
  static constexpr int IrlsInitialization_ARRAYSIZE =
    RegionFlowComputationOptions_IrlsInitialization_IrlsInitialization_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IrlsInitialization_descriptor() {
    return RegionFlowComputationOptions_IrlsInitialization_descriptor();
  }
  template<typename T>
  static inline const std::string& IrlsInitialization_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IrlsInitialization>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IrlsInitialization_Name.");
    return RegionFlowComputationOptions_IrlsInitialization_Name(enum_t_value);
  }
  static inline bool IrlsInitialization_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IrlsInitialization* value) {
    return RegionFlowComputationOptions_IrlsInitialization_Parse(name, value);
  }

  typedef RegionFlowComputationOptions_DownsampleMode DownsampleMode;
  static constexpr DownsampleMode DOWNSAMPLE_NONE =
    RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_NONE;
  static constexpr DownsampleMode DOWNSAMPLE_TO_MAX_SIZE =
    RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_TO_MAX_SIZE;
  static constexpr DownsampleMode DOWNSAMPLE_BY_FACTOR =
    RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_BY_FACTOR;
  static constexpr DownsampleMode DOWNSAMPLE_BY_SCHEDULE =
    RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_BY_SCHEDULE;
  static constexpr DownsampleMode DOWNSAMPLE_TO_MIN_SIZE =
    RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_TO_MIN_SIZE;
  static constexpr DownsampleMode DOWNSAMPLE_TO_INPUT_SIZE =
    RegionFlowComputationOptions_DownsampleMode_DOWNSAMPLE_TO_INPUT_SIZE;
  static inline bool DownsampleMode_IsValid(int value) {
    return RegionFlowComputationOptions_DownsampleMode_IsValid(value);
  }
  static constexpr DownsampleMode DownsampleMode_MIN =
    RegionFlowComputationOptions_DownsampleMode_DownsampleMode_MIN;
  static constexpr DownsampleMode DownsampleMode_MAX =
    RegionFlowComputationOptions_DownsampleMode_DownsampleMode_MAX;
  static constexpr int DownsampleMode_ARRAYSIZE =
    RegionFlowComputationOptions_DownsampleMode_DownsampleMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DownsampleMode_descriptor() {
    return RegionFlowComputationOptions_DownsampleMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DownsampleMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DownsampleMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DownsampleMode_Name.");
    return RegionFlowComputationOptions_DownsampleMode_Name(enum_t_value);
  }
  static inline bool DownsampleMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DownsampleMode* value) {
    return RegionFlowComputationOptions_DownsampleMode_Parse(name, value);
  }

  typedef RegionFlowComputationOptions_GainCorrectMode GainCorrectMode;
  static constexpr GainCorrectMode GAIN_CORRECT_DEFAULT_USER =
    RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_DEFAULT_USER;
  static constexpr GainCorrectMode GAIN_CORRECT_VIDEO =
    RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_VIDEO;
  static constexpr GainCorrectMode GAIN_CORRECT_HDR =
    RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_HDR;
  static constexpr GainCorrectMode GAIN_CORRECT_PHOTO_BURST =
    RegionFlowComputationOptions_GainCorrectMode_GAIN_CORRECT_PHOTO_BURST;
  static inline bool GainCorrectMode_IsValid(int value) {
    return RegionFlowComputationOptions_GainCorrectMode_IsValid(value);
  }
  static constexpr GainCorrectMode GainCorrectMode_MIN =
    RegionFlowComputationOptions_GainCorrectMode_GainCorrectMode_MIN;
  static constexpr GainCorrectMode GainCorrectMode_MAX =
    RegionFlowComputationOptions_GainCorrectMode_GainCorrectMode_MAX;
  static constexpr int GainCorrectMode_ARRAYSIZE =
    RegionFlowComputationOptions_GainCorrectMode_GainCorrectMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GainCorrectMode_descriptor() {
    return RegionFlowComputationOptions_GainCorrectMode_descriptor();
  }
  template<typename T>
  static inline const std::string& GainCorrectMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GainCorrectMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GainCorrectMode_Name.");
    return RegionFlowComputationOptions_GainCorrectMode_Name(enum_t_value);
  }
  static inline bool GainCorrectMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GainCorrectMode* value) {
    return RegionFlowComputationOptions_GainCorrectMode_Parse(name, value);
  }

  typedef RegionFlowComputationOptions_ImageFormat ImageFormat;
  static constexpr ImageFormat FORMAT_GRAYSCALE =
    RegionFlowComputationOptions_ImageFormat_FORMAT_GRAYSCALE;
  static constexpr ImageFormat FORMAT_RGB =
    RegionFlowComputationOptions_ImageFormat_FORMAT_RGB;
  static constexpr ImageFormat FORMAT_RGBA =
    RegionFlowComputationOptions_ImageFormat_FORMAT_RGBA;
  static constexpr ImageFormat FORMAT_BGR =
    RegionFlowComputationOptions_ImageFormat_FORMAT_BGR;
  static constexpr ImageFormat FORMAT_BGRA =
    RegionFlowComputationOptions_ImageFormat_FORMAT_BGRA;
  static inline bool ImageFormat_IsValid(int value) {
    return RegionFlowComputationOptions_ImageFormat_IsValid(value);
  }
  static constexpr ImageFormat ImageFormat_MIN =
    RegionFlowComputationOptions_ImageFormat_ImageFormat_MIN;
  static constexpr ImageFormat ImageFormat_MAX =
    RegionFlowComputationOptions_ImageFormat_ImageFormat_MAX;
  static constexpr int ImageFormat_ARRAYSIZE =
    RegionFlowComputationOptions_ImageFormat_ImageFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImageFormat_descriptor() {
    return RegionFlowComputationOptions_ImageFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& ImageFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageFormat_Name.");
    return RegionFlowComputationOptions_ImageFormat_Name(enum_t_value);
  }
  static inline bool ImageFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageFormat* value) {
    return RegionFlowComputationOptions_ImageFormat_Parse(name, value);
  }

  typedef RegionFlowComputationOptions_DescriptorExtractorType DescriptorExtractorType;
  static constexpr DescriptorExtractorType ORB =
    RegionFlowComputationOptions_DescriptorExtractorType_ORB;
  static inline bool DescriptorExtractorType_IsValid(int value) {
    return RegionFlowComputationOptions_DescriptorExtractorType_IsValid(value);
  }
  static constexpr DescriptorExtractorType DescriptorExtractorType_MIN =
    RegionFlowComputationOptions_DescriptorExtractorType_DescriptorExtractorType_MIN;
  static constexpr DescriptorExtractorType DescriptorExtractorType_MAX =
    RegionFlowComputationOptions_DescriptorExtractorType_DescriptorExtractorType_MAX;
  static constexpr int DescriptorExtractorType_ARRAYSIZE =
    RegionFlowComputationOptions_DescriptorExtractorType_DescriptorExtractorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DescriptorExtractorType_descriptor() {
    return RegionFlowComputationOptions_DescriptorExtractorType_descriptor();
  }
  template<typename T>
  static inline const std::string& DescriptorExtractorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DescriptorExtractorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DescriptorExtractorType_Name.");
    return RegionFlowComputationOptions_DescriptorExtractorType_Name(enum_t_value);
  }
  static inline bool DescriptorExtractorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DescriptorExtractorType* value) {
    return RegionFlowComputationOptions_DescriptorExtractorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingOptionsFieldNumber = 1,
    kDownsampleScheduleFieldNumber = 19,
    kBlurScoreOptionsFieldNumber = 31,
    kGainBiasBoundsFieldNumber = 39,
    kVisualConsistencyOptionsFieldNumber = 55,
    kNoEstimationModeFieldNumber = 40,
    kRoundDownsampleFactorFieldNumber = 62,
    kComputeBlurScoreFieldNumber = 17,
    kVerifyFeaturesFieldNumber = 27,
    kVerifyLongFeatureAccelerationFieldNumber = 63,
    kHistogramEqualizationFieldNumber = 57,
    kUseSyntheticZeroMotionTracksAllFramesFieldNumber = 34,
    kUseSyntheticZeroMotionTracksFirstFrameFieldNumber = 35,
    kMedianMagnitudeBoundsFieldNumber = 51,
    kFracInlierErrorThresholdFieldNumber = 52,
    kGainCorrectionFieldNumber = 36,
    kFastGainCorrectionFieldNumber = 61,
    kGainCorrectionBrightReferenceFieldNumber = 59,
    kGainCorrectionTriggeringRatioFieldNumber = 60,
    kVerifyLongFeatureTriggerRatioFieldNumber = 64,
    kDescriptorExtractorTypeFieldNumber = 65,
    kMinFeatureInliersFieldNumber = 2,
    kRansacRoundsPerRegionFieldNumber = 3,
    kAbsoluteInlierErrorThresholdFieldNumber = 4,
    kFastEstimationBlockSizeFieldNumber = 6,
    kDownsampleModeFieldNumber = 11,
    kDownsamplingSizeFieldNumber = 12,
    kMinFeatureRequirementFieldNumber = 13,
    kMinFeatureCoverFieldNumber = 14,
    kDownsampleFactorFieldNumber = 18,
    kMinFeatureCoverGridFieldNumber = 20,
    kPatchDescriptorRadiusFieldNumber = 21,
    kFastEstimationOverlapGridsFieldNumber = 22,
    kMaxMagnitudeThresholdRatioFieldNumber = 23,
    kFastEstimationMinBlockSizeFieldNumber = 25,
    kCornerResponseScaleFieldNumber = 26,
    kVerificationDistanceFieldNumber = 28,
    kPreBlurSigmaFieldNumber = 33,
    kFracGainFeatureSizeFieldNumber = 37,
    kFracGainStepFieldNumber = 38,
    kGainCorrectModeFieldNumber = 41,
    kRelativeInlierErrorThresholdFieldNumber = 44,
    kTopInlierSetsFieldNumber = 45,
    kRelativeMinFeatureInliersFieldNumber = 46,
    kGainCorrectionInlierImprovementFracFieldNumber = 48,
    kIrlsInitializationFieldNumber = 49,
    kDistanceFromBorderFieldNumber = 50,
    kLongFeatureVerificationThresholdFieldNumber = 54,
    kVerifyLongFeaturesFieldNumber = 53,
    kGainCorrectionMultipleHypothesesFieldNumber = 47,
    kComputeDerivativeInPyramidFieldNumber = 66,
    kMaxLongFeatureAccelerationFieldNumber = 56,
    kImageFormatFieldNumber = 58,
  };
  // optional .mediapipe.TrackingOptions tracking_options = 1;
  bool has_tracking_options() const;
  private:
  bool _internal_has_tracking_options() const;
  public:
  void clear_tracking_options();
  const ::mediapipe::TrackingOptions& tracking_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackingOptions* release_tracking_options();
  ::mediapipe::TrackingOptions* mutable_tracking_options();
  void set_allocated_tracking_options(::mediapipe::TrackingOptions* tracking_options);
  private:
  const ::mediapipe::TrackingOptions& _internal_tracking_options() const;
  ::mediapipe::TrackingOptions* _internal_mutable_tracking_options();
  public:
  void unsafe_arena_set_allocated_tracking_options(
      ::mediapipe::TrackingOptions* tracking_options);
  ::mediapipe::TrackingOptions* unsafe_arena_release_tracking_options();

  // optional .mediapipe.RegionFlowComputationOptions.DownSampleSchedule downsample_schedule = 19;
  bool has_downsample_schedule() const;
  private:
  bool _internal_has_downsample_schedule() const;
  public:
  void clear_downsample_schedule();
  const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule& downsample_schedule() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* release_downsample_schedule();
  ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* mutable_downsample_schedule();
  void set_allocated_downsample_schedule(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* downsample_schedule);
  private:
  const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule& _internal_downsample_schedule() const;
  ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* _internal_mutable_downsample_schedule();
  public:
  void unsafe_arena_set_allocated_downsample_schedule(
      ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* downsample_schedule);
  ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* unsafe_arena_release_downsample_schedule();

  // optional .mediapipe.RegionFlowComputationOptions.BlurScoreOptions blur_score_options = 31;
  bool has_blur_score_options() const;
  private:
  bool _internal_has_blur_score_options() const;
  public:
  void clear_blur_score_options();
  const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions& blur_score_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* release_blur_score_options();
  ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* mutable_blur_score_options();
  void set_allocated_blur_score_options(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* blur_score_options);
  private:
  const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions& _internal_blur_score_options() const;
  ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* _internal_mutable_blur_score_options();
  public:
  void unsafe_arena_set_allocated_blur_score_options(
      ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* blur_score_options);
  ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* unsafe_arena_release_blur_score_options();

  // optional .mediapipe.ToneEstimationOptions.GainBiasBounds gain_bias_bounds = 39;
  bool has_gain_bias_bounds() const;
  private:
  bool _internal_has_gain_bias_bounds() const;
  public:
  void clear_gain_bias_bounds();
  const ::mediapipe::ToneEstimationOptions_GainBiasBounds& gain_bias_bounds() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::ToneEstimationOptions_GainBiasBounds* release_gain_bias_bounds();
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* mutable_gain_bias_bounds();
  void set_allocated_gain_bias_bounds(::mediapipe::ToneEstimationOptions_GainBiasBounds* gain_bias_bounds);
  private:
  const ::mediapipe::ToneEstimationOptions_GainBiasBounds& _internal_gain_bias_bounds() const;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* _internal_mutable_gain_bias_bounds();
  public:
  void unsafe_arena_set_allocated_gain_bias_bounds(
      ::mediapipe::ToneEstimationOptions_GainBiasBounds* gain_bias_bounds);
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* unsafe_arena_release_gain_bias_bounds();

  // optional .mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions visual_consistency_options = 55;
  bool has_visual_consistency_options() const;
  private:
  bool _internal_has_visual_consistency_options() const;
  public:
  void clear_visual_consistency_options();
  const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions& visual_consistency_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* release_visual_consistency_options();
  ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* mutable_visual_consistency_options();
  void set_allocated_visual_consistency_options(::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* visual_consistency_options);
  private:
  const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions& _internal_visual_consistency_options() const;
  ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* _internal_mutable_visual_consistency_options();
  public:
  void unsafe_arena_set_allocated_visual_consistency_options(
      ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* visual_consistency_options);
  ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* unsafe_arena_release_visual_consistency_options();

  // optional bool no_estimation_mode = 40 [default = false];
  bool has_no_estimation_mode() const;
  private:
  bool _internal_has_no_estimation_mode() const;
  public:
  void clear_no_estimation_mode();
  bool no_estimation_mode() const;
  void set_no_estimation_mode(bool value);
  private:
  bool _internal_no_estimation_mode() const;
  void _internal_set_no_estimation_mode(bool value);
  public:

  // optional bool round_downsample_factor = 62 [default = false];
  bool has_round_downsample_factor() const;
  private:
  bool _internal_has_round_downsample_factor() const;
  public:
  void clear_round_downsample_factor();
  bool round_downsample_factor() const;
  void set_round_downsample_factor(bool value);
  private:
  bool _internal_round_downsample_factor() const;
  void _internal_set_round_downsample_factor(bool value);
  public:

  // optional bool compute_blur_score = 17 [default = false];
  bool has_compute_blur_score() const;
  private:
  bool _internal_has_compute_blur_score() const;
  public:
  void clear_compute_blur_score();
  bool compute_blur_score() const;
  void set_compute_blur_score(bool value);
  private:
  bool _internal_compute_blur_score() const;
  void _internal_set_compute_blur_score(bool value);
  public:

  // optional bool verify_features = 27 [default = false];
  bool has_verify_features() const;
  private:
  bool _internal_has_verify_features() const;
  public:
  void clear_verify_features();
  bool verify_features() const;
  void set_verify_features(bool value);
  private:
  bool _internal_verify_features() const;
  void _internal_set_verify_features(bool value);
  public:

  // optional bool verify_long_feature_acceleration = 63 [default = false];
  bool has_verify_long_feature_acceleration() const;
  private:
  bool _internal_has_verify_long_feature_acceleration() const;
  public:
  void clear_verify_long_feature_acceleration();
  bool verify_long_feature_acceleration() const;
  void set_verify_long_feature_acceleration(bool value);
  private:
  bool _internal_verify_long_feature_acceleration() const;
  void _internal_set_verify_long_feature_acceleration(bool value);
  public:

  // optional bool histogram_equalization = 57 [default = false];
  bool has_histogram_equalization() const;
  private:
  bool _internal_has_histogram_equalization() const;
  public:
  void clear_histogram_equalization();
  bool histogram_equalization() const;
  void set_histogram_equalization(bool value);
  private:
  bool _internal_histogram_equalization() const;
  void _internal_set_histogram_equalization(bool value);
  public:

  // optional bool use_synthetic_zero_motion_tracks_all_frames = 34 [default = false];
  bool has_use_synthetic_zero_motion_tracks_all_frames() const;
  private:
  bool _internal_has_use_synthetic_zero_motion_tracks_all_frames() const;
  public:
  void clear_use_synthetic_zero_motion_tracks_all_frames();
  bool use_synthetic_zero_motion_tracks_all_frames() const;
  void set_use_synthetic_zero_motion_tracks_all_frames(bool value);
  private:
  bool _internal_use_synthetic_zero_motion_tracks_all_frames() const;
  void _internal_set_use_synthetic_zero_motion_tracks_all_frames(bool value);
  public:

  // optional bool use_synthetic_zero_motion_tracks_first_frame = 35 [default = false];
  bool has_use_synthetic_zero_motion_tracks_first_frame() const;
  private:
  bool _internal_has_use_synthetic_zero_motion_tracks_first_frame() const;
  public:
  void clear_use_synthetic_zero_motion_tracks_first_frame();
  bool use_synthetic_zero_motion_tracks_first_frame() const;
  void set_use_synthetic_zero_motion_tracks_first_frame(bool value);
  private:
  bool _internal_use_synthetic_zero_motion_tracks_first_frame() const;
  void _internal_set_use_synthetic_zero_motion_tracks_first_frame(bool value);
  public:

  // optional float median_magnitude_bounds = 51 [default = 0];
  bool has_median_magnitude_bounds() const;
  private:
  bool _internal_has_median_magnitude_bounds() const;
  public:
  void clear_median_magnitude_bounds();
  float median_magnitude_bounds() const;
  void set_median_magnitude_bounds(float value);
  private:
  float _internal_median_magnitude_bounds() const;
  void _internal_set_median_magnitude_bounds(float value);
  public:

  // optional float frac_inlier_error_threshold = 52 [default = 0];
  bool has_frac_inlier_error_threshold() const;
  private:
  bool _internal_has_frac_inlier_error_threshold() const;
  public:
  void clear_frac_inlier_error_threshold();
  float frac_inlier_error_threshold() const;
  void set_frac_inlier_error_threshold(float value);
  private:
  float _internal_frac_inlier_error_threshold() const;
  void _internal_set_frac_inlier_error_threshold(float value);
  public:

  // optional bool gain_correction = 36 [default = false];
  bool has_gain_correction() const;
  private:
  bool _internal_has_gain_correction() const;
  public:
  void clear_gain_correction();
  bool gain_correction() const;
  void set_gain_correction(bool value);
  private:
  bool _internal_gain_correction() const;
  void _internal_set_gain_correction(bool value);
  public:

  // optional bool fast_gain_correction = 61 [default = false];
  bool has_fast_gain_correction() const;
  private:
  bool _internal_has_fast_gain_correction() const;
  public:
  void clear_fast_gain_correction();
  bool fast_gain_correction() const;
  void set_fast_gain_correction(bool value);
  private:
  bool _internal_fast_gain_correction() const;
  void _internal_set_fast_gain_correction(bool value);
  public:

  // optional bool gain_correction_bright_reference = 59 [default = false];
  bool has_gain_correction_bright_reference() const;
  private:
  bool _internal_has_gain_correction_bright_reference() const;
  public:
  void clear_gain_correction_bright_reference();
  bool gain_correction_bright_reference() const;
  void set_gain_correction_bright_reference(bool value);
  private:
  bool _internal_gain_correction_bright_reference() const;
  void _internal_set_gain_correction_bright_reference(bool value);
  public:

  // optional float gain_correction_triggering_ratio = 60 [default = 0];
  bool has_gain_correction_triggering_ratio() const;
  private:
  bool _internal_has_gain_correction_triggering_ratio() const;
  public:
  void clear_gain_correction_triggering_ratio();
  float gain_correction_triggering_ratio() const;
  void set_gain_correction_triggering_ratio(float value);
  private:
  float _internal_gain_correction_triggering_ratio() const;
  void _internal_set_gain_correction_triggering_ratio(float value);
  public:

  // optional float verify_long_feature_trigger_ratio = 64 [default = 0];
  bool has_verify_long_feature_trigger_ratio() const;
  private:
  bool _internal_has_verify_long_feature_trigger_ratio() const;
  public:
  void clear_verify_long_feature_trigger_ratio();
  float verify_long_feature_trigger_ratio() const;
  void set_verify_long_feature_trigger_ratio(float value);
  private:
  float _internal_verify_long_feature_trigger_ratio() const;
  void _internal_set_verify_long_feature_trigger_ratio(float value);
  public:

  // optional .mediapipe.RegionFlowComputationOptions.DescriptorExtractorType descriptor_extractor_type = 65 [default = ORB];
  bool has_descriptor_extractor_type() const;
  private:
  bool _internal_has_descriptor_extractor_type() const;
  public:
  void clear_descriptor_extractor_type();
  ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType descriptor_extractor_type() const;
  void set_descriptor_extractor_type(::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType value);
  private:
  ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType _internal_descriptor_extractor_type() const;
  void _internal_set_descriptor_extractor_type(::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType value);
  public:

  // optional int32 min_feature_inliers = 2 [default = 3];
  bool has_min_feature_inliers() const;
  private:
  bool _internal_has_min_feature_inliers() const;
  public:
  void clear_min_feature_inliers();
  ::PROTOBUF_NAMESPACE_ID::int32 min_feature_inliers() const;
  void set_min_feature_inliers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_feature_inliers() const;
  void _internal_set_min_feature_inliers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ransac_rounds_per_region = 3 [default = 15];
  bool has_ransac_rounds_per_region() const;
  private:
  bool _internal_has_ransac_rounds_per_region() const;
  public:
  void clear_ransac_rounds_per_region();
  ::PROTOBUF_NAMESPACE_ID::int32 ransac_rounds_per_region() const;
  void set_ransac_rounds_per_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ransac_rounds_per_region() const;
  void _internal_set_ransac_rounds_per_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float absolute_inlier_error_threshold = 4 [default = 2];
  bool has_absolute_inlier_error_threshold() const;
  private:
  bool _internal_has_absolute_inlier_error_threshold() const;
  public:
  void clear_absolute_inlier_error_threshold();
  float absolute_inlier_error_threshold() const;
  void set_absolute_inlier_error_threshold(float value);
  private:
  float _internal_absolute_inlier_error_threshold() const;
  void _internal_set_absolute_inlier_error_threshold(float value);
  public:

  // optional float fast_estimation_block_size = 6 [default = 0.25];
  bool has_fast_estimation_block_size() const;
  private:
  bool _internal_has_fast_estimation_block_size() const;
  public:
  void clear_fast_estimation_block_size();
  float fast_estimation_block_size() const;
  void set_fast_estimation_block_size(float value);
  private:
  float _internal_fast_estimation_block_size() const;
  void _internal_set_fast_estimation_block_size(float value);
  public:

  // optional .mediapipe.RegionFlowComputationOptions.DownsampleMode downsample_mode = 11 [default = DOWNSAMPLE_NONE];
  bool has_downsample_mode() const;
  private:
  bool _internal_has_downsample_mode() const;
  public:
  void clear_downsample_mode();
  ::mediapipe::RegionFlowComputationOptions_DownsampleMode downsample_mode() const;
  void set_downsample_mode(::mediapipe::RegionFlowComputationOptions_DownsampleMode value);
  private:
  ::mediapipe::RegionFlowComputationOptions_DownsampleMode _internal_downsample_mode() const;
  void _internal_set_downsample_mode(::mediapipe::RegionFlowComputationOptions_DownsampleMode value);
  public:

  // optional int32 downsampling_size = 12 [default = 256];
  bool has_downsampling_size() const;
  private:
  bool _internal_has_downsampling_size() const;
  public:
  void clear_downsampling_size();
  ::PROTOBUF_NAMESPACE_ID::int32 downsampling_size() const;
  void set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downsampling_size() const;
  void _internal_set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 min_feature_requirement = 13 [default = 20];
  bool has_min_feature_requirement() const;
  private:
  bool _internal_has_min_feature_requirement() const;
  public:
  void clear_min_feature_requirement();
  ::PROTOBUF_NAMESPACE_ID::int32 min_feature_requirement() const;
  void set_min_feature_requirement(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_feature_requirement() const;
  void _internal_set_min_feature_requirement(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float min_feature_cover = 14 [default = 0.15];
  bool has_min_feature_cover() const;
  private:
  bool _internal_has_min_feature_cover() const;
  public:
  void clear_min_feature_cover();
  float min_feature_cover() const;
  void set_min_feature_cover(float value);
  private:
  float _internal_min_feature_cover() const;
  void _internal_set_min_feature_cover(float value);
  public:

  // optional float downsample_factor = 18 [default = 2];
  bool has_downsample_factor() const;
  private:
  bool _internal_has_downsample_factor() const;
  public:
  void clear_downsample_factor();
  float downsample_factor() const;
  void set_downsample_factor(float value);
  private:
  float _internal_downsample_factor() const;
  void _internal_set_downsample_factor(float value);
  public:

  // optional int32 min_feature_cover_grid = 20 [default = 8];
  bool has_min_feature_cover_grid() const;
  private:
  bool _internal_has_min_feature_cover_grid() const;
  public:
  void clear_min_feature_cover_grid();
  ::PROTOBUF_NAMESPACE_ID::int32 min_feature_cover_grid() const;
  void set_min_feature_cover_grid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_feature_cover_grid() const;
  void _internal_set_min_feature_cover_grid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 patch_descriptor_radius = 21 [default = 3];
  bool has_patch_descriptor_radius() const;
  private:
  bool _internal_has_patch_descriptor_radius() const;
  public:
  void clear_patch_descriptor_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 patch_descriptor_radius() const;
  void set_patch_descriptor_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch_descriptor_radius() const;
  void _internal_set_patch_descriptor_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fast_estimation_overlap_grids = 22 [default = 3];
  bool has_fast_estimation_overlap_grids() const;
  private:
  bool _internal_has_fast_estimation_overlap_grids() const;
  public:
  void clear_fast_estimation_overlap_grids();
  ::PROTOBUF_NAMESPACE_ID::int32 fast_estimation_overlap_grids() const;
  void set_fast_estimation_overlap_grids(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fast_estimation_overlap_grids() const;
  void _internal_set_fast_estimation_overlap_grids(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float max_magnitude_threshold_ratio = 23 [default = 0.2];
  bool has_max_magnitude_threshold_ratio() const;
  private:
  bool _internal_has_max_magnitude_threshold_ratio() const;
  public:
  void clear_max_magnitude_threshold_ratio();
  float max_magnitude_threshold_ratio() const;
  void set_max_magnitude_threshold_ratio(float value);
  private:
  float _internal_max_magnitude_threshold_ratio() const;
  void _internal_set_max_magnitude_threshold_ratio(float value);
  public:

  // optional int32 fast_estimation_min_block_size = 25 [default = 100];
  bool has_fast_estimation_min_block_size() const;
  private:
  bool _internal_has_fast_estimation_min_block_size() const;
  public:
  void clear_fast_estimation_min_block_size();
  ::PROTOBUF_NAMESPACE_ID::int32 fast_estimation_min_block_size() const;
  void set_fast_estimation_min_block_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fast_estimation_min_block_size() const;
  void _internal_set_fast_estimation_min_block_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float corner_response_scale = 26 [default = 1500];
  bool has_corner_response_scale() const;
  private:
  bool _internal_has_corner_response_scale() const;
  public:
  void clear_corner_response_scale();
  float corner_response_scale() const;
  void set_corner_response_scale(float value);
  private:
  float _internal_corner_response_scale() const;
  void _internal_set_corner_response_scale(float value);
  public:

  // optional float verification_distance = 28 [default = 0.5];
  bool has_verification_distance() const;
  private:
  bool _internal_has_verification_distance() const;
  public:
  void clear_verification_distance();
  float verification_distance() const;
  void set_verification_distance(float value);
  private:
  float _internal_verification_distance() const;
  void _internal_set_verification_distance(float value);
  public:

  // optional float pre_blur_sigma = 33 [default = 0.8];
  bool has_pre_blur_sigma() const;
  private:
  bool _internal_has_pre_blur_sigma() const;
  public:
  void clear_pre_blur_sigma();
  float pre_blur_sigma() const;
  void set_pre_blur_sigma(float value);
  private:
  float _internal_pre_blur_sigma() const;
  void _internal_set_pre_blur_sigma(float value);
  public:

  // optional float frac_gain_feature_size = 37 [default = 0.3];
  bool has_frac_gain_feature_size() const;
  private:
  bool _internal_has_frac_gain_feature_size() const;
  public:
  void clear_frac_gain_feature_size();
  float frac_gain_feature_size() const;
  void set_frac_gain_feature_size(float value);
  private:
  float _internal_frac_gain_feature_size() const;
  void _internal_set_frac_gain_feature_size(float value);
  public:

  // optional float frac_gain_step = 38 [default = 0.1];
  bool has_frac_gain_step() const;
  private:
  bool _internal_has_frac_gain_step() const;
  public:
  void clear_frac_gain_step();
  float frac_gain_step() const;
  void set_frac_gain_step(float value);
  private:
  float _internal_frac_gain_step() const;
  void _internal_set_frac_gain_step(float value);
  public:

  // optional .mediapipe.RegionFlowComputationOptions.GainCorrectMode gain_correct_mode = 41 [default = GAIN_CORRECT_DEFAULT_USER];
  bool has_gain_correct_mode() const;
  private:
  bool _internal_has_gain_correct_mode() const;
  public:
  void clear_gain_correct_mode();
  ::mediapipe::RegionFlowComputationOptions_GainCorrectMode gain_correct_mode() const;
  void set_gain_correct_mode(::mediapipe::RegionFlowComputationOptions_GainCorrectMode value);
  private:
  ::mediapipe::RegionFlowComputationOptions_GainCorrectMode _internal_gain_correct_mode() const;
  void _internal_set_gain_correct_mode(::mediapipe::RegionFlowComputationOptions_GainCorrectMode value);
  public:

  // optional float relative_inlier_error_threshold = 44 [default = 0.1];
  bool has_relative_inlier_error_threshold() const;
  private:
  bool _internal_has_relative_inlier_error_threshold() const;
  public:
  void clear_relative_inlier_error_threshold();
  float relative_inlier_error_threshold() const;
  void set_relative_inlier_error_threshold(float value);
  private:
  float _internal_relative_inlier_error_threshold() const;
  void _internal_set_relative_inlier_error_threshold(float value);
  public:

  // optional int32 top_inlier_sets = 45 [default = 2];
  bool has_top_inlier_sets() const;
  private:
  bool _internal_has_top_inlier_sets() const;
  public:
  void clear_top_inlier_sets();
  ::PROTOBUF_NAMESPACE_ID::int32 top_inlier_sets() const;
  void set_top_inlier_sets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_inlier_sets() const;
  void _internal_set_top_inlier_sets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float relative_min_feature_inliers = 46 [default = 0.2];
  bool has_relative_min_feature_inliers() const;
  private:
  bool _internal_has_relative_min_feature_inliers() const;
  public:
  void clear_relative_min_feature_inliers();
  float relative_min_feature_inliers() const;
  void set_relative_min_feature_inliers(float value);
  private:
  float _internal_relative_min_feature_inliers() const;
  void _internal_set_relative_min_feature_inliers(float value);
  public:

  // optional float gain_correction_inlier_improvement_frac = 48 [default = 0.1];
  bool has_gain_correction_inlier_improvement_frac() const;
  private:
  bool _internal_has_gain_correction_inlier_improvement_frac() const;
  public:
  void clear_gain_correction_inlier_improvement_frac();
  float gain_correction_inlier_improvement_frac() const;
  void set_gain_correction_inlier_improvement_frac(float value);
  private:
  float _internal_gain_correction_inlier_improvement_frac() const;
  void _internal_set_gain_correction_inlier_improvement_frac(float value);
  public:

  // optional .mediapipe.RegionFlowComputationOptions.IrlsInitialization irls_initialization = 49 [default = INIT_CONSISTENCY];
  bool has_irls_initialization() const;
  private:
  bool _internal_has_irls_initialization() const;
  public:
  void clear_irls_initialization();
  ::mediapipe::RegionFlowComputationOptions_IrlsInitialization irls_initialization() const;
  void set_irls_initialization(::mediapipe::RegionFlowComputationOptions_IrlsInitialization value);
  private:
  ::mediapipe::RegionFlowComputationOptions_IrlsInitialization _internal_irls_initialization() const;
  void _internal_set_irls_initialization(::mediapipe::RegionFlowComputationOptions_IrlsInitialization value);
  public:

  // optional int32 distance_from_border = 50 [default = 3];
  bool has_distance_from_border() const;
  private:
  bool _internal_has_distance_from_border() const;
  public:
  void clear_distance_from_border();
  ::PROTOBUF_NAMESPACE_ID::int32 distance_from_border() const;
  void set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distance_from_border() const;
  void _internal_set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float long_feature_verification_threshold = 54 [default = 0.04];
  bool has_long_feature_verification_threshold() const;
  private:
  bool _internal_has_long_feature_verification_threshold() const;
  public:
  void clear_long_feature_verification_threshold();
  float long_feature_verification_threshold() const;
  void set_long_feature_verification_threshold(float value);
  private:
  float _internal_long_feature_verification_threshold() const;
  void _internal_set_long_feature_verification_threshold(float value);
  public:

  // optional bool verify_long_features = 53 [default = true];
  bool has_verify_long_features() const;
  private:
  bool _internal_has_verify_long_features() const;
  public:
  void clear_verify_long_features();
  bool verify_long_features() const;
  void set_verify_long_features(bool value);
  private:
  bool _internal_verify_long_features() const;
  void _internal_set_verify_long_features(bool value);
  public:

  // optional bool gain_correction_multiple_hypotheses = 47 [default = true];
  bool has_gain_correction_multiple_hypotheses() const;
  private:
  bool _internal_has_gain_correction_multiple_hypotheses() const;
  public:
  void clear_gain_correction_multiple_hypotheses();
  bool gain_correction_multiple_hypotheses() const;
  void set_gain_correction_multiple_hypotheses(bool value);
  private:
  bool _internal_gain_correction_multiple_hypotheses() const;
  void _internal_set_gain_correction_multiple_hypotheses(bool value);
  public:

  // optional bool compute_derivative_in_pyramid = 66 [default = true];
  bool has_compute_derivative_in_pyramid() const;
  private:
  bool _internal_has_compute_derivative_in_pyramid() const;
  public:
  void clear_compute_derivative_in_pyramid();
  bool compute_derivative_in_pyramid() const;
  void set_compute_derivative_in_pyramid(bool value);
  private:
  bool _internal_compute_derivative_in_pyramid() const;
  void _internal_set_compute_derivative_in_pyramid(bool value);
  public:

  // optional float max_long_feature_acceleration = 56 [default = 5];
  bool has_max_long_feature_acceleration() const;
  private:
  bool _internal_has_max_long_feature_acceleration() const;
  public:
  void clear_max_long_feature_acceleration();
  float max_long_feature_acceleration() const;
  void set_max_long_feature_acceleration(float value);
  private:
  float _internal_max_long_feature_acceleration() const;
  void _internal_set_max_long_feature_acceleration(float value);
  public:

  // optional .mediapipe.RegionFlowComputationOptions.ImageFormat image_format = 58 [default = FORMAT_RGB];
  bool has_image_format() const;
  private:
  bool _internal_has_image_format() const;
  public:
  void clear_image_format();
  ::mediapipe::RegionFlowComputationOptions_ImageFormat image_format() const;
  void set_image_format(::mediapipe::RegionFlowComputationOptions_ImageFormat value);
  private:
  ::mediapipe::RegionFlowComputationOptions_ImageFormat _internal_image_format() const;
  void _internal_set_image_format(::mediapipe::RegionFlowComputationOptions_ImageFormat value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RegionFlowComputationOptions)
  // @@protoc_insertion_point(class_scope:mediapipe.RegionFlowComputationOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::TrackingOptions* tracking_options_;
  ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* downsample_schedule_;
  ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* blur_score_options_;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* gain_bias_bounds_;
  ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* visual_consistency_options_;
  bool no_estimation_mode_;
  bool round_downsample_factor_;
  bool compute_blur_score_;
  bool verify_features_;
  bool verify_long_feature_acceleration_;
  bool histogram_equalization_;
  bool use_synthetic_zero_motion_tracks_all_frames_;
  bool use_synthetic_zero_motion_tracks_first_frame_;
  float median_magnitude_bounds_;
  float frac_inlier_error_threshold_;
  bool gain_correction_;
  bool fast_gain_correction_;
  bool gain_correction_bright_reference_;
  float gain_correction_triggering_ratio_;
  float verify_long_feature_trigger_ratio_;
  int descriptor_extractor_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_feature_inliers_;
  ::PROTOBUF_NAMESPACE_ID::int32 ransac_rounds_per_region_;
  float absolute_inlier_error_threshold_;
  float fast_estimation_block_size_;
  int downsample_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 downsampling_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_feature_requirement_;
  float min_feature_cover_;
  float downsample_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_feature_cover_grid_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_descriptor_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 fast_estimation_overlap_grids_;
  float max_magnitude_threshold_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 fast_estimation_min_block_size_;
  float corner_response_scale_;
  float verification_distance_;
  float pre_blur_sigma_;
  float frac_gain_feature_size_;
  float frac_gain_step_;
  int gain_correct_mode_;
  float relative_inlier_error_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_inlier_sets_;
  float relative_min_feature_inliers_;
  float gain_correction_inlier_improvement_frac_;
  int irls_initialization_;
  ::PROTOBUF_NAMESPACE_ID::int32 distance_from_border_;
  float long_feature_verification_threshold_;
  bool verify_long_features_;
  bool gain_correction_multiple_hypotheses_;
  bool compute_derivative_in_pyramid_;
  float max_long_feature_acceleration_;
  int image_format_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackingOptions_MinEigValExtractionSettings

// optional float feature_quality_level = 1 [default = 0.01];
inline bool TrackingOptions_MinEigValExtractionSettings::_internal_has_feature_quality_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackingOptions_MinEigValExtractionSettings::has_feature_quality_level() const {
  return _internal_has_feature_quality_level();
}
inline void TrackingOptions_MinEigValExtractionSettings::clear_feature_quality_level() {
  feature_quality_level_ = 0.01f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TrackingOptions_MinEigValExtractionSettings::_internal_feature_quality_level() const {
  return feature_quality_level_;
}
inline float TrackingOptions_MinEigValExtractionSettings::feature_quality_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.MinEigValExtractionSettings.feature_quality_level)
  return _internal_feature_quality_level();
}
inline void TrackingOptions_MinEigValExtractionSettings::_internal_set_feature_quality_level(float value) {
  _has_bits_[0] |= 0x00000001u;
  feature_quality_level_ = value;
}
inline void TrackingOptions_MinEigValExtractionSettings::set_feature_quality_level(float value) {
  _internal_set_feature_quality_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.MinEigValExtractionSettings.feature_quality_level)
}

// optional float adaptive_lowest_quality_level = 2 [default = 8e-05];
inline bool TrackingOptions_MinEigValExtractionSettings::_internal_has_adaptive_lowest_quality_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackingOptions_MinEigValExtractionSettings::has_adaptive_lowest_quality_level() const {
  return _internal_has_adaptive_lowest_quality_level();
}
inline void TrackingOptions_MinEigValExtractionSettings::clear_adaptive_lowest_quality_level() {
  adaptive_lowest_quality_level_ = 8e-05f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TrackingOptions_MinEigValExtractionSettings::_internal_adaptive_lowest_quality_level() const {
  return adaptive_lowest_quality_level_;
}
inline float TrackingOptions_MinEigValExtractionSettings::adaptive_lowest_quality_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.MinEigValExtractionSettings.adaptive_lowest_quality_level)
  return _internal_adaptive_lowest_quality_level();
}
inline void TrackingOptions_MinEigValExtractionSettings::_internal_set_adaptive_lowest_quality_level(float value) {
  _has_bits_[0] |= 0x00000002u;
  adaptive_lowest_quality_level_ = value;
}
inline void TrackingOptions_MinEigValExtractionSettings::set_adaptive_lowest_quality_level(float value) {
  _internal_set_adaptive_lowest_quality_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.MinEigValExtractionSettings.adaptive_lowest_quality_level)
}

// -------------------------------------------------------------------

// TrackingOptions_HarrisExtractionSettings

// optional float feature_quality_level = 1 [default = 0.00025];
inline bool TrackingOptions_HarrisExtractionSettings::_internal_has_feature_quality_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackingOptions_HarrisExtractionSettings::has_feature_quality_level() const {
  return _internal_has_feature_quality_level();
}
inline void TrackingOptions_HarrisExtractionSettings::clear_feature_quality_level() {
  feature_quality_level_ = 0.00025f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TrackingOptions_HarrisExtractionSettings::_internal_feature_quality_level() const {
  return feature_quality_level_;
}
inline float TrackingOptions_HarrisExtractionSettings::feature_quality_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.HarrisExtractionSettings.feature_quality_level)
  return _internal_feature_quality_level();
}
inline void TrackingOptions_HarrisExtractionSettings::_internal_set_feature_quality_level(float value) {
  _has_bits_[0] |= 0x00000001u;
  feature_quality_level_ = value;
}
inline void TrackingOptions_HarrisExtractionSettings::set_feature_quality_level(float value) {
  _internal_set_feature_quality_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.HarrisExtractionSettings.feature_quality_level)
}

// -------------------------------------------------------------------

// TrackingOptions_FastExtractionSettings

// optional int32 threshold = 1 [default = 10];
inline bool TrackingOptions_FastExtractionSettings::_internal_has_threshold() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackingOptions_FastExtractionSettings::has_threshold() const {
  return _internal_has_threshold();
}
inline void TrackingOptions_FastExtractionSettings::clear_threshold() {
  threshold_ = 10;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions_FastExtractionSettings::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions_FastExtractionSettings::threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.FastExtractionSettings.threshold)
  return _internal_threshold();
}
inline void TrackingOptions_FastExtractionSettings::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  threshold_ = value;
}
inline void TrackingOptions_FastExtractionSettings::set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.FastExtractionSettings.threshold)
}

// -------------------------------------------------------------------

// TrackingOptions

// optional .mediapipe.TrackingOptions.FlowDirection internal_tracking_direction = 19 [default = BACKWARD];
inline bool TrackingOptions::_internal_has_internal_tracking_direction() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TrackingOptions::has_internal_tracking_direction() const {
  return _internal_has_internal_tracking_direction();
}
inline void TrackingOptions::clear_internal_tracking_direction() {
  internal_tracking_direction_ = 2;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::mediapipe::TrackingOptions_FlowDirection TrackingOptions::_internal_internal_tracking_direction() const {
  return static_cast< ::mediapipe::TrackingOptions_FlowDirection >(internal_tracking_direction_);
}
inline ::mediapipe::TrackingOptions_FlowDirection TrackingOptions::internal_tracking_direction() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.internal_tracking_direction)
  return _internal_internal_tracking_direction();
}
inline void TrackingOptions::_internal_set_internal_tracking_direction(::mediapipe::TrackingOptions_FlowDirection value) {
  assert(::mediapipe::TrackingOptions_FlowDirection_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  internal_tracking_direction_ = value;
}
inline void TrackingOptions::set_internal_tracking_direction(::mediapipe::TrackingOptions_FlowDirection value) {
  _internal_set_internal_tracking_direction(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.internal_tracking_direction)
}

// optional .mediapipe.TrackingOptions.FlowDirection output_flow_direction = 20 [default = BACKWARD];
inline bool TrackingOptions::_internal_has_output_flow_direction() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TrackingOptions::has_output_flow_direction() const {
  return _internal_has_output_flow_direction();
}
inline void TrackingOptions::clear_output_flow_direction() {
  output_flow_direction_ = 2;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::mediapipe::TrackingOptions_FlowDirection TrackingOptions::_internal_output_flow_direction() const {
  return static_cast< ::mediapipe::TrackingOptions_FlowDirection >(output_flow_direction_);
}
inline ::mediapipe::TrackingOptions_FlowDirection TrackingOptions::output_flow_direction() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.output_flow_direction)
  return _internal_output_flow_direction();
}
inline void TrackingOptions::_internal_set_output_flow_direction(::mediapipe::TrackingOptions_FlowDirection value) {
  assert(::mediapipe::TrackingOptions_FlowDirection_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  output_flow_direction_ = value;
}
inline void TrackingOptions::set_output_flow_direction(::mediapipe::TrackingOptions_FlowDirection value) {
  _internal_set_output_flow_direction(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.output_flow_direction)
}

// optional .mediapipe.TrackingOptions.TrackingPolicy tracking_policy = 25 [default = POLICY_SINGLE_FRAME];
inline bool TrackingOptions::_internal_has_tracking_policy() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TrackingOptions::has_tracking_policy() const {
  return _internal_has_tracking_policy();
}
inline void TrackingOptions::clear_tracking_policy() {
  tracking_policy_ = 1;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::mediapipe::TrackingOptions_TrackingPolicy TrackingOptions::_internal_tracking_policy() const {
  return static_cast< ::mediapipe::TrackingOptions_TrackingPolicy >(tracking_policy_);
}
inline ::mediapipe::TrackingOptions_TrackingPolicy TrackingOptions::tracking_policy() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.tracking_policy)
  return _internal_tracking_policy();
}
inline void TrackingOptions::_internal_set_tracking_policy(::mediapipe::TrackingOptions_TrackingPolicy value) {
  assert(::mediapipe::TrackingOptions_TrackingPolicy_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  tracking_policy_ = value;
}
inline void TrackingOptions::set_tracking_policy(::mediapipe::TrackingOptions_TrackingPolicy value) {
  _internal_set_tracking_policy(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.tracking_policy)
}

// optional int32 multi_frames_to_track = 1 [default = 1];
inline bool TrackingOptions::_internal_has_multi_frames_to_track() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrackingOptions::has_multi_frames_to_track() const {
  return _internal_has_multi_frames_to_track();
}
inline void TrackingOptions::clear_multi_frames_to_track() {
  multi_frames_to_track_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_multi_frames_to_track() const {
  return multi_frames_to_track_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::multi_frames_to_track() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.multi_frames_to_track)
  return _internal_multi_frames_to_track();
}
inline void TrackingOptions::_internal_set_multi_frames_to_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  multi_frames_to_track_ = value;
}
inline void TrackingOptions::set_multi_frames_to_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multi_frames_to_track(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.multi_frames_to_track)
}

// optional int32 long_tracks_max_frames = 26 [default = 300];
inline bool TrackingOptions::_internal_has_long_tracks_max_frames() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TrackingOptions::has_long_tracks_max_frames() const {
  return _internal_has_long_tracks_max_frames();
}
inline void TrackingOptions::clear_long_tracks_max_frames() {
  long_tracks_max_frames_ = 300;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_long_tracks_max_frames() const {
  return long_tracks_max_frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::long_tracks_max_frames() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.long_tracks_max_frames)
  return _internal_long_tracks_max_frames();
}
inline void TrackingOptions::_internal_set_long_tracks_max_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  long_tracks_max_frames_ = value;
}
inline void TrackingOptions::set_long_tracks_max_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_long_tracks_max_frames(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.long_tracks_max_frames)
}

// optional int32 max_features = 2 [default = 2000];
inline bool TrackingOptions::_internal_has_max_features() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrackingOptions::has_max_features() const {
  return _internal_has_max_features();
}
inline void TrackingOptions::clear_max_features() {
  max_features_ = 2000;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_max_features() const {
  return max_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::max_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.max_features)
  return _internal_max_features();
}
inline void TrackingOptions::_internal_set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  max_features_ = value;
}
inline void TrackingOptions::set_max_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.max_features)
}

// optional .mediapipe.TrackingOptions.CornerExtractionMethod corner_extraction_method = 27 [default = EXTRACTION_MIN_EIG_VAL];
inline bool TrackingOptions::_internal_has_corner_extraction_method() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TrackingOptions::has_corner_extraction_method() const {
  return _internal_has_corner_extraction_method();
}
inline void TrackingOptions::clear_corner_extraction_method() {
  corner_extraction_method_ = 2;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::mediapipe::TrackingOptions_CornerExtractionMethod TrackingOptions::_internal_corner_extraction_method() const {
  return static_cast< ::mediapipe::TrackingOptions_CornerExtractionMethod >(corner_extraction_method_);
}
inline ::mediapipe::TrackingOptions_CornerExtractionMethod TrackingOptions::corner_extraction_method() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.corner_extraction_method)
  return _internal_corner_extraction_method();
}
inline void TrackingOptions::_internal_set_corner_extraction_method(::mediapipe::TrackingOptions_CornerExtractionMethod value) {
  assert(::mediapipe::TrackingOptions_CornerExtractionMethod_IsValid(value));
  _has_bits_[0] |= 0x10000000u;
  corner_extraction_method_ = value;
}
inline void TrackingOptions::set_corner_extraction_method(::mediapipe::TrackingOptions_CornerExtractionMethod value) {
  _internal_set_corner_extraction_method(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.corner_extraction_method)
}

// optional .mediapipe.TrackingOptions.MinEigValExtractionSettings min_eig_val_settings = 28;
inline bool TrackingOptions::_internal_has_min_eig_val_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || min_eig_val_settings_ != nullptr);
  return value;
}
inline bool TrackingOptions::has_min_eig_val_settings() const {
  return _internal_has_min_eig_val_settings();
}
inline void TrackingOptions::clear_min_eig_val_settings() {
  if (min_eig_val_settings_ != nullptr) min_eig_val_settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::TrackingOptions_MinEigValExtractionSettings& TrackingOptions::_internal_min_eig_val_settings() const {
  const ::mediapipe::TrackingOptions_MinEigValExtractionSettings* p = min_eig_val_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingOptions_MinEigValExtractionSettings&>(
      ::mediapipe::_TrackingOptions_MinEigValExtractionSettings_default_instance_);
}
inline const ::mediapipe::TrackingOptions_MinEigValExtractionSettings& TrackingOptions::min_eig_val_settings() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.min_eig_val_settings)
  return _internal_min_eig_val_settings();
}
inline void TrackingOptions::unsafe_arena_set_allocated_min_eig_val_settings(
    ::mediapipe::TrackingOptions_MinEigValExtractionSettings* min_eig_val_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_eig_val_settings_);
  }
  min_eig_val_settings_ = min_eig_val_settings;
  if (min_eig_val_settings) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingOptions.min_eig_val_settings)
}
inline ::mediapipe::TrackingOptions_MinEigValExtractionSettings* TrackingOptions::release_min_eig_val_settings() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingOptions_MinEigValExtractionSettings* temp = min_eig_val_settings_;
  min_eig_val_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingOptions_MinEigValExtractionSettings* TrackingOptions::unsafe_arena_release_min_eig_val_settings() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingOptions.min_eig_val_settings)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingOptions_MinEigValExtractionSettings* temp = min_eig_val_settings_;
  min_eig_val_settings_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingOptions_MinEigValExtractionSettings* TrackingOptions::_internal_mutable_min_eig_val_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (min_eig_val_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingOptions_MinEigValExtractionSettings>(GetArena());
    min_eig_val_settings_ = p;
  }
  return min_eig_val_settings_;
}
inline ::mediapipe::TrackingOptions_MinEigValExtractionSettings* TrackingOptions::mutable_min_eig_val_settings() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingOptions.min_eig_val_settings)
  return _internal_mutable_min_eig_val_settings();
}
inline void TrackingOptions::set_allocated_min_eig_val_settings(::mediapipe::TrackingOptions_MinEigValExtractionSettings* min_eig_val_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_eig_val_settings_;
  }
  if (min_eig_val_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min_eig_val_settings);
    if (message_arena != submessage_arena) {
      min_eig_val_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_eig_val_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_eig_val_settings_ = min_eig_val_settings;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingOptions.min_eig_val_settings)
}

// optional .mediapipe.TrackingOptions.HarrisExtractionSettings harris_settings = 29;
inline bool TrackingOptions::_internal_has_harris_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || harris_settings_ != nullptr);
  return value;
}
inline bool TrackingOptions::has_harris_settings() const {
  return _internal_has_harris_settings();
}
inline void TrackingOptions::clear_harris_settings() {
  if (harris_settings_ != nullptr) harris_settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::TrackingOptions_HarrisExtractionSettings& TrackingOptions::_internal_harris_settings() const {
  const ::mediapipe::TrackingOptions_HarrisExtractionSettings* p = harris_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingOptions_HarrisExtractionSettings&>(
      ::mediapipe::_TrackingOptions_HarrisExtractionSettings_default_instance_);
}
inline const ::mediapipe::TrackingOptions_HarrisExtractionSettings& TrackingOptions::harris_settings() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.harris_settings)
  return _internal_harris_settings();
}
inline void TrackingOptions::unsafe_arena_set_allocated_harris_settings(
    ::mediapipe::TrackingOptions_HarrisExtractionSettings* harris_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(harris_settings_);
  }
  harris_settings_ = harris_settings;
  if (harris_settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingOptions.harris_settings)
}
inline ::mediapipe::TrackingOptions_HarrisExtractionSettings* TrackingOptions::release_harris_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackingOptions_HarrisExtractionSettings* temp = harris_settings_;
  harris_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingOptions_HarrisExtractionSettings* TrackingOptions::unsafe_arena_release_harris_settings() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingOptions.harris_settings)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackingOptions_HarrisExtractionSettings* temp = harris_settings_;
  harris_settings_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingOptions_HarrisExtractionSettings* TrackingOptions::_internal_mutable_harris_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (harris_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingOptions_HarrisExtractionSettings>(GetArena());
    harris_settings_ = p;
  }
  return harris_settings_;
}
inline ::mediapipe::TrackingOptions_HarrisExtractionSettings* TrackingOptions::mutable_harris_settings() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingOptions.harris_settings)
  return _internal_mutable_harris_settings();
}
inline void TrackingOptions::set_allocated_harris_settings(::mediapipe::TrackingOptions_HarrisExtractionSettings* harris_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete harris_settings_;
  }
  if (harris_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(harris_settings);
    if (message_arena != submessage_arena) {
      harris_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, harris_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  harris_settings_ = harris_settings;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingOptions.harris_settings)
}

// optional .mediapipe.TrackingOptions.FastExtractionSettings fast_settings = 31;
inline bool TrackingOptions::_internal_has_fast_settings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || fast_settings_ != nullptr);
  return value;
}
inline bool TrackingOptions::has_fast_settings() const {
  return _internal_has_fast_settings();
}
inline void TrackingOptions::clear_fast_settings() {
  if (fast_settings_ != nullptr) fast_settings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::TrackingOptions_FastExtractionSettings& TrackingOptions::_internal_fast_settings() const {
  const ::mediapipe::TrackingOptions_FastExtractionSettings* p = fast_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingOptions_FastExtractionSettings&>(
      ::mediapipe::_TrackingOptions_FastExtractionSettings_default_instance_);
}
inline const ::mediapipe::TrackingOptions_FastExtractionSettings& TrackingOptions::fast_settings() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.fast_settings)
  return _internal_fast_settings();
}
inline void TrackingOptions::unsafe_arena_set_allocated_fast_settings(
    ::mediapipe::TrackingOptions_FastExtractionSettings* fast_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_settings_);
  }
  fast_settings_ = fast_settings;
  if (fast_settings) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackingOptions.fast_settings)
}
inline ::mediapipe::TrackingOptions_FastExtractionSettings* TrackingOptions::release_fast_settings() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::TrackingOptions_FastExtractionSettings* temp = fast_settings_;
  fast_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingOptions_FastExtractionSettings* TrackingOptions::unsafe_arena_release_fast_settings() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackingOptions.fast_settings)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::TrackingOptions_FastExtractionSettings* temp = fast_settings_;
  fast_settings_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingOptions_FastExtractionSettings* TrackingOptions::_internal_mutable_fast_settings() {
  _has_bits_[0] |= 0x00000004u;
  if (fast_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingOptions_FastExtractionSettings>(GetArena());
    fast_settings_ = p;
  }
  return fast_settings_;
}
inline ::mediapipe::TrackingOptions_FastExtractionSettings* TrackingOptions::mutable_fast_settings() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackingOptions.fast_settings)
  return _internal_mutable_fast_settings();
}
inline void TrackingOptions::set_allocated_fast_settings(::mediapipe::TrackingOptions_FastExtractionSettings* fast_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fast_settings_;
  }
  if (fast_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fast_settings);
    if (message_arena != submessage_arena) {
      fast_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fast_settings_ = fast_settings;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackingOptions.fast_settings)
}

// optional int32 tracking_window_size = 4 [default = 10];
inline bool TrackingOptions::_internal_has_tracking_window_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrackingOptions::has_tracking_window_size() const {
  return _internal_has_tracking_window_size();
}
inline void TrackingOptions::clear_tracking_window_size() {
  tracking_window_size_ = 10;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_tracking_window_size() const {
  return tracking_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::tracking_window_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.tracking_window_size)
  return _internal_tracking_window_size();
}
inline void TrackingOptions::_internal_set_tracking_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  tracking_window_size_ = value;
}
inline void TrackingOptions::set_tracking_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracking_window_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.tracking_window_size)
}

// optional int32 tracking_iterations = 5 [default = 10];
inline bool TrackingOptions::_internal_has_tracking_iterations() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrackingOptions::has_tracking_iterations() const {
  return _internal_has_tracking_iterations();
}
inline void TrackingOptions::clear_tracking_iterations() {
  tracking_iterations_ = 10;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_tracking_iterations() const {
  return tracking_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::tracking_iterations() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.tracking_iterations)
  return _internal_tracking_iterations();
}
inline void TrackingOptions::_internal_set_tracking_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  tracking_iterations_ = value;
}
inline void TrackingOptions::set_tracking_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracking_iterations(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.tracking_iterations)
}

// optional float fractional_tracking_distance = 6 [default = 0.15];
inline bool TrackingOptions::_internal_has_fractional_tracking_distance() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TrackingOptions::has_fractional_tracking_distance() const {
  return _internal_has_fractional_tracking_distance();
}
inline void TrackingOptions::clear_fractional_tracking_distance() {
  fractional_tracking_distance_ = 0.15f;
  _has_bits_[0] &= ~0x00002000u;
}
inline float TrackingOptions::_internal_fractional_tracking_distance() const {
  return fractional_tracking_distance_;
}
inline float TrackingOptions::fractional_tracking_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.fractional_tracking_distance)
  return _internal_fractional_tracking_distance();
}
inline void TrackingOptions::_internal_set_fractional_tracking_distance(float value) {
  _has_bits_[0] |= 0x00002000u;
  fractional_tracking_distance_ = value;
}
inline void TrackingOptions::set_fractional_tracking_distance(float value) {
  _internal_set_fractional_tracking_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.fractional_tracking_distance)
}

// optional bool adaptive_tracking_distance = 24 [default = false];
inline bool TrackingOptions::_internal_has_adaptive_tracking_distance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackingOptions::has_adaptive_tracking_distance() const {
  return _internal_has_adaptive_tracking_distance();
}
inline void TrackingOptions::clear_adaptive_tracking_distance() {
  adaptive_tracking_distance_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrackingOptions::_internal_adaptive_tracking_distance() const {
  return adaptive_tracking_distance_;
}
inline bool TrackingOptions::adaptive_tracking_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.adaptive_tracking_distance)
  return _internal_adaptive_tracking_distance();
}
inline void TrackingOptions::_internal_set_adaptive_tracking_distance(bool value) {
  _has_bits_[0] |= 0x00000010u;
  adaptive_tracking_distance_ = value;
}
inline void TrackingOptions::set_adaptive_tracking_distance(bool value) {
  _internal_set_adaptive_tracking_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.adaptive_tracking_distance)
}

// optional float min_feature_distance = 7 [default = 7];
inline bool TrackingOptions::_internal_has_min_feature_distance() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TrackingOptions::has_min_feature_distance() const {
  return _internal_has_min_feature_distance();
}
inline void TrackingOptions::clear_min_feature_distance() {
  min_feature_distance_ = 7;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TrackingOptions::_internal_min_feature_distance() const {
  return min_feature_distance_;
}
inline float TrackingOptions::min_feature_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.min_feature_distance)
  return _internal_min_feature_distance();
}
inline void TrackingOptions::_internal_set_min_feature_distance(float value) {
  _has_bits_[0] |= 0x00004000u;
  min_feature_distance_ = value;
}
inline void TrackingOptions::set_min_feature_distance(float value) {
  _internal_set_min_feature_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.min_feature_distance)
}

// optional bool distance_downscale_sqrt = 21 [default = true];
inline bool TrackingOptions::_internal_has_distance_downscale_sqrt() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TrackingOptions::has_distance_downscale_sqrt() const {
  return _internal_has_distance_downscale_sqrt();
}
inline void TrackingOptions::clear_distance_downscale_sqrt() {
  distance_downscale_sqrt_ = true;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool TrackingOptions::_internal_distance_downscale_sqrt() const {
  return distance_downscale_sqrt_;
}
inline bool TrackingOptions::distance_downscale_sqrt() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.distance_downscale_sqrt)
  return _internal_distance_downscale_sqrt();
}
inline void TrackingOptions::_internal_set_distance_downscale_sqrt(bool value) {
  _has_bits_[0] |= 0x00200000u;
  distance_downscale_sqrt_ = value;
}
inline void TrackingOptions::set_distance_downscale_sqrt(bool value) {
  _internal_set_distance_downscale_sqrt(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.distance_downscale_sqrt)
}

// optional bool adaptive_good_features_to_track = 8 [default = true];
inline bool TrackingOptions::_internal_has_adaptive_good_features_to_track() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TrackingOptions::has_adaptive_good_features_to_track() const {
  return _internal_has_adaptive_good_features_to_track();
}
inline void TrackingOptions::clear_adaptive_good_features_to_track() {
  adaptive_good_features_to_track_ = true;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool TrackingOptions::_internal_adaptive_good_features_to_track() const {
  return adaptive_good_features_to_track_;
}
inline bool TrackingOptions::adaptive_good_features_to_track() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.adaptive_good_features_to_track)
  return _internal_adaptive_good_features_to_track();
}
inline void TrackingOptions::_internal_set_adaptive_good_features_to_track(bool value) {
  _has_bits_[0] |= 0x00400000u;
  adaptive_good_features_to_track_ = value;
}
inline void TrackingOptions::set_adaptive_good_features_to_track(bool value) {
  _internal_set_adaptive_good_features_to_track(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.adaptive_good_features_to_track)
}

// optional float adaptive_features_block_size = 9 [default = 0.26];
inline bool TrackingOptions::_internal_has_adaptive_features_block_size() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TrackingOptions::has_adaptive_features_block_size() const {
  return _internal_has_adaptive_features_block_size();
}
inline void TrackingOptions::clear_adaptive_features_block_size() {
  adaptive_features_block_size_ = 0.26f;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TrackingOptions::_internal_adaptive_features_block_size() const {
  return adaptive_features_block_size_;
}
inline float TrackingOptions::adaptive_features_block_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.adaptive_features_block_size)
  return _internal_adaptive_features_block_size();
}
inline void TrackingOptions::_internal_set_adaptive_features_block_size(float value) {
  _has_bits_[0] |= 0x00008000u;
  adaptive_features_block_size_ = value;
}
inline void TrackingOptions::set_adaptive_features_block_size(float value) {
  _internal_set_adaptive_features_block_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.adaptive_features_block_size)
}

// optional int32 adaptive_features_levels = 10 [default = 1];
inline bool TrackingOptions::_internal_has_adaptive_features_levels() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TrackingOptions::has_adaptive_features_levels() const {
  return _internal_has_adaptive_features_levels();
}
inline void TrackingOptions::clear_adaptive_features_levels() {
  adaptive_features_levels_ = 1;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_adaptive_features_levels() const {
  return adaptive_features_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::adaptive_features_levels() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.adaptive_features_levels)
  return _internal_adaptive_features_levels();
}
inline void TrackingOptions::_internal_set_adaptive_features_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  adaptive_features_levels_ = value;
}
inline void TrackingOptions::set_adaptive_features_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adaptive_features_levels(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.adaptive_features_levels)
}

// optional int32 adaptive_extraction_levels = 22 [default = 1];
inline bool TrackingOptions::_internal_has_adaptive_extraction_levels() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TrackingOptions::has_adaptive_extraction_levels() const {
  return _internal_has_adaptive_extraction_levels();
}
inline void TrackingOptions::clear_adaptive_extraction_levels() {
  adaptive_extraction_levels_ = 1;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_adaptive_extraction_levels() const {
  return adaptive_extraction_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::adaptive_extraction_levels() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.adaptive_extraction_levels)
  return _internal_adaptive_extraction_levels();
}
inline void TrackingOptions::_internal_set_adaptive_extraction_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  adaptive_extraction_levels_ = value;
}
inline void TrackingOptions::set_adaptive_extraction_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adaptive_extraction_levels(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.adaptive_extraction_levels)
}

// optional int32 adaptive_extraction_levels_lowest_size = 23 [default = 0];
inline bool TrackingOptions::_internal_has_adaptive_extraction_levels_lowest_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackingOptions::has_adaptive_extraction_levels_lowest_size() const {
  return _internal_has_adaptive_extraction_levels_lowest_size();
}
inline void TrackingOptions::clear_adaptive_extraction_levels_lowest_size() {
  adaptive_extraction_levels_lowest_size_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_adaptive_extraction_levels_lowest_size() const {
  return adaptive_extraction_levels_lowest_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::adaptive_extraction_levels_lowest_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.adaptive_extraction_levels_lowest_size)
  return _internal_adaptive_extraction_levels_lowest_size();
}
inline void TrackingOptions::_internal_set_adaptive_extraction_levels_lowest_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  adaptive_extraction_levels_lowest_size_ = value;
}
inline void TrackingOptions::set_adaptive_extraction_levels_lowest_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adaptive_extraction_levels_lowest_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.adaptive_extraction_levels_lowest_size)
}

// optional float synthetic_zero_motion_grid_step = 13 [default = 0.04];
inline bool TrackingOptions::_internal_has_synthetic_zero_motion_grid_step() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TrackingOptions::has_synthetic_zero_motion_grid_step() const {
  return _internal_has_synthetic_zero_motion_grid_step();
}
inline void TrackingOptions::clear_synthetic_zero_motion_grid_step() {
  synthetic_zero_motion_grid_step_ = 0.04f;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TrackingOptions::_internal_synthetic_zero_motion_grid_step() const {
  return synthetic_zero_motion_grid_step_;
}
inline float TrackingOptions::synthetic_zero_motion_grid_step() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.synthetic_zero_motion_grid_step)
  return _internal_synthetic_zero_motion_grid_step();
}
inline void TrackingOptions::_internal_set_synthetic_zero_motion_grid_step(float value) {
  _has_bits_[0] |= 0x00020000u;
  synthetic_zero_motion_grid_step_ = value;
}
inline void TrackingOptions::set_synthetic_zero_motion_grid_step(float value) {
  _internal_set_synthetic_zero_motion_grid_step(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.synthetic_zero_motion_grid_step)
}

// optional bool wide_baseline_matching = 14 [default = false];
inline bool TrackingOptions::_internal_has_wide_baseline_matching() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackingOptions::has_wide_baseline_matching() const {
  return _internal_has_wide_baseline_matching();
}
inline void TrackingOptions::clear_wide_baseline_matching() {
  wide_baseline_matching_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrackingOptions::_internal_wide_baseline_matching() const {
  return wide_baseline_matching_;
}
inline bool TrackingOptions::wide_baseline_matching() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.wide_baseline_matching)
  return _internal_wide_baseline_matching();
}
inline void TrackingOptions::_internal_set_wide_baseline_matching(bool value) {
  _has_bits_[0] |= 0x00000020u;
  wide_baseline_matching_ = value;
}
inline void TrackingOptions::set_wide_baseline_matching(bool value) {
  _internal_set_wide_baseline_matching(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.wide_baseline_matching)
}

// optional float ratio_test_threshold = 15 [default = 0.8];
inline bool TrackingOptions::_internal_has_ratio_test_threshold() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TrackingOptions::has_ratio_test_threshold() const {
  return _internal_has_ratio_test_threshold();
}
inline void TrackingOptions::clear_ratio_test_threshold() {
  ratio_test_threshold_ = 0.8f;
  _has_bits_[0] &= ~0x00040000u;
}
inline float TrackingOptions::_internal_ratio_test_threshold() const {
  return ratio_test_threshold_;
}
inline float TrackingOptions::ratio_test_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.ratio_test_threshold)
  return _internal_ratio_test_threshold();
}
inline void TrackingOptions::_internal_set_ratio_test_threshold(float value) {
  _has_bits_[0] |= 0x00040000u;
  ratio_test_threshold_ = value;
}
inline void TrackingOptions::set_ratio_test_threshold(float value) {
  _internal_set_ratio_test_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.ratio_test_threshold)
}

// optional bool refine_wide_baseline_matches = 16 [default = false];
inline bool TrackingOptions::_internal_has_refine_wide_baseline_matches() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackingOptions::has_refine_wide_baseline_matches() const {
  return _internal_has_refine_wide_baseline_matches();
}
inline void TrackingOptions::clear_refine_wide_baseline_matches() {
  refine_wide_baseline_matches_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TrackingOptions::_internal_refine_wide_baseline_matches() const {
  return refine_wide_baseline_matches_;
}
inline bool TrackingOptions::refine_wide_baseline_matches() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.refine_wide_baseline_matches)
  return _internal_refine_wide_baseline_matches();
}
inline void TrackingOptions::_internal_set_refine_wide_baseline_matches(bool value) {
  _has_bits_[0] |= 0x00000040u;
  refine_wide_baseline_matches_ = value;
}
inline void TrackingOptions::set_refine_wide_baseline_matches(bool value) {
  _internal_set_refine_wide_baseline_matches(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.refine_wide_baseline_matches)
}

// optional int32 reuse_features_max_frame_distance = 17 [default = 0];
inline bool TrackingOptions::_internal_has_reuse_features_max_frame_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackingOptions::has_reuse_features_max_frame_distance() const {
  return _internal_has_reuse_features_max_frame_distance();
}
inline void TrackingOptions::clear_reuse_features_max_frame_distance() {
  reuse_features_max_frame_distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::_internal_reuse_features_max_frame_distance() const {
  return reuse_features_max_frame_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingOptions::reuse_features_max_frame_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.reuse_features_max_frame_distance)
  return _internal_reuse_features_max_frame_distance();
}
inline void TrackingOptions::_internal_set_reuse_features_max_frame_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  reuse_features_max_frame_distance_ = value;
}
inline void TrackingOptions::set_reuse_features_max_frame_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reuse_features_max_frame_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.reuse_features_max_frame_distance)
}

// optional float reuse_features_min_survived_frac = 18 [default = 0.7];
inline bool TrackingOptions::_internal_has_reuse_features_min_survived_frac() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TrackingOptions::has_reuse_features_min_survived_frac() const {
  return _internal_has_reuse_features_min_survived_frac();
}
inline void TrackingOptions::clear_reuse_features_min_survived_frac() {
  reuse_features_min_survived_frac_ = 0.7f;
  _has_bits_[0] &= ~0x00080000u;
}
inline float TrackingOptions::_internal_reuse_features_min_survived_frac() const {
  return reuse_features_min_survived_frac_;
}
inline float TrackingOptions::reuse_features_min_survived_frac() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.reuse_features_min_survived_frac)
  return _internal_reuse_features_min_survived_frac();
}
inline void TrackingOptions::_internal_set_reuse_features_min_survived_frac(float value) {
  _has_bits_[0] |= 0x00080000u;
  reuse_features_min_survived_frac_ = value;
}
inline void TrackingOptions::set_reuse_features_min_survived_frac(float value) {
  _internal_set_reuse_features_min_survived_frac(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.reuse_features_min_survived_frac)
}

// optional bool use_cv_tracking_algorithm = 30 [default = true];
inline bool TrackingOptions::_internal_has_use_cv_tracking_algorithm() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TrackingOptions::has_use_cv_tracking_algorithm() const {
  return _internal_has_use_cv_tracking_algorithm();
}
inline void TrackingOptions::clear_use_cv_tracking_algorithm() {
  use_cv_tracking_algorithm_ = true;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool TrackingOptions::_internal_use_cv_tracking_algorithm() const {
  return use_cv_tracking_algorithm_;
}
inline bool TrackingOptions::use_cv_tracking_algorithm() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.use_cv_tracking_algorithm)
  return _internal_use_cv_tracking_algorithm();
}
inline void TrackingOptions::_internal_set_use_cv_tracking_algorithm(bool value) {
  _has_bits_[0] |= 0x00800000u;
  use_cv_tracking_algorithm_ = value;
}
inline void TrackingOptions::set_use_cv_tracking_algorithm(bool value) {
  _internal_set_use_cv_tracking_algorithm(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.use_cv_tracking_algorithm)
}

// optional .mediapipe.TrackingOptions.KltTrackerImplementation klt_tracker_implementation = 32 [default = KLT_OPENCV];
inline bool TrackingOptions::_internal_has_klt_tracker_implementation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrackingOptions::has_klt_tracker_implementation() const {
  return _internal_has_klt_tracker_implementation();
}
inline void TrackingOptions::clear_klt_tracker_implementation() {
  klt_tracker_implementation_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::mediapipe::TrackingOptions_KltTrackerImplementation TrackingOptions::_internal_klt_tracker_implementation() const {
  return static_cast< ::mediapipe::TrackingOptions_KltTrackerImplementation >(klt_tracker_implementation_);
}
inline ::mediapipe::TrackingOptions_KltTrackerImplementation TrackingOptions::klt_tracker_implementation() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackingOptions.klt_tracker_implementation)
  return _internal_klt_tracker_implementation();
}
inline void TrackingOptions::_internal_set_klt_tracker_implementation(::mediapipe::TrackingOptions_KltTrackerImplementation value) {
  assert(::mediapipe::TrackingOptions_KltTrackerImplementation_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  klt_tracker_implementation_ = value;
}
inline void TrackingOptions::set_klt_tracker_implementation(::mediapipe::TrackingOptions_KltTrackerImplementation value) {
  _internal_set_klt_tracker_implementation(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackingOptions.klt_tracker_implementation)
}

// -------------------------------------------------------------------

// RegionFlowComputationOptions_DownSampleSchedule

// optional float downsample_factor_360p = 1 [default = 1];
inline bool RegionFlowComputationOptions_DownSampleSchedule::_internal_has_downsample_factor_360p() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_DownSampleSchedule::has_downsample_factor_360p() const {
  return _internal_has_downsample_factor_360p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::clear_downsample_factor_360p() {
  downsample_factor_360p_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::_internal_downsample_factor_360p() const {
  return downsample_factor_360p_;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::downsample_factor_360p() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_360p)
  return _internal_downsample_factor_360p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::_internal_set_downsample_factor_360p(float value) {
  _has_bits_[0] |= 0x00000001u;
  downsample_factor_360p_ = value;
}
inline void RegionFlowComputationOptions_DownSampleSchedule::set_downsample_factor_360p(float value) {
  _internal_set_downsample_factor_360p(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_360p)
}

// optional float downsample_factor_480p = 2 [default = 1];
inline bool RegionFlowComputationOptions_DownSampleSchedule::_internal_has_downsample_factor_480p() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_DownSampleSchedule::has_downsample_factor_480p() const {
  return _internal_has_downsample_factor_480p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::clear_downsample_factor_480p() {
  downsample_factor_480p_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::_internal_downsample_factor_480p() const {
  return downsample_factor_480p_;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::downsample_factor_480p() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_480p)
  return _internal_downsample_factor_480p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::_internal_set_downsample_factor_480p(float value) {
  _has_bits_[0] |= 0x00000002u;
  downsample_factor_480p_ = value;
}
inline void RegionFlowComputationOptions_DownSampleSchedule::set_downsample_factor_480p(float value) {
  _internal_set_downsample_factor_480p(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_480p)
}

// optional float downsample_factor_720p = 3 [default = 2];
inline bool RegionFlowComputationOptions_DownSampleSchedule::_internal_has_downsample_factor_720p() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_DownSampleSchedule::has_downsample_factor_720p() const {
  return _internal_has_downsample_factor_720p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::clear_downsample_factor_720p() {
  downsample_factor_720p_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::_internal_downsample_factor_720p() const {
  return downsample_factor_720p_;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::downsample_factor_720p() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_720p)
  return _internal_downsample_factor_720p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::_internal_set_downsample_factor_720p(float value) {
  _has_bits_[0] |= 0x00000004u;
  downsample_factor_720p_ = value;
}
inline void RegionFlowComputationOptions_DownSampleSchedule::set_downsample_factor_720p(float value) {
  _internal_set_downsample_factor_720p(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_720p)
}

// optional float downsample_factor_1080p = 4 [default = 2];
inline bool RegionFlowComputationOptions_DownSampleSchedule::_internal_has_downsample_factor_1080p() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_DownSampleSchedule::has_downsample_factor_1080p() const {
  return _internal_has_downsample_factor_1080p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::clear_downsample_factor_1080p() {
  downsample_factor_1080p_ = 2;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::_internal_downsample_factor_1080p() const {
  return downsample_factor_1080p_;
}
inline float RegionFlowComputationOptions_DownSampleSchedule::downsample_factor_1080p() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_1080p)
  return _internal_downsample_factor_1080p();
}
inline void RegionFlowComputationOptions_DownSampleSchedule::_internal_set_downsample_factor_1080p(float value) {
  _has_bits_[0] |= 0x00000008u;
  downsample_factor_1080p_ = value;
}
inline void RegionFlowComputationOptions_DownSampleSchedule::set_downsample_factor_1080p(float value) {
  _internal_set_downsample_factor_1080p(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.DownSampleSchedule.downsample_factor_1080p)
}

// -------------------------------------------------------------------

// RegionFlowComputationOptions_BlurScoreOptions

// optional int32 box_filter_diam = 1 [default = 3];
inline bool RegionFlowComputationOptions_BlurScoreOptions::_internal_has_box_filter_diam() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_BlurScoreOptions::has_box_filter_diam() const {
  return _internal_has_box_filter_diam();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::clear_box_filter_diam() {
  box_filter_diam_ = 3;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions_BlurScoreOptions::_internal_box_filter_diam() const {
  return box_filter_diam_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions_BlurScoreOptions::box_filter_diam() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.box_filter_diam)
  return _internal_box_filter_diam();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::_internal_set_box_filter_diam(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  box_filter_diam_ = value;
}
inline void RegionFlowComputationOptions_BlurScoreOptions::set_box_filter_diam(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_box_filter_diam(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.box_filter_diam)
}

// optional float relative_cornerness_threshold = 2 [default = 0.03];
inline bool RegionFlowComputationOptions_BlurScoreOptions::_internal_has_relative_cornerness_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_BlurScoreOptions::has_relative_cornerness_threshold() const {
  return _internal_has_relative_cornerness_threshold();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::clear_relative_cornerness_threshold() {
  relative_cornerness_threshold_ = 0.03f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RegionFlowComputationOptions_BlurScoreOptions::_internal_relative_cornerness_threshold() const {
  return relative_cornerness_threshold_;
}
inline float RegionFlowComputationOptions_BlurScoreOptions::relative_cornerness_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.relative_cornerness_threshold)
  return _internal_relative_cornerness_threshold();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::_internal_set_relative_cornerness_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  relative_cornerness_threshold_ = value;
}
inline void RegionFlowComputationOptions_BlurScoreOptions::set_relative_cornerness_threshold(float value) {
  _internal_set_relative_cornerness_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.relative_cornerness_threshold)
}

// optional float absolute_cornerness_threshold = 3 [default = 0.0001];
inline bool RegionFlowComputationOptions_BlurScoreOptions::_internal_has_absolute_cornerness_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_BlurScoreOptions::has_absolute_cornerness_threshold() const {
  return _internal_has_absolute_cornerness_threshold();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::clear_absolute_cornerness_threshold() {
  absolute_cornerness_threshold_ = 0.0001f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RegionFlowComputationOptions_BlurScoreOptions::_internal_absolute_cornerness_threshold() const {
  return absolute_cornerness_threshold_;
}
inline float RegionFlowComputationOptions_BlurScoreOptions::absolute_cornerness_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.absolute_cornerness_threshold)
  return _internal_absolute_cornerness_threshold();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::_internal_set_absolute_cornerness_threshold(float value) {
  _has_bits_[0] |= 0x00000004u;
  absolute_cornerness_threshold_ = value;
}
inline void RegionFlowComputationOptions_BlurScoreOptions::set_absolute_cornerness_threshold(float value) {
  _internal_set_absolute_cornerness_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.absolute_cornerness_threshold)
}

// optional float median_percentile = 5 [default = 0.85];
inline bool RegionFlowComputationOptions_BlurScoreOptions::_internal_has_median_percentile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_BlurScoreOptions::has_median_percentile() const {
  return _internal_has_median_percentile();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::clear_median_percentile() {
  median_percentile_ = 0.85f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RegionFlowComputationOptions_BlurScoreOptions::_internal_median_percentile() const {
  return median_percentile_;
}
inline float RegionFlowComputationOptions_BlurScoreOptions::median_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.median_percentile)
  return _internal_median_percentile();
}
inline void RegionFlowComputationOptions_BlurScoreOptions::_internal_set_median_percentile(float value) {
  _has_bits_[0] |= 0x00000008u;
  median_percentile_ = value;
}
inline void RegionFlowComputationOptions_BlurScoreOptions::set_median_percentile(float value) {
  _internal_set_median_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.BlurScoreOptions.median_percentile)
}

// -------------------------------------------------------------------

// RegionFlowComputationOptions_VisualConsistencyOptions

// optional bool compute_consistency = 1 [default = true];
inline bool RegionFlowComputationOptions_VisualConsistencyOptions::_internal_has_compute_consistency() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_VisualConsistencyOptions::has_compute_consistency() const {
  return _internal_has_compute_consistency();
}
inline void RegionFlowComputationOptions_VisualConsistencyOptions::clear_compute_consistency() {
  compute_consistency_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RegionFlowComputationOptions_VisualConsistencyOptions::_internal_compute_consistency() const {
  return compute_consistency_;
}
inline bool RegionFlowComputationOptions_VisualConsistencyOptions::compute_consistency() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions.compute_consistency)
  return _internal_compute_consistency();
}
inline void RegionFlowComputationOptions_VisualConsistencyOptions::_internal_set_compute_consistency(bool value) {
  _has_bits_[0] |= 0x00000001u;
  compute_consistency_ = value;
}
inline void RegionFlowComputationOptions_VisualConsistencyOptions::set_compute_consistency(bool value) {
  _internal_set_compute_consistency(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions.compute_consistency)
}

// optional int32 tiny_image_dimension = 2 [default = 20];
inline bool RegionFlowComputationOptions_VisualConsistencyOptions::_internal_has_tiny_image_dimension() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions_VisualConsistencyOptions::has_tiny_image_dimension() const {
  return _internal_has_tiny_image_dimension();
}
inline void RegionFlowComputationOptions_VisualConsistencyOptions::clear_tiny_image_dimension() {
  tiny_image_dimension_ = 20;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions_VisualConsistencyOptions::_internal_tiny_image_dimension() const {
  return tiny_image_dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions_VisualConsistencyOptions::tiny_image_dimension() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions.tiny_image_dimension)
  return _internal_tiny_image_dimension();
}
inline void RegionFlowComputationOptions_VisualConsistencyOptions::_internal_set_tiny_image_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tiny_image_dimension_ = value;
}
inline void RegionFlowComputationOptions_VisualConsistencyOptions::set_tiny_image_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tiny_image_dimension(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions.tiny_image_dimension)
}

// -------------------------------------------------------------------

// RegionFlowComputationOptions

// optional .mediapipe.TrackingOptions tracking_options = 1;
inline bool RegionFlowComputationOptions::_internal_has_tracking_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tracking_options_ != nullptr);
  return value;
}
inline bool RegionFlowComputationOptions::has_tracking_options() const {
  return _internal_has_tracking_options();
}
inline void RegionFlowComputationOptions::clear_tracking_options() {
  if (tracking_options_ != nullptr) tracking_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::TrackingOptions& RegionFlowComputationOptions::_internal_tracking_options() const {
  const ::mediapipe::TrackingOptions* p = tracking_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackingOptions&>(
      ::mediapipe::_TrackingOptions_default_instance_);
}
inline const ::mediapipe::TrackingOptions& RegionFlowComputationOptions::tracking_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.tracking_options)
  return _internal_tracking_options();
}
inline void RegionFlowComputationOptions::unsafe_arena_set_allocated_tracking_options(
    ::mediapipe::TrackingOptions* tracking_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracking_options_);
  }
  tracking_options_ = tracking_options;
  if (tracking_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowComputationOptions.tracking_options)
}
inline ::mediapipe::TrackingOptions* RegionFlowComputationOptions::release_tracking_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingOptions* temp = tracking_options_;
  tracking_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackingOptions* RegionFlowComputationOptions::unsafe_arena_release_tracking_options() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowComputationOptions.tracking_options)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackingOptions* temp = tracking_options_;
  tracking_options_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackingOptions* RegionFlowComputationOptions::_internal_mutable_tracking_options() {
  _has_bits_[0] |= 0x00000001u;
  if (tracking_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackingOptions>(GetArena());
    tracking_options_ = p;
  }
  return tracking_options_;
}
inline ::mediapipe::TrackingOptions* RegionFlowComputationOptions::mutable_tracking_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowComputationOptions.tracking_options)
  return _internal_mutable_tracking_options();
}
inline void RegionFlowComputationOptions::set_allocated_tracking_options(::mediapipe::TrackingOptions* tracking_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracking_options_;
  }
  if (tracking_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracking_options);
    if (message_arena != submessage_arena) {
      tracking_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracking_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tracking_options_ = tracking_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowComputationOptions.tracking_options)
}

// optional int32 min_feature_inliers = 2 [default = 3];
inline bool RegionFlowComputationOptions::_internal_has_min_feature_inliers() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_min_feature_inliers() const {
  return _internal_has_min_feature_inliers();
}
inline void RegionFlowComputationOptions::clear_min_feature_inliers() {
  min_feature_inliers_ = 3;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_min_feature_inliers() const {
  return min_feature_inliers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::min_feature_inliers() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.min_feature_inliers)
  return _internal_min_feature_inliers();
}
inline void RegionFlowComputationOptions::_internal_set_min_feature_inliers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  min_feature_inliers_ = value;
}
inline void RegionFlowComputationOptions::set_min_feature_inliers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_feature_inliers(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.min_feature_inliers)
}

// optional float relative_min_feature_inliers = 46 [default = 0.2];
inline bool RegionFlowComputationOptions::_internal_has_relative_min_feature_inliers() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_relative_min_feature_inliers() const {
  return _internal_has_relative_min_feature_inliers();
}
inline void RegionFlowComputationOptions::clear_relative_min_feature_inliers() {
  relative_min_feature_inliers_ = 0.2f;
  _has_bits_[1] &= ~0x00000800u;
}
inline float RegionFlowComputationOptions::_internal_relative_min_feature_inliers() const {
  return relative_min_feature_inliers_;
}
inline float RegionFlowComputationOptions::relative_min_feature_inliers() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.relative_min_feature_inliers)
  return _internal_relative_min_feature_inliers();
}
inline void RegionFlowComputationOptions::_internal_set_relative_min_feature_inliers(float value) {
  _has_bits_[1] |= 0x00000800u;
  relative_min_feature_inliers_ = value;
}
inline void RegionFlowComputationOptions::set_relative_min_feature_inliers(float value) {
  _internal_set_relative_min_feature_inliers(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.relative_min_feature_inliers)
}

// optional float pre_blur_sigma = 33 [default = 0.8];
inline bool RegionFlowComputationOptions::_internal_has_pre_blur_sigma() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_pre_blur_sigma() const {
  return _internal_has_pre_blur_sigma();
}
inline void RegionFlowComputationOptions::clear_pre_blur_sigma() {
  pre_blur_sigma_ = 0.8f;
  _has_bits_[1] &= ~0x00000020u;
}
inline float RegionFlowComputationOptions::_internal_pre_blur_sigma() const {
  return pre_blur_sigma_;
}
inline float RegionFlowComputationOptions::pre_blur_sigma() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.pre_blur_sigma)
  return _internal_pre_blur_sigma();
}
inline void RegionFlowComputationOptions::_internal_set_pre_blur_sigma(float value) {
  _has_bits_[1] |= 0x00000020u;
  pre_blur_sigma_ = value;
}
inline void RegionFlowComputationOptions::set_pre_blur_sigma(float value) {
  _internal_set_pre_blur_sigma(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.pre_blur_sigma)
}

// optional int32 ransac_rounds_per_region = 3 [default = 15];
inline bool RegionFlowComputationOptions::_internal_has_ransac_rounds_per_region() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_ransac_rounds_per_region() const {
  return _internal_has_ransac_rounds_per_region();
}
inline void RegionFlowComputationOptions::clear_ransac_rounds_per_region() {
  ransac_rounds_per_region_ = 15;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_ransac_rounds_per_region() const {
  return ransac_rounds_per_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::ransac_rounds_per_region() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.ransac_rounds_per_region)
  return _internal_ransac_rounds_per_region();
}
inline void RegionFlowComputationOptions::_internal_set_ransac_rounds_per_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  ransac_rounds_per_region_ = value;
}
inline void RegionFlowComputationOptions::set_ransac_rounds_per_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ransac_rounds_per_region(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.ransac_rounds_per_region)
}

// optional float absolute_inlier_error_threshold = 4 [default = 2];
inline bool RegionFlowComputationOptions::_internal_has_absolute_inlier_error_threshold() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_absolute_inlier_error_threshold() const {
  return _internal_has_absolute_inlier_error_threshold();
}
inline void RegionFlowComputationOptions::clear_absolute_inlier_error_threshold() {
  absolute_inlier_error_threshold_ = 2;
  _has_bits_[0] &= ~0x00800000u;
}
inline float RegionFlowComputationOptions::_internal_absolute_inlier_error_threshold() const {
  return absolute_inlier_error_threshold_;
}
inline float RegionFlowComputationOptions::absolute_inlier_error_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.absolute_inlier_error_threshold)
  return _internal_absolute_inlier_error_threshold();
}
inline void RegionFlowComputationOptions::_internal_set_absolute_inlier_error_threshold(float value) {
  _has_bits_[0] |= 0x00800000u;
  absolute_inlier_error_threshold_ = value;
}
inline void RegionFlowComputationOptions::set_absolute_inlier_error_threshold(float value) {
  _internal_set_absolute_inlier_error_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.absolute_inlier_error_threshold)
}

// optional float frac_inlier_error_threshold = 52 [default = 0];
inline bool RegionFlowComputationOptions::_internal_has_frac_inlier_error_threshold() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_frac_inlier_error_threshold() const {
  return _internal_has_frac_inlier_error_threshold();
}
inline void RegionFlowComputationOptions::clear_frac_inlier_error_threshold() {
  frac_inlier_error_threshold_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float RegionFlowComputationOptions::_internal_frac_inlier_error_threshold() const {
  return frac_inlier_error_threshold_;
}
inline float RegionFlowComputationOptions::frac_inlier_error_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.frac_inlier_error_threshold)
  return _internal_frac_inlier_error_threshold();
}
inline void RegionFlowComputationOptions::_internal_set_frac_inlier_error_threshold(float value) {
  _has_bits_[0] |= 0x00004000u;
  frac_inlier_error_threshold_ = value;
}
inline void RegionFlowComputationOptions::set_frac_inlier_error_threshold(float value) {
  _internal_set_frac_inlier_error_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.frac_inlier_error_threshold)
}

// optional float relative_inlier_error_threshold = 44 [default = 0.1];
inline bool RegionFlowComputationOptions::_internal_has_relative_inlier_error_threshold() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_relative_inlier_error_threshold() const {
  return _internal_has_relative_inlier_error_threshold();
}
inline void RegionFlowComputationOptions::clear_relative_inlier_error_threshold() {
  relative_inlier_error_threshold_ = 0.1f;
  _has_bits_[1] &= ~0x00000200u;
}
inline float RegionFlowComputationOptions::_internal_relative_inlier_error_threshold() const {
  return relative_inlier_error_threshold_;
}
inline float RegionFlowComputationOptions::relative_inlier_error_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.relative_inlier_error_threshold)
  return _internal_relative_inlier_error_threshold();
}
inline void RegionFlowComputationOptions::_internal_set_relative_inlier_error_threshold(float value) {
  _has_bits_[1] |= 0x00000200u;
  relative_inlier_error_threshold_ = value;
}
inline void RegionFlowComputationOptions::set_relative_inlier_error_threshold(float value) {
  _internal_set_relative_inlier_error_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.relative_inlier_error_threshold)
}

// optional int32 top_inlier_sets = 45 [default = 2];
inline bool RegionFlowComputationOptions::_internal_has_top_inlier_sets() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_top_inlier_sets() const {
  return _internal_has_top_inlier_sets();
}
inline void RegionFlowComputationOptions::clear_top_inlier_sets() {
  top_inlier_sets_ = 2;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_top_inlier_sets() const {
  return top_inlier_sets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::top_inlier_sets() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.top_inlier_sets)
  return _internal_top_inlier_sets();
}
inline void RegionFlowComputationOptions::_internal_set_top_inlier_sets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  top_inlier_sets_ = value;
}
inline void RegionFlowComputationOptions::set_top_inlier_sets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_inlier_sets(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.top_inlier_sets)
}

// optional bool no_estimation_mode = 40 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_no_estimation_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_no_estimation_mode() const {
  return _internal_has_no_estimation_mode();
}
inline void RegionFlowComputationOptions::clear_no_estimation_mode() {
  no_estimation_mode_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RegionFlowComputationOptions::_internal_no_estimation_mode() const {
  return no_estimation_mode_;
}
inline bool RegionFlowComputationOptions::no_estimation_mode() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.no_estimation_mode)
  return _internal_no_estimation_mode();
}
inline void RegionFlowComputationOptions::_internal_set_no_estimation_mode(bool value) {
  _has_bits_[0] |= 0x00000020u;
  no_estimation_mode_ = value;
}
inline void RegionFlowComputationOptions::set_no_estimation_mode(bool value) {
  _internal_set_no_estimation_mode(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.no_estimation_mode)
}

// optional float fast_estimation_block_size = 6 [default = 0.25];
inline bool RegionFlowComputationOptions::_internal_has_fast_estimation_block_size() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_fast_estimation_block_size() const {
  return _internal_has_fast_estimation_block_size();
}
inline void RegionFlowComputationOptions::clear_fast_estimation_block_size() {
  fast_estimation_block_size_ = 0.25f;
  _has_bits_[0] &= ~0x01000000u;
}
inline float RegionFlowComputationOptions::_internal_fast_estimation_block_size() const {
  return fast_estimation_block_size_;
}
inline float RegionFlowComputationOptions::fast_estimation_block_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.fast_estimation_block_size)
  return _internal_fast_estimation_block_size();
}
inline void RegionFlowComputationOptions::_internal_set_fast_estimation_block_size(float value) {
  _has_bits_[0] |= 0x01000000u;
  fast_estimation_block_size_ = value;
}
inline void RegionFlowComputationOptions::set_fast_estimation_block_size(float value) {
  _internal_set_fast_estimation_block_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.fast_estimation_block_size)
}

// optional int32 fast_estimation_min_block_size = 25 [default = 100];
inline bool RegionFlowComputationOptions::_internal_has_fast_estimation_min_block_size() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_fast_estimation_min_block_size() const {
  return _internal_has_fast_estimation_min_block_size();
}
inline void RegionFlowComputationOptions::clear_fast_estimation_min_block_size() {
  fast_estimation_min_block_size_ = 100;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_fast_estimation_min_block_size() const {
  return fast_estimation_min_block_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::fast_estimation_min_block_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.fast_estimation_min_block_size)
  return _internal_fast_estimation_min_block_size();
}
inline void RegionFlowComputationOptions::_internal_set_fast_estimation_min_block_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  fast_estimation_min_block_size_ = value;
}
inline void RegionFlowComputationOptions::set_fast_estimation_min_block_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fast_estimation_min_block_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.fast_estimation_min_block_size)
}

// optional int32 fast_estimation_overlap_grids = 22 [default = 3];
inline bool RegionFlowComputationOptions::_internal_has_fast_estimation_overlap_grids() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_fast_estimation_overlap_grids() const {
  return _internal_has_fast_estimation_overlap_grids();
}
inline void RegionFlowComputationOptions::clear_fast_estimation_overlap_grids() {
  fast_estimation_overlap_grids_ = 3;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_fast_estimation_overlap_grids() const {
  return fast_estimation_overlap_grids_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::fast_estimation_overlap_grids() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.fast_estimation_overlap_grids)
  return _internal_fast_estimation_overlap_grids();
}
inline void RegionFlowComputationOptions::_internal_set_fast_estimation_overlap_grids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  fast_estimation_overlap_grids_ = value;
}
inline void RegionFlowComputationOptions::set_fast_estimation_overlap_grids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fast_estimation_overlap_grids(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.fast_estimation_overlap_grids)
}

// optional float max_magnitude_threshold_ratio = 23 [default = 0.2];
inline bool RegionFlowComputationOptions::_internal_has_max_magnitude_threshold_ratio() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_max_magnitude_threshold_ratio() const {
  return _internal_has_max_magnitude_threshold_ratio();
}
inline void RegionFlowComputationOptions::clear_max_magnitude_threshold_ratio() {
  max_magnitude_threshold_ratio_ = 0.2f;
  _has_bits_[1] &= ~0x00000002u;
}
inline float RegionFlowComputationOptions::_internal_max_magnitude_threshold_ratio() const {
  return max_magnitude_threshold_ratio_;
}
inline float RegionFlowComputationOptions::max_magnitude_threshold_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.max_magnitude_threshold_ratio)
  return _internal_max_magnitude_threshold_ratio();
}
inline void RegionFlowComputationOptions::_internal_set_max_magnitude_threshold_ratio(float value) {
  _has_bits_[1] |= 0x00000002u;
  max_magnitude_threshold_ratio_ = value;
}
inline void RegionFlowComputationOptions::set_max_magnitude_threshold_ratio(float value) {
  _internal_set_max_magnitude_threshold_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.max_magnitude_threshold_ratio)
}

// optional float median_magnitude_bounds = 51 [default = 0];
inline bool RegionFlowComputationOptions::_internal_has_median_magnitude_bounds() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_median_magnitude_bounds() const {
  return _internal_has_median_magnitude_bounds();
}
inline void RegionFlowComputationOptions::clear_median_magnitude_bounds() {
  median_magnitude_bounds_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float RegionFlowComputationOptions::_internal_median_magnitude_bounds() const {
  return median_magnitude_bounds_;
}
inline float RegionFlowComputationOptions::median_magnitude_bounds() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.median_magnitude_bounds)
  return _internal_median_magnitude_bounds();
}
inline void RegionFlowComputationOptions::_internal_set_median_magnitude_bounds(float value) {
  _has_bits_[0] |= 0x00002000u;
  median_magnitude_bounds_ = value;
}
inline void RegionFlowComputationOptions::set_median_magnitude_bounds(float value) {
  _internal_set_median_magnitude_bounds(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.median_magnitude_bounds)
}

// optional .mediapipe.RegionFlowComputationOptions.IrlsInitialization irls_initialization = 49 [default = INIT_CONSISTENCY];
inline bool RegionFlowComputationOptions::_internal_has_irls_initialization() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_irls_initialization() const {
  return _internal_has_irls_initialization();
}
inline void RegionFlowComputationOptions::clear_irls_initialization() {
  irls_initialization_ = 2;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::mediapipe::RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions::_internal_irls_initialization() const {
  return static_cast< ::mediapipe::RegionFlowComputationOptions_IrlsInitialization >(irls_initialization_);
}
inline ::mediapipe::RegionFlowComputationOptions_IrlsInitialization RegionFlowComputationOptions::irls_initialization() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.irls_initialization)
  return _internal_irls_initialization();
}
inline void RegionFlowComputationOptions::_internal_set_irls_initialization(::mediapipe::RegionFlowComputationOptions_IrlsInitialization value) {
  assert(::mediapipe::RegionFlowComputationOptions_IrlsInitialization_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  irls_initialization_ = value;
}
inline void RegionFlowComputationOptions::set_irls_initialization(::mediapipe::RegionFlowComputationOptions_IrlsInitialization value) {
  _internal_set_irls_initialization(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.irls_initialization)
}

// optional .mediapipe.RegionFlowComputationOptions.DownsampleMode downsample_mode = 11 [default = DOWNSAMPLE_NONE];
inline bool RegionFlowComputationOptions::_internal_has_downsample_mode() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_downsample_mode() const {
  return _internal_has_downsample_mode();
}
inline void RegionFlowComputationOptions::clear_downsample_mode() {
  downsample_mode_ = 1;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::mediapipe::RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::_internal_downsample_mode() const {
  return static_cast< ::mediapipe::RegionFlowComputationOptions_DownsampleMode >(downsample_mode_);
}
inline ::mediapipe::RegionFlowComputationOptions_DownsampleMode RegionFlowComputationOptions::downsample_mode() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.downsample_mode)
  return _internal_downsample_mode();
}
inline void RegionFlowComputationOptions::_internal_set_downsample_mode(::mediapipe::RegionFlowComputationOptions_DownsampleMode value) {
  assert(::mediapipe::RegionFlowComputationOptions_DownsampleMode_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  downsample_mode_ = value;
}
inline void RegionFlowComputationOptions::set_downsample_mode(::mediapipe::RegionFlowComputationOptions_DownsampleMode value) {
  _internal_set_downsample_mode(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.downsample_mode)
}

// optional int32 downsampling_size = 12 [default = 256];
inline bool RegionFlowComputationOptions::_internal_has_downsampling_size() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_downsampling_size() const {
  return _internal_has_downsampling_size();
}
inline void RegionFlowComputationOptions::clear_downsampling_size() {
  downsampling_size_ = 256;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_downsampling_size() const {
  return downsampling_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::downsampling_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.downsampling_size)
  return _internal_downsampling_size();
}
inline void RegionFlowComputationOptions::_internal_set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  downsampling_size_ = value;
}
inline void RegionFlowComputationOptions::set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downsampling_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.downsampling_size)
}

// optional float downsample_factor = 18 [default = 2];
inline bool RegionFlowComputationOptions::_internal_has_downsample_factor() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_downsample_factor() const {
  return _internal_has_downsample_factor();
}
inline void RegionFlowComputationOptions::clear_downsample_factor() {
  downsample_factor_ = 2;
  _has_bits_[0] &= ~0x20000000u;
}
inline float RegionFlowComputationOptions::_internal_downsample_factor() const {
  return downsample_factor_;
}
inline float RegionFlowComputationOptions::downsample_factor() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.downsample_factor)
  return _internal_downsample_factor();
}
inline void RegionFlowComputationOptions::_internal_set_downsample_factor(float value) {
  _has_bits_[0] |= 0x20000000u;
  downsample_factor_ = value;
}
inline void RegionFlowComputationOptions::set_downsample_factor(float value) {
  _internal_set_downsample_factor(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.downsample_factor)
}

// optional bool round_downsample_factor = 62 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_round_downsample_factor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_round_downsample_factor() const {
  return _internal_has_round_downsample_factor();
}
inline void RegionFlowComputationOptions::clear_round_downsample_factor() {
  round_downsample_factor_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RegionFlowComputationOptions::_internal_round_downsample_factor() const {
  return round_downsample_factor_;
}
inline bool RegionFlowComputationOptions::round_downsample_factor() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.round_downsample_factor)
  return _internal_round_downsample_factor();
}
inline void RegionFlowComputationOptions::_internal_set_round_downsample_factor(bool value) {
  _has_bits_[0] |= 0x00000040u;
  round_downsample_factor_ = value;
}
inline void RegionFlowComputationOptions::set_round_downsample_factor(bool value) {
  _internal_set_round_downsample_factor(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.round_downsample_factor)
}

// optional .mediapipe.RegionFlowComputationOptions.DownSampleSchedule downsample_schedule = 19;
inline bool RegionFlowComputationOptions::_internal_has_downsample_schedule() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || downsample_schedule_ != nullptr);
  return value;
}
inline bool RegionFlowComputationOptions::has_downsample_schedule() const {
  return _internal_has_downsample_schedule();
}
inline void RegionFlowComputationOptions::clear_downsample_schedule() {
  if (downsample_schedule_ != nullptr) downsample_schedule_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule& RegionFlowComputationOptions::_internal_downsample_schedule() const {
  const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* p = downsample_schedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule&>(
      ::mediapipe::_RegionFlowComputationOptions_DownSampleSchedule_default_instance_);
}
inline const ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule& RegionFlowComputationOptions::downsample_schedule() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.downsample_schedule)
  return _internal_downsample_schedule();
}
inline void RegionFlowComputationOptions::unsafe_arena_set_allocated_downsample_schedule(
    ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* downsample_schedule) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(downsample_schedule_);
  }
  downsample_schedule_ = downsample_schedule;
  if (downsample_schedule) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowComputationOptions.downsample_schedule)
}
inline ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* RegionFlowComputationOptions::release_downsample_schedule() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* temp = downsample_schedule_;
  downsample_schedule_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* RegionFlowComputationOptions::unsafe_arena_release_downsample_schedule() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowComputationOptions.downsample_schedule)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* temp = downsample_schedule_;
  downsample_schedule_ = nullptr;
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* RegionFlowComputationOptions::_internal_mutable_downsample_schedule() {
  _has_bits_[0] |= 0x00000002u;
  if (downsample_schedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions_DownSampleSchedule>(GetArena());
    downsample_schedule_ = p;
  }
  return downsample_schedule_;
}
inline ::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* RegionFlowComputationOptions::mutable_downsample_schedule() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowComputationOptions.downsample_schedule)
  return _internal_mutable_downsample_schedule();
}
inline void RegionFlowComputationOptions::set_allocated_downsample_schedule(::mediapipe::RegionFlowComputationOptions_DownSampleSchedule* downsample_schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete downsample_schedule_;
  }
  if (downsample_schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(downsample_schedule);
    if (message_arena != submessage_arena) {
      downsample_schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, downsample_schedule, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  downsample_schedule_ = downsample_schedule;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowComputationOptions.downsample_schedule)
}

// optional int32 min_feature_requirement = 13 [default = 20];
inline bool RegionFlowComputationOptions::_internal_has_min_feature_requirement() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_min_feature_requirement() const {
  return _internal_has_min_feature_requirement();
}
inline void RegionFlowComputationOptions::clear_min_feature_requirement() {
  min_feature_requirement_ = 20;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_min_feature_requirement() const {
  return min_feature_requirement_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::min_feature_requirement() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.min_feature_requirement)
  return _internal_min_feature_requirement();
}
inline void RegionFlowComputationOptions::_internal_set_min_feature_requirement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  min_feature_requirement_ = value;
}
inline void RegionFlowComputationOptions::set_min_feature_requirement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_feature_requirement(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.min_feature_requirement)
}

// optional float min_feature_cover = 14 [default = 0.15];
inline bool RegionFlowComputationOptions::_internal_has_min_feature_cover() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_min_feature_cover() const {
  return _internal_has_min_feature_cover();
}
inline void RegionFlowComputationOptions::clear_min_feature_cover() {
  min_feature_cover_ = 0.15f;
  _has_bits_[0] &= ~0x10000000u;
}
inline float RegionFlowComputationOptions::_internal_min_feature_cover() const {
  return min_feature_cover_;
}
inline float RegionFlowComputationOptions::min_feature_cover() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.min_feature_cover)
  return _internal_min_feature_cover();
}
inline void RegionFlowComputationOptions::_internal_set_min_feature_cover(float value) {
  _has_bits_[0] |= 0x10000000u;
  min_feature_cover_ = value;
}
inline void RegionFlowComputationOptions::set_min_feature_cover(float value) {
  _internal_set_min_feature_cover(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.min_feature_cover)
}

// optional int32 min_feature_cover_grid = 20 [default = 8];
inline bool RegionFlowComputationOptions::_internal_has_min_feature_cover_grid() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_min_feature_cover_grid() const {
  return _internal_has_min_feature_cover_grid();
}
inline void RegionFlowComputationOptions::clear_min_feature_cover_grid() {
  min_feature_cover_grid_ = 8;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_min_feature_cover_grid() const {
  return min_feature_cover_grid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::min_feature_cover_grid() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.min_feature_cover_grid)
  return _internal_min_feature_cover_grid();
}
inline void RegionFlowComputationOptions::_internal_set_min_feature_cover_grid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  min_feature_cover_grid_ = value;
}
inline void RegionFlowComputationOptions::set_min_feature_cover_grid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_feature_cover_grid(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.min_feature_cover_grid)
}

// optional bool compute_blur_score = 17 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_compute_blur_score() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_compute_blur_score() const {
  return _internal_has_compute_blur_score();
}
inline void RegionFlowComputationOptions::clear_compute_blur_score() {
  compute_blur_score_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool RegionFlowComputationOptions::_internal_compute_blur_score() const {
  return compute_blur_score_;
}
inline bool RegionFlowComputationOptions::compute_blur_score() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.compute_blur_score)
  return _internal_compute_blur_score();
}
inline void RegionFlowComputationOptions::_internal_set_compute_blur_score(bool value) {
  _has_bits_[0] |= 0x00000080u;
  compute_blur_score_ = value;
}
inline void RegionFlowComputationOptions::set_compute_blur_score(bool value) {
  _internal_set_compute_blur_score(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.compute_blur_score)
}

// optional .mediapipe.RegionFlowComputationOptions.BlurScoreOptions blur_score_options = 31;
inline bool RegionFlowComputationOptions::_internal_has_blur_score_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || blur_score_options_ != nullptr);
  return value;
}
inline bool RegionFlowComputationOptions::has_blur_score_options() const {
  return _internal_has_blur_score_options();
}
inline void RegionFlowComputationOptions::clear_blur_score_options() {
  if (blur_score_options_ != nullptr) blur_score_options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions& RegionFlowComputationOptions::_internal_blur_score_options() const {
  const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* p = blur_score_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions&>(
      ::mediapipe::_RegionFlowComputationOptions_BlurScoreOptions_default_instance_);
}
inline const ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions& RegionFlowComputationOptions::blur_score_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.blur_score_options)
  return _internal_blur_score_options();
}
inline void RegionFlowComputationOptions::unsafe_arena_set_allocated_blur_score_options(
    ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* blur_score_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blur_score_options_);
  }
  blur_score_options_ = blur_score_options;
  if (blur_score_options) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowComputationOptions.blur_score_options)
}
inline ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* RegionFlowComputationOptions::release_blur_score_options() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* temp = blur_score_options_;
  blur_score_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* RegionFlowComputationOptions::unsafe_arena_release_blur_score_options() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowComputationOptions.blur_score_options)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* temp = blur_score_options_;
  blur_score_options_ = nullptr;
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* RegionFlowComputationOptions::_internal_mutable_blur_score_options() {
  _has_bits_[0] |= 0x00000004u;
  if (blur_score_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions_BlurScoreOptions>(GetArena());
    blur_score_options_ = p;
  }
  return blur_score_options_;
}
inline ::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* RegionFlowComputationOptions::mutable_blur_score_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowComputationOptions.blur_score_options)
  return _internal_mutable_blur_score_options();
}
inline void RegionFlowComputationOptions::set_allocated_blur_score_options(::mediapipe::RegionFlowComputationOptions_BlurScoreOptions* blur_score_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete blur_score_options_;
  }
  if (blur_score_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(blur_score_options);
    if (message_arena != submessage_arena) {
      blur_score_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blur_score_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  blur_score_options_ = blur_score_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowComputationOptions.blur_score_options)
}

// optional .mediapipe.RegionFlowComputationOptions.VisualConsistencyOptions visual_consistency_options = 55;
inline bool RegionFlowComputationOptions::_internal_has_visual_consistency_options() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || visual_consistency_options_ != nullptr);
  return value;
}
inline bool RegionFlowComputationOptions::has_visual_consistency_options() const {
  return _internal_has_visual_consistency_options();
}
inline void RegionFlowComputationOptions::clear_visual_consistency_options() {
  if (visual_consistency_options_ != nullptr) visual_consistency_options_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions& RegionFlowComputationOptions::_internal_visual_consistency_options() const {
  const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* p = visual_consistency_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions&>(
      ::mediapipe::_RegionFlowComputationOptions_VisualConsistencyOptions_default_instance_);
}
inline const ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions& RegionFlowComputationOptions::visual_consistency_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.visual_consistency_options)
  return _internal_visual_consistency_options();
}
inline void RegionFlowComputationOptions::unsafe_arena_set_allocated_visual_consistency_options(
    ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* visual_consistency_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visual_consistency_options_);
  }
  visual_consistency_options_ = visual_consistency_options;
  if (visual_consistency_options) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowComputationOptions.visual_consistency_options)
}
inline ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* RegionFlowComputationOptions::release_visual_consistency_options() {
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* temp = visual_consistency_options_;
  visual_consistency_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* RegionFlowComputationOptions::unsafe_arena_release_visual_consistency_options() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowComputationOptions.visual_consistency_options)
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* temp = visual_consistency_options_;
  visual_consistency_options_ = nullptr;
  return temp;
}
inline ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* RegionFlowComputationOptions::_internal_mutable_visual_consistency_options() {
  _has_bits_[0] |= 0x00000010u;
  if (visual_consistency_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions>(GetArena());
    visual_consistency_options_ = p;
  }
  return visual_consistency_options_;
}
inline ::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* RegionFlowComputationOptions::mutable_visual_consistency_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowComputationOptions.visual_consistency_options)
  return _internal_mutable_visual_consistency_options();
}
inline void RegionFlowComputationOptions::set_allocated_visual_consistency_options(::mediapipe::RegionFlowComputationOptions_VisualConsistencyOptions* visual_consistency_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visual_consistency_options_;
  }
  if (visual_consistency_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visual_consistency_options);
    if (message_arena != submessage_arena) {
      visual_consistency_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visual_consistency_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  visual_consistency_options_ = visual_consistency_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowComputationOptions.visual_consistency_options)
}

// optional int32 patch_descriptor_radius = 21 [default = 3];
inline bool RegionFlowComputationOptions::_internal_has_patch_descriptor_radius() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_patch_descriptor_radius() const {
  return _internal_has_patch_descriptor_radius();
}
inline void RegionFlowComputationOptions::clear_patch_descriptor_radius() {
  patch_descriptor_radius_ = 3;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_patch_descriptor_radius() const {
  return patch_descriptor_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::patch_descriptor_radius() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.patch_descriptor_radius)
  return _internal_patch_descriptor_radius();
}
inline void RegionFlowComputationOptions::_internal_set_patch_descriptor_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  patch_descriptor_radius_ = value;
}
inline void RegionFlowComputationOptions::set_patch_descriptor_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_patch_descriptor_radius(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.patch_descriptor_radius)
}

// optional int32 distance_from_border = 50 [default = 3];
inline bool RegionFlowComputationOptions::_internal_has_distance_from_border() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_distance_from_border() const {
  return _internal_has_distance_from_border();
}
inline void RegionFlowComputationOptions::clear_distance_from_border() {
  distance_from_border_ = 3;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::_internal_distance_from_border() const {
  return distance_from_border_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionFlowComputationOptions::distance_from_border() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.distance_from_border)
  return _internal_distance_from_border();
}
inline void RegionFlowComputationOptions::_internal_set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00004000u;
  distance_from_border_ = value;
}
inline void RegionFlowComputationOptions::set_distance_from_border(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distance_from_border(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.distance_from_border)
}

// optional float corner_response_scale = 26 [default = 1500];
inline bool RegionFlowComputationOptions::_internal_has_corner_response_scale() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_corner_response_scale() const {
  return _internal_has_corner_response_scale();
}
inline void RegionFlowComputationOptions::clear_corner_response_scale() {
  corner_response_scale_ = 1500;
  _has_bits_[1] &= ~0x00000008u;
}
inline float RegionFlowComputationOptions::_internal_corner_response_scale() const {
  return corner_response_scale_;
}
inline float RegionFlowComputationOptions::corner_response_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.corner_response_scale)
  return _internal_corner_response_scale();
}
inline void RegionFlowComputationOptions::_internal_set_corner_response_scale(float value) {
  _has_bits_[1] |= 0x00000008u;
  corner_response_scale_ = value;
}
inline void RegionFlowComputationOptions::set_corner_response_scale(float value) {
  _internal_set_corner_response_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.corner_response_scale)
}

// optional bool verify_features = 27 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_verify_features() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_verify_features() const {
  return _internal_has_verify_features();
}
inline void RegionFlowComputationOptions::clear_verify_features() {
  verify_features_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RegionFlowComputationOptions::_internal_verify_features() const {
  return verify_features_;
}
inline bool RegionFlowComputationOptions::verify_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.verify_features)
  return _internal_verify_features();
}
inline void RegionFlowComputationOptions::_internal_set_verify_features(bool value) {
  _has_bits_[0] |= 0x00000100u;
  verify_features_ = value;
}
inline void RegionFlowComputationOptions::set_verify_features(bool value) {
  _internal_set_verify_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.verify_features)
}

// optional float verification_distance = 28 [default = 0.5];
inline bool RegionFlowComputationOptions::_internal_has_verification_distance() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_verification_distance() const {
  return _internal_has_verification_distance();
}
inline void RegionFlowComputationOptions::clear_verification_distance() {
  verification_distance_ = 0.5f;
  _has_bits_[1] &= ~0x00000010u;
}
inline float RegionFlowComputationOptions::_internal_verification_distance() const {
  return verification_distance_;
}
inline float RegionFlowComputationOptions::verification_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.verification_distance)
  return _internal_verification_distance();
}
inline void RegionFlowComputationOptions::_internal_set_verification_distance(float value) {
  _has_bits_[1] |= 0x00000010u;
  verification_distance_ = value;
}
inline void RegionFlowComputationOptions::set_verification_distance(float value) {
  _internal_set_verification_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.verification_distance)
}

// optional bool verify_long_features = 53 [default = true];
inline bool RegionFlowComputationOptions::_internal_has_verify_long_features() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_verify_long_features() const {
  return _internal_has_verify_long_features();
}
inline void RegionFlowComputationOptions::clear_verify_long_features() {
  verify_long_features_ = true;
  _has_bits_[1] &= ~0x00010000u;
}
inline bool RegionFlowComputationOptions::_internal_verify_long_features() const {
  return verify_long_features_;
}
inline bool RegionFlowComputationOptions::verify_long_features() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.verify_long_features)
  return _internal_verify_long_features();
}
inline void RegionFlowComputationOptions::_internal_set_verify_long_features(bool value) {
  _has_bits_[1] |= 0x00010000u;
  verify_long_features_ = value;
}
inline void RegionFlowComputationOptions::set_verify_long_features(bool value) {
  _internal_set_verify_long_features(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.verify_long_features)
}

// optional float long_feature_verification_threshold = 54 [default = 0.04];
inline bool RegionFlowComputationOptions::_internal_has_long_feature_verification_threshold() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_long_feature_verification_threshold() const {
  return _internal_has_long_feature_verification_threshold();
}
inline void RegionFlowComputationOptions::clear_long_feature_verification_threshold() {
  long_feature_verification_threshold_ = 0.04f;
  _has_bits_[1] &= ~0x00008000u;
}
inline float RegionFlowComputationOptions::_internal_long_feature_verification_threshold() const {
  return long_feature_verification_threshold_;
}
inline float RegionFlowComputationOptions::long_feature_verification_threshold() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.long_feature_verification_threshold)
  return _internal_long_feature_verification_threshold();
}
inline void RegionFlowComputationOptions::_internal_set_long_feature_verification_threshold(float value) {
  _has_bits_[1] |= 0x00008000u;
  long_feature_verification_threshold_ = value;
}
inline void RegionFlowComputationOptions::set_long_feature_verification_threshold(float value) {
  _internal_set_long_feature_verification_threshold(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.long_feature_verification_threshold)
}

// optional float max_long_feature_acceleration = 56 [default = 5];
inline bool RegionFlowComputationOptions::_internal_has_max_long_feature_acceleration() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_max_long_feature_acceleration() const {
  return _internal_has_max_long_feature_acceleration();
}
inline void RegionFlowComputationOptions::clear_max_long_feature_acceleration() {
  max_long_feature_acceleration_ = 5;
  _has_bits_[1] &= ~0x00080000u;
}
inline float RegionFlowComputationOptions::_internal_max_long_feature_acceleration() const {
  return max_long_feature_acceleration_;
}
inline float RegionFlowComputationOptions::max_long_feature_acceleration() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.max_long_feature_acceleration)
  return _internal_max_long_feature_acceleration();
}
inline void RegionFlowComputationOptions::_internal_set_max_long_feature_acceleration(float value) {
  _has_bits_[1] |= 0x00080000u;
  max_long_feature_acceleration_ = value;
}
inline void RegionFlowComputationOptions::set_max_long_feature_acceleration(float value) {
  _internal_set_max_long_feature_acceleration(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.max_long_feature_acceleration)
}

// optional bool verify_long_feature_acceleration = 63 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_verify_long_feature_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_verify_long_feature_acceleration() const {
  return _internal_has_verify_long_feature_acceleration();
}
inline void RegionFlowComputationOptions::clear_verify_long_feature_acceleration() {
  verify_long_feature_acceleration_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool RegionFlowComputationOptions::_internal_verify_long_feature_acceleration() const {
  return verify_long_feature_acceleration_;
}
inline bool RegionFlowComputationOptions::verify_long_feature_acceleration() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.verify_long_feature_acceleration)
  return _internal_verify_long_feature_acceleration();
}
inline void RegionFlowComputationOptions::_internal_set_verify_long_feature_acceleration(bool value) {
  _has_bits_[0] |= 0x00000200u;
  verify_long_feature_acceleration_ = value;
}
inline void RegionFlowComputationOptions::set_verify_long_feature_acceleration(bool value) {
  _internal_set_verify_long_feature_acceleration(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.verify_long_feature_acceleration)
}

// optional float verify_long_feature_trigger_ratio = 64 [default = 0];
inline bool RegionFlowComputationOptions::_internal_has_verify_long_feature_trigger_ratio() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_verify_long_feature_trigger_ratio() const {
  return _internal_has_verify_long_feature_trigger_ratio();
}
inline void RegionFlowComputationOptions::clear_verify_long_feature_trigger_ratio() {
  verify_long_feature_trigger_ratio_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float RegionFlowComputationOptions::_internal_verify_long_feature_trigger_ratio() const {
  return verify_long_feature_trigger_ratio_;
}
inline float RegionFlowComputationOptions::verify_long_feature_trigger_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.verify_long_feature_trigger_ratio)
  return _internal_verify_long_feature_trigger_ratio();
}
inline void RegionFlowComputationOptions::_internal_set_verify_long_feature_trigger_ratio(float value) {
  _has_bits_[0] |= 0x00080000u;
  verify_long_feature_trigger_ratio_ = value;
}
inline void RegionFlowComputationOptions::set_verify_long_feature_trigger_ratio(float value) {
  _internal_set_verify_long_feature_trigger_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.verify_long_feature_trigger_ratio)
}

// optional bool histogram_equalization = 57 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_histogram_equalization() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_histogram_equalization() const {
  return _internal_has_histogram_equalization();
}
inline void RegionFlowComputationOptions::clear_histogram_equalization() {
  histogram_equalization_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool RegionFlowComputationOptions::_internal_histogram_equalization() const {
  return histogram_equalization_;
}
inline bool RegionFlowComputationOptions::histogram_equalization() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.histogram_equalization)
  return _internal_histogram_equalization();
}
inline void RegionFlowComputationOptions::_internal_set_histogram_equalization(bool value) {
  _has_bits_[0] |= 0x00000400u;
  histogram_equalization_ = value;
}
inline void RegionFlowComputationOptions::set_histogram_equalization(bool value) {
  _internal_set_histogram_equalization(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.histogram_equalization)
}

// optional bool use_synthetic_zero_motion_tracks_all_frames = 34 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_use_synthetic_zero_motion_tracks_all_frames() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_use_synthetic_zero_motion_tracks_all_frames() const {
  return _internal_has_use_synthetic_zero_motion_tracks_all_frames();
}
inline void RegionFlowComputationOptions::clear_use_synthetic_zero_motion_tracks_all_frames() {
  use_synthetic_zero_motion_tracks_all_frames_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool RegionFlowComputationOptions::_internal_use_synthetic_zero_motion_tracks_all_frames() const {
  return use_synthetic_zero_motion_tracks_all_frames_;
}
inline bool RegionFlowComputationOptions::use_synthetic_zero_motion_tracks_all_frames() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.use_synthetic_zero_motion_tracks_all_frames)
  return _internal_use_synthetic_zero_motion_tracks_all_frames();
}
inline void RegionFlowComputationOptions::_internal_set_use_synthetic_zero_motion_tracks_all_frames(bool value) {
  _has_bits_[0] |= 0x00000800u;
  use_synthetic_zero_motion_tracks_all_frames_ = value;
}
inline void RegionFlowComputationOptions::set_use_synthetic_zero_motion_tracks_all_frames(bool value) {
  _internal_set_use_synthetic_zero_motion_tracks_all_frames(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.use_synthetic_zero_motion_tracks_all_frames)
}

// optional bool use_synthetic_zero_motion_tracks_first_frame = 35 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_use_synthetic_zero_motion_tracks_first_frame() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_use_synthetic_zero_motion_tracks_first_frame() const {
  return _internal_has_use_synthetic_zero_motion_tracks_first_frame();
}
inline void RegionFlowComputationOptions::clear_use_synthetic_zero_motion_tracks_first_frame() {
  use_synthetic_zero_motion_tracks_first_frame_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool RegionFlowComputationOptions::_internal_use_synthetic_zero_motion_tracks_first_frame() const {
  return use_synthetic_zero_motion_tracks_first_frame_;
}
inline bool RegionFlowComputationOptions::use_synthetic_zero_motion_tracks_first_frame() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.use_synthetic_zero_motion_tracks_first_frame)
  return _internal_use_synthetic_zero_motion_tracks_first_frame();
}
inline void RegionFlowComputationOptions::_internal_set_use_synthetic_zero_motion_tracks_first_frame(bool value) {
  _has_bits_[0] |= 0x00001000u;
  use_synthetic_zero_motion_tracks_first_frame_ = value;
}
inline void RegionFlowComputationOptions::set_use_synthetic_zero_motion_tracks_first_frame(bool value) {
  _internal_set_use_synthetic_zero_motion_tracks_first_frame(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.use_synthetic_zero_motion_tracks_first_frame)
}

// optional bool gain_correction = 36 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_gain_correction() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_gain_correction() const {
  return _internal_has_gain_correction();
}
inline void RegionFlowComputationOptions::clear_gain_correction() {
  gain_correction_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool RegionFlowComputationOptions::_internal_gain_correction() const {
  return gain_correction_;
}
inline bool RegionFlowComputationOptions::gain_correction() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.gain_correction)
  return _internal_gain_correction();
}
inline void RegionFlowComputationOptions::_internal_set_gain_correction(bool value) {
  _has_bits_[0] |= 0x00008000u;
  gain_correction_ = value;
}
inline void RegionFlowComputationOptions::set_gain_correction(bool value) {
  _internal_set_gain_correction(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.gain_correction)
}

// optional bool fast_gain_correction = 61 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_fast_gain_correction() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_fast_gain_correction() const {
  return _internal_has_fast_gain_correction();
}
inline void RegionFlowComputationOptions::clear_fast_gain_correction() {
  fast_gain_correction_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool RegionFlowComputationOptions::_internal_fast_gain_correction() const {
  return fast_gain_correction_;
}
inline bool RegionFlowComputationOptions::fast_gain_correction() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.fast_gain_correction)
  return _internal_fast_gain_correction();
}
inline void RegionFlowComputationOptions::_internal_set_fast_gain_correction(bool value) {
  _has_bits_[0] |= 0x00010000u;
  fast_gain_correction_ = value;
}
inline void RegionFlowComputationOptions::set_fast_gain_correction(bool value) {
  _internal_set_fast_gain_correction(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.fast_gain_correction)
}

// optional bool gain_correction_multiple_hypotheses = 47 [default = true];
inline bool RegionFlowComputationOptions::_internal_has_gain_correction_multiple_hypotheses() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_gain_correction_multiple_hypotheses() const {
  return _internal_has_gain_correction_multiple_hypotheses();
}
inline void RegionFlowComputationOptions::clear_gain_correction_multiple_hypotheses() {
  gain_correction_multiple_hypotheses_ = true;
  _has_bits_[1] &= ~0x00020000u;
}
inline bool RegionFlowComputationOptions::_internal_gain_correction_multiple_hypotheses() const {
  return gain_correction_multiple_hypotheses_;
}
inline bool RegionFlowComputationOptions::gain_correction_multiple_hypotheses() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.gain_correction_multiple_hypotheses)
  return _internal_gain_correction_multiple_hypotheses();
}
inline void RegionFlowComputationOptions::_internal_set_gain_correction_multiple_hypotheses(bool value) {
  _has_bits_[1] |= 0x00020000u;
  gain_correction_multiple_hypotheses_ = value;
}
inline void RegionFlowComputationOptions::set_gain_correction_multiple_hypotheses(bool value) {
  _internal_set_gain_correction_multiple_hypotheses(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.gain_correction_multiple_hypotheses)
}

// optional float gain_correction_inlier_improvement_frac = 48 [default = 0.1];
inline bool RegionFlowComputationOptions::_internal_has_gain_correction_inlier_improvement_frac() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_gain_correction_inlier_improvement_frac() const {
  return _internal_has_gain_correction_inlier_improvement_frac();
}
inline void RegionFlowComputationOptions::clear_gain_correction_inlier_improvement_frac() {
  gain_correction_inlier_improvement_frac_ = 0.1f;
  _has_bits_[1] &= ~0x00001000u;
}
inline float RegionFlowComputationOptions::_internal_gain_correction_inlier_improvement_frac() const {
  return gain_correction_inlier_improvement_frac_;
}
inline float RegionFlowComputationOptions::gain_correction_inlier_improvement_frac() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.gain_correction_inlier_improvement_frac)
  return _internal_gain_correction_inlier_improvement_frac();
}
inline void RegionFlowComputationOptions::_internal_set_gain_correction_inlier_improvement_frac(float value) {
  _has_bits_[1] |= 0x00001000u;
  gain_correction_inlier_improvement_frac_ = value;
}
inline void RegionFlowComputationOptions::set_gain_correction_inlier_improvement_frac(float value) {
  _internal_set_gain_correction_inlier_improvement_frac(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.gain_correction_inlier_improvement_frac)
}

// optional bool gain_correction_bright_reference = 59 [default = false];
inline bool RegionFlowComputationOptions::_internal_has_gain_correction_bright_reference() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_gain_correction_bright_reference() const {
  return _internal_has_gain_correction_bright_reference();
}
inline void RegionFlowComputationOptions::clear_gain_correction_bright_reference() {
  gain_correction_bright_reference_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool RegionFlowComputationOptions::_internal_gain_correction_bright_reference() const {
  return gain_correction_bright_reference_;
}
inline bool RegionFlowComputationOptions::gain_correction_bright_reference() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.gain_correction_bright_reference)
  return _internal_gain_correction_bright_reference();
}
inline void RegionFlowComputationOptions::_internal_set_gain_correction_bright_reference(bool value) {
  _has_bits_[0] |= 0x00020000u;
  gain_correction_bright_reference_ = value;
}
inline void RegionFlowComputationOptions::set_gain_correction_bright_reference(bool value) {
  _internal_set_gain_correction_bright_reference(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.gain_correction_bright_reference)
}

// optional float gain_correction_triggering_ratio = 60 [default = 0];
inline bool RegionFlowComputationOptions::_internal_has_gain_correction_triggering_ratio() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_gain_correction_triggering_ratio() const {
  return _internal_has_gain_correction_triggering_ratio();
}
inline void RegionFlowComputationOptions::clear_gain_correction_triggering_ratio() {
  gain_correction_triggering_ratio_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float RegionFlowComputationOptions::_internal_gain_correction_triggering_ratio() const {
  return gain_correction_triggering_ratio_;
}
inline float RegionFlowComputationOptions::gain_correction_triggering_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.gain_correction_triggering_ratio)
  return _internal_gain_correction_triggering_ratio();
}
inline void RegionFlowComputationOptions::_internal_set_gain_correction_triggering_ratio(float value) {
  _has_bits_[0] |= 0x00040000u;
  gain_correction_triggering_ratio_ = value;
}
inline void RegionFlowComputationOptions::set_gain_correction_triggering_ratio(float value) {
  _internal_set_gain_correction_triggering_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.gain_correction_triggering_ratio)
}

// optional float frac_gain_feature_size = 37 [default = 0.3];
inline bool RegionFlowComputationOptions::_internal_has_frac_gain_feature_size() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_frac_gain_feature_size() const {
  return _internal_has_frac_gain_feature_size();
}
inline void RegionFlowComputationOptions::clear_frac_gain_feature_size() {
  frac_gain_feature_size_ = 0.3f;
  _has_bits_[1] &= ~0x00000040u;
}
inline float RegionFlowComputationOptions::_internal_frac_gain_feature_size() const {
  return frac_gain_feature_size_;
}
inline float RegionFlowComputationOptions::frac_gain_feature_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.frac_gain_feature_size)
  return _internal_frac_gain_feature_size();
}
inline void RegionFlowComputationOptions::_internal_set_frac_gain_feature_size(float value) {
  _has_bits_[1] |= 0x00000040u;
  frac_gain_feature_size_ = value;
}
inline void RegionFlowComputationOptions::set_frac_gain_feature_size(float value) {
  _internal_set_frac_gain_feature_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.frac_gain_feature_size)
}

// optional float frac_gain_step = 38 [default = 0.1];
inline bool RegionFlowComputationOptions::_internal_has_frac_gain_step() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_frac_gain_step() const {
  return _internal_has_frac_gain_step();
}
inline void RegionFlowComputationOptions::clear_frac_gain_step() {
  frac_gain_step_ = 0.1f;
  _has_bits_[1] &= ~0x00000080u;
}
inline float RegionFlowComputationOptions::_internal_frac_gain_step() const {
  return frac_gain_step_;
}
inline float RegionFlowComputationOptions::frac_gain_step() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.frac_gain_step)
  return _internal_frac_gain_step();
}
inline void RegionFlowComputationOptions::_internal_set_frac_gain_step(float value) {
  _has_bits_[1] |= 0x00000080u;
  frac_gain_step_ = value;
}
inline void RegionFlowComputationOptions::set_frac_gain_step(float value) {
  _internal_set_frac_gain_step(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.frac_gain_step)
}

// optional .mediapipe.RegionFlowComputationOptions.GainCorrectMode gain_correct_mode = 41 [default = GAIN_CORRECT_DEFAULT_USER];
inline bool RegionFlowComputationOptions::_internal_has_gain_correct_mode() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_gain_correct_mode() const {
  return _internal_has_gain_correct_mode();
}
inline void RegionFlowComputationOptions::clear_gain_correct_mode() {
  gain_correct_mode_ = 1;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::mediapipe::RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::_internal_gain_correct_mode() const {
  return static_cast< ::mediapipe::RegionFlowComputationOptions_GainCorrectMode >(gain_correct_mode_);
}
inline ::mediapipe::RegionFlowComputationOptions_GainCorrectMode RegionFlowComputationOptions::gain_correct_mode() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.gain_correct_mode)
  return _internal_gain_correct_mode();
}
inline void RegionFlowComputationOptions::_internal_set_gain_correct_mode(::mediapipe::RegionFlowComputationOptions_GainCorrectMode value) {
  assert(::mediapipe::RegionFlowComputationOptions_GainCorrectMode_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  gain_correct_mode_ = value;
}
inline void RegionFlowComputationOptions::set_gain_correct_mode(::mediapipe::RegionFlowComputationOptions_GainCorrectMode value) {
  _internal_set_gain_correct_mode(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.gain_correct_mode)
}

// optional .mediapipe.ToneEstimationOptions.GainBiasBounds gain_bias_bounds = 39;
inline bool RegionFlowComputationOptions::_internal_has_gain_bias_bounds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || gain_bias_bounds_ != nullptr);
  return value;
}
inline bool RegionFlowComputationOptions::has_gain_bias_bounds() const {
  return _internal_has_gain_bias_bounds();
}
inline const ::mediapipe::ToneEstimationOptions_GainBiasBounds& RegionFlowComputationOptions::_internal_gain_bias_bounds() const {
  const ::mediapipe::ToneEstimationOptions_GainBiasBounds* p = gain_bias_bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ToneEstimationOptions_GainBiasBounds&>(
      ::mediapipe::_ToneEstimationOptions_GainBiasBounds_default_instance_);
}
inline const ::mediapipe::ToneEstimationOptions_GainBiasBounds& RegionFlowComputationOptions::gain_bias_bounds() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.gain_bias_bounds)
  return _internal_gain_bias_bounds();
}
inline void RegionFlowComputationOptions::unsafe_arena_set_allocated_gain_bias_bounds(
    ::mediapipe::ToneEstimationOptions_GainBiasBounds* gain_bias_bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_bias_bounds_);
  }
  gain_bias_bounds_ = gain_bias_bounds;
  if (gain_bias_bounds) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.RegionFlowComputationOptions.gain_bias_bounds)
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* RegionFlowComputationOptions::release_gain_bias_bounds() {
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* temp = gain_bias_bounds_;
  gain_bias_bounds_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* RegionFlowComputationOptions::unsafe_arena_release_gain_bias_bounds() {
  // @@protoc_insertion_point(field_release:mediapipe.RegionFlowComputationOptions.gain_bias_bounds)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* temp = gain_bias_bounds_;
  gain_bias_bounds_ = nullptr;
  return temp;
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* RegionFlowComputationOptions::_internal_mutable_gain_bias_bounds() {
  _has_bits_[0] |= 0x00000008u;
  if (gain_bias_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ToneEstimationOptions_GainBiasBounds>(GetArena());
    gain_bias_bounds_ = p;
  }
  return gain_bias_bounds_;
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* RegionFlowComputationOptions::mutable_gain_bias_bounds() {
  // @@protoc_insertion_point(field_mutable:mediapipe.RegionFlowComputationOptions.gain_bias_bounds)
  return _internal_mutable_gain_bias_bounds();
}
inline void RegionFlowComputationOptions::set_allocated_gain_bias_bounds(::mediapipe::ToneEstimationOptions_GainBiasBounds* gain_bias_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_bias_bounds_);
  }
  if (gain_bias_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_bias_bounds)->GetArena();
    if (message_arena != submessage_arena) {
      gain_bias_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_bias_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gain_bias_bounds_ = gain_bias_bounds;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.RegionFlowComputationOptions.gain_bias_bounds)
}

// optional .mediapipe.RegionFlowComputationOptions.ImageFormat image_format = 58 [default = FORMAT_RGB];
inline bool RegionFlowComputationOptions::_internal_has_image_format() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_image_format() const {
  return _internal_has_image_format();
}
inline void RegionFlowComputationOptions::clear_image_format() {
  image_format_ = 2;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::mediapipe::RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::_internal_image_format() const {
  return static_cast< ::mediapipe::RegionFlowComputationOptions_ImageFormat >(image_format_);
}
inline ::mediapipe::RegionFlowComputationOptions_ImageFormat RegionFlowComputationOptions::image_format() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.image_format)
  return _internal_image_format();
}
inline void RegionFlowComputationOptions::_internal_set_image_format(::mediapipe::RegionFlowComputationOptions_ImageFormat value) {
  assert(::mediapipe::RegionFlowComputationOptions_ImageFormat_IsValid(value));
  _has_bits_[1] |= 0x00100000u;
  image_format_ = value;
}
inline void RegionFlowComputationOptions::set_image_format(::mediapipe::RegionFlowComputationOptions_ImageFormat value) {
  _internal_set_image_format(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.image_format)
}

// optional .mediapipe.RegionFlowComputationOptions.DescriptorExtractorType descriptor_extractor_type = 65 [default = ORB];
inline bool RegionFlowComputationOptions::_internal_has_descriptor_extractor_type() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_descriptor_extractor_type() const {
  return _internal_has_descriptor_extractor_type();
}
inline void RegionFlowComputationOptions::clear_descriptor_extractor_type() {
  descriptor_extractor_type_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType RegionFlowComputationOptions::_internal_descriptor_extractor_type() const {
  return static_cast< ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType >(descriptor_extractor_type_);
}
inline ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType RegionFlowComputationOptions::descriptor_extractor_type() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.descriptor_extractor_type)
  return _internal_descriptor_extractor_type();
}
inline void RegionFlowComputationOptions::_internal_set_descriptor_extractor_type(::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType value) {
  assert(::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  descriptor_extractor_type_ = value;
}
inline void RegionFlowComputationOptions::set_descriptor_extractor_type(::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType value) {
  _internal_set_descriptor_extractor_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.descriptor_extractor_type)
}

// optional bool compute_derivative_in_pyramid = 66 [default = true];
inline bool RegionFlowComputationOptions::_internal_has_compute_derivative_in_pyramid() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool RegionFlowComputationOptions::has_compute_derivative_in_pyramid() const {
  return _internal_has_compute_derivative_in_pyramid();
}
inline void RegionFlowComputationOptions::clear_compute_derivative_in_pyramid() {
  compute_derivative_in_pyramid_ = true;
  _has_bits_[1] &= ~0x00040000u;
}
inline bool RegionFlowComputationOptions::_internal_compute_derivative_in_pyramid() const {
  return compute_derivative_in_pyramid_;
}
inline bool RegionFlowComputationOptions::compute_derivative_in_pyramid() const {
  // @@protoc_insertion_point(field_get:mediapipe.RegionFlowComputationOptions.compute_derivative_in_pyramid)
  return _internal_compute_derivative_in_pyramid();
}
inline void RegionFlowComputationOptions::_internal_set_compute_derivative_in_pyramid(bool value) {
  _has_bits_[1] |= 0x00040000u;
  compute_derivative_in_pyramid_ = value;
}
inline void RegionFlowComputationOptions::set_compute_derivative_in_pyramid(bool value) {
  _internal_set_compute_derivative_in_pyramid(value);
  // @@protoc_insertion_point(field_set:mediapipe.RegionFlowComputationOptions.compute_derivative_in_pyramid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::TrackingOptions_FlowDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TrackingOptions_FlowDirection>() {
  return ::mediapipe::TrackingOptions_FlowDirection_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::TrackingOptions_TrackingPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TrackingOptions_TrackingPolicy>() {
  return ::mediapipe::TrackingOptions_TrackingPolicy_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::TrackingOptions_CornerExtractionMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TrackingOptions_CornerExtractionMethod>() {
  return ::mediapipe::TrackingOptions_CornerExtractionMethod_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::TrackingOptions_KltTrackerImplementation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TrackingOptions_KltTrackerImplementation>() {
  return ::mediapipe::TrackingOptions_KltTrackerImplementation_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::RegionFlowComputationOptions_IrlsInitialization> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::RegionFlowComputationOptions_IrlsInitialization>() {
  return ::mediapipe::RegionFlowComputationOptions_IrlsInitialization_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::RegionFlowComputationOptions_DownsampleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::RegionFlowComputationOptions_DownsampleMode>() {
  return ::mediapipe::RegionFlowComputationOptions_DownsampleMode_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::RegionFlowComputationOptions_GainCorrectMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::RegionFlowComputationOptions_GainCorrectMode>() {
  return ::mediapipe::RegionFlowComputationOptions_GainCorrectMode_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::RegionFlowComputationOptions_ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::RegionFlowComputationOptions_ImageFormat>() {
  return ::mediapipe::RegionFlowComputationOptions_ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType>() {
  return ::mediapipe::RegionFlowComputationOptions_DescriptorExtractorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2fregion_5fflow_5fcomputation_2eproto
