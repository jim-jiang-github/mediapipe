// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/tone_estimation.proto

#include "mediapipe/util/tracking/tone_estimation.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr ToneChange_StabilityStats::ToneChange_StabilityStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_inliers_(0)
  , inlier_fraction_(0)
  , inlier_weight_(0){}
struct ToneChange_StabilityStatsDefaultTypeInternal {
  constexpr ToneChange_StabilityStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToneChange_StabilityStatsDefaultTypeInternal() {}
  union {
    ToneChange_StabilityStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToneChange_StabilityStatsDefaultTypeInternal _ToneChange_StabilityStats_default_instance_;
constexpr ToneChange::ToneChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gain_bias_(nullptr)
  , affine_(nullptr)
  , mixture_gain_bias_(nullptr)
  , mixture_affine_(nullptr)
  , stability_stats_(nullptr)
  , mixture_domain_sigma_(0)
  , frac_clipped_(0)
  , low_percentile_(0)
  , low_mid_percentile_(0)
  , mid_percentile_(0)
  , high_mid_percentile_(0)
  , high_percentile_(0)
  , log_domain_(false)
  , type_(0)
{}
struct ToneChangeDefaultTypeInternal {
  constexpr ToneChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToneChangeDefaultTypeInternal() {}
  union {
    ToneChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToneChangeDefaultTypeInternal _ToneChange_default_instance_;
constexpr ToneMatchOptions::ToneMatchOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_domain_(false)
  , max_frac_clipped_(0.4f)
  , min_match_percentile_(0.01f)
  , max_match_percentile_(0.99f)
  , match_percentile_steps_(10)
  , patch_radius_(18){}
struct ToneMatchOptionsDefaultTypeInternal {
  constexpr ToneMatchOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToneMatchOptionsDefaultTypeInternal() {}
  union {
    ToneMatchOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToneMatchOptionsDefaultTypeInternal _ToneMatchOptions_default_instance_;
constexpr ClipMaskOptions::ClipMaskOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_exposure_(0.02f)
  , max_exposure_(0.98f)
  , max_clipped_channels_(1)
  , clip_mask_diameter_(5){}
struct ClipMaskOptionsDefaultTypeInternal {
  constexpr ClipMaskOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClipMaskOptionsDefaultTypeInternal() {}
  union {
    ClipMaskOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClipMaskOptionsDefaultTypeInternal _ClipMaskOptions_default_instance_;
constexpr ToneEstimationOptions_GainBiasBounds::ToneEstimationOptions_GainBiasBounds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_inlier_fraction_(0.75f)
  , min_inlier_weight_(0.5f)
  , lower_gain_(0.75f)
  , upper_gain_(1.334f)
  , lower_bias_(-0.2f)
  , upper_bias_(0.2f){}
struct ToneEstimationOptions_GainBiasBoundsDefaultTypeInternal {
  constexpr ToneEstimationOptions_GainBiasBoundsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToneEstimationOptions_GainBiasBoundsDefaultTypeInternal() {}
  union {
    ToneEstimationOptions_GainBiasBounds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToneEstimationOptions_GainBiasBoundsDefaultTypeInternal _ToneEstimationOptions_GainBiasBounds_default_instance_;
constexpr ToneEstimationOptions::ToneEstimationOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tone_match_options_(nullptr)
  , clip_mask_options_(nullptr)
  , stable_gain_bias_bounds_(nullptr)
  , downsample_factor_(2)
  , stats_low_percentile_(0.05f)
  , stats_low_mid_percentile_(0.2f)
  , stats_mid_percentile_(0.5f)
  , stats_high_mid_percentile_(0.8f)
  , stats_high_percentile_(0.95f)
  , irls_iterations_(10)
  , downsample_mode_(1)

  , downsampling_size_(256){}
struct ToneEstimationOptionsDefaultTypeInternal {
  constexpr ToneEstimationOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToneEstimationOptionsDefaultTypeInternal() {}
  union {
    ToneEstimationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToneEstimationOptionsDefaultTypeInternal _ToneEstimationOptions_default_instance_;
constexpr ToneMatch::ToneMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curr_val_(0)
  , prev_val_(0){}
struct ToneMatchDefaultTypeInternal {
  constexpr ToneMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToneMatchDefaultTypeInternal() {}
  union {
    ToneMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToneMatchDefaultTypeInternal _ToneMatch_default_instance_;
constexpr PatchToneMatch::PatchToneMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tone_match_()
  , irls_weight_(1){}
struct PatchToneMatchDefaultTypeInternal {
  constexpr PatchToneMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchToneMatchDefaultTypeInternal() {}
  union {
    PatchToneMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchToneMatchDefaultTypeInternal _PatchToneMatch_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange_StabilityStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange_StabilityStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange_StabilityStats, num_inliers_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange_StabilityStats, inlier_fraction_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange_StabilityStats, inlier_weight_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, gain_bias_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, affine_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, mixture_gain_bias_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, mixture_affine_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, mixture_domain_sigma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, frac_clipped_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, low_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, low_mid_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, mid_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, high_mid_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, high_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, log_domain_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneChange, stability_stats_),
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  4,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, min_match_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, max_match_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, match_percentile_steps_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, patch_radius_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, max_frac_clipped_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatchOptions, log_domain_),
  2,
  3,
  4,
  5,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ClipMaskOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ClipMaskOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ClipMaskOptions, min_exposure_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ClipMaskOptions, max_exposure_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ClipMaskOptions, max_clipped_channels_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ClipMaskOptions, clip_mask_diameter_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, min_inlier_fraction_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, min_inlier_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, lower_gain_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, upper_gain_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, lower_bias_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions_GainBiasBounds, upper_bias_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, tone_match_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, clip_mask_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, stats_low_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, stats_low_mid_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, stats_mid_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, stats_high_mid_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, stats_high_percentile_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, irls_iterations_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, stable_gain_bias_bounds_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, downsample_mode_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, downsampling_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneEstimationOptions, downsample_factor_),
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  2,
  10,
  11,
  3,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatch, curr_val_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ToneMatch, prev_val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::PatchToneMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PatchToneMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::PatchToneMatch, tone_match_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::PatchToneMatch, irls_weight_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::ToneChange_StabilityStats)},
  { 11, 30, sizeof(::mediapipe::ToneChange)},
  { 44, 55, sizeof(::mediapipe::ToneMatchOptions)},
  { 61, 70, sizeof(::mediapipe::ClipMaskOptions)},
  { 74, 85, sizeof(::mediapipe::ToneEstimationOptions_GainBiasBounds)},
  { 91, 108, sizeof(::mediapipe::ToneEstimationOptions)},
  { 120, 127, sizeof(::mediapipe::ToneMatch)},
  { 129, 136, sizeof(::mediapipe::PatchToneMatch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ToneChange_StabilityStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ToneChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ToneMatchOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ClipMaskOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ToneEstimationOptions_GainBiasBounds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ToneEstimationOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ToneMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_PatchToneMatch_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-mediapipe/util/tracking/tone_estimatio"
  "n.proto\022\tmediapipe\032)mediapipe/util/track"
  "ing/tone_models.proto\"\227\005\n\nToneChange\022+\n\t"
  "gain_bias\030\001 \001(\0132\030.mediapipe.GainBiasMode"
  "l\022*\n\006affine\030\002 \001(\0132\032.mediapipe.AffineTone"
  "Model\022:\n\021mixture_gain_bias\030\003 \001(\0132\037.media"
  "pipe.MixtureGainBiasModel\0229\n\016mixture_aff"
  "ine\030\004 \001(\0132!.mediapipe.MixtureAffineToneM"
  "odel\022\034\n\024mixture_domain_sigma\030\005 \001(\002\022\027\n\014fr"
  "ac_clipped\030\006 \001(\002:\0010\022\026\n\016low_percentile\030\010 "
  "\001(\002\022\032\n\022low_mid_percentile\030\t \001(\002\022\026\n\016mid_p"
  "ercentile\030\n \001(\002\022\033\n\023high_mid_percentile\030\013"
  " \001(\002\022\027\n\017high_percentile\030\014 \001(\002\022\031\n\nlog_dom"
  "ain\030\r \001(\010:\005false\022/\n\004type\030\016 \001(\0162\032.mediapi"
  "pe.ToneChange.Type:\005VALID\022=\n\017stability_s"
  "tats\030\017 \001(\0132$.mediapipe.ToneChange.Stabil"
  "ityStats\032U\n\016StabilityStats\022\023\n\013num_inlier"
  "s\030\001 \001(\005\022\027\n\017inlier_fraction\030\002 \001(\002\022\025\n\rinli"
  "er_weight\030\003 \001(\001\"\036\n\004Type\022\t\n\005VALID\020\000\022\013\n\007IN"
  "VALID\020\n\"\322\001\n\020ToneMatchOptions\022\"\n\024min_matc"
  "h_percentile\030\001 \001(\002:\0040.01\022\"\n\024max_match_pe"
  "rcentile\030\002 \001(\002:\0040.99\022\"\n\026match_percentile"
  "_steps\030\003 \001(\005:\00210\022\030\n\014patch_radius\030\004 \001(\005:\002"
  "18\022\035\n\020max_frac_clipped\030\005 \001(\002:\0030.4\022\031\n\nlog"
  "_domain\030\010 \001(\010:\005false\"\211\001\n\017ClipMaskOptions"
  "\022\032\n\014min_exposure\030\001 \001(\002:\0040.02\022\032\n\014max_expo"
  "sure\030\002 \001(\002:\0040.98\022\037\n\024max_clipped_channels"
  "\030\004 \001(\005:\0011\022\035\n\022clip_mask_diameter\030\005 \001(\005:\0015"
  "\"\201\007\n\025ToneEstimationOptions\0227\n\022tone_match"
  "_options\030\001 \001(\0132\033.mediapipe.ToneMatchOpti"
  "ons\0225\n\021clip_mask_options\030\002 \001(\0132\032.mediapi"
  "pe.ClipMaskOptions\022\"\n\024stats_low_percenti"
  "le\030\003 \001(\002:\0040.05\022%\n\030stats_low_mid_percenti"
  "le\030\004 \001(\002:\0030.2\022!\n\024stats_mid_percentile\030\005 "
  "\001(\002:\0030.5\022&\n\031stats_high_mid_percentile\030\006 "
  "\001(\002:\0030.8\022#\n\025stats_high_percentile\030\007 \001(\002:"
  "\0040.95\022\033\n\017irls_iterations\030\010 \001(\005:\00210\022P\n\027st"
  "able_gain_bias_bounds\030\t \001(\0132/.mediapipe."
  "ToneEstimationOptions.GainBiasBounds\022Y\n\017"
  "downsample_mode\030\n \001(\0162/.mediapipe.ToneEs"
  "timationOptions.DownsampleMode:\017DOWNSAMP"
  "LE_NONE\022\036\n\021downsampling_size\030\013 \001(\005:\003256\022"
  "\034\n\021downsample_factor\030\014 \001(\002:\0012\032\273\001\n\016GainBi"
  "asBounds\022!\n\023min_inlier_fraction\030\001 \001(\002:\0040"
  ".75\022\036\n\021min_inlier_weight\030\002 \001(\002:\0030.5\022\030\n\nl"
  "ower_gain\030\003 \001(\002:\0040.75\022\031\n\nupper_gain\030\004 \001("
  "\002:\0051.334\022\030\n\nlower_bias\030\005 \001(\002:\004-0.2\022\027\n\nup"
  "per_bias\030\006 \001(\002:\0030.2\"w\n\016DownsampleMode\022\023\n"
  "\017DOWNSAMPLE_NONE\020\001\022\032\n\026DOWNSAMPLE_TO_MAX_"
  "SIZE\020\002\022\030\n\024DOWNSAMPLE_BY_FACTOR\020\003\022\032\n\026DOWN"
  "SAMPLE_TO_MIN_SIZE\020\004\"/\n\tToneMatch\022\020\n\010cur"
  "r_val\030\001 \001(\002\022\020\n\010prev_val\030\002 \001(\002\"R\n\016PatchTo"
  "neMatch\022(\n\ntone_match\030\001 \003(\0132\024.mediapipe."
  "ToneMatch\022\026\n\013irls_weight\030\002 \001(\002:\0011"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto = {
  false, false, 2153, descriptor_table_protodef_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto, "mediapipe/util/tracking/tone_estimation.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToneChange_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[0];
}
bool ToneChange_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ToneChange_Type ToneChange::VALID;
constexpr ToneChange_Type ToneChange::INVALID;
constexpr ToneChange_Type ToneChange::Type_MIN;
constexpr ToneChange_Type ToneChange::Type_MAX;
constexpr int ToneChange::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToneEstimationOptions_DownsampleMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[1];
}
bool ToneEstimationOptions_DownsampleMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions::DOWNSAMPLE_NONE;
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions::DOWNSAMPLE_TO_MAX_SIZE;
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions::DOWNSAMPLE_BY_FACTOR;
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions::DOWNSAMPLE_TO_MIN_SIZE;
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions::DownsampleMode_MIN;
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions::DownsampleMode_MAX;
constexpr int ToneEstimationOptions::DownsampleMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ToneChange_StabilityStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ToneChange_StabilityStats>()._has_bits_);
  static void set_has_num_inliers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inlier_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inlier_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ToneChange_StabilityStats::ToneChange_StabilityStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ToneChange.StabilityStats)
}
ToneChange_StabilityStats::ToneChange_StabilityStats(const ToneChange_StabilityStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_inliers_, &from.num_inliers_,
    static_cast<size_t>(reinterpret_cast<char*>(&inlier_weight_) -
    reinterpret_cast<char*>(&num_inliers_)) + sizeof(inlier_weight_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ToneChange.StabilityStats)
}

void ToneChange_StabilityStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_inliers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inlier_weight_) -
    reinterpret_cast<char*>(&num_inliers_)) + sizeof(inlier_weight_));
}

ToneChange_StabilityStats::~ToneChange_StabilityStats() {
  // @@protoc_insertion_point(destructor:mediapipe.ToneChange.StabilityStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToneChange_StabilityStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToneChange_StabilityStats::ArenaDtor(void* object) {
  ToneChange_StabilityStats* _this = reinterpret_cast< ToneChange_StabilityStats* >(object);
  (void)_this;
}
void ToneChange_StabilityStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToneChange_StabilityStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToneChange_StabilityStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ToneChange.StabilityStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&num_inliers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inlier_weight_) -
        reinterpret_cast<char*>(&num_inliers_)) + sizeof(inlier_weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToneChange_StabilityStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_inliers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_inliers(&has_bits);
          num_inliers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float inlier_fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_inlier_fraction(&has_bits);
          inlier_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double inlier_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_inlier_weight(&has_bits);
          inlier_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToneChange_StabilityStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ToneChange.StabilityStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_inliers = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_inliers(), target);
  }

  // optional float inlier_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_inlier_fraction(), target);
  }

  // optional double inlier_weight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_inlier_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ToneChange.StabilityStats)
  return target;
}

size_t ToneChange_StabilityStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ToneChange.StabilityStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 num_inliers = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_inliers());
    }

    // optional float inlier_fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional double inlier_weight = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToneChange_StabilityStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ToneChange.StabilityStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ToneChange_StabilityStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToneChange_StabilityStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ToneChange.StabilityStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ToneChange.StabilityStats)
    MergeFrom(*source);
  }
}

void ToneChange_StabilityStats::MergeFrom(const ToneChange_StabilityStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ToneChange.StabilityStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      num_inliers_ = from.num_inliers_;
    }
    if (cached_has_bits & 0x00000002u) {
      inlier_fraction_ = from.inlier_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      inlier_weight_ = from.inlier_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToneChange_StabilityStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ToneChange.StabilityStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneChange_StabilityStats::CopyFrom(const ToneChange_StabilityStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ToneChange.StabilityStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneChange_StabilityStats::IsInitialized() const {
  return true;
}

void ToneChange_StabilityStats::InternalSwap(ToneChange_StabilityStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToneChange_StabilityStats, inlier_weight_)
      + sizeof(ToneChange_StabilityStats::inlier_weight_)
      - PROTOBUF_FIELD_OFFSET(ToneChange_StabilityStats, num_inliers_)>(
          reinterpret_cast<char*>(&num_inliers_),
          reinterpret_cast<char*>(&other->num_inliers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToneChange_StabilityStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[0]);
}

// ===================================================================

class ToneChange::_Internal {
 public:
  using HasBits = decltype(std::declval<ToneChange>()._has_bits_);
  static const ::mediapipe::GainBiasModel& gain_bias(const ToneChange* msg);
  static void set_has_gain_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::AffineToneModel& affine(const ToneChange* msg);
  static void set_has_affine(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::MixtureGainBiasModel& mixture_gain_bias(const ToneChange* msg);
  static void set_has_mixture_gain_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mediapipe::MixtureAffineToneModel& mixture_affine(const ToneChange* msg);
  static void set_has_mixture_affine(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mixture_domain_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frac_clipped(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_low_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_low_mid_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mid_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_high_mid_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_high_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_log_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::mediapipe::ToneChange_StabilityStats& stability_stats(const ToneChange* msg);
  static void set_has_stability_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mediapipe::GainBiasModel&
ToneChange::_Internal::gain_bias(const ToneChange* msg) {
  return *msg->gain_bias_;
}
const ::mediapipe::AffineToneModel&
ToneChange::_Internal::affine(const ToneChange* msg) {
  return *msg->affine_;
}
const ::mediapipe::MixtureGainBiasModel&
ToneChange::_Internal::mixture_gain_bias(const ToneChange* msg) {
  return *msg->mixture_gain_bias_;
}
const ::mediapipe::MixtureAffineToneModel&
ToneChange::_Internal::mixture_affine(const ToneChange* msg) {
  return *msg->mixture_affine_;
}
const ::mediapipe::ToneChange_StabilityStats&
ToneChange::_Internal::stability_stats(const ToneChange* msg) {
  return *msg->stability_stats_;
}
void ToneChange::clear_gain_bias() {
  if (gain_bias_ != nullptr) gain_bias_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ToneChange::clear_affine() {
  if (affine_ != nullptr) affine_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ToneChange::clear_mixture_gain_bias() {
  if (mixture_gain_bias_ != nullptr) mixture_gain_bias_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ToneChange::clear_mixture_affine() {
  if (mixture_affine_ != nullptr) mixture_affine_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ToneChange::ToneChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ToneChange)
}
ToneChange::ToneChange(const ToneChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gain_bias()) {
    gain_bias_ = new ::mediapipe::GainBiasModel(*from.gain_bias_);
  } else {
    gain_bias_ = nullptr;
  }
  if (from._internal_has_affine()) {
    affine_ = new ::mediapipe::AffineToneModel(*from.affine_);
  } else {
    affine_ = nullptr;
  }
  if (from._internal_has_mixture_gain_bias()) {
    mixture_gain_bias_ = new ::mediapipe::MixtureGainBiasModel(*from.mixture_gain_bias_);
  } else {
    mixture_gain_bias_ = nullptr;
  }
  if (from._internal_has_mixture_affine()) {
    mixture_affine_ = new ::mediapipe::MixtureAffineToneModel(*from.mixture_affine_);
  } else {
    mixture_affine_ = nullptr;
  }
  if (from._internal_has_stability_stats()) {
    stability_stats_ = new ::mediapipe::ToneChange_StabilityStats(*from.stability_stats_);
  } else {
    stability_stats_ = nullptr;
  }
  ::memcpy(&mixture_domain_sigma_, &from.mixture_domain_sigma_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&mixture_domain_sigma_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ToneChange)
}

void ToneChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gain_bias_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&gain_bias_)) + sizeof(type_));
}

ToneChange::~ToneChange() {
  // @@protoc_insertion_point(destructor:mediapipe.ToneChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToneChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gain_bias_;
  if (this != internal_default_instance()) delete affine_;
  if (this != internal_default_instance()) delete mixture_gain_bias_;
  if (this != internal_default_instance()) delete mixture_affine_;
  if (this != internal_default_instance()) delete stability_stats_;
}

void ToneChange::ArenaDtor(void* object) {
  ToneChange* _this = reinterpret_cast< ToneChange* >(object);
  (void)_this;
}
void ToneChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToneChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToneChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ToneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gain_bias_ != nullptr);
      gain_bias_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(affine_ != nullptr);
      affine_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mixture_gain_bias_ != nullptr);
      mixture_gain_bias_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mixture_affine_ != nullptr);
      mixture_affine_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stability_stats_ != nullptr);
      stability_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&mixture_domain_sigma_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_percentile_) -
        reinterpret_cast<char*>(&mixture_domain_sigma_)) + sizeof(low_percentile_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&low_mid_percentile_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&low_mid_percentile_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToneChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.GainBiasModel gain_bias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.AffineToneModel affine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_affine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MixtureGainBiasModel mixture_gain_bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixture_gain_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MixtureAffineToneModel mixture_affine = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixture_affine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mixture_domain_sigma = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_mixture_domain_sigma(&has_bits);
          mixture_domain_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frac_clipped = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_frac_clipped(&has_bits);
          frac_clipped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float low_percentile = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_low_percentile(&has_bits);
          low_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float low_mid_percentile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_low_mid_percentile(&has_bits);
          low_mid_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mid_percentile = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_mid_percentile(&has_bits);
          mid_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float high_mid_percentile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_high_mid_percentile(&has_bits);
          high_mid_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float high_percentile = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_high_percentile(&has_bits);
          high_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool log_domain = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_log_domain(&has_bits);
          log_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ToneChange.Type type = 14 [default = VALID];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ToneChange_Type_IsValid(val))) {
            _internal_set_type(static_cast<::mediapipe::ToneChange_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ToneChange.StabilityStats stability_stats = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_stability_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToneChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ToneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.GainBiasModel gain_bias = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gain_bias(this), target, stream);
  }

  // optional .mediapipe.AffineToneModel affine = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::affine(this), target, stream);
  }

  // optional .mediapipe.MixtureGainBiasModel mixture_gain_bias = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mixture_gain_bias(this), target, stream);
  }

  // optional .mediapipe.MixtureAffineToneModel mixture_affine = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mixture_affine(this), target, stream);
  }

  // optional float mixture_domain_sigma = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_mixture_domain_sigma(), target);
  }

  // optional float frac_clipped = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_frac_clipped(), target);
  }

  // optional float low_percentile = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_low_percentile(), target);
  }

  // optional float low_mid_percentile = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_low_mid_percentile(), target);
  }

  // optional float mid_percentile = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_mid_percentile(), target);
  }

  // optional float high_mid_percentile = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_high_mid_percentile(), target);
  }

  // optional float high_percentile = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_high_percentile(), target);
  }

  // optional bool log_domain = 13 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_log_domain(), target);
  }

  // optional .mediapipe.ToneChange.Type type = 14 [default = VALID];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_type(), target);
  }

  // optional .mediapipe.ToneChange.StabilityStats stability_stats = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::stability_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ToneChange)
  return target;
}

size_t ToneChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ToneChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.GainBiasModel gain_bias = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gain_bias_);
    }

    // optional .mediapipe.AffineToneModel affine = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *affine_);
    }

    // optional .mediapipe.MixtureGainBiasModel mixture_gain_bias = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mixture_gain_bias_);
    }

    // optional .mediapipe.MixtureAffineToneModel mixture_affine = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mixture_affine_);
    }

    // optional .mediapipe.ToneChange.StabilityStats stability_stats = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stability_stats_);
    }

    // optional float mixture_domain_sigma = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float frac_clipped = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float low_percentile = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float low_mid_percentile = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float mid_percentile = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float high_mid_percentile = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float high_percentile = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional bool log_domain = 13 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional .mediapipe.ToneChange.Type type = 14 [default = VALID];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToneChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ToneChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ToneChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToneChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ToneChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ToneChange)
    MergeFrom(*source);
  }
}

void ToneChange::MergeFrom(const ToneChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ToneChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gain_bias()->::mediapipe::GainBiasModel::MergeFrom(from._internal_gain_bias());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_affine()->::mediapipe::AffineToneModel::MergeFrom(from._internal_affine());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mixture_gain_bias()->::mediapipe::MixtureGainBiasModel::MergeFrom(from._internal_mixture_gain_bias());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mixture_affine()->::mediapipe::MixtureAffineToneModel::MergeFrom(from._internal_mixture_affine());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stability_stats()->::mediapipe::ToneChange_StabilityStats::MergeFrom(from._internal_stability_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      mixture_domain_sigma_ = from.mixture_domain_sigma_;
    }
    if (cached_has_bits & 0x00000040u) {
      frac_clipped_ = from.frac_clipped_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_percentile_ = from.low_percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      low_mid_percentile_ = from.low_mid_percentile_;
    }
    if (cached_has_bits & 0x00000200u) {
      mid_percentile_ = from.mid_percentile_;
    }
    if (cached_has_bits & 0x00000400u) {
      high_mid_percentile_ = from.high_mid_percentile_;
    }
    if (cached_has_bits & 0x00000800u) {
      high_percentile_ = from.high_percentile_;
    }
    if (cached_has_bits & 0x00001000u) {
      log_domain_ = from.log_domain_;
    }
    if (cached_has_bits & 0x00002000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToneChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ToneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneChange::CopyFrom(const ToneChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ToneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneChange::IsInitialized() const {
  return true;
}

void ToneChange::InternalSwap(ToneChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToneChange, type_)
      + sizeof(ToneChange::type_)
      - PROTOBUF_FIELD_OFFSET(ToneChange, gain_bias_)>(
          reinterpret_cast<char*>(&gain_bias_),
          reinterpret_cast<char*>(&other->gain_bias_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToneChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[1]);
}

// ===================================================================

class ToneMatchOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ToneMatchOptions>()._has_bits_);
  static void set_has_min_match_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_match_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_percentile_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_patch_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_frac_clipped(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ToneMatchOptions::ToneMatchOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ToneMatchOptions)
}
ToneMatchOptions::ToneMatchOptions(const ToneMatchOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&log_domain_, &from.log_domain_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_radius_) -
    reinterpret_cast<char*>(&log_domain_)) + sizeof(patch_radius_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ToneMatchOptions)
}

void ToneMatchOptions::SharedCtor() {
log_domain_ = false;
max_frac_clipped_ = 0.4f;
min_match_percentile_ = 0.01f;
max_match_percentile_ = 0.99f;
match_percentile_steps_ = 10;
patch_radius_ = 18;
}

ToneMatchOptions::~ToneMatchOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.ToneMatchOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToneMatchOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToneMatchOptions::ArenaDtor(void* object) {
  ToneMatchOptions* _this = reinterpret_cast< ToneMatchOptions* >(object);
  (void)_this;
}
void ToneMatchOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToneMatchOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToneMatchOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ToneMatchOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    log_domain_ = false;
    max_frac_clipped_ = 0.4f;
    min_match_percentile_ = 0.01f;
    max_match_percentile_ = 0.99f;
    match_percentile_steps_ = 10;
    patch_radius_ = 18;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToneMatchOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_match_percentile = 1 [default = 0.01];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_match_percentile(&has_bits);
          min_match_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_match_percentile = 2 [default = 0.99];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_match_percentile(&has_bits);
          max_match_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 match_percentile_steps = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_percentile_steps(&has_bits);
          match_percentile_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 patch_radius = 4 [default = 18];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_patch_radius(&has_bits);
          patch_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_frac_clipped = 5 [default = 0.4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_frac_clipped(&has_bits);
          max_frac_clipped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool log_domain = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_log_domain(&has_bits);
          log_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToneMatchOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ToneMatchOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_match_percentile = 1 [default = 0.01];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_match_percentile(), target);
  }

  // optional float max_match_percentile = 2 [default = 0.99];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_match_percentile(), target);
  }

  // optional int32 match_percentile_steps = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_match_percentile_steps(), target);
  }

  // optional int32 patch_radius = 4 [default = 18];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_patch_radius(), target);
  }

  // optional float max_frac_clipped = 5 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_frac_clipped(), target);
  }

  // optional bool log_domain = 8 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_log_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ToneMatchOptions)
  return target;
}

size_t ToneMatchOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ToneMatchOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool log_domain = 8 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float max_frac_clipped = 5 [default = 0.4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_match_percentile = 1 [default = 0.01];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_match_percentile = 2 [default = 0.99];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 match_percentile_steps = 3 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_match_percentile_steps());
    }

    // optional int32 patch_radius = 4 [default = 18];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_patch_radius());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToneMatchOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ToneMatchOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ToneMatchOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToneMatchOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ToneMatchOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ToneMatchOptions)
    MergeFrom(*source);
  }
}

void ToneMatchOptions::MergeFrom(const ToneMatchOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ToneMatchOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      log_domain_ = from.log_domain_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_frac_clipped_ = from.max_frac_clipped_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_match_percentile_ = from.min_match_percentile_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_match_percentile_ = from.max_match_percentile_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_percentile_steps_ = from.match_percentile_steps_;
    }
    if (cached_has_bits & 0x00000020u) {
      patch_radius_ = from.patch_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToneMatchOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ToneMatchOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneMatchOptions::CopyFrom(const ToneMatchOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ToneMatchOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneMatchOptions::IsInitialized() const {
  return true;
}

void ToneMatchOptions::InternalSwap(ToneMatchOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(log_domain_, other->log_domain_);
  swap(max_frac_clipped_, other->max_frac_clipped_);
  swap(min_match_percentile_, other->min_match_percentile_);
  swap(max_match_percentile_, other->max_match_percentile_);
  swap(match_percentile_steps_, other->match_percentile_steps_);
  swap(patch_radius_, other->patch_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToneMatchOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[2]);
}

// ===================================================================

class ClipMaskOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ClipMaskOptions>()._has_bits_);
  static void set_has_min_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_clipped_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clip_mask_diameter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ClipMaskOptions::ClipMaskOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ClipMaskOptions)
}
ClipMaskOptions::ClipMaskOptions(const ClipMaskOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_exposure_, &from.min_exposure_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_mask_diameter_) -
    reinterpret_cast<char*>(&min_exposure_)) + sizeof(clip_mask_diameter_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ClipMaskOptions)
}

void ClipMaskOptions::SharedCtor() {
min_exposure_ = 0.02f;
max_exposure_ = 0.98f;
max_clipped_channels_ = 1;
clip_mask_diameter_ = 5;
}

ClipMaskOptions::~ClipMaskOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.ClipMaskOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClipMaskOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClipMaskOptions::ArenaDtor(void* object) {
  ClipMaskOptions* _this = reinterpret_cast< ClipMaskOptions* >(object);
  (void)_this;
}
void ClipMaskOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClipMaskOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClipMaskOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ClipMaskOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    min_exposure_ = 0.02f;
    max_exposure_ = 0.98f;
    max_clipped_channels_ = 1;
    clip_mask_diameter_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClipMaskOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_exposure = 1 [default = 0.02];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_exposure(&has_bits);
          min_exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_exposure = 2 [default = 0.98];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_exposure(&has_bits);
          max_exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_clipped_channels = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_clipped_channels(&has_bits);
          max_clipped_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clip_mask_diameter = 5 [default = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clip_mask_diameter(&has_bits);
          clip_mask_diameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClipMaskOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ClipMaskOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_exposure = 1 [default = 0.02];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_exposure(), target);
  }

  // optional float max_exposure = 2 [default = 0.98];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_exposure(), target);
  }

  // optional int32 max_clipped_channels = 4 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_clipped_channels(), target);
  }

  // optional int32 clip_mask_diameter = 5 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_clip_mask_diameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ClipMaskOptions)
  return target;
}

size_t ClipMaskOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ClipMaskOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float min_exposure = 1 [default = 0.02];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_exposure = 2 [default = 0.98];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 max_clipped_channels = 4 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_clipped_channels());
    }

    // optional int32 clip_mask_diameter = 5 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clip_mask_diameter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipMaskOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ClipMaskOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ClipMaskOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClipMaskOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ClipMaskOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ClipMaskOptions)
    MergeFrom(*source);
  }
}

void ClipMaskOptions::MergeFrom(const ClipMaskOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ClipMaskOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      min_exposure_ = from.min_exposure_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_exposure_ = from.max_exposure_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_clipped_channels_ = from.max_clipped_channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      clip_mask_diameter_ = from.clip_mask_diameter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClipMaskOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ClipMaskOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipMaskOptions::CopyFrom(const ClipMaskOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ClipMaskOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipMaskOptions::IsInitialized() const {
  return true;
}

void ClipMaskOptions::InternalSwap(ClipMaskOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_exposure_, other->min_exposure_);
  swap(max_exposure_, other->max_exposure_);
  swap(max_clipped_channels_, other->max_clipped_channels_);
  swap(clip_mask_diameter_, other->clip_mask_diameter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipMaskOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[3]);
}

// ===================================================================

class ToneEstimationOptions_GainBiasBounds::_Internal {
 public:
  using HasBits = decltype(std::declval<ToneEstimationOptions_GainBiasBounds>()._has_bits_);
  static void set_has_min_inlier_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_inlier_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lower_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upper_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lower_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_upper_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ToneEstimationOptions_GainBiasBounds::ToneEstimationOptions_GainBiasBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ToneEstimationOptions.GainBiasBounds)
}
ToneEstimationOptions_GainBiasBounds::ToneEstimationOptions_GainBiasBounds(const ToneEstimationOptions_GainBiasBounds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_inlier_fraction_, &from.min_inlier_fraction_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_bias_) -
    reinterpret_cast<char*>(&min_inlier_fraction_)) + sizeof(upper_bias_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ToneEstimationOptions.GainBiasBounds)
}

void ToneEstimationOptions_GainBiasBounds::SharedCtor() {
min_inlier_fraction_ = 0.75f;
min_inlier_weight_ = 0.5f;
lower_gain_ = 0.75f;
upper_gain_ = 1.334f;
lower_bias_ = -0.2f;
upper_bias_ = 0.2f;
}

ToneEstimationOptions_GainBiasBounds::~ToneEstimationOptions_GainBiasBounds() {
  // @@protoc_insertion_point(destructor:mediapipe.ToneEstimationOptions.GainBiasBounds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToneEstimationOptions_GainBiasBounds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToneEstimationOptions_GainBiasBounds::ArenaDtor(void* object) {
  ToneEstimationOptions_GainBiasBounds* _this = reinterpret_cast< ToneEstimationOptions_GainBiasBounds* >(object);
  (void)_this;
}
void ToneEstimationOptions_GainBiasBounds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToneEstimationOptions_GainBiasBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToneEstimationOptions_GainBiasBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ToneEstimationOptions.GainBiasBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    min_inlier_fraction_ = 0.75f;
    min_inlier_weight_ = 0.5f;
    lower_gain_ = 0.75f;
    upper_gain_ = 1.334f;
    lower_bias_ = -0.2f;
    upper_bias_ = 0.2f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToneEstimationOptions_GainBiasBounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float min_inlier_fraction = 1 [default = 0.75];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_inlier_fraction(&has_bits);
          min_inlier_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_inlier_weight = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_inlier_weight(&has_bits);
          min_inlier_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lower_gain = 3 [default = 0.75];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_lower_gain(&has_bits);
          lower_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float upper_gain = 4 [default = 1.334];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_upper_gain(&has_bits);
          upper_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lower_bias = 5 [default = -0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_lower_bias(&has_bits);
          lower_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float upper_bias = 6 [default = 0.2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_upper_bias(&has_bits);
          upper_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToneEstimationOptions_GainBiasBounds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ToneEstimationOptions.GainBiasBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_inlier_fraction = 1 [default = 0.75];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_inlier_fraction(), target);
  }

  // optional float min_inlier_weight = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_inlier_weight(), target);
  }

  // optional float lower_gain = 3 [default = 0.75];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lower_gain(), target);
  }

  // optional float upper_gain = 4 [default = 1.334];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_upper_gain(), target);
  }

  // optional float lower_bias = 5 [default = -0.2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lower_bias(), target);
  }

  // optional float upper_bias = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_upper_bias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ToneEstimationOptions.GainBiasBounds)
  return target;
}

size_t ToneEstimationOptions_GainBiasBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ToneEstimationOptions.GainBiasBounds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float min_inlier_fraction = 1 [default = 0.75];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_inlier_weight = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float lower_gain = 3 [default = 0.75];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float upper_gain = 4 [default = 1.334];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float lower_bias = 5 [default = -0.2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float upper_bias = 6 [default = 0.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToneEstimationOptions_GainBiasBounds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ToneEstimationOptions.GainBiasBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const ToneEstimationOptions_GainBiasBounds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToneEstimationOptions_GainBiasBounds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ToneEstimationOptions.GainBiasBounds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ToneEstimationOptions.GainBiasBounds)
    MergeFrom(*source);
  }
}

void ToneEstimationOptions_GainBiasBounds::MergeFrom(const ToneEstimationOptions_GainBiasBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ToneEstimationOptions.GainBiasBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      min_inlier_fraction_ = from.min_inlier_fraction_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_inlier_weight_ = from.min_inlier_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      lower_gain_ = from.lower_gain_;
    }
    if (cached_has_bits & 0x00000008u) {
      upper_gain_ = from.upper_gain_;
    }
    if (cached_has_bits & 0x00000010u) {
      lower_bias_ = from.lower_bias_;
    }
    if (cached_has_bits & 0x00000020u) {
      upper_bias_ = from.upper_bias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToneEstimationOptions_GainBiasBounds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ToneEstimationOptions.GainBiasBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneEstimationOptions_GainBiasBounds::CopyFrom(const ToneEstimationOptions_GainBiasBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ToneEstimationOptions.GainBiasBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneEstimationOptions_GainBiasBounds::IsInitialized() const {
  return true;
}

void ToneEstimationOptions_GainBiasBounds::InternalSwap(ToneEstimationOptions_GainBiasBounds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_inlier_fraction_, other->min_inlier_fraction_);
  swap(min_inlier_weight_, other->min_inlier_weight_);
  swap(lower_gain_, other->lower_gain_);
  swap(upper_gain_, other->upper_gain_);
  swap(lower_bias_, other->lower_bias_);
  swap(upper_bias_, other->upper_bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToneEstimationOptions_GainBiasBounds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[4]);
}

// ===================================================================

class ToneEstimationOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ToneEstimationOptions>()._has_bits_);
  static const ::mediapipe::ToneMatchOptions& tone_match_options(const ToneEstimationOptions* msg);
  static void set_has_tone_match_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::ClipMaskOptions& clip_mask_options(const ToneEstimationOptions* msg);
  static void set_has_clip_mask_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stats_low_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stats_low_mid_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stats_mid_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stats_high_mid_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stats_high_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_irls_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::mediapipe::ToneEstimationOptions_GainBiasBounds& stable_gain_bias_bounds(const ToneEstimationOptions* msg);
  static void set_has_stable_gain_bias_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_downsample_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_downsampling_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_downsample_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mediapipe::ToneMatchOptions&
ToneEstimationOptions::_Internal::tone_match_options(const ToneEstimationOptions* msg) {
  return *msg->tone_match_options_;
}
const ::mediapipe::ClipMaskOptions&
ToneEstimationOptions::_Internal::clip_mask_options(const ToneEstimationOptions* msg) {
  return *msg->clip_mask_options_;
}
const ::mediapipe::ToneEstimationOptions_GainBiasBounds&
ToneEstimationOptions::_Internal::stable_gain_bias_bounds(const ToneEstimationOptions* msg) {
  return *msg->stable_gain_bias_bounds_;
}
ToneEstimationOptions::ToneEstimationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ToneEstimationOptions)
}
ToneEstimationOptions::ToneEstimationOptions(const ToneEstimationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tone_match_options()) {
    tone_match_options_ = new ::mediapipe::ToneMatchOptions(*from.tone_match_options_);
  } else {
    tone_match_options_ = nullptr;
  }
  if (from._internal_has_clip_mask_options()) {
    clip_mask_options_ = new ::mediapipe::ClipMaskOptions(*from.clip_mask_options_);
  } else {
    clip_mask_options_ = nullptr;
  }
  if (from._internal_has_stable_gain_bias_bounds()) {
    stable_gain_bias_bounds_ = new ::mediapipe::ToneEstimationOptions_GainBiasBounds(*from.stable_gain_bias_bounds_);
  } else {
    stable_gain_bias_bounds_ = nullptr;
  }
  ::memcpy(&downsample_factor_, &from.downsample_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&downsampling_size_) -
    reinterpret_cast<char*>(&downsample_factor_)) + sizeof(downsampling_size_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ToneEstimationOptions)
}

void ToneEstimationOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tone_match_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stable_gain_bias_bounds_) -
    reinterpret_cast<char*>(&tone_match_options_)) + sizeof(stable_gain_bias_bounds_));
downsample_factor_ = 2;
stats_low_percentile_ = 0.05f;
stats_low_mid_percentile_ = 0.2f;
stats_mid_percentile_ = 0.5f;
stats_high_mid_percentile_ = 0.8f;
stats_high_percentile_ = 0.95f;
irls_iterations_ = 10;
downsample_mode_ = 1;
downsampling_size_ = 256;
}

ToneEstimationOptions::~ToneEstimationOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.ToneEstimationOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToneEstimationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tone_match_options_;
  if (this != internal_default_instance()) delete clip_mask_options_;
  if (this != internal_default_instance()) delete stable_gain_bias_bounds_;
}

void ToneEstimationOptions::ArenaDtor(void* object) {
  ToneEstimationOptions* _this = reinterpret_cast< ToneEstimationOptions* >(object);
  (void)_this;
}
void ToneEstimationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToneEstimationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToneEstimationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ToneEstimationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tone_match_options_ != nullptr);
      tone_match_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clip_mask_options_ != nullptr);
      clip_mask_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stable_gain_bias_bounds_ != nullptr);
      stable_gain_bias_bounds_->Clear();
    }
    downsample_factor_ = 2;
    stats_low_percentile_ = 0.05f;
    stats_low_mid_percentile_ = 0.2f;
    stats_mid_percentile_ = 0.5f;
    stats_high_mid_percentile_ = 0.8f;
  }
  if (cached_has_bits & 0x00000f00u) {
    stats_high_percentile_ = 0.95f;
    irls_iterations_ = 10;
    downsample_mode_ = 1;
    downsampling_size_ = 256;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToneEstimationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.ToneMatchOptions tone_match_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tone_match_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ClipMaskOptions clip_mask_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip_mask_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float stats_low_percentile = 3 [default = 0.05];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_stats_low_percentile(&has_bits);
          stats_low_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stats_low_mid_percentile = 4 [default = 0.2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_stats_low_mid_percentile(&has_bits);
          stats_low_mid_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stats_mid_percentile = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_stats_mid_percentile(&has_bits);
          stats_mid_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stats_high_mid_percentile = 6 [default = 0.8];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_stats_high_mid_percentile(&has_bits);
          stats_high_mid_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stats_high_percentile = 7 [default = 0.95];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_stats_high_percentile(&has_bits);
          stats_high_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 irls_iterations = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_irls_iterations(&has_bits);
          irls_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ToneEstimationOptions.GainBiasBounds stable_gain_bias_bounds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stable_gain_bias_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.ToneEstimationOptions.DownsampleMode downsample_mode = 10 [default = DOWNSAMPLE_NONE];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::ToneEstimationOptions_DownsampleMode_IsValid(val))) {
            _internal_set_downsample_mode(static_cast<::mediapipe::ToneEstimationOptions_DownsampleMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 downsampling_size = 11 [default = 256];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_downsampling_size(&has_bits);
          downsampling_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float downsample_factor = 12 [default = 2];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_downsample_factor(&has_bits);
          downsample_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToneEstimationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ToneEstimationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.ToneMatchOptions tone_match_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tone_match_options(this), target, stream);
  }

  // optional .mediapipe.ClipMaskOptions clip_mask_options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clip_mask_options(this), target, stream);
  }

  // optional float stats_low_percentile = 3 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stats_low_percentile(), target);
  }

  // optional float stats_low_mid_percentile = 4 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_stats_low_mid_percentile(), target);
  }

  // optional float stats_mid_percentile = 5 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_stats_mid_percentile(), target);
  }

  // optional float stats_high_mid_percentile = 6 [default = 0.8];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_stats_high_mid_percentile(), target);
  }

  // optional float stats_high_percentile = 7 [default = 0.95];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_stats_high_percentile(), target);
  }

  // optional int32 irls_iterations = 8 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_irls_iterations(), target);
  }

  // optional .mediapipe.ToneEstimationOptions.GainBiasBounds stable_gain_bias_bounds = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stable_gain_bias_bounds(this), target, stream);
  }

  // optional .mediapipe.ToneEstimationOptions.DownsampleMode downsample_mode = 10 [default = DOWNSAMPLE_NONE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_downsample_mode(), target);
  }

  // optional int32 downsampling_size = 11 [default = 256];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_downsampling_size(), target);
  }

  // optional float downsample_factor = 12 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_downsample_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ToneEstimationOptions)
  return target;
}

size_t ToneEstimationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ToneEstimationOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.ToneMatchOptions tone_match_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tone_match_options_);
    }

    // optional .mediapipe.ClipMaskOptions clip_mask_options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clip_mask_options_);
    }

    // optional .mediapipe.ToneEstimationOptions.GainBiasBounds stable_gain_bias_bounds = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stable_gain_bias_bounds_);
    }

    // optional float downsample_factor = 12 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float stats_low_percentile = 3 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float stats_low_mid_percentile = 4 [default = 0.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float stats_mid_percentile = 5 [default = 0.5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float stats_high_mid_percentile = 6 [default = 0.8];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float stats_high_percentile = 7 [default = 0.95];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 irls_iterations = 8 [default = 10];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_irls_iterations());
    }

    // optional .mediapipe.ToneEstimationOptions.DownsampleMode downsample_mode = 10 [default = DOWNSAMPLE_NONE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_downsample_mode());
    }

    // optional int32 downsampling_size = 11 [default = 256];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_downsampling_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToneEstimationOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ToneEstimationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ToneEstimationOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToneEstimationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ToneEstimationOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ToneEstimationOptions)
    MergeFrom(*source);
  }
}

void ToneEstimationOptions::MergeFrom(const ToneEstimationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ToneEstimationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tone_match_options()->::mediapipe::ToneMatchOptions::MergeFrom(from._internal_tone_match_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_clip_mask_options()->::mediapipe::ClipMaskOptions::MergeFrom(from._internal_clip_mask_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stable_gain_bias_bounds()->::mediapipe::ToneEstimationOptions_GainBiasBounds::MergeFrom(from._internal_stable_gain_bias_bounds());
    }
    if (cached_has_bits & 0x00000008u) {
      downsample_factor_ = from.downsample_factor_;
    }
    if (cached_has_bits & 0x00000010u) {
      stats_low_percentile_ = from.stats_low_percentile_;
    }
    if (cached_has_bits & 0x00000020u) {
      stats_low_mid_percentile_ = from.stats_low_mid_percentile_;
    }
    if (cached_has_bits & 0x00000040u) {
      stats_mid_percentile_ = from.stats_mid_percentile_;
    }
    if (cached_has_bits & 0x00000080u) {
      stats_high_mid_percentile_ = from.stats_high_mid_percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      stats_high_percentile_ = from.stats_high_percentile_;
    }
    if (cached_has_bits & 0x00000200u) {
      irls_iterations_ = from.irls_iterations_;
    }
    if (cached_has_bits & 0x00000400u) {
      downsample_mode_ = from.downsample_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      downsampling_size_ = from.downsampling_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToneEstimationOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ToneEstimationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneEstimationOptions::CopyFrom(const ToneEstimationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ToneEstimationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneEstimationOptions::IsInitialized() const {
  return true;
}

void ToneEstimationOptions::InternalSwap(ToneEstimationOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToneEstimationOptions, stable_gain_bias_bounds_)
      + sizeof(ToneEstimationOptions::stable_gain_bias_bounds_)
      - PROTOBUF_FIELD_OFFSET(ToneEstimationOptions, tone_match_options_)>(
          reinterpret_cast<char*>(&tone_match_options_),
          reinterpret_cast<char*>(&other->tone_match_options_));
  swap(downsample_factor_, other->downsample_factor_);
  swap(stats_low_percentile_, other->stats_low_percentile_);
  swap(stats_low_mid_percentile_, other->stats_low_mid_percentile_);
  swap(stats_mid_percentile_, other->stats_mid_percentile_);
  swap(stats_high_mid_percentile_, other->stats_high_mid_percentile_);
  swap(stats_high_percentile_, other->stats_high_percentile_);
  swap(irls_iterations_, other->irls_iterations_);
  swap(downsample_mode_, other->downsample_mode_);
  swap(downsampling_size_, other->downsampling_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToneEstimationOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[5]);
}

// ===================================================================

class ToneMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<ToneMatch>()._has_bits_);
  static void set_has_curr_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ToneMatch::ToneMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.ToneMatch)
}
ToneMatch::ToneMatch(const ToneMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&curr_val_, &from.curr_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_val_) -
    reinterpret_cast<char*>(&curr_val_)) + sizeof(prev_val_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ToneMatch)
}

void ToneMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&curr_val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_val_) -
    reinterpret_cast<char*>(&curr_val_)) + sizeof(prev_val_));
}

ToneMatch::~ToneMatch() {
  // @@protoc_insertion_point(destructor:mediapipe.ToneMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToneMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToneMatch::ArenaDtor(void* object) {
  ToneMatch* _this = reinterpret_cast< ToneMatch* >(object);
  (void)_this;
}
void ToneMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToneMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToneMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ToneMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&curr_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prev_val_) -
        reinterpret_cast<char*>(&curr_val_)) + sizeof(prev_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToneMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float curr_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_curr_val(&has_bits);
          curr_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float prev_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_prev_val(&has_bits);
          prev_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToneMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ToneMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float curr_val = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_curr_val(), target);
  }

  // optional float prev_val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_prev_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ToneMatch)
  return target;
}

size_t ToneMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ToneMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float curr_val = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float prev_val = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToneMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ToneMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const ToneMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToneMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ToneMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ToneMatch)
    MergeFrom(*source);
  }
}

void ToneMatch::MergeFrom(const ToneMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ToneMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      curr_val_ = from.curr_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      prev_val_ = from.prev_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToneMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ToneMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToneMatch::CopyFrom(const ToneMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ToneMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToneMatch::IsInitialized() const {
  return true;
}

void ToneMatch::InternalSwap(ToneMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToneMatch, prev_val_)
      + sizeof(ToneMatch::prev_val_)
      - PROTOBUF_FIELD_OFFSET(ToneMatch, curr_val_)>(
          reinterpret_cast<char*>(&curr_val_),
          reinterpret_cast<char*>(&other->curr_val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToneMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[6]);
}

// ===================================================================

class PatchToneMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<PatchToneMatch>()._has_bits_);
  static void set_has_irls_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PatchToneMatch::PatchToneMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tone_match_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.PatchToneMatch)
}
PatchToneMatch::PatchToneMatch(const PatchToneMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tone_match_(from.tone_match_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  irls_weight_ = from.irls_weight_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.PatchToneMatch)
}

void PatchToneMatch::SharedCtor() {
irls_weight_ = 1;
}

PatchToneMatch::~PatchToneMatch() {
  // @@protoc_insertion_point(destructor:mediapipe.PatchToneMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatchToneMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PatchToneMatch::ArenaDtor(void* object) {
  PatchToneMatch* _this = reinterpret_cast< PatchToneMatch* >(object);
  (void)_this;
}
void PatchToneMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchToneMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchToneMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.PatchToneMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tone_match_.Clear();
  irls_weight_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchToneMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.ToneMatch tone_match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tone_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float irls_weight = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_irls_weight(&has_bits);
          irls_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchToneMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.PatchToneMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.ToneMatch tone_match = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tone_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tone_match(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float irls_weight = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_irls_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.PatchToneMatch)
  return target;
}

size_t PatchToneMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.PatchToneMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.ToneMatch tone_match = 1;
  total_size += 1UL * this->_internal_tone_match_size();
  for (const auto& msg : this->tone_match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float irls_weight = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchToneMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.PatchToneMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchToneMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchToneMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.PatchToneMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.PatchToneMatch)
    MergeFrom(*source);
  }
}

void PatchToneMatch::MergeFrom(const PatchToneMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.PatchToneMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tone_match_.MergeFrom(from.tone_match_);
  if (from._internal_has_irls_weight()) {
    _internal_set_irls_weight(from._internal_irls_weight());
  }
}

void PatchToneMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.PatchToneMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchToneMatch::CopyFrom(const PatchToneMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.PatchToneMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchToneMatch::IsInitialized() const {
  return true;
}

void PatchToneMatch::InternalSwap(PatchToneMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tone_match_.InternalSwap(&other->tone_match_);
  swap(irls_weight_, other->irls_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchToneMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::ToneChange_StabilityStats* Arena::CreateMaybeMessage< ::mediapipe::ToneChange_StabilityStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ToneChange_StabilityStats >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ToneChange* Arena::CreateMaybeMessage< ::mediapipe::ToneChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ToneChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ToneMatchOptions* Arena::CreateMaybeMessage< ::mediapipe::ToneMatchOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ToneMatchOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ClipMaskOptions* Arena::CreateMaybeMessage< ::mediapipe::ClipMaskOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ClipMaskOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ToneEstimationOptions_GainBiasBounds* Arena::CreateMaybeMessage< ::mediapipe::ToneEstimationOptions_GainBiasBounds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ToneEstimationOptions_GainBiasBounds >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ToneEstimationOptions* Arena::CreateMaybeMessage< ::mediapipe::ToneEstimationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ToneEstimationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ToneMatch* Arena::CreateMaybeMessage< ::mediapipe::ToneMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ToneMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::PatchToneMatch* Arena::CreateMaybeMessage< ::mediapipe::PatchToneMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::PatchToneMatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
