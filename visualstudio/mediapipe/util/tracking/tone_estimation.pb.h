// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/tone_estimation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/tone_models.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
namespace mediapipe {
class ClipMaskOptions;
struct ClipMaskOptionsDefaultTypeInternal;
extern ClipMaskOptionsDefaultTypeInternal _ClipMaskOptions_default_instance_;
class PatchToneMatch;
struct PatchToneMatchDefaultTypeInternal;
extern PatchToneMatchDefaultTypeInternal _PatchToneMatch_default_instance_;
class ToneChange;
struct ToneChangeDefaultTypeInternal;
extern ToneChangeDefaultTypeInternal _ToneChange_default_instance_;
class ToneChange_StabilityStats;
struct ToneChange_StabilityStatsDefaultTypeInternal;
extern ToneChange_StabilityStatsDefaultTypeInternal _ToneChange_StabilityStats_default_instance_;
class ToneEstimationOptions;
struct ToneEstimationOptionsDefaultTypeInternal;
extern ToneEstimationOptionsDefaultTypeInternal _ToneEstimationOptions_default_instance_;
class ToneEstimationOptions_GainBiasBounds;
struct ToneEstimationOptions_GainBiasBoundsDefaultTypeInternal;
extern ToneEstimationOptions_GainBiasBoundsDefaultTypeInternal _ToneEstimationOptions_GainBiasBounds_default_instance_;
class ToneMatch;
struct ToneMatchDefaultTypeInternal;
extern ToneMatchDefaultTypeInternal _ToneMatch_default_instance_;
class ToneMatchOptions;
struct ToneMatchOptionsDefaultTypeInternal;
extern ToneMatchOptionsDefaultTypeInternal _ToneMatchOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::ClipMaskOptions* Arena::CreateMaybeMessage<::mediapipe::ClipMaskOptions>(Arena*);
template<> ::mediapipe::PatchToneMatch* Arena::CreateMaybeMessage<::mediapipe::PatchToneMatch>(Arena*);
template<> ::mediapipe::ToneChange* Arena::CreateMaybeMessage<::mediapipe::ToneChange>(Arena*);
template<> ::mediapipe::ToneChange_StabilityStats* Arena::CreateMaybeMessage<::mediapipe::ToneChange_StabilityStats>(Arena*);
template<> ::mediapipe::ToneEstimationOptions* Arena::CreateMaybeMessage<::mediapipe::ToneEstimationOptions>(Arena*);
template<> ::mediapipe::ToneEstimationOptions_GainBiasBounds* Arena::CreateMaybeMessage<::mediapipe::ToneEstimationOptions_GainBiasBounds>(Arena*);
template<> ::mediapipe::ToneMatch* Arena::CreateMaybeMessage<::mediapipe::ToneMatch>(Arena*);
template<> ::mediapipe::ToneMatchOptions* Arena::CreateMaybeMessage<::mediapipe::ToneMatchOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum ToneChange_Type : int {
  ToneChange_Type_VALID = 0,
  ToneChange_Type_INVALID = 10
};
bool ToneChange_Type_IsValid(int value);
constexpr ToneChange_Type ToneChange_Type_Type_MIN = ToneChange_Type_VALID;
constexpr ToneChange_Type ToneChange_Type_Type_MAX = ToneChange_Type_INVALID;
constexpr int ToneChange_Type_Type_ARRAYSIZE = ToneChange_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToneChange_Type_descriptor();
template<typename T>
inline const std::string& ToneChange_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ToneChange_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ToneChange_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ToneChange_Type_descriptor(), enum_t_value);
}
inline bool ToneChange_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ToneChange_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ToneChange_Type>(
    ToneChange_Type_descriptor(), name, value);
}
enum ToneEstimationOptions_DownsampleMode : int {
  ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_NONE = 1,
  ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_TO_MAX_SIZE = 2,
  ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_BY_FACTOR = 3,
  ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_TO_MIN_SIZE = 4
};
bool ToneEstimationOptions_DownsampleMode_IsValid(int value);
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions_DownsampleMode_DownsampleMode_MIN = ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_NONE;
constexpr ToneEstimationOptions_DownsampleMode ToneEstimationOptions_DownsampleMode_DownsampleMode_MAX = ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_TO_MIN_SIZE;
constexpr int ToneEstimationOptions_DownsampleMode_DownsampleMode_ARRAYSIZE = ToneEstimationOptions_DownsampleMode_DownsampleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToneEstimationOptions_DownsampleMode_descriptor();
template<typename T>
inline const std::string& ToneEstimationOptions_DownsampleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ToneEstimationOptions_DownsampleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ToneEstimationOptions_DownsampleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ToneEstimationOptions_DownsampleMode_descriptor(), enum_t_value);
}
inline bool ToneEstimationOptions_DownsampleMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ToneEstimationOptions_DownsampleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ToneEstimationOptions_DownsampleMode>(
    ToneEstimationOptions_DownsampleMode_descriptor(), name, value);
}
// ===================================================================

class ToneChange_StabilityStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ToneChange.StabilityStats) */ {
 public:
  inline ToneChange_StabilityStats() : ToneChange_StabilityStats(nullptr) {}
  ~ToneChange_StabilityStats() override;
  explicit constexpr ToneChange_StabilityStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToneChange_StabilityStats(const ToneChange_StabilityStats& from);
  ToneChange_StabilityStats(ToneChange_StabilityStats&& from) noexcept
    : ToneChange_StabilityStats() {
    *this = ::std::move(from);
  }

  inline ToneChange_StabilityStats& operator=(const ToneChange_StabilityStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToneChange_StabilityStats& operator=(ToneChange_StabilityStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToneChange_StabilityStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToneChange_StabilityStats* internal_default_instance() {
    return reinterpret_cast<const ToneChange_StabilityStats*>(
               &_ToneChange_StabilityStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ToneChange_StabilityStats& a, ToneChange_StabilityStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ToneChange_StabilityStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToneChange_StabilityStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToneChange_StabilityStats* New() const final {
    return CreateMaybeMessage<ToneChange_StabilityStats>(nullptr);
  }

  ToneChange_StabilityStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToneChange_StabilityStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToneChange_StabilityStats& from);
  void MergeFrom(const ToneChange_StabilityStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToneChange_StabilityStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ToneChange.StabilityStats";
  }
  protected:
  explicit ToneChange_StabilityStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumInliersFieldNumber = 1,
    kInlierFractionFieldNumber = 2,
    kInlierWeightFieldNumber = 3,
  };
  // optional int32 num_inliers = 1;
  bool has_num_inliers() const;
  private:
  bool _internal_has_num_inliers() const;
  public:
  void clear_num_inliers();
  ::PROTOBUF_NAMESPACE_ID::int32 num_inliers() const;
  void set_num_inliers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_inliers() const;
  void _internal_set_num_inliers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float inlier_fraction = 2;
  bool has_inlier_fraction() const;
  private:
  bool _internal_has_inlier_fraction() const;
  public:
  void clear_inlier_fraction();
  float inlier_fraction() const;
  void set_inlier_fraction(float value);
  private:
  float _internal_inlier_fraction() const;
  void _internal_set_inlier_fraction(float value);
  public:

  // optional double inlier_weight = 3;
  bool has_inlier_weight() const;
  private:
  bool _internal_has_inlier_weight() const;
  public:
  void clear_inlier_weight();
  double inlier_weight() const;
  void set_inlier_weight(double value);
  private:
  double _internal_inlier_weight() const;
  void _internal_set_inlier_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ToneChange.StabilityStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_inliers_;
  float inlier_fraction_;
  double inlier_weight_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// -------------------------------------------------------------------

class ToneChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ToneChange) */ {
 public:
  inline ToneChange() : ToneChange(nullptr) {}
  ~ToneChange() override;
  explicit constexpr ToneChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToneChange(const ToneChange& from);
  ToneChange(ToneChange&& from) noexcept
    : ToneChange() {
    *this = ::std::move(from);
  }

  inline ToneChange& operator=(const ToneChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToneChange& operator=(ToneChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToneChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToneChange* internal_default_instance() {
    return reinterpret_cast<const ToneChange*>(
               &_ToneChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ToneChange& a, ToneChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ToneChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToneChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToneChange* New() const final {
    return CreateMaybeMessage<ToneChange>(nullptr);
  }

  ToneChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToneChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToneChange& from);
  void MergeFrom(const ToneChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToneChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ToneChange";
  }
  protected:
  explicit ToneChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ToneChange_StabilityStats StabilityStats;

  typedef ToneChange_Type Type;
  static constexpr Type VALID =
    ToneChange_Type_VALID;
  static constexpr Type INVALID =
    ToneChange_Type_INVALID;
  static inline bool Type_IsValid(int value) {
    return ToneChange_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ToneChange_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ToneChange_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ToneChange_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ToneChange_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ToneChange_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ToneChange_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGainBiasFieldNumber = 1,
    kAffineFieldNumber = 2,
    kMixtureGainBiasFieldNumber = 3,
    kMixtureAffineFieldNumber = 4,
    kStabilityStatsFieldNumber = 15,
    kMixtureDomainSigmaFieldNumber = 5,
    kFracClippedFieldNumber = 6,
    kLowPercentileFieldNumber = 8,
    kLowMidPercentileFieldNumber = 9,
    kMidPercentileFieldNumber = 10,
    kHighMidPercentileFieldNumber = 11,
    kHighPercentileFieldNumber = 12,
    kLogDomainFieldNumber = 13,
    kTypeFieldNumber = 14,
  };
  // optional .mediapipe.GainBiasModel gain_bias = 1;
  bool has_gain_bias() const;
  private:
  bool _internal_has_gain_bias() const;
  public:
  void clear_gain_bias();
  const ::mediapipe::GainBiasModel& gain_bias() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::GainBiasModel* release_gain_bias();
  ::mediapipe::GainBiasModel* mutable_gain_bias();
  void set_allocated_gain_bias(::mediapipe::GainBiasModel* gain_bias);
  private:
  const ::mediapipe::GainBiasModel& _internal_gain_bias() const;
  ::mediapipe::GainBiasModel* _internal_mutable_gain_bias();
  public:
  void unsafe_arena_set_allocated_gain_bias(
      ::mediapipe::GainBiasModel* gain_bias);
  ::mediapipe::GainBiasModel* unsafe_arena_release_gain_bias();

  // optional .mediapipe.AffineToneModel affine = 2;
  bool has_affine() const;
  private:
  bool _internal_has_affine() const;
  public:
  void clear_affine();
  const ::mediapipe::AffineToneModel& affine() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::AffineToneModel* release_affine();
  ::mediapipe::AffineToneModel* mutable_affine();
  void set_allocated_affine(::mediapipe::AffineToneModel* affine);
  private:
  const ::mediapipe::AffineToneModel& _internal_affine() const;
  ::mediapipe::AffineToneModel* _internal_mutable_affine();
  public:
  void unsafe_arena_set_allocated_affine(
      ::mediapipe::AffineToneModel* affine);
  ::mediapipe::AffineToneModel* unsafe_arena_release_affine();

  // optional .mediapipe.MixtureGainBiasModel mixture_gain_bias = 3;
  bool has_mixture_gain_bias() const;
  private:
  bool _internal_has_mixture_gain_bias() const;
  public:
  void clear_mixture_gain_bias();
  const ::mediapipe::MixtureGainBiasModel& mixture_gain_bias() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MixtureGainBiasModel* release_mixture_gain_bias();
  ::mediapipe::MixtureGainBiasModel* mutable_mixture_gain_bias();
  void set_allocated_mixture_gain_bias(::mediapipe::MixtureGainBiasModel* mixture_gain_bias);
  private:
  const ::mediapipe::MixtureGainBiasModel& _internal_mixture_gain_bias() const;
  ::mediapipe::MixtureGainBiasModel* _internal_mutable_mixture_gain_bias();
  public:
  void unsafe_arena_set_allocated_mixture_gain_bias(
      ::mediapipe::MixtureGainBiasModel* mixture_gain_bias);
  ::mediapipe::MixtureGainBiasModel* unsafe_arena_release_mixture_gain_bias();

  // optional .mediapipe.MixtureAffineToneModel mixture_affine = 4;
  bool has_mixture_affine() const;
  private:
  bool _internal_has_mixture_affine() const;
  public:
  void clear_mixture_affine();
  const ::mediapipe::MixtureAffineToneModel& mixture_affine() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MixtureAffineToneModel* release_mixture_affine();
  ::mediapipe::MixtureAffineToneModel* mutable_mixture_affine();
  void set_allocated_mixture_affine(::mediapipe::MixtureAffineToneModel* mixture_affine);
  private:
  const ::mediapipe::MixtureAffineToneModel& _internal_mixture_affine() const;
  ::mediapipe::MixtureAffineToneModel* _internal_mutable_mixture_affine();
  public:
  void unsafe_arena_set_allocated_mixture_affine(
      ::mediapipe::MixtureAffineToneModel* mixture_affine);
  ::mediapipe::MixtureAffineToneModel* unsafe_arena_release_mixture_affine();

  // optional .mediapipe.ToneChange.StabilityStats stability_stats = 15;
  bool has_stability_stats() const;
  private:
  bool _internal_has_stability_stats() const;
  public:
  void clear_stability_stats();
  const ::mediapipe::ToneChange_StabilityStats& stability_stats() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::ToneChange_StabilityStats* release_stability_stats();
  ::mediapipe::ToneChange_StabilityStats* mutable_stability_stats();
  void set_allocated_stability_stats(::mediapipe::ToneChange_StabilityStats* stability_stats);
  private:
  const ::mediapipe::ToneChange_StabilityStats& _internal_stability_stats() const;
  ::mediapipe::ToneChange_StabilityStats* _internal_mutable_stability_stats();
  public:
  void unsafe_arena_set_allocated_stability_stats(
      ::mediapipe::ToneChange_StabilityStats* stability_stats);
  ::mediapipe::ToneChange_StabilityStats* unsafe_arena_release_stability_stats();

  // optional float mixture_domain_sigma = 5;
  bool has_mixture_domain_sigma() const;
  private:
  bool _internal_has_mixture_domain_sigma() const;
  public:
  void clear_mixture_domain_sigma();
  float mixture_domain_sigma() const;
  void set_mixture_domain_sigma(float value);
  private:
  float _internal_mixture_domain_sigma() const;
  void _internal_set_mixture_domain_sigma(float value);
  public:

  // optional float frac_clipped = 6 [default = 0];
  bool has_frac_clipped() const;
  private:
  bool _internal_has_frac_clipped() const;
  public:
  void clear_frac_clipped();
  float frac_clipped() const;
  void set_frac_clipped(float value);
  private:
  float _internal_frac_clipped() const;
  void _internal_set_frac_clipped(float value);
  public:

  // optional float low_percentile = 8;
  bool has_low_percentile() const;
  private:
  bool _internal_has_low_percentile() const;
  public:
  void clear_low_percentile();
  float low_percentile() const;
  void set_low_percentile(float value);
  private:
  float _internal_low_percentile() const;
  void _internal_set_low_percentile(float value);
  public:

  // optional float low_mid_percentile = 9;
  bool has_low_mid_percentile() const;
  private:
  bool _internal_has_low_mid_percentile() const;
  public:
  void clear_low_mid_percentile();
  float low_mid_percentile() const;
  void set_low_mid_percentile(float value);
  private:
  float _internal_low_mid_percentile() const;
  void _internal_set_low_mid_percentile(float value);
  public:

  // optional float mid_percentile = 10;
  bool has_mid_percentile() const;
  private:
  bool _internal_has_mid_percentile() const;
  public:
  void clear_mid_percentile();
  float mid_percentile() const;
  void set_mid_percentile(float value);
  private:
  float _internal_mid_percentile() const;
  void _internal_set_mid_percentile(float value);
  public:

  // optional float high_mid_percentile = 11;
  bool has_high_mid_percentile() const;
  private:
  bool _internal_has_high_mid_percentile() const;
  public:
  void clear_high_mid_percentile();
  float high_mid_percentile() const;
  void set_high_mid_percentile(float value);
  private:
  float _internal_high_mid_percentile() const;
  void _internal_set_high_mid_percentile(float value);
  public:

  // optional float high_percentile = 12;
  bool has_high_percentile() const;
  private:
  bool _internal_has_high_percentile() const;
  public:
  void clear_high_percentile();
  float high_percentile() const;
  void set_high_percentile(float value);
  private:
  float _internal_high_percentile() const;
  void _internal_set_high_percentile(float value);
  public:

  // optional bool log_domain = 13 [default = false];
  bool has_log_domain() const;
  private:
  bool _internal_has_log_domain() const;
  public:
  void clear_log_domain();
  bool log_domain() const;
  void set_log_domain(bool value);
  private:
  bool _internal_log_domain() const;
  void _internal_set_log_domain(bool value);
  public:

  // optional .mediapipe.ToneChange.Type type = 14 [default = VALID];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mediapipe::ToneChange_Type type() const;
  void set_type(::mediapipe::ToneChange_Type value);
  private:
  ::mediapipe::ToneChange_Type _internal_type() const;
  void _internal_set_type(::mediapipe::ToneChange_Type value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ToneChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::GainBiasModel* gain_bias_;
  ::mediapipe::AffineToneModel* affine_;
  ::mediapipe::MixtureGainBiasModel* mixture_gain_bias_;
  ::mediapipe::MixtureAffineToneModel* mixture_affine_;
  ::mediapipe::ToneChange_StabilityStats* stability_stats_;
  float mixture_domain_sigma_;
  float frac_clipped_;
  float low_percentile_;
  float low_mid_percentile_;
  float mid_percentile_;
  float high_mid_percentile_;
  float high_percentile_;
  bool log_domain_;
  int type_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// -------------------------------------------------------------------

class ToneMatchOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ToneMatchOptions) */ {
 public:
  inline ToneMatchOptions() : ToneMatchOptions(nullptr) {}
  ~ToneMatchOptions() override;
  explicit constexpr ToneMatchOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToneMatchOptions(const ToneMatchOptions& from);
  ToneMatchOptions(ToneMatchOptions&& from) noexcept
    : ToneMatchOptions() {
    *this = ::std::move(from);
  }

  inline ToneMatchOptions& operator=(const ToneMatchOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToneMatchOptions& operator=(ToneMatchOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToneMatchOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToneMatchOptions* internal_default_instance() {
    return reinterpret_cast<const ToneMatchOptions*>(
               &_ToneMatchOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ToneMatchOptions& a, ToneMatchOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ToneMatchOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToneMatchOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToneMatchOptions* New() const final {
    return CreateMaybeMessage<ToneMatchOptions>(nullptr);
  }

  ToneMatchOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToneMatchOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToneMatchOptions& from);
  void MergeFrom(const ToneMatchOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToneMatchOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ToneMatchOptions";
  }
  protected:
  explicit ToneMatchOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogDomainFieldNumber = 8,
    kMaxFracClippedFieldNumber = 5,
    kMinMatchPercentileFieldNumber = 1,
    kMaxMatchPercentileFieldNumber = 2,
    kMatchPercentileStepsFieldNumber = 3,
    kPatchRadiusFieldNumber = 4,
  };
  // optional bool log_domain = 8 [default = false];
  bool has_log_domain() const;
  private:
  bool _internal_has_log_domain() const;
  public:
  void clear_log_domain();
  bool log_domain() const;
  void set_log_domain(bool value);
  private:
  bool _internal_log_domain() const;
  void _internal_set_log_domain(bool value);
  public:

  // optional float max_frac_clipped = 5 [default = 0.4];
  bool has_max_frac_clipped() const;
  private:
  bool _internal_has_max_frac_clipped() const;
  public:
  void clear_max_frac_clipped();
  float max_frac_clipped() const;
  void set_max_frac_clipped(float value);
  private:
  float _internal_max_frac_clipped() const;
  void _internal_set_max_frac_clipped(float value);
  public:

  // optional float min_match_percentile = 1 [default = 0.01];
  bool has_min_match_percentile() const;
  private:
  bool _internal_has_min_match_percentile() const;
  public:
  void clear_min_match_percentile();
  float min_match_percentile() const;
  void set_min_match_percentile(float value);
  private:
  float _internal_min_match_percentile() const;
  void _internal_set_min_match_percentile(float value);
  public:

  // optional float max_match_percentile = 2 [default = 0.99];
  bool has_max_match_percentile() const;
  private:
  bool _internal_has_max_match_percentile() const;
  public:
  void clear_max_match_percentile();
  float max_match_percentile() const;
  void set_max_match_percentile(float value);
  private:
  float _internal_max_match_percentile() const;
  void _internal_set_max_match_percentile(float value);
  public:

  // optional int32 match_percentile_steps = 3 [default = 10];
  bool has_match_percentile_steps() const;
  private:
  bool _internal_has_match_percentile_steps() const;
  public:
  void clear_match_percentile_steps();
  ::PROTOBUF_NAMESPACE_ID::int32 match_percentile_steps() const;
  void set_match_percentile_steps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_percentile_steps() const;
  void _internal_set_match_percentile_steps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 patch_radius = 4 [default = 18];
  bool has_patch_radius() const;
  private:
  bool _internal_has_patch_radius() const;
  public:
  void clear_patch_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 patch_radius() const;
  void set_patch_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch_radius() const;
  void _internal_set_patch_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ToneMatchOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool log_domain_;
  float max_frac_clipped_;
  float min_match_percentile_;
  float max_match_percentile_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_percentile_steps_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_radius_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// -------------------------------------------------------------------

class ClipMaskOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ClipMaskOptions) */ {
 public:
  inline ClipMaskOptions() : ClipMaskOptions(nullptr) {}
  ~ClipMaskOptions() override;
  explicit constexpr ClipMaskOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClipMaskOptions(const ClipMaskOptions& from);
  ClipMaskOptions(ClipMaskOptions&& from) noexcept
    : ClipMaskOptions() {
    *this = ::std::move(from);
  }

  inline ClipMaskOptions& operator=(const ClipMaskOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipMaskOptions& operator=(ClipMaskOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClipMaskOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClipMaskOptions* internal_default_instance() {
    return reinterpret_cast<const ClipMaskOptions*>(
               &_ClipMaskOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClipMaskOptions& a, ClipMaskOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipMaskOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClipMaskOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipMaskOptions* New() const final {
    return CreateMaybeMessage<ClipMaskOptions>(nullptr);
  }

  ClipMaskOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipMaskOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipMaskOptions& from);
  void MergeFrom(const ClipMaskOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipMaskOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ClipMaskOptions";
  }
  protected:
  explicit ClipMaskOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinExposureFieldNumber = 1,
    kMaxExposureFieldNumber = 2,
    kMaxClippedChannelsFieldNumber = 4,
    kClipMaskDiameterFieldNumber = 5,
  };
  // optional float min_exposure = 1 [default = 0.02];
  bool has_min_exposure() const;
  private:
  bool _internal_has_min_exposure() const;
  public:
  void clear_min_exposure();
  float min_exposure() const;
  void set_min_exposure(float value);
  private:
  float _internal_min_exposure() const;
  void _internal_set_min_exposure(float value);
  public:

  // optional float max_exposure = 2 [default = 0.98];
  bool has_max_exposure() const;
  private:
  bool _internal_has_max_exposure() const;
  public:
  void clear_max_exposure();
  float max_exposure() const;
  void set_max_exposure(float value);
  private:
  float _internal_max_exposure() const;
  void _internal_set_max_exposure(float value);
  public:

  // optional int32 max_clipped_channels = 4 [default = 1];
  bool has_max_clipped_channels() const;
  private:
  bool _internal_has_max_clipped_channels() const;
  public:
  void clear_max_clipped_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 max_clipped_channels() const;
  void set_max_clipped_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_clipped_channels() const;
  void _internal_set_max_clipped_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 clip_mask_diameter = 5 [default = 5];
  bool has_clip_mask_diameter() const;
  private:
  bool _internal_has_clip_mask_diameter() const;
  public:
  void clear_clip_mask_diameter();
  ::PROTOBUF_NAMESPACE_ID::int32 clip_mask_diameter() const;
  void set_clip_mask_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clip_mask_diameter() const;
  void _internal_set_clip_mask_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ClipMaskOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float min_exposure_;
  float max_exposure_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_clipped_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 clip_mask_diameter_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// -------------------------------------------------------------------

class ToneEstimationOptions_GainBiasBounds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ToneEstimationOptions.GainBiasBounds) */ {
 public:
  inline ToneEstimationOptions_GainBiasBounds() : ToneEstimationOptions_GainBiasBounds(nullptr) {}
  ~ToneEstimationOptions_GainBiasBounds() override;
  explicit constexpr ToneEstimationOptions_GainBiasBounds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToneEstimationOptions_GainBiasBounds(const ToneEstimationOptions_GainBiasBounds& from);
  ToneEstimationOptions_GainBiasBounds(ToneEstimationOptions_GainBiasBounds&& from) noexcept
    : ToneEstimationOptions_GainBiasBounds() {
    *this = ::std::move(from);
  }

  inline ToneEstimationOptions_GainBiasBounds& operator=(const ToneEstimationOptions_GainBiasBounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToneEstimationOptions_GainBiasBounds& operator=(ToneEstimationOptions_GainBiasBounds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToneEstimationOptions_GainBiasBounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToneEstimationOptions_GainBiasBounds* internal_default_instance() {
    return reinterpret_cast<const ToneEstimationOptions_GainBiasBounds*>(
               &_ToneEstimationOptions_GainBiasBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ToneEstimationOptions_GainBiasBounds& a, ToneEstimationOptions_GainBiasBounds& b) {
    a.Swap(&b);
  }
  inline void Swap(ToneEstimationOptions_GainBiasBounds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToneEstimationOptions_GainBiasBounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToneEstimationOptions_GainBiasBounds* New() const final {
    return CreateMaybeMessage<ToneEstimationOptions_GainBiasBounds>(nullptr);
  }

  ToneEstimationOptions_GainBiasBounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToneEstimationOptions_GainBiasBounds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToneEstimationOptions_GainBiasBounds& from);
  void MergeFrom(const ToneEstimationOptions_GainBiasBounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToneEstimationOptions_GainBiasBounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ToneEstimationOptions.GainBiasBounds";
  }
  protected:
  explicit ToneEstimationOptions_GainBiasBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinInlierFractionFieldNumber = 1,
    kMinInlierWeightFieldNumber = 2,
    kLowerGainFieldNumber = 3,
    kUpperGainFieldNumber = 4,
    kLowerBiasFieldNumber = 5,
    kUpperBiasFieldNumber = 6,
  };
  // optional float min_inlier_fraction = 1 [default = 0.75];
  bool has_min_inlier_fraction() const;
  private:
  bool _internal_has_min_inlier_fraction() const;
  public:
  void clear_min_inlier_fraction();
  float min_inlier_fraction() const;
  void set_min_inlier_fraction(float value);
  private:
  float _internal_min_inlier_fraction() const;
  void _internal_set_min_inlier_fraction(float value);
  public:

  // optional float min_inlier_weight = 2 [default = 0.5];
  bool has_min_inlier_weight() const;
  private:
  bool _internal_has_min_inlier_weight() const;
  public:
  void clear_min_inlier_weight();
  float min_inlier_weight() const;
  void set_min_inlier_weight(float value);
  private:
  float _internal_min_inlier_weight() const;
  void _internal_set_min_inlier_weight(float value);
  public:

  // optional float lower_gain = 3 [default = 0.75];
  bool has_lower_gain() const;
  private:
  bool _internal_has_lower_gain() const;
  public:
  void clear_lower_gain();
  float lower_gain() const;
  void set_lower_gain(float value);
  private:
  float _internal_lower_gain() const;
  void _internal_set_lower_gain(float value);
  public:

  // optional float upper_gain = 4 [default = 1.334];
  bool has_upper_gain() const;
  private:
  bool _internal_has_upper_gain() const;
  public:
  void clear_upper_gain();
  float upper_gain() const;
  void set_upper_gain(float value);
  private:
  float _internal_upper_gain() const;
  void _internal_set_upper_gain(float value);
  public:

  // optional float lower_bias = 5 [default = -0.2];
  bool has_lower_bias() const;
  private:
  bool _internal_has_lower_bias() const;
  public:
  void clear_lower_bias();
  float lower_bias() const;
  void set_lower_bias(float value);
  private:
  float _internal_lower_bias() const;
  void _internal_set_lower_bias(float value);
  public:

  // optional float upper_bias = 6 [default = 0.2];
  bool has_upper_bias() const;
  private:
  bool _internal_has_upper_bias() const;
  public:
  void clear_upper_bias();
  float upper_bias() const;
  void set_upper_bias(float value);
  private:
  float _internal_upper_bias() const;
  void _internal_set_upper_bias(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ToneEstimationOptions.GainBiasBounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float min_inlier_fraction_;
  float min_inlier_weight_;
  float lower_gain_;
  float upper_gain_;
  float lower_bias_;
  float upper_bias_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// -------------------------------------------------------------------

class ToneEstimationOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ToneEstimationOptions) */ {
 public:
  inline ToneEstimationOptions() : ToneEstimationOptions(nullptr) {}
  ~ToneEstimationOptions() override;
  explicit constexpr ToneEstimationOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToneEstimationOptions(const ToneEstimationOptions& from);
  ToneEstimationOptions(ToneEstimationOptions&& from) noexcept
    : ToneEstimationOptions() {
    *this = ::std::move(from);
  }

  inline ToneEstimationOptions& operator=(const ToneEstimationOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToneEstimationOptions& operator=(ToneEstimationOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToneEstimationOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToneEstimationOptions* internal_default_instance() {
    return reinterpret_cast<const ToneEstimationOptions*>(
               &_ToneEstimationOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ToneEstimationOptions& a, ToneEstimationOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ToneEstimationOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToneEstimationOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToneEstimationOptions* New() const final {
    return CreateMaybeMessage<ToneEstimationOptions>(nullptr);
  }

  ToneEstimationOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToneEstimationOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToneEstimationOptions& from);
  void MergeFrom(const ToneEstimationOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToneEstimationOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ToneEstimationOptions";
  }
  protected:
  explicit ToneEstimationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ToneEstimationOptions_GainBiasBounds GainBiasBounds;

  typedef ToneEstimationOptions_DownsampleMode DownsampleMode;
  static constexpr DownsampleMode DOWNSAMPLE_NONE =
    ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_NONE;
  static constexpr DownsampleMode DOWNSAMPLE_TO_MAX_SIZE =
    ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_TO_MAX_SIZE;
  static constexpr DownsampleMode DOWNSAMPLE_BY_FACTOR =
    ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_BY_FACTOR;
  static constexpr DownsampleMode DOWNSAMPLE_TO_MIN_SIZE =
    ToneEstimationOptions_DownsampleMode_DOWNSAMPLE_TO_MIN_SIZE;
  static inline bool DownsampleMode_IsValid(int value) {
    return ToneEstimationOptions_DownsampleMode_IsValid(value);
  }
  static constexpr DownsampleMode DownsampleMode_MIN =
    ToneEstimationOptions_DownsampleMode_DownsampleMode_MIN;
  static constexpr DownsampleMode DownsampleMode_MAX =
    ToneEstimationOptions_DownsampleMode_DownsampleMode_MAX;
  static constexpr int DownsampleMode_ARRAYSIZE =
    ToneEstimationOptions_DownsampleMode_DownsampleMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DownsampleMode_descriptor() {
    return ToneEstimationOptions_DownsampleMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DownsampleMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DownsampleMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DownsampleMode_Name.");
    return ToneEstimationOptions_DownsampleMode_Name(enum_t_value);
  }
  static inline bool DownsampleMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DownsampleMode* value) {
    return ToneEstimationOptions_DownsampleMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kToneMatchOptionsFieldNumber = 1,
    kClipMaskOptionsFieldNumber = 2,
    kStableGainBiasBoundsFieldNumber = 9,
    kDownsampleFactorFieldNumber = 12,
    kStatsLowPercentileFieldNumber = 3,
    kStatsLowMidPercentileFieldNumber = 4,
    kStatsMidPercentileFieldNumber = 5,
    kStatsHighMidPercentileFieldNumber = 6,
    kStatsHighPercentileFieldNumber = 7,
    kIrlsIterationsFieldNumber = 8,
    kDownsampleModeFieldNumber = 10,
    kDownsamplingSizeFieldNumber = 11,
  };
  // optional .mediapipe.ToneMatchOptions tone_match_options = 1;
  bool has_tone_match_options() const;
  private:
  bool _internal_has_tone_match_options() const;
  public:
  void clear_tone_match_options();
  const ::mediapipe::ToneMatchOptions& tone_match_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::ToneMatchOptions* release_tone_match_options();
  ::mediapipe::ToneMatchOptions* mutable_tone_match_options();
  void set_allocated_tone_match_options(::mediapipe::ToneMatchOptions* tone_match_options);
  private:
  const ::mediapipe::ToneMatchOptions& _internal_tone_match_options() const;
  ::mediapipe::ToneMatchOptions* _internal_mutable_tone_match_options();
  public:
  void unsafe_arena_set_allocated_tone_match_options(
      ::mediapipe::ToneMatchOptions* tone_match_options);
  ::mediapipe::ToneMatchOptions* unsafe_arena_release_tone_match_options();

  // optional .mediapipe.ClipMaskOptions clip_mask_options = 2;
  bool has_clip_mask_options() const;
  private:
  bool _internal_has_clip_mask_options() const;
  public:
  void clear_clip_mask_options();
  const ::mediapipe::ClipMaskOptions& clip_mask_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::ClipMaskOptions* release_clip_mask_options();
  ::mediapipe::ClipMaskOptions* mutable_clip_mask_options();
  void set_allocated_clip_mask_options(::mediapipe::ClipMaskOptions* clip_mask_options);
  private:
  const ::mediapipe::ClipMaskOptions& _internal_clip_mask_options() const;
  ::mediapipe::ClipMaskOptions* _internal_mutable_clip_mask_options();
  public:
  void unsafe_arena_set_allocated_clip_mask_options(
      ::mediapipe::ClipMaskOptions* clip_mask_options);
  ::mediapipe::ClipMaskOptions* unsafe_arena_release_clip_mask_options();

  // optional .mediapipe.ToneEstimationOptions.GainBiasBounds stable_gain_bias_bounds = 9;
  bool has_stable_gain_bias_bounds() const;
  private:
  bool _internal_has_stable_gain_bias_bounds() const;
  public:
  void clear_stable_gain_bias_bounds();
  const ::mediapipe::ToneEstimationOptions_GainBiasBounds& stable_gain_bias_bounds() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::ToneEstimationOptions_GainBiasBounds* release_stable_gain_bias_bounds();
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* mutable_stable_gain_bias_bounds();
  void set_allocated_stable_gain_bias_bounds(::mediapipe::ToneEstimationOptions_GainBiasBounds* stable_gain_bias_bounds);
  private:
  const ::mediapipe::ToneEstimationOptions_GainBiasBounds& _internal_stable_gain_bias_bounds() const;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* _internal_mutable_stable_gain_bias_bounds();
  public:
  void unsafe_arena_set_allocated_stable_gain_bias_bounds(
      ::mediapipe::ToneEstimationOptions_GainBiasBounds* stable_gain_bias_bounds);
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* unsafe_arena_release_stable_gain_bias_bounds();

  // optional float downsample_factor = 12 [default = 2];
  bool has_downsample_factor() const;
  private:
  bool _internal_has_downsample_factor() const;
  public:
  void clear_downsample_factor();
  float downsample_factor() const;
  void set_downsample_factor(float value);
  private:
  float _internal_downsample_factor() const;
  void _internal_set_downsample_factor(float value);
  public:

  // optional float stats_low_percentile = 3 [default = 0.05];
  bool has_stats_low_percentile() const;
  private:
  bool _internal_has_stats_low_percentile() const;
  public:
  void clear_stats_low_percentile();
  float stats_low_percentile() const;
  void set_stats_low_percentile(float value);
  private:
  float _internal_stats_low_percentile() const;
  void _internal_set_stats_low_percentile(float value);
  public:

  // optional float stats_low_mid_percentile = 4 [default = 0.2];
  bool has_stats_low_mid_percentile() const;
  private:
  bool _internal_has_stats_low_mid_percentile() const;
  public:
  void clear_stats_low_mid_percentile();
  float stats_low_mid_percentile() const;
  void set_stats_low_mid_percentile(float value);
  private:
  float _internal_stats_low_mid_percentile() const;
  void _internal_set_stats_low_mid_percentile(float value);
  public:

  // optional float stats_mid_percentile = 5 [default = 0.5];
  bool has_stats_mid_percentile() const;
  private:
  bool _internal_has_stats_mid_percentile() const;
  public:
  void clear_stats_mid_percentile();
  float stats_mid_percentile() const;
  void set_stats_mid_percentile(float value);
  private:
  float _internal_stats_mid_percentile() const;
  void _internal_set_stats_mid_percentile(float value);
  public:

  // optional float stats_high_mid_percentile = 6 [default = 0.8];
  bool has_stats_high_mid_percentile() const;
  private:
  bool _internal_has_stats_high_mid_percentile() const;
  public:
  void clear_stats_high_mid_percentile();
  float stats_high_mid_percentile() const;
  void set_stats_high_mid_percentile(float value);
  private:
  float _internal_stats_high_mid_percentile() const;
  void _internal_set_stats_high_mid_percentile(float value);
  public:

  // optional float stats_high_percentile = 7 [default = 0.95];
  bool has_stats_high_percentile() const;
  private:
  bool _internal_has_stats_high_percentile() const;
  public:
  void clear_stats_high_percentile();
  float stats_high_percentile() const;
  void set_stats_high_percentile(float value);
  private:
  float _internal_stats_high_percentile() const;
  void _internal_set_stats_high_percentile(float value);
  public:

  // optional int32 irls_iterations = 8 [default = 10];
  bool has_irls_iterations() const;
  private:
  bool _internal_has_irls_iterations() const;
  public:
  void clear_irls_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 irls_iterations() const;
  void set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_irls_iterations() const;
  void _internal_set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.ToneEstimationOptions.DownsampleMode downsample_mode = 10 [default = DOWNSAMPLE_NONE];
  bool has_downsample_mode() const;
  private:
  bool _internal_has_downsample_mode() const;
  public:
  void clear_downsample_mode();
  ::mediapipe::ToneEstimationOptions_DownsampleMode downsample_mode() const;
  void set_downsample_mode(::mediapipe::ToneEstimationOptions_DownsampleMode value);
  private:
  ::mediapipe::ToneEstimationOptions_DownsampleMode _internal_downsample_mode() const;
  void _internal_set_downsample_mode(::mediapipe::ToneEstimationOptions_DownsampleMode value);
  public:

  // optional int32 downsampling_size = 11 [default = 256];
  bool has_downsampling_size() const;
  private:
  bool _internal_has_downsampling_size() const;
  public:
  void clear_downsampling_size();
  ::PROTOBUF_NAMESPACE_ID::int32 downsampling_size() const;
  void set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downsampling_size() const;
  void _internal_set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ToneEstimationOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::ToneMatchOptions* tone_match_options_;
  ::mediapipe::ClipMaskOptions* clip_mask_options_;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* stable_gain_bias_bounds_;
  float downsample_factor_;
  float stats_low_percentile_;
  float stats_low_mid_percentile_;
  float stats_mid_percentile_;
  float stats_high_mid_percentile_;
  float stats_high_percentile_;
  ::PROTOBUF_NAMESPACE_ID::int32 irls_iterations_;
  int downsample_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 downsampling_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// -------------------------------------------------------------------

class ToneMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ToneMatch) */ {
 public:
  inline ToneMatch() : ToneMatch(nullptr) {}
  ~ToneMatch() override;
  explicit constexpr ToneMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToneMatch(const ToneMatch& from);
  ToneMatch(ToneMatch&& from) noexcept
    : ToneMatch() {
    *this = ::std::move(from);
  }

  inline ToneMatch& operator=(const ToneMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToneMatch& operator=(ToneMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToneMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToneMatch* internal_default_instance() {
    return reinterpret_cast<const ToneMatch*>(
               &_ToneMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ToneMatch& a, ToneMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ToneMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToneMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToneMatch* New() const final {
    return CreateMaybeMessage<ToneMatch>(nullptr);
  }

  ToneMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToneMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToneMatch& from);
  void MergeFrom(const ToneMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToneMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ToneMatch";
  }
  protected:
  explicit ToneMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrValFieldNumber = 1,
    kPrevValFieldNumber = 2,
  };
  // optional float curr_val = 1;
  bool has_curr_val() const;
  private:
  bool _internal_has_curr_val() const;
  public:
  void clear_curr_val();
  float curr_val() const;
  void set_curr_val(float value);
  private:
  float _internal_curr_val() const;
  void _internal_set_curr_val(float value);
  public:

  // optional float prev_val = 2;
  bool has_prev_val() const;
  private:
  bool _internal_has_prev_val() const;
  public:
  void clear_prev_val();
  float prev_val() const;
  void set_prev_val(float value);
  private:
  float _internal_prev_val() const;
  void _internal_set_prev_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.ToneMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float curr_val_;
  float prev_val_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// -------------------------------------------------------------------

class PatchToneMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.PatchToneMatch) */ {
 public:
  inline PatchToneMatch() : PatchToneMatch(nullptr) {}
  ~PatchToneMatch() override;
  explicit constexpr PatchToneMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatchToneMatch(const PatchToneMatch& from);
  PatchToneMatch(PatchToneMatch&& from) noexcept
    : PatchToneMatch() {
    *this = ::std::move(from);
  }

  inline PatchToneMatch& operator=(const PatchToneMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchToneMatch& operator=(PatchToneMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatchToneMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatchToneMatch* internal_default_instance() {
    return reinterpret_cast<const PatchToneMatch*>(
               &_PatchToneMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PatchToneMatch& a, PatchToneMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchToneMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchToneMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchToneMatch* New() const final {
    return CreateMaybeMessage<PatchToneMatch>(nullptr);
  }

  PatchToneMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchToneMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchToneMatch& from);
  void MergeFrom(const PatchToneMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchToneMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.PatchToneMatch";
  }
  protected:
  explicit PatchToneMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToneMatchFieldNumber = 1,
    kIrlsWeightFieldNumber = 2,
  };
  // repeated .mediapipe.ToneMatch tone_match = 1;
  int tone_match_size() const;
  private:
  int _internal_tone_match_size() const;
  public:
  void clear_tone_match();
  ::mediapipe::ToneMatch* mutable_tone_match(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ToneMatch >*
      mutable_tone_match();
  private:
  const ::mediapipe::ToneMatch& _internal_tone_match(int index) const;
  ::mediapipe::ToneMatch* _internal_add_tone_match();
  public:
  const ::mediapipe::ToneMatch& tone_match(int index) const;
  ::mediapipe::ToneMatch* add_tone_match();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ToneMatch >&
      tone_match() const;

  // optional float irls_weight = 2 [default = 1];
  bool has_irls_weight() const;
  private:
  bool _internal_has_irls_weight() const;
  public:
  void clear_irls_weight();
  float irls_weight() const;
  void set_irls_weight(float value);
  private:
  float _internal_irls_weight() const;
  void _internal_set_irls_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.PatchToneMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ToneMatch > tone_match_;
  float irls_weight_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ToneChange_StabilityStats

// optional int32 num_inliers = 1;
inline bool ToneChange_StabilityStats::_internal_has_num_inliers() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToneChange_StabilityStats::has_num_inliers() const {
  return _internal_has_num_inliers();
}
inline void ToneChange_StabilityStats::clear_num_inliers() {
  num_inliers_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneChange_StabilityStats::_internal_num_inliers() const {
  return num_inliers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneChange_StabilityStats::num_inliers() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.StabilityStats.num_inliers)
  return _internal_num_inliers();
}
inline void ToneChange_StabilityStats::_internal_set_num_inliers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_inliers_ = value;
}
inline void ToneChange_StabilityStats::set_num_inliers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_inliers(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.StabilityStats.num_inliers)
}

// optional float inlier_fraction = 2;
inline bool ToneChange_StabilityStats::_internal_has_inlier_fraction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToneChange_StabilityStats::has_inlier_fraction() const {
  return _internal_has_inlier_fraction();
}
inline void ToneChange_StabilityStats::clear_inlier_fraction() {
  inlier_fraction_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ToneChange_StabilityStats::_internal_inlier_fraction() const {
  return inlier_fraction_;
}
inline float ToneChange_StabilityStats::inlier_fraction() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.StabilityStats.inlier_fraction)
  return _internal_inlier_fraction();
}
inline void ToneChange_StabilityStats::_internal_set_inlier_fraction(float value) {
  _has_bits_[0] |= 0x00000002u;
  inlier_fraction_ = value;
}
inline void ToneChange_StabilityStats::set_inlier_fraction(float value) {
  _internal_set_inlier_fraction(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.StabilityStats.inlier_fraction)
}

// optional double inlier_weight = 3;
inline bool ToneChange_StabilityStats::_internal_has_inlier_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToneChange_StabilityStats::has_inlier_weight() const {
  return _internal_has_inlier_weight();
}
inline void ToneChange_StabilityStats::clear_inlier_weight() {
  inlier_weight_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ToneChange_StabilityStats::_internal_inlier_weight() const {
  return inlier_weight_;
}
inline double ToneChange_StabilityStats::inlier_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.StabilityStats.inlier_weight)
  return _internal_inlier_weight();
}
inline void ToneChange_StabilityStats::_internal_set_inlier_weight(double value) {
  _has_bits_[0] |= 0x00000004u;
  inlier_weight_ = value;
}
inline void ToneChange_StabilityStats::set_inlier_weight(double value) {
  _internal_set_inlier_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.StabilityStats.inlier_weight)
}

// -------------------------------------------------------------------

// ToneChange

// optional .mediapipe.GainBiasModel gain_bias = 1;
inline bool ToneChange::_internal_has_gain_bias() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || gain_bias_ != nullptr);
  return value;
}
inline bool ToneChange::has_gain_bias() const {
  return _internal_has_gain_bias();
}
inline const ::mediapipe::GainBiasModel& ToneChange::_internal_gain_bias() const {
  const ::mediapipe::GainBiasModel* p = gain_bias_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::GainBiasModel&>(
      ::mediapipe::_GainBiasModel_default_instance_);
}
inline const ::mediapipe::GainBiasModel& ToneChange::gain_bias() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.gain_bias)
  return _internal_gain_bias();
}
inline void ToneChange::unsafe_arena_set_allocated_gain_bias(
    ::mediapipe::GainBiasModel* gain_bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_bias_);
  }
  gain_bias_ = gain_bias;
  if (gain_bias) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneChange.gain_bias)
}
inline ::mediapipe::GainBiasModel* ToneChange::release_gain_bias() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::GainBiasModel* temp = gain_bias_;
  gain_bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::GainBiasModel* ToneChange::unsafe_arena_release_gain_bias() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneChange.gain_bias)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::GainBiasModel* temp = gain_bias_;
  gain_bias_ = nullptr;
  return temp;
}
inline ::mediapipe::GainBiasModel* ToneChange::_internal_mutable_gain_bias() {
  _has_bits_[0] |= 0x00000001u;
  if (gain_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::GainBiasModel>(GetArena());
    gain_bias_ = p;
  }
  return gain_bias_;
}
inline ::mediapipe::GainBiasModel* ToneChange::mutable_gain_bias() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneChange.gain_bias)
  return _internal_mutable_gain_bias();
}
inline void ToneChange::set_allocated_gain_bias(::mediapipe::GainBiasModel* gain_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_bias_);
  }
  if (gain_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_bias)->GetArena();
    if (message_arena != submessage_arena) {
      gain_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gain_bias_ = gain_bias;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneChange.gain_bias)
}

// optional .mediapipe.AffineToneModel affine = 2;
inline bool ToneChange::_internal_has_affine() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || affine_ != nullptr);
  return value;
}
inline bool ToneChange::has_affine() const {
  return _internal_has_affine();
}
inline const ::mediapipe::AffineToneModel& ToneChange::_internal_affine() const {
  const ::mediapipe::AffineToneModel* p = affine_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::AffineToneModel&>(
      ::mediapipe::_AffineToneModel_default_instance_);
}
inline const ::mediapipe::AffineToneModel& ToneChange::affine() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.affine)
  return _internal_affine();
}
inline void ToneChange::unsafe_arena_set_allocated_affine(
    ::mediapipe::AffineToneModel* affine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affine_);
  }
  affine_ = affine;
  if (affine) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneChange.affine)
}
inline ::mediapipe::AffineToneModel* ToneChange::release_affine() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::AffineToneModel* temp = affine_;
  affine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::AffineToneModel* ToneChange::unsafe_arena_release_affine() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneChange.affine)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::AffineToneModel* temp = affine_;
  affine_ = nullptr;
  return temp;
}
inline ::mediapipe::AffineToneModel* ToneChange::_internal_mutable_affine() {
  _has_bits_[0] |= 0x00000002u;
  if (affine_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::AffineToneModel>(GetArena());
    affine_ = p;
  }
  return affine_;
}
inline ::mediapipe::AffineToneModel* ToneChange::mutable_affine() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneChange.affine)
  return _internal_mutable_affine();
}
inline void ToneChange::set_allocated_affine(::mediapipe::AffineToneModel* affine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affine_);
  }
  if (affine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affine)->GetArena();
    if (message_arena != submessage_arena) {
      affine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affine_ = affine;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneChange.affine)
}

// optional .mediapipe.MixtureGainBiasModel mixture_gain_bias = 3;
inline bool ToneChange::_internal_has_mixture_gain_bias() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || mixture_gain_bias_ != nullptr);
  return value;
}
inline bool ToneChange::has_mixture_gain_bias() const {
  return _internal_has_mixture_gain_bias();
}
inline const ::mediapipe::MixtureGainBiasModel& ToneChange::_internal_mixture_gain_bias() const {
  const ::mediapipe::MixtureGainBiasModel* p = mixture_gain_bias_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MixtureGainBiasModel&>(
      ::mediapipe::_MixtureGainBiasModel_default_instance_);
}
inline const ::mediapipe::MixtureGainBiasModel& ToneChange::mixture_gain_bias() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.mixture_gain_bias)
  return _internal_mixture_gain_bias();
}
inline void ToneChange::unsafe_arena_set_allocated_mixture_gain_bias(
    ::mediapipe::MixtureGainBiasModel* mixture_gain_bias) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_gain_bias_);
  }
  mixture_gain_bias_ = mixture_gain_bias;
  if (mixture_gain_bias) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneChange.mixture_gain_bias)
}
inline ::mediapipe::MixtureGainBiasModel* ToneChange::release_mixture_gain_bias() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::MixtureGainBiasModel* temp = mixture_gain_bias_;
  mixture_gain_bias_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MixtureGainBiasModel* ToneChange::unsafe_arena_release_mixture_gain_bias() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneChange.mixture_gain_bias)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::MixtureGainBiasModel* temp = mixture_gain_bias_;
  mixture_gain_bias_ = nullptr;
  return temp;
}
inline ::mediapipe::MixtureGainBiasModel* ToneChange::_internal_mutable_mixture_gain_bias() {
  _has_bits_[0] |= 0x00000004u;
  if (mixture_gain_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MixtureGainBiasModel>(GetArena());
    mixture_gain_bias_ = p;
  }
  return mixture_gain_bias_;
}
inline ::mediapipe::MixtureGainBiasModel* ToneChange::mutable_mixture_gain_bias() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneChange.mixture_gain_bias)
  return _internal_mutable_mixture_gain_bias();
}
inline void ToneChange::set_allocated_mixture_gain_bias(::mediapipe::MixtureGainBiasModel* mixture_gain_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_gain_bias_);
  }
  if (mixture_gain_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_gain_bias)->GetArena();
    if (message_arena != submessage_arena) {
      mixture_gain_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixture_gain_bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mixture_gain_bias_ = mixture_gain_bias;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneChange.mixture_gain_bias)
}

// optional .mediapipe.MixtureAffineToneModel mixture_affine = 4;
inline bool ToneChange::_internal_has_mixture_affine() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || mixture_affine_ != nullptr);
  return value;
}
inline bool ToneChange::has_mixture_affine() const {
  return _internal_has_mixture_affine();
}
inline const ::mediapipe::MixtureAffineToneModel& ToneChange::_internal_mixture_affine() const {
  const ::mediapipe::MixtureAffineToneModel* p = mixture_affine_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MixtureAffineToneModel&>(
      ::mediapipe::_MixtureAffineToneModel_default_instance_);
}
inline const ::mediapipe::MixtureAffineToneModel& ToneChange::mixture_affine() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.mixture_affine)
  return _internal_mixture_affine();
}
inline void ToneChange::unsafe_arena_set_allocated_mixture_affine(
    ::mediapipe::MixtureAffineToneModel* mixture_affine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_affine_);
  }
  mixture_affine_ = mixture_affine;
  if (mixture_affine) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneChange.mixture_affine)
}
inline ::mediapipe::MixtureAffineToneModel* ToneChange::release_mixture_affine() {
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::MixtureAffineToneModel* temp = mixture_affine_;
  mixture_affine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MixtureAffineToneModel* ToneChange::unsafe_arena_release_mixture_affine() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneChange.mixture_affine)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::MixtureAffineToneModel* temp = mixture_affine_;
  mixture_affine_ = nullptr;
  return temp;
}
inline ::mediapipe::MixtureAffineToneModel* ToneChange::_internal_mutable_mixture_affine() {
  _has_bits_[0] |= 0x00000008u;
  if (mixture_affine_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MixtureAffineToneModel>(GetArena());
    mixture_affine_ = p;
  }
  return mixture_affine_;
}
inline ::mediapipe::MixtureAffineToneModel* ToneChange::mutable_mixture_affine() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneChange.mixture_affine)
  return _internal_mutable_mixture_affine();
}
inline void ToneChange::set_allocated_mixture_affine(::mediapipe::MixtureAffineToneModel* mixture_affine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_affine_);
  }
  if (mixture_affine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixture_affine)->GetArena();
    if (message_arena != submessage_arena) {
      mixture_affine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixture_affine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mixture_affine_ = mixture_affine;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneChange.mixture_affine)
}

// optional float mixture_domain_sigma = 5;
inline bool ToneChange::_internal_has_mixture_domain_sigma() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ToneChange::has_mixture_domain_sigma() const {
  return _internal_has_mixture_domain_sigma();
}
inline void ToneChange::clear_mixture_domain_sigma() {
  mixture_domain_sigma_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ToneChange::_internal_mixture_domain_sigma() const {
  return mixture_domain_sigma_;
}
inline float ToneChange::mixture_domain_sigma() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.mixture_domain_sigma)
  return _internal_mixture_domain_sigma();
}
inline void ToneChange::_internal_set_mixture_domain_sigma(float value) {
  _has_bits_[0] |= 0x00000020u;
  mixture_domain_sigma_ = value;
}
inline void ToneChange::set_mixture_domain_sigma(float value) {
  _internal_set_mixture_domain_sigma(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.mixture_domain_sigma)
}

// optional float frac_clipped = 6 [default = 0];
inline bool ToneChange::_internal_has_frac_clipped() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ToneChange::has_frac_clipped() const {
  return _internal_has_frac_clipped();
}
inline void ToneChange::clear_frac_clipped() {
  frac_clipped_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ToneChange::_internal_frac_clipped() const {
  return frac_clipped_;
}
inline float ToneChange::frac_clipped() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.frac_clipped)
  return _internal_frac_clipped();
}
inline void ToneChange::_internal_set_frac_clipped(float value) {
  _has_bits_[0] |= 0x00000040u;
  frac_clipped_ = value;
}
inline void ToneChange::set_frac_clipped(float value) {
  _internal_set_frac_clipped(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.frac_clipped)
}

// optional float low_percentile = 8;
inline bool ToneChange::_internal_has_low_percentile() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ToneChange::has_low_percentile() const {
  return _internal_has_low_percentile();
}
inline void ToneChange::clear_low_percentile() {
  low_percentile_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ToneChange::_internal_low_percentile() const {
  return low_percentile_;
}
inline float ToneChange::low_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.low_percentile)
  return _internal_low_percentile();
}
inline void ToneChange::_internal_set_low_percentile(float value) {
  _has_bits_[0] |= 0x00000080u;
  low_percentile_ = value;
}
inline void ToneChange::set_low_percentile(float value) {
  _internal_set_low_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.low_percentile)
}

// optional float low_mid_percentile = 9;
inline bool ToneChange::_internal_has_low_mid_percentile() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ToneChange::has_low_mid_percentile() const {
  return _internal_has_low_mid_percentile();
}
inline void ToneChange::clear_low_mid_percentile() {
  low_mid_percentile_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ToneChange::_internal_low_mid_percentile() const {
  return low_mid_percentile_;
}
inline float ToneChange::low_mid_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.low_mid_percentile)
  return _internal_low_mid_percentile();
}
inline void ToneChange::_internal_set_low_mid_percentile(float value) {
  _has_bits_[0] |= 0x00000100u;
  low_mid_percentile_ = value;
}
inline void ToneChange::set_low_mid_percentile(float value) {
  _internal_set_low_mid_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.low_mid_percentile)
}

// optional float mid_percentile = 10;
inline bool ToneChange::_internal_has_mid_percentile() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ToneChange::has_mid_percentile() const {
  return _internal_has_mid_percentile();
}
inline void ToneChange::clear_mid_percentile() {
  mid_percentile_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ToneChange::_internal_mid_percentile() const {
  return mid_percentile_;
}
inline float ToneChange::mid_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.mid_percentile)
  return _internal_mid_percentile();
}
inline void ToneChange::_internal_set_mid_percentile(float value) {
  _has_bits_[0] |= 0x00000200u;
  mid_percentile_ = value;
}
inline void ToneChange::set_mid_percentile(float value) {
  _internal_set_mid_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.mid_percentile)
}

// optional float high_mid_percentile = 11;
inline bool ToneChange::_internal_has_high_mid_percentile() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ToneChange::has_high_mid_percentile() const {
  return _internal_has_high_mid_percentile();
}
inline void ToneChange::clear_high_mid_percentile() {
  high_mid_percentile_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ToneChange::_internal_high_mid_percentile() const {
  return high_mid_percentile_;
}
inline float ToneChange::high_mid_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.high_mid_percentile)
  return _internal_high_mid_percentile();
}
inline void ToneChange::_internal_set_high_mid_percentile(float value) {
  _has_bits_[0] |= 0x00000400u;
  high_mid_percentile_ = value;
}
inline void ToneChange::set_high_mid_percentile(float value) {
  _internal_set_high_mid_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.high_mid_percentile)
}

// optional float high_percentile = 12;
inline bool ToneChange::_internal_has_high_percentile() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ToneChange::has_high_percentile() const {
  return _internal_has_high_percentile();
}
inline void ToneChange::clear_high_percentile() {
  high_percentile_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ToneChange::_internal_high_percentile() const {
  return high_percentile_;
}
inline float ToneChange::high_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.high_percentile)
  return _internal_high_percentile();
}
inline void ToneChange::_internal_set_high_percentile(float value) {
  _has_bits_[0] |= 0x00000800u;
  high_percentile_ = value;
}
inline void ToneChange::set_high_percentile(float value) {
  _internal_set_high_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.high_percentile)
}

// optional bool log_domain = 13 [default = false];
inline bool ToneChange::_internal_has_log_domain() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ToneChange::has_log_domain() const {
  return _internal_has_log_domain();
}
inline void ToneChange::clear_log_domain() {
  log_domain_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ToneChange::_internal_log_domain() const {
  return log_domain_;
}
inline bool ToneChange::log_domain() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.log_domain)
  return _internal_log_domain();
}
inline void ToneChange::_internal_set_log_domain(bool value) {
  _has_bits_[0] |= 0x00001000u;
  log_domain_ = value;
}
inline void ToneChange::set_log_domain(bool value) {
  _internal_set_log_domain(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.log_domain)
}

// optional .mediapipe.ToneChange.Type type = 14 [default = VALID];
inline bool ToneChange::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ToneChange::has_type() const {
  return _internal_has_type();
}
inline void ToneChange::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::mediapipe::ToneChange_Type ToneChange::_internal_type() const {
  return static_cast< ::mediapipe::ToneChange_Type >(type_);
}
inline ::mediapipe::ToneChange_Type ToneChange::type() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.type)
  return _internal_type();
}
inline void ToneChange::_internal_set_type(::mediapipe::ToneChange_Type value) {
  assert(::mediapipe::ToneChange_Type_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  type_ = value;
}
inline void ToneChange::set_type(::mediapipe::ToneChange_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneChange.type)
}

// optional .mediapipe.ToneChange.StabilityStats stability_stats = 15;
inline bool ToneChange::_internal_has_stability_stats() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || stability_stats_ != nullptr);
  return value;
}
inline bool ToneChange::has_stability_stats() const {
  return _internal_has_stability_stats();
}
inline void ToneChange::clear_stability_stats() {
  if (stability_stats_ != nullptr) stability_stats_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mediapipe::ToneChange_StabilityStats& ToneChange::_internal_stability_stats() const {
  const ::mediapipe::ToneChange_StabilityStats* p = stability_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ToneChange_StabilityStats&>(
      ::mediapipe::_ToneChange_StabilityStats_default_instance_);
}
inline const ::mediapipe::ToneChange_StabilityStats& ToneChange::stability_stats() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneChange.stability_stats)
  return _internal_stability_stats();
}
inline void ToneChange::unsafe_arena_set_allocated_stability_stats(
    ::mediapipe::ToneChange_StabilityStats* stability_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stability_stats_);
  }
  stability_stats_ = stability_stats;
  if (stability_stats) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneChange.stability_stats)
}
inline ::mediapipe::ToneChange_StabilityStats* ToneChange::release_stability_stats() {
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::ToneChange_StabilityStats* temp = stability_stats_;
  stability_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::ToneChange_StabilityStats* ToneChange::unsafe_arena_release_stability_stats() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneChange.stability_stats)
  _has_bits_[0] &= ~0x00000010u;
  ::mediapipe::ToneChange_StabilityStats* temp = stability_stats_;
  stability_stats_ = nullptr;
  return temp;
}
inline ::mediapipe::ToneChange_StabilityStats* ToneChange::_internal_mutable_stability_stats() {
  _has_bits_[0] |= 0x00000010u;
  if (stability_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ToneChange_StabilityStats>(GetArena());
    stability_stats_ = p;
  }
  return stability_stats_;
}
inline ::mediapipe::ToneChange_StabilityStats* ToneChange::mutable_stability_stats() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneChange.stability_stats)
  return _internal_mutable_stability_stats();
}
inline void ToneChange::set_allocated_stability_stats(::mediapipe::ToneChange_StabilityStats* stability_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stability_stats_;
  }
  if (stability_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stability_stats);
    if (message_arena != submessage_arena) {
      stability_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stability_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  stability_stats_ = stability_stats;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneChange.stability_stats)
}

// -------------------------------------------------------------------

// ToneMatchOptions

// optional float min_match_percentile = 1 [default = 0.01];
inline bool ToneMatchOptions::_internal_has_min_match_percentile() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToneMatchOptions::has_min_match_percentile() const {
  return _internal_has_min_match_percentile();
}
inline void ToneMatchOptions::clear_min_match_percentile() {
  min_match_percentile_ = 0.01f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ToneMatchOptions::_internal_min_match_percentile() const {
  return min_match_percentile_;
}
inline float ToneMatchOptions::min_match_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatchOptions.min_match_percentile)
  return _internal_min_match_percentile();
}
inline void ToneMatchOptions::_internal_set_min_match_percentile(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_match_percentile_ = value;
}
inline void ToneMatchOptions::set_min_match_percentile(float value) {
  _internal_set_min_match_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatchOptions.min_match_percentile)
}

// optional float max_match_percentile = 2 [default = 0.99];
inline bool ToneMatchOptions::_internal_has_max_match_percentile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToneMatchOptions::has_max_match_percentile() const {
  return _internal_has_max_match_percentile();
}
inline void ToneMatchOptions::clear_max_match_percentile() {
  max_match_percentile_ = 0.99f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ToneMatchOptions::_internal_max_match_percentile() const {
  return max_match_percentile_;
}
inline float ToneMatchOptions::max_match_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatchOptions.max_match_percentile)
  return _internal_max_match_percentile();
}
inline void ToneMatchOptions::_internal_set_max_match_percentile(float value) {
  _has_bits_[0] |= 0x00000008u;
  max_match_percentile_ = value;
}
inline void ToneMatchOptions::set_max_match_percentile(float value) {
  _internal_set_max_match_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatchOptions.max_match_percentile)
}

// optional int32 match_percentile_steps = 3 [default = 10];
inline bool ToneMatchOptions::_internal_has_match_percentile_steps() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ToneMatchOptions::has_match_percentile_steps() const {
  return _internal_has_match_percentile_steps();
}
inline void ToneMatchOptions::clear_match_percentile_steps() {
  match_percentile_steps_ = 10;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneMatchOptions::_internal_match_percentile_steps() const {
  return match_percentile_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneMatchOptions::match_percentile_steps() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatchOptions.match_percentile_steps)
  return _internal_match_percentile_steps();
}
inline void ToneMatchOptions::_internal_set_match_percentile_steps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  match_percentile_steps_ = value;
}
inline void ToneMatchOptions::set_match_percentile_steps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_percentile_steps(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatchOptions.match_percentile_steps)
}

// optional int32 patch_radius = 4 [default = 18];
inline bool ToneMatchOptions::_internal_has_patch_radius() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ToneMatchOptions::has_patch_radius() const {
  return _internal_has_patch_radius();
}
inline void ToneMatchOptions::clear_patch_radius() {
  patch_radius_ = 18;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneMatchOptions::_internal_patch_radius() const {
  return patch_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneMatchOptions::patch_radius() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatchOptions.patch_radius)
  return _internal_patch_radius();
}
inline void ToneMatchOptions::_internal_set_patch_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  patch_radius_ = value;
}
inline void ToneMatchOptions::set_patch_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_patch_radius(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatchOptions.patch_radius)
}

// optional float max_frac_clipped = 5 [default = 0.4];
inline bool ToneMatchOptions::_internal_has_max_frac_clipped() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToneMatchOptions::has_max_frac_clipped() const {
  return _internal_has_max_frac_clipped();
}
inline void ToneMatchOptions::clear_max_frac_clipped() {
  max_frac_clipped_ = 0.4f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ToneMatchOptions::_internal_max_frac_clipped() const {
  return max_frac_clipped_;
}
inline float ToneMatchOptions::max_frac_clipped() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatchOptions.max_frac_clipped)
  return _internal_max_frac_clipped();
}
inline void ToneMatchOptions::_internal_set_max_frac_clipped(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_frac_clipped_ = value;
}
inline void ToneMatchOptions::set_max_frac_clipped(float value) {
  _internal_set_max_frac_clipped(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatchOptions.max_frac_clipped)
}

// optional bool log_domain = 8 [default = false];
inline bool ToneMatchOptions::_internal_has_log_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToneMatchOptions::has_log_domain() const {
  return _internal_has_log_domain();
}
inline void ToneMatchOptions::clear_log_domain() {
  log_domain_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ToneMatchOptions::_internal_log_domain() const {
  return log_domain_;
}
inline bool ToneMatchOptions::log_domain() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatchOptions.log_domain)
  return _internal_log_domain();
}
inline void ToneMatchOptions::_internal_set_log_domain(bool value) {
  _has_bits_[0] |= 0x00000001u;
  log_domain_ = value;
}
inline void ToneMatchOptions::set_log_domain(bool value) {
  _internal_set_log_domain(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatchOptions.log_domain)
}

// -------------------------------------------------------------------

// ClipMaskOptions

// optional float min_exposure = 1 [default = 0.02];
inline bool ClipMaskOptions::_internal_has_min_exposure() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClipMaskOptions::has_min_exposure() const {
  return _internal_has_min_exposure();
}
inline void ClipMaskOptions::clear_min_exposure() {
  min_exposure_ = 0.02f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ClipMaskOptions::_internal_min_exposure() const {
  return min_exposure_;
}
inline float ClipMaskOptions::min_exposure() const {
  // @@protoc_insertion_point(field_get:mediapipe.ClipMaskOptions.min_exposure)
  return _internal_min_exposure();
}
inline void ClipMaskOptions::_internal_set_min_exposure(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_exposure_ = value;
}
inline void ClipMaskOptions::set_min_exposure(float value) {
  _internal_set_min_exposure(value);
  // @@protoc_insertion_point(field_set:mediapipe.ClipMaskOptions.min_exposure)
}

// optional float max_exposure = 2 [default = 0.98];
inline bool ClipMaskOptions::_internal_has_max_exposure() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClipMaskOptions::has_max_exposure() const {
  return _internal_has_max_exposure();
}
inline void ClipMaskOptions::clear_max_exposure() {
  max_exposure_ = 0.98f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ClipMaskOptions::_internal_max_exposure() const {
  return max_exposure_;
}
inline float ClipMaskOptions::max_exposure() const {
  // @@protoc_insertion_point(field_get:mediapipe.ClipMaskOptions.max_exposure)
  return _internal_max_exposure();
}
inline void ClipMaskOptions::_internal_set_max_exposure(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_exposure_ = value;
}
inline void ClipMaskOptions::set_max_exposure(float value) {
  _internal_set_max_exposure(value);
  // @@protoc_insertion_point(field_set:mediapipe.ClipMaskOptions.max_exposure)
}

// optional int32 max_clipped_channels = 4 [default = 1];
inline bool ClipMaskOptions::_internal_has_max_clipped_channels() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClipMaskOptions::has_max_clipped_channels() const {
  return _internal_has_max_clipped_channels();
}
inline void ClipMaskOptions::clear_max_clipped_channels() {
  max_clipped_channels_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClipMaskOptions::_internal_max_clipped_channels() const {
  return max_clipped_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClipMaskOptions::max_clipped_channels() const {
  // @@protoc_insertion_point(field_get:mediapipe.ClipMaskOptions.max_clipped_channels)
  return _internal_max_clipped_channels();
}
inline void ClipMaskOptions::_internal_set_max_clipped_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_clipped_channels_ = value;
}
inline void ClipMaskOptions::set_max_clipped_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_clipped_channels(value);
  // @@protoc_insertion_point(field_set:mediapipe.ClipMaskOptions.max_clipped_channels)
}

// optional int32 clip_mask_diameter = 5 [default = 5];
inline bool ClipMaskOptions::_internal_has_clip_mask_diameter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClipMaskOptions::has_clip_mask_diameter() const {
  return _internal_has_clip_mask_diameter();
}
inline void ClipMaskOptions::clear_clip_mask_diameter() {
  clip_mask_diameter_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClipMaskOptions::_internal_clip_mask_diameter() const {
  return clip_mask_diameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClipMaskOptions::clip_mask_diameter() const {
  // @@protoc_insertion_point(field_get:mediapipe.ClipMaskOptions.clip_mask_diameter)
  return _internal_clip_mask_diameter();
}
inline void ClipMaskOptions::_internal_set_clip_mask_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  clip_mask_diameter_ = value;
}
inline void ClipMaskOptions::set_clip_mask_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clip_mask_diameter(value);
  // @@protoc_insertion_point(field_set:mediapipe.ClipMaskOptions.clip_mask_diameter)
}

// -------------------------------------------------------------------

// ToneEstimationOptions_GainBiasBounds

// optional float min_inlier_fraction = 1 [default = 0.75];
inline bool ToneEstimationOptions_GainBiasBounds::_internal_has_min_inlier_fraction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToneEstimationOptions_GainBiasBounds::has_min_inlier_fraction() const {
  return _internal_has_min_inlier_fraction();
}
inline void ToneEstimationOptions_GainBiasBounds::clear_min_inlier_fraction() {
  min_inlier_fraction_ = 0.75f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ToneEstimationOptions_GainBiasBounds::_internal_min_inlier_fraction() const {
  return min_inlier_fraction_;
}
inline float ToneEstimationOptions_GainBiasBounds::min_inlier_fraction() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.GainBiasBounds.min_inlier_fraction)
  return _internal_min_inlier_fraction();
}
inline void ToneEstimationOptions_GainBiasBounds::_internal_set_min_inlier_fraction(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_inlier_fraction_ = value;
}
inline void ToneEstimationOptions_GainBiasBounds::set_min_inlier_fraction(float value) {
  _internal_set_min_inlier_fraction(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.GainBiasBounds.min_inlier_fraction)
}

// optional float min_inlier_weight = 2 [default = 0.5];
inline bool ToneEstimationOptions_GainBiasBounds::_internal_has_min_inlier_weight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToneEstimationOptions_GainBiasBounds::has_min_inlier_weight() const {
  return _internal_has_min_inlier_weight();
}
inline void ToneEstimationOptions_GainBiasBounds::clear_min_inlier_weight() {
  min_inlier_weight_ = 0.5f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ToneEstimationOptions_GainBiasBounds::_internal_min_inlier_weight() const {
  return min_inlier_weight_;
}
inline float ToneEstimationOptions_GainBiasBounds::min_inlier_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.GainBiasBounds.min_inlier_weight)
  return _internal_min_inlier_weight();
}
inline void ToneEstimationOptions_GainBiasBounds::_internal_set_min_inlier_weight(float value) {
  _has_bits_[0] |= 0x00000002u;
  min_inlier_weight_ = value;
}
inline void ToneEstimationOptions_GainBiasBounds::set_min_inlier_weight(float value) {
  _internal_set_min_inlier_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.GainBiasBounds.min_inlier_weight)
}

// optional float lower_gain = 3 [default = 0.75];
inline bool ToneEstimationOptions_GainBiasBounds::_internal_has_lower_gain() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ToneEstimationOptions_GainBiasBounds::has_lower_gain() const {
  return _internal_has_lower_gain();
}
inline void ToneEstimationOptions_GainBiasBounds::clear_lower_gain() {
  lower_gain_ = 0.75f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ToneEstimationOptions_GainBiasBounds::_internal_lower_gain() const {
  return lower_gain_;
}
inline float ToneEstimationOptions_GainBiasBounds::lower_gain() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.GainBiasBounds.lower_gain)
  return _internal_lower_gain();
}
inline void ToneEstimationOptions_GainBiasBounds::_internal_set_lower_gain(float value) {
  _has_bits_[0] |= 0x00000004u;
  lower_gain_ = value;
}
inline void ToneEstimationOptions_GainBiasBounds::set_lower_gain(float value) {
  _internal_set_lower_gain(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.GainBiasBounds.lower_gain)
}

// optional float upper_gain = 4 [default = 1.334];
inline bool ToneEstimationOptions_GainBiasBounds::_internal_has_upper_gain() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToneEstimationOptions_GainBiasBounds::has_upper_gain() const {
  return _internal_has_upper_gain();
}
inline void ToneEstimationOptions_GainBiasBounds::clear_upper_gain() {
  upper_gain_ = 1.334f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ToneEstimationOptions_GainBiasBounds::_internal_upper_gain() const {
  return upper_gain_;
}
inline float ToneEstimationOptions_GainBiasBounds::upper_gain() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.GainBiasBounds.upper_gain)
  return _internal_upper_gain();
}
inline void ToneEstimationOptions_GainBiasBounds::_internal_set_upper_gain(float value) {
  _has_bits_[0] |= 0x00000008u;
  upper_gain_ = value;
}
inline void ToneEstimationOptions_GainBiasBounds::set_upper_gain(float value) {
  _internal_set_upper_gain(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.GainBiasBounds.upper_gain)
}

// optional float lower_bias = 5 [default = -0.2];
inline bool ToneEstimationOptions_GainBiasBounds::_internal_has_lower_bias() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ToneEstimationOptions_GainBiasBounds::has_lower_bias() const {
  return _internal_has_lower_bias();
}
inline void ToneEstimationOptions_GainBiasBounds::clear_lower_bias() {
  lower_bias_ = -0.2f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ToneEstimationOptions_GainBiasBounds::_internal_lower_bias() const {
  return lower_bias_;
}
inline float ToneEstimationOptions_GainBiasBounds::lower_bias() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.GainBiasBounds.lower_bias)
  return _internal_lower_bias();
}
inline void ToneEstimationOptions_GainBiasBounds::_internal_set_lower_bias(float value) {
  _has_bits_[0] |= 0x00000010u;
  lower_bias_ = value;
}
inline void ToneEstimationOptions_GainBiasBounds::set_lower_bias(float value) {
  _internal_set_lower_bias(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.GainBiasBounds.lower_bias)
}

// optional float upper_bias = 6 [default = 0.2];
inline bool ToneEstimationOptions_GainBiasBounds::_internal_has_upper_bias() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ToneEstimationOptions_GainBiasBounds::has_upper_bias() const {
  return _internal_has_upper_bias();
}
inline void ToneEstimationOptions_GainBiasBounds::clear_upper_bias() {
  upper_bias_ = 0.2f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ToneEstimationOptions_GainBiasBounds::_internal_upper_bias() const {
  return upper_bias_;
}
inline float ToneEstimationOptions_GainBiasBounds::upper_bias() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.GainBiasBounds.upper_bias)
  return _internal_upper_bias();
}
inline void ToneEstimationOptions_GainBiasBounds::_internal_set_upper_bias(float value) {
  _has_bits_[0] |= 0x00000020u;
  upper_bias_ = value;
}
inline void ToneEstimationOptions_GainBiasBounds::set_upper_bias(float value) {
  _internal_set_upper_bias(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.GainBiasBounds.upper_bias)
}

// -------------------------------------------------------------------

// ToneEstimationOptions

// optional .mediapipe.ToneMatchOptions tone_match_options = 1;
inline bool ToneEstimationOptions::_internal_has_tone_match_options() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tone_match_options_ != nullptr);
  return value;
}
inline bool ToneEstimationOptions::has_tone_match_options() const {
  return _internal_has_tone_match_options();
}
inline void ToneEstimationOptions::clear_tone_match_options() {
  if (tone_match_options_ != nullptr) tone_match_options_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::ToneMatchOptions& ToneEstimationOptions::_internal_tone_match_options() const {
  const ::mediapipe::ToneMatchOptions* p = tone_match_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ToneMatchOptions&>(
      ::mediapipe::_ToneMatchOptions_default_instance_);
}
inline const ::mediapipe::ToneMatchOptions& ToneEstimationOptions::tone_match_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.tone_match_options)
  return _internal_tone_match_options();
}
inline void ToneEstimationOptions::unsafe_arena_set_allocated_tone_match_options(
    ::mediapipe::ToneMatchOptions* tone_match_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tone_match_options_);
  }
  tone_match_options_ = tone_match_options;
  if (tone_match_options) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneEstimationOptions.tone_match_options)
}
inline ::mediapipe::ToneMatchOptions* ToneEstimationOptions::release_tone_match_options() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::ToneMatchOptions* temp = tone_match_options_;
  tone_match_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::ToneMatchOptions* ToneEstimationOptions::unsafe_arena_release_tone_match_options() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneEstimationOptions.tone_match_options)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::ToneMatchOptions* temp = tone_match_options_;
  tone_match_options_ = nullptr;
  return temp;
}
inline ::mediapipe::ToneMatchOptions* ToneEstimationOptions::_internal_mutable_tone_match_options() {
  _has_bits_[0] |= 0x00000001u;
  if (tone_match_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ToneMatchOptions>(GetArena());
    tone_match_options_ = p;
  }
  return tone_match_options_;
}
inline ::mediapipe::ToneMatchOptions* ToneEstimationOptions::mutable_tone_match_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneEstimationOptions.tone_match_options)
  return _internal_mutable_tone_match_options();
}
inline void ToneEstimationOptions::set_allocated_tone_match_options(::mediapipe::ToneMatchOptions* tone_match_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tone_match_options_;
  }
  if (tone_match_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tone_match_options);
    if (message_arena != submessage_arena) {
      tone_match_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tone_match_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tone_match_options_ = tone_match_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneEstimationOptions.tone_match_options)
}

// optional .mediapipe.ClipMaskOptions clip_mask_options = 2;
inline bool ToneEstimationOptions::_internal_has_clip_mask_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || clip_mask_options_ != nullptr);
  return value;
}
inline bool ToneEstimationOptions::has_clip_mask_options() const {
  return _internal_has_clip_mask_options();
}
inline void ToneEstimationOptions::clear_clip_mask_options() {
  if (clip_mask_options_ != nullptr) clip_mask_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::ClipMaskOptions& ToneEstimationOptions::_internal_clip_mask_options() const {
  const ::mediapipe::ClipMaskOptions* p = clip_mask_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ClipMaskOptions&>(
      ::mediapipe::_ClipMaskOptions_default_instance_);
}
inline const ::mediapipe::ClipMaskOptions& ToneEstimationOptions::clip_mask_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.clip_mask_options)
  return _internal_clip_mask_options();
}
inline void ToneEstimationOptions::unsafe_arena_set_allocated_clip_mask_options(
    ::mediapipe::ClipMaskOptions* clip_mask_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clip_mask_options_);
  }
  clip_mask_options_ = clip_mask_options;
  if (clip_mask_options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneEstimationOptions.clip_mask_options)
}
inline ::mediapipe::ClipMaskOptions* ToneEstimationOptions::release_clip_mask_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::ClipMaskOptions* temp = clip_mask_options_;
  clip_mask_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::ClipMaskOptions* ToneEstimationOptions::unsafe_arena_release_clip_mask_options() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneEstimationOptions.clip_mask_options)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::ClipMaskOptions* temp = clip_mask_options_;
  clip_mask_options_ = nullptr;
  return temp;
}
inline ::mediapipe::ClipMaskOptions* ToneEstimationOptions::_internal_mutable_clip_mask_options() {
  _has_bits_[0] |= 0x00000002u;
  if (clip_mask_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ClipMaskOptions>(GetArena());
    clip_mask_options_ = p;
  }
  return clip_mask_options_;
}
inline ::mediapipe::ClipMaskOptions* ToneEstimationOptions::mutable_clip_mask_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneEstimationOptions.clip_mask_options)
  return _internal_mutable_clip_mask_options();
}
inline void ToneEstimationOptions::set_allocated_clip_mask_options(::mediapipe::ClipMaskOptions* clip_mask_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clip_mask_options_;
  }
  if (clip_mask_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clip_mask_options);
    if (message_arena != submessage_arena) {
      clip_mask_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip_mask_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clip_mask_options_ = clip_mask_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneEstimationOptions.clip_mask_options)
}

// optional float stats_low_percentile = 3 [default = 0.05];
inline bool ToneEstimationOptions::_internal_has_stats_low_percentile() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_stats_low_percentile() const {
  return _internal_has_stats_low_percentile();
}
inline void ToneEstimationOptions::clear_stats_low_percentile() {
  stats_low_percentile_ = 0.05f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ToneEstimationOptions::_internal_stats_low_percentile() const {
  return stats_low_percentile_;
}
inline float ToneEstimationOptions::stats_low_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.stats_low_percentile)
  return _internal_stats_low_percentile();
}
inline void ToneEstimationOptions::_internal_set_stats_low_percentile(float value) {
  _has_bits_[0] |= 0x00000010u;
  stats_low_percentile_ = value;
}
inline void ToneEstimationOptions::set_stats_low_percentile(float value) {
  _internal_set_stats_low_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.stats_low_percentile)
}

// optional float stats_low_mid_percentile = 4 [default = 0.2];
inline bool ToneEstimationOptions::_internal_has_stats_low_mid_percentile() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_stats_low_mid_percentile() const {
  return _internal_has_stats_low_mid_percentile();
}
inline void ToneEstimationOptions::clear_stats_low_mid_percentile() {
  stats_low_mid_percentile_ = 0.2f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ToneEstimationOptions::_internal_stats_low_mid_percentile() const {
  return stats_low_mid_percentile_;
}
inline float ToneEstimationOptions::stats_low_mid_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.stats_low_mid_percentile)
  return _internal_stats_low_mid_percentile();
}
inline void ToneEstimationOptions::_internal_set_stats_low_mid_percentile(float value) {
  _has_bits_[0] |= 0x00000020u;
  stats_low_mid_percentile_ = value;
}
inline void ToneEstimationOptions::set_stats_low_mid_percentile(float value) {
  _internal_set_stats_low_mid_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.stats_low_mid_percentile)
}

// optional float stats_mid_percentile = 5 [default = 0.5];
inline bool ToneEstimationOptions::_internal_has_stats_mid_percentile() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_stats_mid_percentile() const {
  return _internal_has_stats_mid_percentile();
}
inline void ToneEstimationOptions::clear_stats_mid_percentile() {
  stats_mid_percentile_ = 0.5f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ToneEstimationOptions::_internal_stats_mid_percentile() const {
  return stats_mid_percentile_;
}
inline float ToneEstimationOptions::stats_mid_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.stats_mid_percentile)
  return _internal_stats_mid_percentile();
}
inline void ToneEstimationOptions::_internal_set_stats_mid_percentile(float value) {
  _has_bits_[0] |= 0x00000040u;
  stats_mid_percentile_ = value;
}
inline void ToneEstimationOptions::set_stats_mid_percentile(float value) {
  _internal_set_stats_mid_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.stats_mid_percentile)
}

// optional float stats_high_mid_percentile = 6 [default = 0.8];
inline bool ToneEstimationOptions::_internal_has_stats_high_mid_percentile() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_stats_high_mid_percentile() const {
  return _internal_has_stats_high_mid_percentile();
}
inline void ToneEstimationOptions::clear_stats_high_mid_percentile() {
  stats_high_mid_percentile_ = 0.8f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ToneEstimationOptions::_internal_stats_high_mid_percentile() const {
  return stats_high_mid_percentile_;
}
inline float ToneEstimationOptions::stats_high_mid_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.stats_high_mid_percentile)
  return _internal_stats_high_mid_percentile();
}
inline void ToneEstimationOptions::_internal_set_stats_high_mid_percentile(float value) {
  _has_bits_[0] |= 0x00000080u;
  stats_high_mid_percentile_ = value;
}
inline void ToneEstimationOptions::set_stats_high_mid_percentile(float value) {
  _internal_set_stats_high_mid_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.stats_high_mid_percentile)
}

// optional float stats_high_percentile = 7 [default = 0.95];
inline bool ToneEstimationOptions::_internal_has_stats_high_percentile() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_stats_high_percentile() const {
  return _internal_has_stats_high_percentile();
}
inline void ToneEstimationOptions::clear_stats_high_percentile() {
  stats_high_percentile_ = 0.95f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ToneEstimationOptions::_internal_stats_high_percentile() const {
  return stats_high_percentile_;
}
inline float ToneEstimationOptions::stats_high_percentile() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.stats_high_percentile)
  return _internal_stats_high_percentile();
}
inline void ToneEstimationOptions::_internal_set_stats_high_percentile(float value) {
  _has_bits_[0] |= 0x00000100u;
  stats_high_percentile_ = value;
}
inline void ToneEstimationOptions::set_stats_high_percentile(float value) {
  _internal_set_stats_high_percentile(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.stats_high_percentile)
}

// optional int32 irls_iterations = 8 [default = 10];
inline bool ToneEstimationOptions::_internal_has_irls_iterations() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_irls_iterations() const {
  return _internal_has_irls_iterations();
}
inline void ToneEstimationOptions::clear_irls_iterations() {
  irls_iterations_ = 10;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneEstimationOptions::_internal_irls_iterations() const {
  return irls_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneEstimationOptions::irls_iterations() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.irls_iterations)
  return _internal_irls_iterations();
}
inline void ToneEstimationOptions::_internal_set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  irls_iterations_ = value;
}
inline void ToneEstimationOptions::set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_irls_iterations(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.irls_iterations)
}

// optional .mediapipe.ToneEstimationOptions.GainBiasBounds stable_gain_bias_bounds = 9;
inline bool ToneEstimationOptions::_internal_has_stable_gain_bias_bounds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || stable_gain_bias_bounds_ != nullptr);
  return value;
}
inline bool ToneEstimationOptions::has_stable_gain_bias_bounds() const {
  return _internal_has_stable_gain_bias_bounds();
}
inline void ToneEstimationOptions::clear_stable_gain_bias_bounds() {
  if (stable_gain_bias_bounds_ != nullptr) stable_gain_bias_bounds_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::ToneEstimationOptions_GainBiasBounds& ToneEstimationOptions::_internal_stable_gain_bias_bounds() const {
  const ::mediapipe::ToneEstimationOptions_GainBiasBounds* p = stable_gain_bias_bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::ToneEstimationOptions_GainBiasBounds&>(
      ::mediapipe::_ToneEstimationOptions_GainBiasBounds_default_instance_);
}
inline const ::mediapipe::ToneEstimationOptions_GainBiasBounds& ToneEstimationOptions::stable_gain_bias_bounds() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.stable_gain_bias_bounds)
  return _internal_stable_gain_bias_bounds();
}
inline void ToneEstimationOptions::unsafe_arena_set_allocated_stable_gain_bias_bounds(
    ::mediapipe::ToneEstimationOptions_GainBiasBounds* stable_gain_bias_bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stable_gain_bias_bounds_);
  }
  stable_gain_bias_bounds_ = stable_gain_bias_bounds;
  if (stable_gain_bias_bounds) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.ToneEstimationOptions.stable_gain_bias_bounds)
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* ToneEstimationOptions::release_stable_gain_bias_bounds() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* temp = stable_gain_bias_bounds_;
  stable_gain_bias_bounds_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* ToneEstimationOptions::unsafe_arena_release_stable_gain_bias_bounds() {
  // @@protoc_insertion_point(field_release:mediapipe.ToneEstimationOptions.stable_gain_bias_bounds)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::ToneEstimationOptions_GainBiasBounds* temp = stable_gain_bias_bounds_;
  stable_gain_bias_bounds_ = nullptr;
  return temp;
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* ToneEstimationOptions::_internal_mutable_stable_gain_bias_bounds() {
  _has_bits_[0] |= 0x00000004u;
  if (stable_gain_bias_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::ToneEstimationOptions_GainBiasBounds>(GetArena());
    stable_gain_bias_bounds_ = p;
  }
  return stable_gain_bias_bounds_;
}
inline ::mediapipe::ToneEstimationOptions_GainBiasBounds* ToneEstimationOptions::mutable_stable_gain_bias_bounds() {
  // @@protoc_insertion_point(field_mutable:mediapipe.ToneEstimationOptions.stable_gain_bias_bounds)
  return _internal_mutable_stable_gain_bias_bounds();
}
inline void ToneEstimationOptions::set_allocated_stable_gain_bias_bounds(::mediapipe::ToneEstimationOptions_GainBiasBounds* stable_gain_bias_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stable_gain_bias_bounds_;
  }
  if (stable_gain_bias_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stable_gain_bias_bounds);
    if (message_arena != submessage_arena) {
      stable_gain_bias_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stable_gain_bias_bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stable_gain_bias_bounds_ = stable_gain_bias_bounds;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.ToneEstimationOptions.stable_gain_bias_bounds)
}

// optional .mediapipe.ToneEstimationOptions.DownsampleMode downsample_mode = 10 [default = DOWNSAMPLE_NONE];
inline bool ToneEstimationOptions::_internal_has_downsample_mode() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_downsample_mode() const {
  return _internal_has_downsample_mode();
}
inline void ToneEstimationOptions::clear_downsample_mode() {
  downsample_mode_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::mediapipe::ToneEstimationOptions_DownsampleMode ToneEstimationOptions::_internal_downsample_mode() const {
  return static_cast< ::mediapipe::ToneEstimationOptions_DownsampleMode >(downsample_mode_);
}
inline ::mediapipe::ToneEstimationOptions_DownsampleMode ToneEstimationOptions::downsample_mode() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.downsample_mode)
  return _internal_downsample_mode();
}
inline void ToneEstimationOptions::_internal_set_downsample_mode(::mediapipe::ToneEstimationOptions_DownsampleMode value) {
  assert(::mediapipe::ToneEstimationOptions_DownsampleMode_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  downsample_mode_ = value;
}
inline void ToneEstimationOptions::set_downsample_mode(::mediapipe::ToneEstimationOptions_DownsampleMode value) {
  _internal_set_downsample_mode(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.downsample_mode)
}

// optional int32 downsampling_size = 11 [default = 256];
inline bool ToneEstimationOptions::_internal_has_downsampling_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_downsampling_size() const {
  return _internal_has_downsampling_size();
}
inline void ToneEstimationOptions::clear_downsampling_size() {
  downsampling_size_ = 256;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneEstimationOptions::_internal_downsampling_size() const {
  return downsampling_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToneEstimationOptions::downsampling_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.downsampling_size)
  return _internal_downsampling_size();
}
inline void ToneEstimationOptions::_internal_set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  downsampling_size_ = value;
}
inline void ToneEstimationOptions::set_downsampling_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downsampling_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.downsampling_size)
}

// optional float downsample_factor = 12 [default = 2];
inline bool ToneEstimationOptions::_internal_has_downsample_factor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ToneEstimationOptions::has_downsample_factor() const {
  return _internal_has_downsample_factor();
}
inline void ToneEstimationOptions::clear_downsample_factor() {
  downsample_factor_ = 2;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ToneEstimationOptions::_internal_downsample_factor() const {
  return downsample_factor_;
}
inline float ToneEstimationOptions::downsample_factor() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneEstimationOptions.downsample_factor)
  return _internal_downsample_factor();
}
inline void ToneEstimationOptions::_internal_set_downsample_factor(float value) {
  _has_bits_[0] |= 0x00000008u;
  downsample_factor_ = value;
}
inline void ToneEstimationOptions::set_downsample_factor(float value) {
  _internal_set_downsample_factor(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneEstimationOptions.downsample_factor)
}

// -------------------------------------------------------------------

// ToneMatch

// optional float curr_val = 1;
inline bool ToneMatch::_internal_has_curr_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ToneMatch::has_curr_val() const {
  return _internal_has_curr_val();
}
inline void ToneMatch::clear_curr_val() {
  curr_val_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ToneMatch::_internal_curr_val() const {
  return curr_val_;
}
inline float ToneMatch::curr_val() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatch.curr_val)
  return _internal_curr_val();
}
inline void ToneMatch::_internal_set_curr_val(float value) {
  _has_bits_[0] |= 0x00000001u;
  curr_val_ = value;
}
inline void ToneMatch::set_curr_val(float value) {
  _internal_set_curr_val(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatch.curr_val)
}

// optional float prev_val = 2;
inline bool ToneMatch::_internal_has_prev_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ToneMatch::has_prev_val() const {
  return _internal_has_prev_val();
}
inline void ToneMatch::clear_prev_val() {
  prev_val_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ToneMatch::_internal_prev_val() const {
  return prev_val_;
}
inline float ToneMatch::prev_val() const {
  // @@protoc_insertion_point(field_get:mediapipe.ToneMatch.prev_val)
  return _internal_prev_val();
}
inline void ToneMatch::_internal_set_prev_val(float value) {
  _has_bits_[0] |= 0x00000002u;
  prev_val_ = value;
}
inline void ToneMatch::set_prev_val(float value) {
  _internal_set_prev_val(value);
  // @@protoc_insertion_point(field_set:mediapipe.ToneMatch.prev_val)
}

// -------------------------------------------------------------------

// PatchToneMatch

// repeated .mediapipe.ToneMatch tone_match = 1;
inline int PatchToneMatch::_internal_tone_match_size() const {
  return tone_match_.size();
}
inline int PatchToneMatch::tone_match_size() const {
  return _internal_tone_match_size();
}
inline void PatchToneMatch::clear_tone_match() {
  tone_match_.Clear();
}
inline ::mediapipe::ToneMatch* PatchToneMatch::mutable_tone_match(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.PatchToneMatch.tone_match)
  return tone_match_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ToneMatch >*
PatchToneMatch::mutable_tone_match() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.PatchToneMatch.tone_match)
  return &tone_match_;
}
inline const ::mediapipe::ToneMatch& PatchToneMatch::_internal_tone_match(int index) const {
  return tone_match_.Get(index);
}
inline const ::mediapipe::ToneMatch& PatchToneMatch::tone_match(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.PatchToneMatch.tone_match)
  return _internal_tone_match(index);
}
inline ::mediapipe::ToneMatch* PatchToneMatch::_internal_add_tone_match() {
  return tone_match_.Add();
}
inline ::mediapipe::ToneMatch* PatchToneMatch::add_tone_match() {
  // @@protoc_insertion_point(field_add:mediapipe.PatchToneMatch.tone_match)
  return _internal_add_tone_match();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::ToneMatch >&
PatchToneMatch::tone_match() const {
  // @@protoc_insertion_point(field_list:mediapipe.PatchToneMatch.tone_match)
  return tone_match_;
}

// optional float irls_weight = 2 [default = 1];
inline bool PatchToneMatch::_internal_has_irls_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PatchToneMatch::has_irls_weight() const {
  return _internal_has_irls_weight();
}
inline void PatchToneMatch::clear_irls_weight() {
  irls_weight_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PatchToneMatch::_internal_irls_weight() const {
  return irls_weight_;
}
inline float PatchToneMatch::irls_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.PatchToneMatch.irls_weight)
  return _internal_irls_weight();
}
inline void PatchToneMatch::_internal_set_irls_weight(float value) {
  _has_bits_[0] |= 0x00000001u;
  irls_weight_ = value;
}
inline void PatchToneMatch::set_irls_weight(float value) {
  _internal_set_irls_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.PatchToneMatch.irls_weight)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::ToneChange_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::ToneChange_Type>() {
  return ::mediapipe::ToneChange_Type_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::ToneEstimationOptions_DownsampleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::ToneEstimationOptions_DownsampleMode>() {
  return ::mediapipe::ToneEstimationOptions_DownsampleMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftone_5festimation_2eproto
