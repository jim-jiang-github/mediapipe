// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/tone_models.proto

#include "mediapipe/util/tracking/tone_models.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr GainBiasModel::GainBiasModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bias_c1_(0)
  , bias_c2_(0)
  , bias_c3_(0)
  , gain_c3_(1)
  , gain_c1_(1)
  , gain_c2_(1){}
struct GainBiasModelDefaultTypeInternal {
  constexpr GainBiasModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GainBiasModelDefaultTypeInternal() {}
  union {
    GainBiasModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GainBiasModelDefaultTypeInternal _GainBiasModel_default_instance_;
constexpr MixtureGainBiasModel::MixtureGainBiasModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(){}
struct MixtureGainBiasModelDefaultTypeInternal {
  constexpr MixtureGainBiasModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MixtureGainBiasModelDefaultTypeInternal() {}
  union {
    MixtureGainBiasModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MixtureGainBiasModelDefaultTypeInternal _MixtureGainBiasModel_default_instance_;
constexpr AffineToneModel::AffineToneModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : g_01_(0)
  , g_02_(0)
  , g_03_(0)
  , g_10_(0)
  , g_12_(0)
  , g_13_(0)
  , g_20_(0)
  , g_21_(0)
  , g_23_(0)
  , g_22_(1)
  , g_00_(1)
  , g_11_(1){}
struct AffineToneModelDefaultTypeInternal {
  constexpr AffineToneModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AffineToneModelDefaultTypeInternal() {}
  union {
    AffineToneModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AffineToneModelDefaultTypeInternal _AffineToneModel_default_instance_;
constexpr MixtureAffineToneModel::MixtureAffineToneModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_(){}
struct MixtureAffineToneModelDefaultTypeInternal {
  constexpr MixtureAffineToneModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MixtureAffineToneModelDefaultTypeInternal() {}
  union {
    MixtureAffineToneModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MixtureAffineToneModelDefaultTypeInternal _MixtureAffineToneModel_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, gain_c1_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, bias_c1_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, gain_c2_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, bias_c2_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, gain_c3_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GainBiasModel, bias_c3_),
  4,
  0,
  5,
  1,
  3,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureGainBiasModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureGainBiasModel, model_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_00_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_01_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_02_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_03_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_10_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_11_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_12_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_13_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_20_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_21_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_22_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::AffineToneModel, g_23_),
  10,
  0,
  1,
  2,
  3,
  11,
  4,
  5,
  6,
  7,
  9,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureAffineToneModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MixtureAffineToneModel, model_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mediapipe::GainBiasModel)},
  { 17, -1, sizeof(::mediapipe::MixtureGainBiasModel)},
  { 23, 40, sizeof(::mediapipe::AffineToneModel)},
  { 52, -1, sizeof(::mediapipe::MixtureAffineToneModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_GainBiasModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MixtureGainBiasModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_AffineToneModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MixtureAffineToneModel_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)mediapipe/util/tracking/tone_models.pr"
  "oto\022\tmediapipe\"\207\001\n\rGainBiasModel\022\022\n\007gain"
  "_c1\030\001 \001(\002:\0011\022\022\n\007bias_c1\030\002 \001(\002:\0010\022\022\n\007gain"
  "_c2\030\003 \001(\002:\0011\022\022\n\007bias_c2\030\004 \001(\002:\0010\022\022\n\007gain"
  "_c3\030\005 \001(\002:\0011\022\022\n\007bias_c3\030\006 \001(\002:\0010\"\?\n\024Mixt"
  "ureGainBiasModel\022\'\n\005model\030\001 \003(\0132\030.mediap"
  "ipe.GainBiasModel\"\335\001\n\017AffineToneModel\022\017\n"
  "\004g_00\030\001 \001(\002:\0011\022\017\n\004g_01\030\002 \001(\002:\0010\022\017\n\004g_02\030"
  "\003 \001(\002:\0010\022\017\n\004g_03\030\004 \001(\002:\0010\022\017\n\004g_10\030\005 \001(\002:"
  "\0010\022\017\n\004g_11\030\006 \001(\002:\0011\022\017\n\004g_12\030\007 \001(\002:\0010\022\017\n\004"
  "g_13\030\010 \001(\002:\0010\022\017\n\004g_20\030\t \001(\002:\0010\022\017\n\004g_21\030\n"
  " \001(\002:\0010\022\017\n\004g_22\030\013 \001(\002:\0011\022\017\n\004g_23\030\014 \001(\002:\001"
  "0\"C\n\026MixtureAffineToneModel\022)\n\005model\030\001 \003"
  "(\0132\032.mediapipe.AffineToneModel"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto = {
  false, false, 550, descriptor_table_protodef_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto, "mediapipe/util/tracking/tone_models.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto);
namespace mediapipe {

// ===================================================================

class GainBiasModel::_Internal {
 public:
  using HasBits = decltype(std::declval<GainBiasModel>()._has_bits_);
  static void set_has_gain_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bias_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gain_c2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bias_c2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gain_c3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bias_c3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GainBiasModel::GainBiasModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.GainBiasModel)
}
GainBiasModel::GainBiasModel(const GainBiasModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bias_c1_, &from.bias_c1_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_c2_) -
    reinterpret_cast<char*>(&bias_c1_)) + sizeof(gain_c2_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.GainBiasModel)
}

void GainBiasModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bias_c1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bias_c3_) -
    reinterpret_cast<char*>(&bias_c1_)) + sizeof(bias_c3_));
gain_c3_ = 1;
gain_c1_ = 1;
gain_c2_ = 1;
}

GainBiasModel::~GainBiasModel() {
  // @@protoc_insertion_point(destructor:mediapipe.GainBiasModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GainBiasModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GainBiasModel::ArenaDtor(void* object) {
  GainBiasModel* _this = reinterpret_cast< GainBiasModel* >(object);
  (void)_this;
}
void GainBiasModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainBiasModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GainBiasModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.GainBiasModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&bias_c1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bias_c3_) -
        reinterpret_cast<char*>(&bias_c1_)) + sizeof(bias_c3_));
    gain_c3_ = 1;
    gain_c1_ = 1;
    gain_c2_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainBiasModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float gain_c1 = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_gain_c1(&has_bits);
          gain_c1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias_c1 = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_bias_c1(&has_bits);
          bias_c1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gain_c2 = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_gain_c2(&has_bits);
          gain_c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias_c2 = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_bias_c2(&has_bits);
          bias_c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gain_c3 = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_gain_c3(&has_bits);
          gain_c3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias_c3 = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_bias_c3(&has_bits);
          bias_c3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainBiasModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.GainBiasModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float gain_c1 = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gain_c1(), target);
  }

  // optional float bias_c1 = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bias_c1(), target);
  }

  // optional float gain_c2 = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_gain_c2(), target);
  }

  // optional float bias_c2 = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bias_c2(), target);
  }

  // optional float gain_c3 = 5 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_gain_c3(), target);
  }

  // optional float bias_c3 = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_bias_c3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.GainBiasModel)
  return target;
}

size_t GainBiasModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.GainBiasModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float bias_c1 = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float bias_c2 = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float bias_c3 = 6 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float gain_c3 = 5 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float gain_c1 = 1 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float gain_c2 = 3 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GainBiasModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.GainBiasModel)
  GOOGLE_DCHECK_NE(&from, this);
  const GainBiasModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GainBiasModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.GainBiasModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.GainBiasModel)
    MergeFrom(*source);
  }
}

void GainBiasModel::MergeFrom(const GainBiasModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.GainBiasModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      bias_c1_ = from.bias_c1_;
    }
    if (cached_has_bits & 0x00000002u) {
      bias_c2_ = from.bias_c2_;
    }
    if (cached_has_bits & 0x00000004u) {
      bias_c3_ = from.bias_c3_;
    }
    if (cached_has_bits & 0x00000008u) {
      gain_c3_ = from.gain_c3_;
    }
    if (cached_has_bits & 0x00000010u) {
      gain_c1_ = from.gain_c1_;
    }
    if (cached_has_bits & 0x00000020u) {
      gain_c2_ = from.gain_c2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GainBiasModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.GainBiasModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainBiasModel::CopyFrom(const GainBiasModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.GainBiasModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainBiasModel::IsInitialized() const {
  return true;
}

void GainBiasModel::InternalSwap(GainBiasModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GainBiasModel, bias_c3_)
      + sizeof(GainBiasModel::bias_c3_)
      - PROTOBUF_FIELD_OFFSET(GainBiasModel, bias_c1_)>(
          reinterpret_cast<char*>(&bias_c1_),
          reinterpret_cast<char*>(&other->bias_c1_));
  swap(gain_c3_, other->gain_c3_);
  swap(gain_c1_, other->gain_c1_);
  swap(gain_c2_, other->gain_c2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GainBiasModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto[0]);
}

// ===================================================================

class MixtureGainBiasModel::_Internal {
 public:
};

MixtureGainBiasModel::MixtureGainBiasModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  model_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MixtureGainBiasModel)
}
MixtureGainBiasModel::MixtureGainBiasModel(const MixtureGainBiasModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_(from.model_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.MixtureGainBiasModel)
}

void MixtureGainBiasModel::SharedCtor() {
}

MixtureGainBiasModel::~MixtureGainBiasModel() {
  // @@protoc_insertion_point(destructor:mediapipe.MixtureGainBiasModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MixtureGainBiasModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MixtureGainBiasModel::ArenaDtor(void* object) {
  MixtureGainBiasModel* _this = reinterpret_cast< MixtureGainBiasModel* >(object);
  (void)_this;
}
void MixtureGainBiasModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MixtureGainBiasModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixtureGainBiasModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MixtureGainBiasModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixtureGainBiasModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.GainBiasModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixtureGainBiasModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MixtureGainBiasModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.GainBiasModel model = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_model(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MixtureGainBiasModel)
  return target;
}

size_t MixtureGainBiasModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MixtureGainBiasModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.GainBiasModel model = 1;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixtureGainBiasModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MixtureGainBiasModel)
  GOOGLE_DCHECK_NE(&from, this);
  const MixtureGainBiasModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixtureGainBiasModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MixtureGainBiasModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MixtureGainBiasModel)
    MergeFrom(*source);
  }
}

void MixtureGainBiasModel::MergeFrom(const MixtureGainBiasModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MixtureGainBiasModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
}

void MixtureGainBiasModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MixtureGainBiasModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixtureGainBiasModel::CopyFrom(const MixtureGainBiasModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MixtureGainBiasModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixtureGainBiasModel::IsInitialized() const {
  return true;
}

void MixtureGainBiasModel::InternalSwap(MixtureGainBiasModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_.InternalSwap(&other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixtureGainBiasModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto[1]);
}

// ===================================================================

class AffineToneModel::_Internal {
 public:
  using HasBits = decltype(std::declval<AffineToneModel>()._has_bits_);
  static void set_has_g_00(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_g_01(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g_02(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_g_03(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_g_10(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_g_11(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_g_12(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_g_13(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_g_20(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_g_21(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_g_22(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_g_23(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AffineToneModel::AffineToneModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.AffineToneModel)
}
AffineToneModel::AffineToneModel(const AffineToneModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&g_01_, &from.g_01_,
    static_cast<size_t>(reinterpret_cast<char*>(&g_11_) -
    reinterpret_cast<char*>(&g_01_)) + sizeof(g_11_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.AffineToneModel)
}

void AffineToneModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&g_01_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&g_23_) -
    reinterpret_cast<char*>(&g_01_)) + sizeof(g_23_));
g_22_ = 1;
g_00_ = 1;
g_11_ = 1;
}

AffineToneModel::~AffineToneModel() {
  // @@protoc_insertion_point(destructor:mediapipe.AffineToneModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AffineToneModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AffineToneModel::ArenaDtor(void* object) {
  AffineToneModel* _this = reinterpret_cast< AffineToneModel* >(object);
  (void)_this;
}
void AffineToneModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AffineToneModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AffineToneModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.AffineToneModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&g_01_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&g_21_) -
        reinterpret_cast<char*>(&g_01_)) + sizeof(g_21_));
  }
  if (cached_has_bits & 0x00000f00u) {
    g_23_ = 0;
    g_22_ = 1;
    g_00_ = 1;
    g_11_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AffineToneModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float g_00 = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_g_00(&has_bits);
          g_00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_01 = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_g_01(&has_bits);
          g_01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_02 = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_g_02(&has_bits);
          g_02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_03 = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_g_03(&has_bits);
          g_03_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_10 = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_g_10(&has_bits);
          g_10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_11 = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_g_11(&has_bits);
          g_11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_12 = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_g_12(&has_bits);
          g_12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_13 = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_g_13(&has_bits);
          g_13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_20 = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_g_20(&has_bits);
          g_20_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_21 = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_g_21(&has_bits);
          g_21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_22 = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_g_22(&has_bits);
          g_22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float g_23 = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_g_23(&has_bits);
          g_23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AffineToneModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.AffineToneModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float g_00 = 1 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_g_00(), target);
  }

  // optional float g_01 = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_g_01(), target);
  }

  // optional float g_02 = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_g_02(), target);
  }

  // optional float g_03 = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_g_03(), target);
  }

  // optional float g_10 = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_g_10(), target);
  }

  // optional float g_11 = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_g_11(), target);
  }

  // optional float g_12 = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_g_12(), target);
  }

  // optional float g_13 = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_g_13(), target);
  }

  // optional float g_20 = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_g_20(), target);
  }

  // optional float g_21 = 10 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_g_21(), target);
  }

  // optional float g_22 = 11 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_g_22(), target);
  }

  // optional float g_23 = 12 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_g_23(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.AffineToneModel)
  return target;
}

size_t AffineToneModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.AffineToneModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float g_01 = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float g_02 = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float g_03 = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float g_10 = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float g_12 = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float g_13 = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float g_20 = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float g_21 = 10 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float g_23 = 12 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float g_22 = 11 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float g_00 = 1 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float g_11 = 6 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AffineToneModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.AffineToneModel)
  GOOGLE_DCHECK_NE(&from, this);
  const AffineToneModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AffineToneModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.AffineToneModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.AffineToneModel)
    MergeFrom(*source);
  }
}

void AffineToneModel::MergeFrom(const AffineToneModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.AffineToneModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      g_01_ = from.g_01_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_02_ = from.g_02_;
    }
    if (cached_has_bits & 0x00000004u) {
      g_03_ = from.g_03_;
    }
    if (cached_has_bits & 0x00000008u) {
      g_10_ = from.g_10_;
    }
    if (cached_has_bits & 0x00000010u) {
      g_12_ = from.g_12_;
    }
    if (cached_has_bits & 0x00000020u) {
      g_13_ = from.g_13_;
    }
    if (cached_has_bits & 0x00000040u) {
      g_20_ = from.g_20_;
    }
    if (cached_has_bits & 0x00000080u) {
      g_21_ = from.g_21_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      g_23_ = from.g_23_;
    }
    if (cached_has_bits & 0x00000200u) {
      g_22_ = from.g_22_;
    }
    if (cached_has_bits & 0x00000400u) {
      g_00_ = from.g_00_;
    }
    if (cached_has_bits & 0x00000800u) {
      g_11_ = from.g_11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AffineToneModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.AffineToneModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffineToneModel::CopyFrom(const AffineToneModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.AffineToneModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffineToneModel::IsInitialized() const {
  return true;
}

void AffineToneModel::InternalSwap(AffineToneModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AffineToneModel, g_23_)
      + sizeof(AffineToneModel::g_23_)
      - PROTOBUF_FIELD_OFFSET(AffineToneModel, g_01_)>(
          reinterpret_cast<char*>(&g_01_),
          reinterpret_cast<char*>(&other->g_01_));
  swap(g_22_, other->g_22_);
  swap(g_00_, other->g_00_);
  swap(g_11_, other->g_11_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AffineToneModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto[2]);
}

// ===================================================================

class MixtureAffineToneModel::_Internal {
 public:
};

MixtureAffineToneModel::MixtureAffineToneModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  model_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MixtureAffineToneModel)
}
MixtureAffineToneModel::MixtureAffineToneModel(const MixtureAffineToneModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_(from.model_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.MixtureAffineToneModel)
}

void MixtureAffineToneModel::SharedCtor() {
}

MixtureAffineToneModel::~MixtureAffineToneModel() {
  // @@protoc_insertion_point(destructor:mediapipe.MixtureAffineToneModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MixtureAffineToneModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MixtureAffineToneModel::ArenaDtor(void* object) {
  MixtureAffineToneModel* _this = reinterpret_cast< MixtureAffineToneModel* >(object);
  (void)_this;
}
void MixtureAffineToneModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MixtureAffineToneModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixtureAffineToneModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MixtureAffineToneModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixtureAffineToneModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mediapipe.AffineToneModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MixtureAffineToneModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MixtureAffineToneModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.AffineToneModel model = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_model(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MixtureAffineToneModel)
  return target;
}

size_t MixtureAffineToneModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MixtureAffineToneModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.AffineToneModel model = 1;
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MixtureAffineToneModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MixtureAffineToneModel)
  GOOGLE_DCHECK_NE(&from, this);
  const MixtureAffineToneModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MixtureAffineToneModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MixtureAffineToneModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MixtureAffineToneModel)
    MergeFrom(*source);
  }
}

void MixtureAffineToneModel::MergeFrom(const MixtureAffineToneModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MixtureAffineToneModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
}

void MixtureAffineToneModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MixtureAffineToneModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixtureAffineToneModel::CopyFrom(const MixtureAffineToneModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MixtureAffineToneModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixtureAffineToneModel::IsInitialized() const {
  return true;
}

void MixtureAffineToneModel::InternalSwap(MixtureAffineToneModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_.InternalSwap(&other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixtureAffineToneModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::GainBiasModel* Arena::CreateMaybeMessage< ::mediapipe::GainBiasModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::GainBiasModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MixtureGainBiasModel* Arena::CreateMaybeMessage< ::mediapipe::MixtureGainBiasModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MixtureGainBiasModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::AffineToneModel* Arena::CreateMaybeMessage< ::mediapipe::AffineToneModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::AffineToneModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MixtureAffineToneModel* Arena::CreateMaybeMessage< ::mediapipe::MixtureAffineToneModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MixtureAffineToneModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
