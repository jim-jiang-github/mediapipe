// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/tone_models.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto;
namespace mediapipe {
class AffineToneModel;
struct AffineToneModelDefaultTypeInternal;
extern AffineToneModelDefaultTypeInternal _AffineToneModel_default_instance_;
class GainBiasModel;
struct GainBiasModelDefaultTypeInternal;
extern GainBiasModelDefaultTypeInternal _GainBiasModel_default_instance_;
class MixtureAffineToneModel;
struct MixtureAffineToneModelDefaultTypeInternal;
extern MixtureAffineToneModelDefaultTypeInternal _MixtureAffineToneModel_default_instance_;
class MixtureGainBiasModel;
struct MixtureGainBiasModelDefaultTypeInternal;
extern MixtureGainBiasModelDefaultTypeInternal _MixtureGainBiasModel_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::AffineToneModel* Arena::CreateMaybeMessage<::mediapipe::AffineToneModel>(Arena*);
template<> ::mediapipe::GainBiasModel* Arena::CreateMaybeMessage<::mediapipe::GainBiasModel>(Arena*);
template<> ::mediapipe::MixtureAffineToneModel* Arena::CreateMaybeMessage<::mediapipe::MixtureAffineToneModel>(Arena*);
template<> ::mediapipe::MixtureGainBiasModel* Arena::CreateMaybeMessage<::mediapipe::MixtureGainBiasModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class GainBiasModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.GainBiasModel) */ {
 public:
  inline GainBiasModel() : GainBiasModel(nullptr) {}
  ~GainBiasModel() override;
  explicit constexpr GainBiasModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GainBiasModel(const GainBiasModel& from);
  GainBiasModel(GainBiasModel&& from) noexcept
    : GainBiasModel() {
    *this = ::std::move(from);
  }

  inline GainBiasModel& operator=(const GainBiasModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GainBiasModel& operator=(GainBiasModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GainBiasModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const GainBiasModel* internal_default_instance() {
    return reinterpret_cast<const GainBiasModel*>(
               &_GainBiasModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GainBiasModel& a, GainBiasModel& b) {
    a.Swap(&b);
  }
  inline void Swap(GainBiasModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GainBiasModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GainBiasModel* New() const final {
    return CreateMaybeMessage<GainBiasModel>(nullptr);
  }

  GainBiasModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GainBiasModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GainBiasModel& from);
  void MergeFrom(const GainBiasModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GainBiasModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.GainBiasModel";
  }
  protected:
  explicit GainBiasModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBiasC1FieldNumber = 2,
    kBiasC2FieldNumber = 4,
    kBiasC3FieldNumber = 6,
    kGainC3FieldNumber = 5,
    kGainC1FieldNumber = 1,
    kGainC2FieldNumber = 3,
  };
  // optional float bias_c1 = 2 [default = 0];
  bool has_bias_c1() const;
  private:
  bool _internal_has_bias_c1() const;
  public:
  void clear_bias_c1();
  float bias_c1() const;
  void set_bias_c1(float value);
  private:
  float _internal_bias_c1() const;
  void _internal_set_bias_c1(float value);
  public:

  // optional float bias_c2 = 4 [default = 0];
  bool has_bias_c2() const;
  private:
  bool _internal_has_bias_c2() const;
  public:
  void clear_bias_c2();
  float bias_c2() const;
  void set_bias_c2(float value);
  private:
  float _internal_bias_c2() const;
  void _internal_set_bias_c2(float value);
  public:

  // optional float bias_c3 = 6 [default = 0];
  bool has_bias_c3() const;
  private:
  bool _internal_has_bias_c3() const;
  public:
  void clear_bias_c3();
  float bias_c3() const;
  void set_bias_c3(float value);
  private:
  float _internal_bias_c3() const;
  void _internal_set_bias_c3(float value);
  public:

  // optional float gain_c3 = 5 [default = 1];
  bool has_gain_c3() const;
  private:
  bool _internal_has_gain_c3() const;
  public:
  void clear_gain_c3();
  float gain_c3() const;
  void set_gain_c3(float value);
  private:
  float _internal_gain_c3() const;
  void _internal_set_gain_c3(float value);
  public:

  // optional float gain_c1 = 1 [default = 1];
  bool has_gain_c1() const;
  private:
  bool _internal_has_gain_c1() const;
  public:
  void clear_gain_c1();
  float gain_c1() const;
  void set_gain_c1(float value);
  private:
  float _internal_gain_c1() const;
  void _internal_set_gain_c1(float value);
  public:

  // optional float gain_c2 = 3 [default = 1];
  bool has_gain_c2() const;
  private:
  bool _internal_has_gain_c2() const;
  public:
  void clear_gain_c2();
  float gain_c2() const;
  void set_gain_c2(float value);
  private:
  float _internal_gain_c2() const;
  void _internal_set_gain_c2(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.GainBiasModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float bias_c1_;
  float bias_c2_;
  float bias_c3_;
  float gain_c3_;
  float gain_c1_;
  float gain_c2_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class MixtureGainBiasModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MixtureGainBiasModel) */ {
 public:
  inline MixtureGainBiasModel() : MixtureGainBiasModel(nullptr) {}
  ~MixtureGainBiasModel() override;
  explicit constexpr MixtureGainBiasModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MixtureGainBiasModel(const MixtureGainBiasModel& from);
  MixtureGainBiasModel(MixtureGainBiasModel&& from) noexcept
    : MixtureGainBiasModel() {
    *this = ::std::move(from);
  }

  inline MixtureGainBiasModel& operator=(const MixtureGainBiasModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixtureGainBiasModel& operator=(MixtureGainBiasModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MixtureGainBiasModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const MixtureGainBiasModel* internal_default_instance() {
    return reinterpret_cast<const MixtureGainBiasModel*>(
               &_MixtureGainBiasModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MixtureGainBiasModel& a, MixtureGainBiasModel& b) {
    a.Swap(&b);
  }
  inline void Swap(MixtureGainBiasModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixtureGainBiasModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixtureGainBiasModel* New() const final {
    return CreateMaybeMessage<MixtureGainBiasModel>(nullptr);
  }

  MixtureGainBiasModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixtureGainBiasModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixtureGainBiasModel& from);
  void MergeFrom(const MixtureGainBiasModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixtureGainBiasModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MixtureGainBiasModel";
  }
  protected:
  explicit MixtureGainBiasModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // repeated .mediapipe.GainBiasModel model = 1;
  int model_size() const;
  private:
  int _internal_model_size() const;
  public:
  void clear_model();
  ::mediapipe::GainBiasModel* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GainBiasModel >*
      mutable_model();
  private:
  const ::mediapipe::GainBiasModel& _internal_model(int index) const;
  ::mediapipe::GainBiasModel* _internal_add_model();
  public:
  const ::mediapipe::GainBiasModel& model(int index) const;
  ::mediapipe::GainBiasModel* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GainBiasModel >&
      model() const;

  // @@protoc_insertion_point(class_scope:mediapipe.MixtureGainBiasModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GainBiasModel > model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class AffineToneModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.AffineToneModel) */ {
 public:
  inline AffineToneModel() : AffineToneModel(nullptr) {}
  ~AffineToneModel() override;
  explicit constexpr AffineToneModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AffineToneModel(const AffineToneModel& from);
  AffineToneModel(AffineToneModel&& from) noexcept
    : AffineToneModel() {
    *this = ::std::move(from);
  }

  inline AffineToneModel& operator=(const AffineToneModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AffineToneModel& operator=(AffineToneModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AffineToneModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AffineToneModel* internal_default_instance() {
    return reinterpret_cast<const AffineToneModel*>(
               &_AffineToneModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AffineToneModel& a, AffineToneModel& b) {
    a.Swap(&b);
  }
  inline void Swap(AffineToneModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AffineToneModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AffineToneModel* New() const final {
    return CreateMaybeMessage<AffineToneModel>(nullptr);
  }

  AffineToneModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AffineToneModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AffineToneModel& from);
  void MergeFrom(const AffineToneModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AffineToneModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.AffineToneModel";
  }
  protected:
  explicit AffineToneModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kG01FieldNumber = 2,
    kG02FieldNumber = 3,
    kG03FieldNumber = 4,
    kG10FieldNumber = 5,
    kG12FieldNumber = 7,
    kG13FieldNumber = 8,
    kG20FieldNumber = 9,
    kG21FieldNumber = 10,
    kG23FieldNumber = 12,
    kG22FieldNumber = 11,
    kG00FieldNumber = 1,
    kG11FieldNumber = 6,
  };
  // optional float g_01 = 2 [default = 0];
  bool has_g_01() const;
  private:
  bool _internal_has_g_01() const;
  public:
  void clear_g_01();
  float g_01() const;
  void set_g_01(float value);
  private:
  float _internal_g_01() const;
  void _internal_set_g_01(float value);
  public:

  // optional float g_02 = 3 [default = 0];
  bool has_g_02() const;
  private:
  bool _internal_has_g_02() const;
  public:
  void clear_g_02();
  float g_02() const;
  void set_g_02(float value);
  private:
  float _internal_g_02() const;
  void _internal_set_g_02(float value);
  public:

  // optional float g_03 = 4 [default = 0];
  bool has_g_03() const;
  private:
  bool _internal_has_g_03() const;
  public:
  void clear_g_03();
  float g_03() const;
  void set_g_03(float value);
  private:
  float _internal_g_03() const;
  void _internal_set_g_03(float value);
  public:

  // optional float g_10 = 5 [default = 0];
  bool has_g_10() const;
  private:
  bool _internal_has_g_10() const;
  public:
  void clear_g_10();
  float g_10() const;
  void set_g_10(float value);
  private:
  float _internal_g_10() const;
  void _internal_set_g_10(float value);
  public:

  // optional float g_12 = 7 [default = 0];
  bool has_g_12() const;
  private:
  bool _internal_has_g_12() const;
  public:
  void clear_g_12();
  float g_12() const;
  void set_g_12(float value);
  private:
  float _internal_g_12() const;
  void _internal_set_g_12(float value);
  public:

  // optional float g_13 = 8 [default = 0];
  bool has_g_13() const;
  private:
  bool _internal_has_g_13() const;
  public:
  void clear_g_13();
  float g_13() const;
  void set_g_13(float value);
  private:
  float _internal_g_13() const;
  void _internal_set_g_13(float value);
  public:

  // optional float g_20 = 9 [default = 0];
  bool has_g_20() const;
  private:
  bool _internal_has_g_20() const;
  public:
  void clear_g_20();
  float g_20() const;
  void set_g_20(float value);
  private:
  float _internal_g_20() const;
  void _internal_set_g_20(float value);
  public:

  // optional float g_21 = 10 [default = 0];
  bool has_g_21() const;
  private:
  bool _internal_has_g_21() const;
  public:
  void clear_g_21();
  float g_21() const;
  void set_g_21(float value);
  private:
  float _internal_g_21() const;
  void _internal_set_g_21(float value);
  public:

  // optional float g_23 = 12 [default = 0];
  bool has_g_23() const;
  private:
  bool _internal_has_g_23() const;
  public:
  void clear_g_23();
  float g_23() const;
  void set_g_23(float value);
  private:
  float _internal_g_23() const;
  void _internal_set_g_23(float value);
  public:

  // optional float g_22 = 11 [default = 1];
  bool has_g_22() const;
  private:
  bool _internal_has_g_22() const;
  public:
  void clear_g_22();
  float g_22() const;
  void set_g_22(float value);
  private:
  float _internal_g_22() const;
  void _internal_set_g_22(float value);
  public:

  // optional float g_00 = 1 [default = 1];
  bool has_g_00() const;
  private:
  bool _internal_has_g_00() const;
  public:
  void clear_g_00();
  float g_00() const;
  void set_g_00(float value);
  private:
  float _internal_g_00() const;
  void _internal_set_g_00(float value);
  public:

  // optional float g_11 = 6 [default = 1];
  bool has_g_11() const;
  private:
  bool _internal_has_g_11() const;
  public:
  void clear_g_11();
  float g_11() const;
  void set_g_11(float value);
  private:
  float _internal_g_11() const;
  void _internal_set_g_11(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.AffineToneModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float g_01_;
  float g_02_;
  float g_03_;
  float g_10_;
  float g_12_;
  float g_13_;
  float g_20_;
  float g_21_;
  float g_23_;
  float g_22_;
  float g_00_;
  float g_11_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto;
};
// -------------------------------------------------------------------

class MixtureAffineToneModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MixtureAffineToneModel) */ {
 public:
  inline MixtureAffineToneModel() : MixtureAffineToneModel(nullptr) {}
  ~MixtureAffineToneModel() override;
  explicit constexpr MixtureAffineToneModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MixtureAffineToneModel(const MixtureAffineToneModel& from);
  MixtureAffineToneModel(MixtureAffineToneModel&& from) noexcept
    : MixtureAffineToneModel() {
    *this = ::std::move(from);
  }

  inline MixtureAffineToneModel& operator=(const MixtureAffineToneModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixtureAffineToneModel& operator=(MixtureAffineToneModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MixtureAffineToneModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const MixtureAffineToneModel* internal_default_instance() {
    return reinterpret_cast<const MixtureAffineToneModel*>(
               &_MixtureAffineToneModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MixtureAffineToneModel& a, MixtureAffineToneModel& b) {
    a.Swap(&b);
  }
  inline void Swap(MixtureAffineToneModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixtureAffineToneModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixtureAffineToneModel* New() const final {
    return CreateMaybeMessage<MixtureAffineToneModel>(nullptr);
  }

  MixtureAffineToneModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixtureAffineToneModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixtureAffineToneModel& from);
  void MergeFrom(const MixtureAffineToneModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixtureAffineToneModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MixtureAffineToneModel";
  }
  protected:
  explicit MixtureAffineToneModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // repeated .mediapipe.AffineToneModel model = 1;
  int model_size() const;
  private:
  int _internal_model_size() const;
  public:
  void clear_model();
  ::mediapipe::AffineToneModel* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineToneModel >*
      mutable_model();
  private:
  const ::mediapipe::AffineToneModel& _internal_model(int index) const;
  ::mediapipe::AffineToneModel* _internal_add_model();
  public:
  const ::mediapipe::AffineToneModel& model(int index) const;
  ::mediapipe::AffineToneModel* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineToneModel >&
      model() const;

  // @@protoc_insertion_point(class_scope:mediapipe.MixtureAffineToneModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineToneModel > model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GainBiasModel

// optional float gain_c1 = 1 [default = 1];
inline bool GainBiasModel::_internal_has_gain_c1() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GainBiasModel::has_gain_c1() const {
  return _internal_has_gain_c1();
}
inline void GainBiasModel::clear_gain_c1() {
  gain_c1_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline float GainBiasModel::_internal_gain_c1() const {
  return gain_c1_;
}
inline float GainBiasModel::gain_c1() const {
  // @@protoc_insertion_point(field_get:mediapipe.GainBiasModel.gain_c1)
  return _internal_gain_c1();
}
inline void GainBiasModel::_internal_set_gain_c1(float value) {
  _has_bits_[0] |= 0x00000010u;
  gain_c1_ = value;
}
inline void GainBiasModel::set_gain_c1(float value) {
  _internal_set_gain_c1(value);
  // @@protoc_insertion_point(field_set:mediapipe.GainBiasModel.gain_c1)
}

// optional float bias_c1 = 2 [default = 0];
inline bool GainBiasModel::_internal_has_bias_c1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GainBiasModel::has_bias_c1() const {
  return _internal_has_bias_c1();
}
inline void GainBiasModel::clear_bias_c1() {
  bias_c1_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float GainBiasModel::_internal_bias_c1() const {
  return bias_c1_;
}
inline float GainBiasModel::bias_c1() const {
  // @@protoc_insertion_point(field_get:mediapipe.GainBiasModel.bias_c1)
  return _internal_bias_c1();
}
inline void GainBiasModel::_internal_set_bias_c1(float value) {
  _has_bits_[0] |= 0x00000001u;
  bias_c1_ = value;
}
inline void GainBiasModel::set_bias_c1(float value) {
  _internal_set_bias_c1(value);
  // @@protoc_insertion_point(field_set:mediapipe.GainBiasModel.bias_c1)
}

// optional float gain_c2 = 3 [default = 1];
inline bool GainBiasModel::_internal_has_gain_c2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GainBiasModel::has_gain_c2() const {
  return _internal_has_gain_c2();
}
inline void GainBiasModel::clear_gain_c2() {
  gain_c2_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float GainBiasModel::_internal_gain_c2() const {
  return gain_c2_;
}
inline float GainBiasModel::gain_c2() const {
  // @@protoc_insertion_point(field_get:mediapipe.GainBiasModel.gain_c2)
  return _internal_gain_c2();
}
inline void GainBiasModel::_internal_set_gain_c2(float value) {
  _has_bits_[0] |= 0x00000020u;
  gain_c2_ = value;
}
inline void GainBiasModel::set_gain_c2(float value) {
  _internal_set_gain_c2(value);
  // @@protoc_insertion_point(field_set:mediapipe.GainBiasModel.gain_c2)
}

// optional float bias_c2 = 4 [default = 0];
inline bool GainBiasModel::_internal_has_bias_c2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GainBiasModel::has_bias_c2() const {
  return _internal_has_bias_c2();
}
inline void GainBiasModel::clear_bias_c2() {
  bias_c2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float GainBiasModel::_internal_bias_c2() const {
  return bias_c2_;
}
inline float GainBiasModel::bias_c2() const {
  // @@protoc_insertion_point(field_get:mediapipe.GainBiasModel.bias_c2)
  return _internal_bias_c2();
}
inline void GainBiasModel::_internal_set_bias_c2(float value) {
  _has_bits_[0] |= 0x00000002u;
  bias_c2_ = value;
}
inline void GainBiasModel::set_bias_c2(float value) {
  _internal_set_bias_c2(value);
  // @@protoc_insertion_point(field_set:mediapipe.GainBiasModel.bias_c2)
}

// optional float gain_c3 = 5 [default = 1];
inline bool GainBiasModel::_internal_has_gain_c3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GainBiasModel::has_gain_c3() const {
  return _internal_has_gain_c3();
}
inline void GainBiasModel::clear_gain_c3() {
  gain_c3_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float GainBiasModel::_internal_gain_c3() const {
  return gain_c3_;
}
inline float GainBiasModel::gain_c3() const {
  // @@protoc_insertion_point(field_get:mediapipe.GainBiasModel.gain_c3)
  return _internal_gain_c3();
}
inline void GainBiasModel::_internal_set_gain_c3(float value) {
  _has_bits_[0] |= 0x00000008u;
  gain_c3_ = value;
}
inline void GainBiasModel::set_gain_c3(float value) {
  _internal_set_gain_c3(value);
  // @@protoc_insertion_point(field_set:mediapipe.GainBiasModel.gain_c3)
}

// optional float bias_c3 = 6 [default = 0];
inline bool GainBiasModel::_internal_has_bias_c3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GainBiasModel::has_bias_c3() const {
  return _internal_has_bias_c3();
}
inline void GainBiasModel::clear_bias_c3() {
  bias_c3_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float GainBiasModel::_internal_bias_c3() const {
  return bias_c3_;
}
inline float GainBiasModel::bias_c3() const {
  // @@protoc_insertion_point(field_get:mediapipe.GainBiasModel.bias_c3)
  return _internal_bias_c3();
}
inline void GainBiasModel::_internal_set_bias_c3(float value) {
  _has_bits_[0] |= 0x00000004u;
  bias_c3_ = value;
}
inline void GainBiasModel::set_bias_c3(float value) {
  _internal_set_bias_c3(value);
  // @@protoc_insertion_point(field_set:mediapipe.GainBiasModel.bias_c3)
}

// -------------------------------------------------------------------

// MixtureGainBiasModel

// repeated .mediapipe.GainBiasModel model = 1;
inline int MixtureGainBiasModel::_internal_model_size() const {
  return model_.size();
}
inline int MixtureGainBiasModel::model_size() const {
  return _internal_model_size();
}
inline void MixtureGainBiasModel::clear_model() {
  model_.Clear();
}
inline ::mediapipe::GainBiasModel* MixtureGainBiasModel::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.MixtureGainBiasModel.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GainBiasModel >*
MixtureGainBiasModel::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MixtureGainBiasModel.model)
  return &model_;
}
inline const ::mediapipe::GainBiasModel& MixtureGainBiasModel::_internal_model(int index) const {
  return model_.Get(index);
}
inline const ::mediapipe::GainBiasModel& MixtureGainBiasModel::model(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MixtureGainBiasModel.model)
  return _internal_model(index);
}
inline ::mediapipe::GainBiasModel* MixtureGainBiasModel::_internal_add_model() {
  return model_.Add();
}
inline ::mediapipe::GainBiasModel* MixtureGainBiasModel::add_model() {
  // @@protoc_insertion_point(field_add:mediapipe.MixtureGainBiasModel.model)
  return _internal_add_model();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GainBiasModel >&
MixtureGainBiasModel::model() const {
  // @@protoc_insertion_point(field_list:mediapipe.MixtureGainBiasModel.model)
  return model_;
}

// -------------------------------------------------------------------

// AffineToneModel

// optional float g_00 = 1 [default = 1];
inline bool AffineToneModel::_internal_has_g_00() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_00() const {
  return _internal_has_g_00();
}
inline void AffineToneModel::clear_g_00() {
  g_00_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline float AffineToneModel::_internal_g_00() const {
  return g_00_;
}
inline float AffineToneModel::g_00() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_00)
  return _internal_g_00();
}
inline void AffineToneModel::_internal_set_g_00(float value) {
  _has_bits_[0] |= 0x00000400u;
  g_00_ = value;
}
inline void AffineToneModel::set_g_00(float value) {
  _internal_set_g_00(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_00)
}

// optional float g_01 = 2 [default = 0];
inline bool AffineToneModel::_internal_has_g_01() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_01() const {
  return _internal_has_g_01();
}
inline void AffineToneModel::clear_g_01() {
  g_01_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float AffineToneModel::_internal_g_01() const {
  return g_01_;
}
inline float AffineToneModel::g_01() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_01)
  return _internal_g_01();
}
inline void AffineToneModel::_internal_set_g_01(float value) {
  _has_bits_[0] |= 0x00000001u;
  g_01_ = value;
}
inline void AffineToneModel::set_g_01(float value) {
  _internal_set_g_01(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_01)
}

// optional float g_02 = 3 [default = 0];
inline bool AffineToneModel::_internal_has_g_02() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_02() const {
  return _internal_has_g_02();
}
inline void AffineToneModel::clear_g_02() {
  g_02_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float AffineToneModel::_internal_g_02() const {
  return g_02_;
}
inline float AffineToneModel::g_02() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_02)
  return _internal_g_02();
}
inline void AffineToneModel::_internal_set_g_02(float value) {
  _has_bits_[0] |= 0x00000002u;
  g_02_ = value;
}
inline void AffineToneModel::set_g_02(float value) {
  _internal_set_g_02(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_02)
}

// optional float g_03 = 4 [default = 0];
inline bool AffineToneModel::_internal_has_g_03() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_03() const {
  return _internal_has_g_03();
}
inline void AffineToneModel::clear_g_03() {
  g_03_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float AffineToneModel::_internal_g_03() const {
  return g_03_;
}
inline float AffineToneModel::g_03() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_03)
  return _internal_g_03();
}
inline void AffineToneModel::_internal_set_g_03(float value) {
  _has_bits_[0] |= 0x00000004u;
  g_03_ = value;
}
inline void AffineToneModel::set_g_03(float value) {
  _internal_set_g_03(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_03)
}

// optional float g_10 = 5 [default = 0];
inline bool AffineToneModel::_internal_has_g_10() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_10() const {
  return _internal_has_g_10();
}
inline void AffineToneModel::clear_g_10() {
  g_10_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float AffineToneModel::_internal_g_10() const {
  return g_10_;
}
inline float AffineToneModel::g_10() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_10)
  return _internal_g_10();
}
inline void AffineToneModel::_internal_set_g_10(float value) {
  _has_bits_[0] |= 0x00000008u;
  g_10_ = value;
}
inline void AffineToneModel::set_g_10(float value) {
  _internal_set_g_10(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_10)
}

// optional float g_11 = 6 [default = 1];
inline bool AffineToneModel::_internal_has_g_11() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_11() const {
  return _internal_has_g_11();
}
inline void AffineToneModel::clear_g_11() {
  g_11_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline float AffineToneModel::_internal_g_11() const {
  return g_11_;
}
inline float AffineToneModel::g_11() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_11)
  return _internal_g_11();
}
inline void AffineToneModel::_internal_set_g_11(float value) {
  _has_bits_[0] |= 0x00000800u;
  g_11_ = value;
}
inline void AffineToneModel::set_g_11(float value) {
  _internal_set_g_11(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_11)
}

// optional float g_12 = 7 [default = 0];
inline bool AffineToneModel::_internal_has_g_12() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_12() const {
  return _internal_has_g_12();
}
inline void AffineToneModel::clear_g_12() {
  g_12_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float AffineToneModel::_internal_g_12() const {
  return g_12_;
}
inline float AffineToneModel::g_12() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_12)
  return _internal_g_12();
}
inline void AffineToneModel::_internal_set_g_12(float value) {
  _has_bits_[0] |= 0x00000010u;
  g_12_ = value;
}
inline void AffineToneModel::set_g_12(float value) {
  _internal_set_g_12(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_12)
}

// optional float g_13 = 8 [default = 0];
inline bool AffineToneModel::_internal_has_g_13() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_13() const {
  return _internal_has_g_13();
}
inline void AffineToneModel::clear_g_13() {
  g_13_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AffineToneModel::_internal_g_13() const {
  return g_13_;
}
inline float AffineToneModel::g_13() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_13)
  return _internal_g_13();
}
inline void AffineToneModel::_internal_set_g_13(float value) {
  _has_bits_[0] |= 0x00000020u;
  g_13_ = value;
}
inline void AffineToneModel::set_g_13(float value) {
  _internal_set_g_13(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_13)
}

// optional float g_20 = 9 [default = 0];
inline bool AffineToneModel::_internal_has_g_20() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_20() const {
  return _internal_has_g_20();
}
inline void AffineToneModel::clear_g_20() {
  g_20_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float AffineToneModel::_internal_g_20() const {
  return g_20_;
}
inline float AffineToneModel::g_20() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_20)
  return _internal_g_20();
}
inline void AffineToneModel::_internal_set_g_20(float value) {
  _has_bits_[0] |= 0x00000040u;
  g_20_ = value;
}
inline void AffineToneModel::set_g_20(float value) {
  _internal_set_g_20(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_20)
}

// optional float g_21 = 10 [default = 0];
inline bool AffineToneModel::_internal_has_g_21() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_21() const {
  return _internal_has_g_21();
}
inline void AffineToneModel::clear_g_21() {
  g_21_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float AffineToneModel::_internal_g_21() const {
  return g_21_;
}
inline float AffineToneModel::g_21() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_21)
  return _internal_g_21();
}
inline void AffineToneModel::_internal_set_g_21(float value) {
  _has_bits_[0] |= 0x00000080u;
  g_21_ = value;
}
inline void AffineToneModel::set_g_21(float value) {
  _internal_set_g_21(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_21)
}

// optional float g_22 = 11 [default = 1];
inline bool AffineToneModel::_internal_has_g_22() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_22() const {
  return _internal_has_g_22();
}
inline void AffineToneModel::clear_g_22() {
  g_22_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline float AffineToneModel::_internal_g_22() const {
  return g_22_;
}
inline float AffineToneModel::g_22() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_22)
  return _internal_g_22();
}
inline void AffineToneModel::_internal_set_g_22(float value) {
  _has_bits_[0] |= 0x00000200u;
  g_22_ = value;
}
inline void AffineToneModel::set_g_22(float value) {
  _internal_set_g_22(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_22)
}

// optional float g_23 = 12 [default = 0];
inline bool AffineToneModel::_internal_has_g_23() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AffineToneModel::has_g_23() const {
  return _internal_has_g_23();
}
inline void AffineToneModel::clear_g_23() {
  g_23_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float AffineToneModel::_internal_g_23() const {
  return g_23_;
}
inline float AffineToneModel::g_23() const {
  // @@protoc_insertion_point(field_get:mediapipe.AffineToneModel.g_23)
  return _internal_g_23();
}
inline void AffineToneModel::_internal_set_g_23(float value) {
  _has_bits_[0] |= 0x00000100u;
  g_23_ = value;
}
inline void AffineToneModel::set_g_23(float value) {
  _internal_set_g_23(value);
  // @@protoc_insertion_point(field_set:mediapipe.AffineToneModel.g_23)
}

// -------------------------------------------------------------------

// MixtureAffineToneModel

// repeated .mediapipe.AffineToneModel model = 1;
inline int MixtureAffineToneModel::_internal_model_size() const {
  return model_.size();
}
inline int MixtureAffineToneModel::model_size() const {
  return _internal_model_size();
}
inline void MixtureAffineToneModel::clear_model() {
  model_.Clear();
}
inline ::mediapipe::AffineToneModel* MixtureAffineToneModel::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.MixtureAffineToneModel.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineToneModel >*
MixtureAffineToneModel::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MixtureAffineToneModel.model)
  return &model_;
}
inline const ::mediapipe::AffineToneModel& MixtureAffineToneModel::_internal_model(int index) const {
  return model_.Get(index);
}
inline const ::mediapipe::AffineToneModel& MixtureAffineToneModel::model(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MixtureAffineToneModel.model)
  return _internal_model(index);
}
inline ::mediapipe::AffineToneModel* MixtureAffineToneModel::_internal_add_model() {
  return model_.Add();
}
inline ::mediapipe::AffineToneModel* MixtureAffineToneModel::add_model() {
  // @@protoc_insertion_point(field_add:mediapipe.MixtureAffineToneModel.model)
  return _internal_add_model();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::AffineToneModel >&
MixtureAffineToneModel::model() const {
  // @@protoc_insertion_point(field_list:mediapipe.MixtureAffineToneModel.model)
  return model_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftone_5fmodels_2eproto
