// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/tracking.proto

#include "mediapipe/util/tracking/tracking.pb.h"

#include <algorithm>

#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/extension_set.h>
#include <x/google/protobuf/wire_format_lite.h>
#include <x/google/protobuf/descriptor.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/reflection_ops.h>
#include <x/google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr MotionBoxState_Quad::MotionBoxState_Quad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_(){}
struct MotionBoxState_QuadDefaultTypeInternal {
  constexpr MotionBoxState_QuadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionBoxState_QuadDefaultTypeInternal() {}
  union {
    MotionBoxState_Quad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionBoxState_QuadDefaultTypeInternal _MotionBoxState_Quad_default_instance_;
constexpr MotionBoxState::MotionBoxState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spatial_prior_()
  , spatial_confidence_()
  , inlier_ids_()
  , _inlier_ids_cached_byte_size_()
  , inlier_length_()
  , _inlier_length_cached_byte_size_()
  , outlier_ids_()
  , _outlier_ids_cached_byte_size_()
  , inlier_id_match_pos_()
  , _inlier_id_match_pos_cached_byte_size_()
  , outlier_id_match_pos_()
  , _outlier_id_match_pos_cached_byte_size_()
  , internal_(nullptr)
  , quad_(nullptr)
  , pnp_homography_(nullptr)
  , pos_x_(0)
  , pos_y_(0)
  , width_(0)
  , height_(0)
  , dx_(0)
  , dy_(0)
  , prior_weight_(0)
  , track_status_(0)

  , prior_diff_(0)
  , motion_disparity_(0)
  , background_discrimination_(0)
  , kinetic_energy_(0)
  , inlier_center_x_(0)
  , inlier_center_y_(0)
  , inlier_width_(0)
  , inlier_height_(0)
  , inlier_sum_(0)
  , inlier_ratio_(0)
  , rotation_(0)
  , tracking_confidence_(0)
  , aspect_ratio_(0)
  , request_grouping_(false)
  , scale_(1)
  , spatial_prior_grid_size_(10){}
struct MotionBoxStateDefaultTypeInternal {
  constexpr MotionBoxStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionBoxStateDefaultTypeInternal() {}
  union {
    MotionBoxState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionBoxStateDefaultTypeInternal _MotionBoxState_default_instance_;
constexpr MotionBoxInternalState::MotionBoxInternalState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_x_()
  , pos_y_()
  , dx_()
  , dy_()
  , camera_dx_()
  , camera_dy_()
  , track_id_()
  , _track_id_cached_byte_size_()
  , inlier_score_(){}
struct MotionBoxInternalStateDefaultTypeInternal {
  constexpr MotionBoxInternalStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionBoxInternalStateDefaultTypeInternal() {}
  union {
    MotionBoxInternalState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionBoxInternalStateDefaultTypeInternal _MotionBoxInternalState_default_instance_;
constexpr TrackStepOptions_IrlsInitialization::TrackStepOptions_IrlsInitialization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activated_(false)
  , rounds_(50)
  , cutoff_(0.005f){}
struct TrackStepOptions_IrlsInitializationDefaultTypeInternal {
  constexpr TrackStepOptions_IrlsInitializationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackStepOptions_IrlsInitializationDefaultTypeInternal() {}
  union {
    TrackStepOptions_IrlsInitialization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackStepOptions_IrlsInitializationDefaultTypeInternal _TrackStepOptions_IrlsInitialization_default_instance_;
constexpr TrackStepOptions_CancelTrackingWithOcclusionOptions::TrackStepOptions_CancelTrackingWithOcclusionOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activated_(false)
  , min_motion_continuity_(0.4f)
  , min_inlier_ratio_(0.1f){}
struct TrackStepOptions_CancelTrackingWithOcclusionOptionsDefaultTypeInternal {
  constexpr TrackStepOptions_CancelTrackingWithOcclusionOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackStepOptions_CancelTrackingWithOcclusionOptionsDefaultTypeInternal() {}
  union {
    TrackStepOptions_CancelTrackingWithOcclusionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackStepOptions_CancelTrackingWithOcclusionOptionsDefaultTypeInternal _TrackStepOptions_CancelTrackingWithOcclusionOptions_default_instance_;
constexpr TrackStepOptions_CameraIntrinsics::TrackStepOptions_CameraIntrinsics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fx_(0)
  , fy_(0)
  , cx_(0)
  , cy_(0)
  , k0_(0)
  , k1_(0)
  , k2_(0)
  , w_(0)
  , h_(0){}
struct TrackStepOptions_CameraIntrinsicsDefaultTypeInternal {
  constexpr TrackStepOptions_CameraIntrinsicsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackStepOptions_CameraIntrinsicsDefaultTypeInternal() {}
  union {
    TrackStepOptions_CameraIntrinsics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackStepOptions_CameraIntrinsicsDefaultTypeInternal _TrackStepOptions_CameraIntrinsics_default_instance_;
constexpr TrackStepOptions::TrackStepOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : irls_initialization_(nullptr)
  , cancel_tracking_with_occlusion_options_(nullptr)
  , camera_intrinsics_(nullptr)
  , tracking_degrees_(0)

  , track_object_and_camera_(false)
  , return_internal_state_(false)
  , compute_spatial_prior_(false)
  , forced_pnp_tracking_(false)
  , quad_homography_max_rotation_(0.3f)
  , irls_iterations_(5)
  , spatial_sigma_(0.15f)
  , min_motion_sigma_(0.002f)
  , relative_motion_sigma_(0.3f)
  , motion_disparity_low_level_(0.008f)
  , motion_disparity_high_level_(0.016f)
  , disparity_decay_(0.8f)
  , motion_prior_weight_(0.2f)
  , background_discrimination_low_level_(0.004f)
  , background_discrimination_high_level_(0.008f)
  , inlier_center_relative_distance_(0.1f)
  , inlier_spring_force_(0.3f)
  , kinetic_center_relative_distance_(0.4f)
  , kinetic_spring_force_(0.5f)
  , velocity_update_weight_(0.7f)
  , max_track_failures_(10)
  , expansion_size_(0.05f)
  , inlier_low_weight_(250)
  , inlier_high_weight_(500)
  , kinetic_spring_force_min_kinetic_energy_(0.003f)
  , kinetic_energy_decay_(0.98f)
  , prior_weight_increase_(0.2f)
  , low_kinetic_energy_(0.001f)
  , high_kinetic_energy_(0.004f)
  , use_post_estimation_weights_for_state_(true)
  , static_motion_temporal_ratio_(0.003f)
  , object_similarity_min_contd_inliers_(30)
  , box_similarity_max_scale_(1.05f)
  , box_similarity_max_rotation_(0.2f)
  , quad_homography_max_scale_(1.2f){}
struct TrackStepOptionsDefaultTypeInternal {
  constexpr TrackStepOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackStepOptionsDefaultTypeInternal() {}
  union {
    TrackStepOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackStepOptionsDefaultTypeInternal _TrackStepOptions_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftracking_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2ftracking_2ftracking_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState_Quad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState_Quad, vertices_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, pos_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, pos_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, quad_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, request_grouping_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, pnp_homography_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, dy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, kinetic_energy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, prior_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, track_status_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, spatial_prior_grid_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, spatial_prior_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, spatial_confidence_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, prior_diff_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, motion_disparity_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, background_discrimination_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_center_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_center_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_sum_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_ids_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_id_match_pos_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, inlier_length_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, outlier_ids_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, outlier_id_match_pos_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, tracking_confidence_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxState, internal_),
  3,
  4,
  5,
  6,
  25,
  21,
  1,
  23,
  24,
  2,
  7,
  8,
  14,
  9,
  10,
  26,
  ~0u,
  ~0u,
  11,
  12,
  13,
  15,
  16,
  19,
  20,
  17,
  18,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  22,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, pos_x_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, pos_y_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, dy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, camera_dx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, camera_dy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, track_id_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::MotionBoxInternalState, inlier_score_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_IrlsInitialization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_IrlsInitialization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_IrlsInitialization, activated_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_IrlsInitialization, rounds_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_IrlsInitialization, cutoff_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions, activated_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions, min_motion_continuity_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions, min_inlier_ratio_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, fx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, fy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, cx_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, cy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, k0_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, k1_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, k2_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, w_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions_CameraIntrinsics, h_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, tracking_degrees_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, track_object_and_camera_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, irls_iterations_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, spatial_sigma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, min_motion_sigma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, relative_motion_sigma_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, motion_disparity_low_level_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, motion_disparity_high_level_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, disparity_decay_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, motion_prior_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, background_discrimination_low_level_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, background_discrimination_high_level_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, inlier_center_relative_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, inlier_spring_force_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, kinetic_center_relative_distance_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, kinetic_spring_force_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, kinetic_spring_force_min_kinetic_energy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, velocity_update_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, max_track_failures_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, expansion_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, inlier_low_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, inlier_high_weight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, kinetic_energy_decay_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, prior_weight_increase_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, low_kinetic_energy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, high_kinetic_energy_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, return_internal_state_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, use_post_estimation_weights_for_state_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, compute_spatial_prior_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, irls_initialization_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, static_motion_temporal_ratio_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, cancel_tracking_with_occlusion_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, object_similarity_min_contd_inliers_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, box_similarity_max_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, box_similarity_max_rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, quad_homography_max_scale_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, quad_homography_max_rotation_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, camera_intrinsics_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::TrackStepOptions, forced_pnp_tracking_),
  3,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  28,
  23,
  24,
  25,
  26,
  27,
  29,
  30,
  31,
  32,
  5,
  33,
  6,
  0,
  34,
  1,
  35,
  36,
  37,
  38,
  8,
  2,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mediapipe::MotionBoxState_Quad)},
  { 6, 45, sizeof(::mediapipe::MotionBoxState)},
  { 79, -1, sizeof(::mediapipe::MotionBoxInternalState)},
  { 92, 100, sizeof(::mediapipe::TrackStepOptions_IrlsInitialization)},
  { 103, 111, sizeof(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions)},
  { 114, 128, sizeof(::mediapipe::TrackStepOptions_CameraIntrinsics)},
  { 137, 181, sizeof(::mediapipe::TrackStepOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionBoxState_Quad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionBoxState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_MotionBoxInternalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackStepOptions_IrlsInitialization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackStepOptions_CancelTrackingWithOcclusionOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackStepOptions_CameraIntrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_TrackStepOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2ftracking_2ftracking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&mediapipe/util/tracking/tracking.proto"
  "\022\tmediapipe\032+mediapipe/util/tracking/mot"
  "ion_models.proto\"\345\010\n\016MotionBoxState\022\r\n\005p"
  "os_x\030\001 \001(\002\022\r\n\005pos_y\030\002 \001(\002\022\r\n\005width\030\003 \001(\002"
  "\022\016\n\006height\030\004 \001(\002\022\020\n\005scale\030\005 \001(\002:\0011\022\023\n\010ro"
  "tation\030\036 \001(\002:\0010\022,\n\004quad\030\" \001(\0132\036.mediapip"
  "e.MotionBoxState.Quad\022\024\n\014aspect_ratio\030# "
  "\001(\002\022\037\n\020request_grouping\030% \001(\010:\005false\022-\n\016"
  "pnp_homography\030$ \001(\0132\025.mediapipe.Homogra"
  "phy\022\n\n\002dx\030\007 \001(\002\022\n\n\002dy\030\010 \001(\002\022\026\n\016kinetic_e"
  "nergy\030\021 \001(\002\022\024\n\014prior_weight\030\t \001(\002\022J\n\014tra"
  "ck_status\030\n \001(\0162%.mediapipe.MotionBoxSta"
  "te.TrackStatus:\rBOX_UNTRACKED\022#\n\027spatial"
  "_prior_grid_size\030\013 \001(\005:\00210\022\031\n\rspatial_pr"
  "ior\030\014 \003(\002B\002\020\001\022\036\n\022spatial_confidence\030\r \003("
  "\002B\002\020\001\022\022\n\nprior_diff\030\016 \001(\002\022\030\n\020motion_disp"
  "arity\030\017 \001(\002\022!\n\031background_discrimination"
  "\030\020 \001(\002\022\027\n\017inlier_center_x\030\022 \001(\002\022\027\n\017inlie"
  "r_center_y\030\023 \001(\002\022\022\n\ninlier_sum\030\030 \001(\002\022\024\n\014"
  "inlier_ratio\030\031 \001(\002\022\024\n\014inlier_width\030\026 \001(\002"
  "\022\025\n\rinlier_height\030\027 \001(\002\022\026\n\ninlier_ids\030\032 "
  "\003(\rB\002\020\001\022\037\n\023inlier_id_match_pos\030\037 \003(\rB\002\020\001"
  "\022\031\n\rinlier_length\030\033 \003(\rB\002\020\001\022\027\n\013outlier_i"
  "ds\030\034 \003(\rB\002\020\001\022 \n\024outlier_id_match_pos\030  \003"
  "(\rB\002\020\001\022\033\n\023tracking_confidence\030! \001(\002\0223\n\010i"
  "nternal\030\035 \001(\0132!.mediapipe.MotionBoxInter"
  "nalState\032\030\n\004Quad\022\020\n\010vertices\030\001 \003(\002\"\207\001\n\013T"
  "rackStatus\022\021\n\rBOX_UNTRACKED\020\000\022\r\n\tBOX_EMP"
  "TY\020\001\022\023\n\017BOX_NO_FEATURES\020\002\022\017\n\013BOX_TRACKED"
  "\020\003\022\022\n\016BOX_DUPLICATED\020\004\022\034\n\030BOX_TRACKED_OU"
  "T_OF_BOUND\020\005J\004\010\024\020\025J\004\010\025\020\026\"\274\001\n\026MotionBoxIn"
  "ternalState\022\021\n\005pos_x\030\001 \003(\002B\002\020\001\022\021\n\005pos_y\030"
  "\002 \003(\002B\002\020\001\022\016\n\002dx\030\003 \003(\002B\002\020\001\022\016\n\002dy\030\004 \003(\002B\002\020"
  "\001\022\025\n\tcamera_dx\030\005 \003(\002B\002\020\001\022\025\n\tcamera_dy\030\006 "
  "\003(\002B\002\020\001\022\024\n\010track_id\030\007 \003(\005B\002\020\001\022\030\n\014inlier_"
  "score\030\010 \003(\002B\002\020\001\"\235\023\n\020TrackStepOptions\022b\n\020"
  "tracking_degrees\030\034 \001(\0162+.mediapipe.Track"
  "StepOptions.TrackingDegrees:\033TRACKING_DE"
  "GREE_TRANSLATION\022&\n\027track_object_and_cam"
  "era\030  \001(\010:\005false\022\032\n\017irls_iterations\030\001 \001("
  "\005:\0015\022\033\n\rspatial_sigma\030\002 \001(\002:\0040.15\022\037\n\020min"
  "_motion_sigma\030\003 \001(\002:\0050.002\022\"\n\025relative_m"
  "otion_sigma\030\004 \001(\002:\0030.3\022)\n\032motion_dispari"
  "ty_low_level\030\006 \001(\002:\0050.008\022*\n\033motion_disp"
  "arity_high_level\030\007 \001(\002:\0050.016\022\034\n\017dispari"
  "ty_decay\030\010 \001(\002:\0030.8\022 \n\023motion_prior_weig"
  "ht\030\t \001(\002:\0030.2\0222\n#background_discriminati"
  "on_low_level\030\n \001(\002:\0050.004\0223\n$background_"
  "discrimination_high_level\030\013 \001(\002:\0050.008\022,"
  "\n\037inlier_center_relative_distance\030\014 \001(\002:"
  "\0030.1\022 \n\023inlier_spring_force\030\r \001(\002:\0030.3\022-"
  "\n kinetic_center_relative_distance\030\016 \001(\002"
  ":\0030.4\022!\n\024kinetic_spring_force\030\017 \001(\002:\0030.5"
  "\0226\n\'kinetic_spring_force_min_kinetic_ene"
  "rgy\030\025 \001(\002:\0050.003\022#\n\026velocity_update_weig"
  "ht\030\020 \001(\002:\0030.7\022\036\n\022max_track_failures\030\021 \001("
  "\005:\00210\022\034\n\016expansion_size\030\022 \001(\002:\0040.05\022\036\n\021i"
  "nlier_low_weight\030\023 \001(\002:\003250\022\037\n\022inlier_hi"
  "gh_weight\030\024 \001(\002:\003500\022\"\n\024kinetic_energy_d"
  "ecay\030\026 \001(\002:\0040.98\022\"\n\025prior_weight_increas"
  "e\030\027 \001(\002:\0030.2\022!\n\022low_kinetic_energy\030\030 \001(\002"
  ":\0050.001\022\"\n\023high_kinetic_energy\030\031 \001(\002:\0050."
  "004\022$\n\025return_internal_state\030\032 \001(\010:\005fals"
  "e\0223\n%use_post_estimation_weights_for_sta"
  "te\030\035 \001(\010:\004true\022$\n\025compute_spatial_prior\030"
  "\033 \001(\010:\005false\022K\n\023irls_initialization\030\036 \001("
  "\0132..mediapipe.TrackStepOptions.IrlsIniti"
  "alization\022+\n\034static_motion_temporal_rati"
  "o\030! \001(\002:\0050.003\022n\n&cancel_tracking_with_o"
  "cclusion_options\030\" \001(\0132>.mediapipe.Track"
  "StepOptions.CancelTrackingWithOcclusionO"
  "ptions\022/\n#object_similarity_min_contd_in"
  "liers\030# \001(\005:\00230\022&\n\030box_similarity_max_sc"
  "ale\030$ \001(\002:\0041.05\022(\n\033box_similarity_max_ro"
  "tation\030% \001(\002:\0030.2\022&\n\031quad_homography_max"
  "_scale\030& \001(\002:\0031.2\022)\n\034quad_homography_max"
  "_rotation\030\' \001(\002:\0030.3\022G\n\021camera_intrinsic"
  "s\030( \001(\0132,.mediapipe.TrackStepOptions.Cam"
  "eraIntrinsics\022\"\n\023forced_pnp_tracking\030) \001"
  "(\010:\005false\032Y\n\022IrlsInitialization\022\030\n\tactiv"
  "ated\030\001 \001(\010:\005false\022\022\n\006rounds\030\002 \001(\005:\00250\022\025\n"
  "\006cutoff\030\003 \001(\002:\0050.005\032\201\001\n\"CancelTrackingW"
  "ithOcclusionOptions\022\030\n\tactivated\030\001 \001(\010:\005"
  "false\022\"\n\025min_motion_continuity\030\002 \001(\002:\0030."
  "4\022\035\n\020min_inlier_ratio\030\003 \001(\002:\0030.1\032|\n\020Came"
  "raIntrinsics\022\n\n\002fx\030\001 \001(\002\022\n\n\002fy\030\002 \001(\002\022\n\n\002"
  "cx\030\003 \001(\002\022\n\n\002cy\030\004 \001(\002\022\n\n\002k0\030\005 \001(\002\022\n\n\002k1\030\006"
  " \001(\002\022\n\n\002k2\030\007 \001(\002\022\t\n\001w\030\010 \001(\005\022\t\n\001h\030\t \001(\005\"\346"
  "\002\n\017TrackingDegrees\022\037\n\033TRACKING_DEGREE_TR"
  "ANSLATION\020\000\022 \n\034TRACKING_DEGREE_CAMERA_SC"
  "ALE\020\001\022#\n\037TRACKING_DEGREE_CAMERA_ROTATION"
  "\020\002\022)\n%TRACKING_DEGREE_CAMERA_ROTATION_SC"
  "ALE\020\003\022&\n\"TRACKING_DEGREE_CAMERA_PERSPECT"
  "IVE\020\004\022 \n\034TRACKING_DEGREE_OBJECT_SCALE\020\005\022"
  "#\n\037TRACKING_DEGREE_OBJECT_ROTATION\020\006\022)\n%"
  "TRACKING_DEGREE_OBJECT_ROTATION_SCALE\020\007\022"
  "&\n\"TRACKING_DEGREE_OBJECT_PERSPECTIVE\020\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2futil_2ftracking_2fmotion_5fmodels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto = {
  false, false, 3879, descriptor_table_protodef_mediapipe_2futil_2ftracking_2ftracking_2eproto, "mediapipe/util/tracking/tracking.proto", 
  &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once, descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto, file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftracking_2eproto, file_level_service_descriptors_mediapipe_2futil_2ftracking_2ftracking_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter() {
  return &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2futil_2ftracking_2ftracking_2eproto(&descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionBoxState_TrackStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftracking_2eproto[0];
}
bool MotionBoxState_TrackStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionBoxState_TrackStatus MotionBoxState::BOX_UNTRACKED;
constexpr MotionBoxState_TrackStatus MotionBoxState::BOX_EMPTY;
constexpr MotionBoxState_TrackStatus MotionBoxState::BOX_NO_FEATURES;
constexpr MotionBoxState_TrackStatus MotionBoxState::BOX_TRACKED;
constexpr MotionBoxState_TrackStatus MotionBoxState::BOX_DUPLICATED;
constexpr MotionBoxState_TrackStatus MotionBoxState::BOX_TRACKED_OUT_OF_BOUND;
constexpr MotionBoxState_TrackStatus MotionBoxState::TrackStatus_MIN;
constexpr MotionBoxState_TrackStatus MotionBoxState::TrackStatus_MAX;
constexpr int MotionBoxState::TrackStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackStepOptions_TrackingDegrees_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto);
  return file_level_enum_descriptors_mediapipe_2futil_2ftracking_2ftracking_2eproto[1];
}
bool TrackStepOptions_TrackingDegrees_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_TRANSLATION;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_CAMERA_SCALE;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_CAMERA_ROTATION;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_CAMERA_ROTATION_SCALE;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_CAMERA_PERSPECTIVE;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_OBJECT_SCALE;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_OBJECT_ROTATION;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_OBJECT_ROTATION_SCALE;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TRACKING_DEGREE_OBJECT_PERSPECTIVE;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TrackingDegrees_MIN;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions::TrackingDegrees_MAX;
constexpr int TrackStepOptions::TrackingDegrees_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MotionBoxState_Quad::_Internal {
 public:
};

MotionBoxState_Quad::MotionBoxState_Quad(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionBoxState.Quad)
}
MotionBoxState_Quad::MotionBoxState_Quad(const MotionBoxState_Quad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionBoxState.Quad)
}

void MotionBoxState_Quad::SharedCtor() {
}

MotionBoxState_Quad::~MotionBoxState_Quad() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionBoxState.Quad)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionBoxState_Quad::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MotionBoxState_Quad::ArenaDtor(void* object) {
  MotionBoxState_Quad* _this = reinterpret_cast< MotionBoxState_Quad* >(object);
  (void)_this;
}
void MotionBoxState_Quad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionBoxState_Quad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionBoxState_Quad::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionBoxState.Quad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionBoxState_Quad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vertices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vertices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionBoxState_Quad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionBoxState.Quad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vertices = 1;
  for (int i = 0, n = this->_internal_vertices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vertices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionBoxState.Quad)
  return target;
}

size_t MotionBoxState_Quad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionBoxState.Quad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vertices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vertices_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vertices_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionBoxState_Quad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionBoxState.Quad)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionBoxState_Quad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionBoxState_Quad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionBoxState.Quad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionBoxState.Quad)
    MergeFrom(*source);
  }
}

void MotionBoxState_Quad::MergeFrom(const MotionBoxState_Quad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionBoxState.Quad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
}

void MotionBoxState_Quad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionBoxState.Quad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionBoxState_Quad::CopyFrom(const MotionBoxState_Quad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionBoxState.Quad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionBoxState_Quad::IsInitialized() const {
  return true;
}

void MotionBoxState_Quad::InternalSwap(MotionBoxState_Quad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionBoxState_Quad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[0]);
}

// ===================================================================

class MotionBoxState::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionBoxState>()._has_bits_);
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::mediapipe::MotionBoxState_Quad& quad(const MotionBoxState* msg);
  static void set_has_quad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_request_grouping(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::mediapipe::Homography& pnp_homography(const MotionBoxState* msg);
  static void set_has_pnp_homography(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dy(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_kinetic_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_prior_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_track_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spatial_prior_grid_size(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_prior_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_motion_disparity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_background_discrimination(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_inlier_center_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_inlier_center_y(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_inlier_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_inlier_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_inlier_width(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_inlier_height(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tracking_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::mediapipe::MotionBoxInternalState& internal(const MotionBoxState* msg);
  static void set_has_internal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mediapipe::MotionBoxState_Quad&
MotionBoxState::_Internal::quad(const MotionBoxState* msg) {
  return *msg->quad_;
}
const ::mediapipe::Homography&
MotionBoxState::_Internal::pnp_homography(const MotionBoxState* msg) {
  return *msg->pnp_homography_;
}
const ::mediapipe::MotionBoxInternalState&
MotionBoxState::_Internal::internal(const MotionBoxState* msg) {
  return *msg->internal_;
}
void MotionBoxState::clear_pnp_homography() {
  if (pnp_homography_ != nullptr) pnp_homography_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MotionBoxState::MotionBoxState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spatial_prior_(arena),
  spatial_confidence_(arena),
  inlier_ids_(arena),
  inlier_length_(arena),
  outlier_ids_(arena),
  inlier_id_match_pos_(arena),
  outlier_id_match_pos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionBoxState)
}
MotionBoxState::MotionBoxState(const MotionBoxState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      spatial_prior_(from.spatial_prior_),
      spatial_confidence_(from.spatial_confidence_),
      inlier_ids_(from.inlier_ids_),
      inlier_length_(from.inlier_length_),
      outlier_ids_(from.outlier_ids_),
      inlier_id_match_pos_(from.inlier_id_match_pos_),
      outlier_id_match_pos_(from.outlier_id_match_pos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_internal()) {
    internal_ = new ::mediapipe::MotionBoxInternalState(*from.internal_);
  } else {
    internal_ = nullptr;
  }
  if (from._internal_has_quad()) {
    quad_ = new ::mediapipe::MotionBoxState_Quad(*from.quad_);
  } else {
    quad_ = nullptr;
  }
  if (from._internal_has_pnp_homography()) {
    pnp_homography_ = new ::mediapipe::Homography(*from.pnp_homography_);
  } else {
    pnp_homography_ = nullptr;
  }
  ::memcpy(&pos_x_, &from.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&spatial_prior_grid_size_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(spatial_prior_grid_size_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionBoxState)
}

void MotionBoxState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&internal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_grouping_) -
    reinterpret_cast<char*>(&internal_)) + sizeof(request_grouping_));
scale_ = 1;
spatial_prior_grid_size_ = 10;
}

MotionBoxState::~MotionBoxState() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionBoxState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionBoxState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete internal_;
  if (this != internal_default_instance()) delete quad_;
  if (this != internal_default_instance()) delete pnp_homography_;
}

void MotionBoxState::ArenaDtor(void* object) {
  MotionBoxState* _this = reinterpret_cast< MotionBoxState* >(object);
  (void)_this;
}
void MotionBoxState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionBoxState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionBoxState::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionBoxState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spatial_prior_.Clear();
  spatial_confidence_.Clear();
  inlier_ids_.Clear();
  inlier_length_.Clear();
  outlier_ids_.Clear();
  inlier_id_match_pos_.Clear();
  outlier_id_match_pos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(internal_ != nullptr);
      internal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quad_ != nullptr);
      quad_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pnp_homography_ != nullptr);
      pnp_homography_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&pos_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dx_) -
        reinterpret_cast<char*>(&pos_x_)) + sizeof(dx_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&dy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inlier_center_x_) -
        reinterpret_cast<char*>(&dy_)) + sizeof(inlier_center_x_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&inlier_center_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aspect_ratio_) -
        reinterpret_cast<char*>(&inlier_center_y_)) + sizeof(aspect_ratio_));
  }
  if (cached_has_bits & 0x07000000u) {
    request_grouping_ = false;
    scale_ = 1;
    spatial_prior_grid_size_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionBoxState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float pos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pos_x(&has_bits);
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pos_y(&has_bits);
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_dx(&has_bits);
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_dy(&has_bits);
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float prior_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_prior_weight(&has_bits);
          prior_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionBoxState.TrackStatus track_status = 10 [default = BOX_UNTRACKED];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::MotionBoxState_TrackStatus_IsValid(val))) {
            _internal_set_track_status(static_cast<::mediapipe::MotionBoxState_TrackStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 spatial_prior_grid_size = 11 [default = 10];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_spatial_prior_grid_size(&has_bits);
          spatial_prior_grid_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float spatial_prior = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spatial_prior(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          _internal_add_spatial_prior(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float spatial_confidence = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spatial_confidence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109) {
          _internal_add_spatial_confidence(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float prior_diff = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_prior_diff(&has_bits);
          prior_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float motion_disparity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_motion_disparity(&has_bits);
          motion_disparity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float background_discrimination = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_background_discrimination(&has_bits);
          background_discrimination_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kinetic_energy = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_kinetic_energy(&has_bits);
          kinetic_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_center_x = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_inlier_center_x(&has_bits);
          inlier_center_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_center_y = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_inlier_center_y(&has_bits);
          inlier_center_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_width = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_inlier_width(&has_bits);
          inlier_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_height = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_inlier_height(&has_bits);
          inlier_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_sum = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_inlier_sum(&has_bits);
          inlier_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_ratio = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_inlier_ratio(&has_bits);
          inlier_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 inlier_ids = 26 [packed = true];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inlier_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208) {
          _internal_add_inlier_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 inlier_length = 27 [packed = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inlier_length(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_inlier_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 outlier_ids = 28 [packed = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_outlier_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_outlier_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionBoxInternalState internal = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rotation = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_rotation(&has_bits);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 inlier_id_match_pos = 31 [packed = true];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_inlier_id_match_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_inlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 outlier_id_match_pos = 32 [packed = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_outlier_id_match_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0) {
          _internal_add_outlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tracking_confidence = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_tracking_confidence(&has_bits);
          tracking_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.MotionBoxState.Quad quad = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quad(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float aspect_ratio = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_aspect_ratio(&has_bits);
          aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.Homography pnp_homography = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pnp_homography(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool request_grouping = 37 [default = false];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_request_grouping(&has_bits);
          request_grouping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionBoxState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionBoxState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pos_x = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_y(), target);
  }

  // optional float width = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // optional float height = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  // optional float scale = 5 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_scale(), target);
  }

  // optional float dx = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_dx(), target);
  }

  // optional float dy = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_dy(), target);
  }

  // optional float prior_weight = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_prior_weight(), target);
  }

  // optional .mediapipe.MotionBoxState.TrackStatus track_status = 10 [default = BOX_UNTRACKED];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_track_status(), target);
  }

  // optional int32 spatial_prior_grid_size = 11 [default = 10];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_spatial_prior_grid_size(), target);
  }

  // repeated float spatial_prior = 12 [packed = true];
  if (this->_internal_spatial_prior_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_spatial_prior(), target);
  }

  // repeated float spatial_confidence = 13 [packed = true];
  if (this->_internal_spatial_confidence_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_spatial_confidence(), target);
  }

  // optional float prior_diff = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_prior_diff(), target);
  }

  // optional float motion_disparity = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_motion_disparity(), target);
  }

  // optional float background_discrimination = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_background_discrimination(), target);
  }

  // optional float kinetic_energy = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_kinetic_energy(), target);
  }

  // optional float inlier_center_x = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_inlier_center_x(), target);
  }

  // optional float inlier_center_y = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_inlier_center_y(), target);
  }

  // optional float inlier_width = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_inlier_width(), target);
  }

  // optional float inlier_height = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_inlier_height(), target);
  }

  // optional float inlier_sum = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_inlier_sum(), target);
  }

  // optional float inlier_ratio = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_inlier_ratio(), target);
  }

  // repeated uint32 inlier_ids = 26 [packed = true];
  {
    int byte_size = _inlier_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          26, _internal_inlier_ids(), byte_size, target);
    }
  }

  // repeated uint32 inlier_length = 27 [packed = true];
  {
    int byte_size = _inlier_length_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          27, _internal_inlier_length(), byte_size, target);
    }
  }

  // repeated uint32 outlier_ids = 28 [packed = true];
  {
    int byte_size = _outlier_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          28, _internal_outlier_ids(), byte_size, target);
    }
  }

  // optional .mediapipe.MotionBoxInternalState internal = 29;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::internal(this), target, stream);
  }

  // optional float rotation = 30 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_rotation(), target);
  }

  // repeated uint32 inlier_id_match_pos = 31 [packed = true];
  {
    int byte_size = _inlier_id_match_pos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          31, _internal_inlier_id_match_pos(), byte_size, target);
    }
  }

  // repeated uint32 outlier_id_match_pos = 32 [packed = true];
  {
    int byte_size = _outlier_id_match_pos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          32, _internal_outlier_id_match_pos(), byte_size, target);
    }
  }

  // optional float tracking_confidence = 33;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_tracking_confidence(), target);
  }

  // optional .mediapipe.MotionBoxState.Quad quad = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::quad(this), target, stream);
  }

  // optional float aspect_ratio = 35;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_aspect_ratio(), target);
  }

  // optional .mediapipe.Homography pnp_homography = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::pnp_homography(this), target, stream);
  }

  // optional bool request_grouping = 37 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_request_grouping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionBoxState)
  return target;
}

size_t MotionBoxState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionBoxState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float spatial_prior = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spatial_prior_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float spatial_confidence = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spatial_confidence_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 inlier_ids = 26 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inlier_ids_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inlier_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 inlier_length = 27 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inlier_length_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inlier_length_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 outlier_ids = 28 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->outlier_ids_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _outlier_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 inlier_id_match_pos = 31 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->inlier_id_match_pos_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inlier_id_match_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 outlier_id_match_pos = 32 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->outlier_id_match_pos_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _outlier_id_match_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.MotionBoxInternalState internal = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *internal_);
    }

    // optional .mediapipe.MotionBoxState.Quad quad = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quad_);
    }

    // optional .mediapipe.Homography pnp_homography = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pnp_homography_);
    }

    // optional float pos_x = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float width = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float height = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float dx = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float dy = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float prior_weight = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional .mediapipe.MotionBoxState.TrackStatus track_status = 10 [default = BOX_UNTRACKED];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_track_status());
    }

    // optional float prior_diff = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float motion_disparity = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float background_discrimination = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float kinetic_energy = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float inlier_center_x = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float inlier_center_y = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float inlier_width = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float inlier_height = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float inlier_sum = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float inlier_ratio = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float rotation = 30 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float tracking_confidence = 33;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float aspect_ratio = 35;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional bool request_grouping = 37 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional float scale = 5 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 4;
    }

    // optional int32 spatial_prior_grid_size = 11 [default = 10];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_spatial_prior_grid_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionBoxState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionBoxState)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionBoxState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionBoxState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionBoxState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionBoxState)
    MergeFrom(*source);
  }
}

void MotionBoxState::MergeFrom(const MotionBoxState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionBoxState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spatial_prior_.MergeFrom(from.spatial_prior_);
  spatial_confidence_.MergeFrom(from.spatial_confidence_);
  inlier_ids_.MergeFrom(from.inlier_ids_);
  inlier_length_.MergeFrom(from.inlier_length_);
  outlier_ids_.MergeFrom(from.outlier_ids_);
  inlier_id_match_pos_.MergeFrom(from.inlier_id_match_pos_);
  outlier_id_match_pos_.MergeFrom(from.outlier_id_match_pos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_internal()->::mediapipe::MotionBoxInternalState::MergeFrom(from._internal_internal());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_quad()->::mediapipe::MotionBoxState_Quad::MergeFrom(from._internal_quad());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pnp_homography()->::mediapipe::Homography::MergeFrom(from._internal_pnp_homography());
    }
    if (cached_has_bits & 0x00000008u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      dx_ = from.dx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      dy_ = from.dy_;
    }
    if (cached_has_bits & 0x00000200u) {
      prior_weight_ = from.prior_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      track_status_ = from.track_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      prior_diff_ = from.prior_diff_;
    }
    if (cached_has_bits & 0x00001000u) {
      motion_disparity_ = from.motion_disparity_;
    }
    if (cached_has_bits & 0x00002000u) {
      background_discrimination_ = from.background_discrimination_;
    }
    if (cached_has_bits & 0x00004000u) {
      kinetic_energy_ = from.kinetic_energy_;
    }
    if (cached_has_bits & 0x00008000u) {
      inlier_center_x_ = from.inlier_center_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      inlier_center_y_ = from.inlier_center_y_;
    }
    if (cached_has_bits & 0x00020000u) {
      inlier_width_ = from.inlier_width_;
    }
    if (cached_has_bits & 0x00040000u) {
      inlier_height_ = from.inlier_height_;
    }
    if (cached_has_bits & 0x00080000u) {
      inlier_sum_ = from.inlier_sum_;
    }
    if (cached_has_bits & 0x00100000u) {
      inlier_ratio_ = from.inlier_ratio_;
    }
    if (cached_has_bits & 0x00200000u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00400000u) {
      tracking_confidence_ = from.tracking_confidence_;
    }
    if (cached_has_bits & 0x00800000u) {
      aspect_ratio_ = from.aspect_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      request_grouping_ = from.request_grouping_;
    }
    if (cached_has_bits & 0x02000000u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x04000000u) {
      spatial_prior_grid_size_ = from.spatial_prior_grid_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionBoxState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionBoxState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionBoxState::CopyFrom(const MotionBoxState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionBoxState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionBoxState::IsInitialized() const {
  return true;
}

void MotionBoxState::InternalSwap(MotionBoxState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  spatial_prior_.InternalSwap(&other->spatial_prior_);
  spatial_confidence_.InternalSwap(&other->spatial_confidence_);
  inlier_ids_.InternalSwap(&other->inlier_ids_);
  inlier_length_.InternalSwap(&other->inlier_length_);
  outlier_ids_.InternalSwap(&other->outlier_ids_);
  inlier_id_match_pos_.InternalSwap(&other->inlier_id_match_pos_);
  outlier_id_match_pos_.InternalSwap(&other->outlier_id_match_pos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionBoxState, request_grouping_)
      + sizeof(MotionBoxState::request_grouping_)
      - PROTOBUF_FIELD_OFFSET(MotionBoxState, internal_)>(
          reinterpret_cast<char*>(&internal_),
          reinterpret_cast<char*>(&other->internal_));
  swap(scale_, other->scale_);
  swap(spatial_prior_grid_size_, other->spatial_prior_grid_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionBoxState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[1]);
}

// ===================================================================

class MotionBoxInternalState::_Internal {
 public:
};

MotionBoxInternalState::MotionBoxInternalState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pos_x_(arena),
  pos_y_(arena),
  dx_(arena),
  dy_(arena),
  camera_dx_(arena),
  camera_dy_(arena),
  track_id_(arena),
  inlier_score_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.MotionBoxInternalState)
}
MotionBoxInternalState::MotionBoxInternalState(const MotionBoxInternalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pos_x_(from.pos_x_),
      pos_y_(from.pos_y_),
      dx_(from.dx_),
      dy_(from.dy_),
      camera_dx_(from.camera_dx_),
      camera_dy_(from.camera_dy_),
      track_id_(from.track_id_),
      inlier_score_(from.inlier_score_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.MotionBoxInternalState)
}

void MotionBoxInternalState::SharedCtor() {
}

MotionBoxInternalState::~MotionBoxInternalState() {
  // @@protoc_insertion_point(destructor:mediapipe.MotionBoxInternalState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionBoxInternalState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MotionBoxInternalState::ArenaDtor(void* object) {
  MotionBoxInternalState* _this = reinterpret_cast< MotionBoxInternalState* >(object);
  (void)_this;
}
void MotionBoxInternalState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionBoxInternalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionBoxInternalState::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.MotionBoxInternalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_x_.Clear();
  pos_y_.Clear();
  dx_.Clear();
  dy_.Clear();
  camera_dx_.Clear();
  camera_dy_.Clear();
  track_id_.Clear();
  inlier_score_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionBoxInternalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float pos_x = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pos_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_pos_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pos_y = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pos_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_pos_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float dx = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_dx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_dx(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float dy = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_dy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_dy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float camera_dx = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_camera_dx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_camera_dx(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float camera_dy = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_camera_dy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_camera_dy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 track_id = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_track_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_track_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float inlier_score = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_inlier_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_inlier_score(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionBoxInternalState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.MotionBoxInternalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float pos_x = 1 [packed = true];
  if (this->_internal_pos_x_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_pos_x(), target);
  }

  // repeated float pos_y = 2 [packed = true];
  if (this->_internal_pos_y_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_pos_y(), target);
  }

  // repeated float dx = 3 [packed = true];
  if (this->_internal_dx_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_dx(), target);
  }

  // repeated float dy = 4 [packed = true];
  if (this->_internal_dy_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_dy(), target);
  }

  // repeated float camera_dx = 5 [packed = true];
  if (this->_internal_camera_dx_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_camera_dx(), target);
  }

  // repeated float camera_dy = 6 [packed = true];
  if (this->_internal_camera_dy_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_camera_dy(), target);
  }

  // repeated int32 track_id = 7 [packed = true];
  {
    int byte_size = _track_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_track_id(), byte_size, target);
    }
  }

  // repeated float inlier_score = 8 [packed = true];
  if (this->_internal_inlier_score_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_inlier_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.MotionBoxInternalState)
  return target;
}

size_t MotionBoxInternalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.MotionBoxInternalState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pos_x = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pos_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float pos_y = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pos_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float dx = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dx_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float dy = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dy_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float camera_dx = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_camera_dx_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float camera_dy = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_camera_dy_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 track_id = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->track_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _track_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float inlier_score = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inlier_score_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionBoxInternalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.MotionBoxInternalState)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionBoxInternalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionBoxInternalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.MotionBoxInternalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.MotionBoxInternalState)
    MergeFrom(*source);
  }
}

void MotionBoxInternalState::MergeFrom(const MotionBoxInternalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.MotionBoxInternalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_x_.MergeFrom(from.pos_x_);
  pos_y_.MergeFrom(from.pos_y_);
  dx_.MergeFrom(from.dx_);
  dy_.MergeFrom(from.dy_);
  camera_dx_.MergeFrom(from.camera_dx_);
  camera_dy_.MergeFrom(from.camera_dy_);
  track_id_.MergeFrom(from.track_id_);
  inlier_score_.MergeFrom(from.inlier_score_);
}

void MotionBoxInternalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.MotionBoxInternalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionBoxInternalState::CopyFrom(const MotionBoxInternalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.MotionBoxInternalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionBoxInternalState::IsInitialized() const {
  return true;
}

void MotionBoxInternalState::InternalSwap(MotionBoxInternalState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pos_x_.InternalSwap(&other->pos_x_);
  pos_y_.InternalSwap(&other->pos_y_);
  dx_.InternalSwap(&other->dx_);
  dy_.InternalSwap(&other->dy_);
  camera_dx_.InternalSwap(&other->camera_dx_);
  camera_dy_.InternalSwap(&other->camera_dy_);
  track_id_.InternalSwap(&other->track_id_);
  inlier_score_.InternalSwap(&other->inlier_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionBoxInternalState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[2]);
}

// ===================================================================

class TrackStepOptions_IrlsInitialization::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackStepOptions_IrlsInitialization>()._has_bits_);
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rounds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrackStepOptions_IrlsInitialization::TrackStepOptions_IrlsInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackStepOptions.IrlsInitialization)
}
TrackStepOptions_IrlsInitialization::TrackStepOptions_IrlsInitialization(const TrackStepOptions_IrlsInitialization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&activated_, &from.activated_,
    static_cast<size_t>(reinterpret_cast<char*>(&cutoff_) -
    reinterpret_cast<char*>(&activated_)) + sizeof(cutoff_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackStepOptions.IrlsInitialization)
}

void TrackStepOptions_IrlsInitialization::SharedCtor() {
activated_ = false;
rounds_ = 50;
cutoff_ = 0.005f;
}

TrackStepOptions_IrlsInitialization::~TrackStepOptions_IrlsInitialization() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackStepOptions.IrlsInitialization)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackStepOptions_IrlsInitialization::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackStepOptions_IrlsInitialization::ArenaDtor(void* object) {
  TrackStepOptions_IrlsInitialization* _this = reinterpret_cast< TrackStepOptions_IrlsInitialization* >(object);
  (void)_this;
}
void TrackStepOptions_IrlsInitialization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackStepOptions_IrlsInitialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackStepOptions_IrlsInitialization::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackStepOptions.IrlsInitialization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    activated_ = false;
    rounds_ = 50;
    cutoff_ = 0.005f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackStepOptions_IrlsInitialization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool activated = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activated(&has_bits);
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rounds = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rounds(&has_bits);
          rounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cutoff = 3 [default = 0.005];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cutoff(&has_bits);
          cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackStepOptions_IrlsInitialization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackStepOptions.IrlsInitialization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool activated = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_activated(), target);
  }

  // optional int32 rounds = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rounds(), target);
  }

  // optional float cutoff = 3 [default = 0.005];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cutoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackStepOptions.IrlsInitialization)
  return target;
}

size_t TrackStepOptions_IrlsInitialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackStepOptions.IrlsInitialization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool activated = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 rounds = 2 [default = 50];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rounds());
    }

    // optional float cutoff = 3 [default = 0.005];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackStepOptions_IrlsInitialization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackStepOptions.IrlsInitialization)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackStepOptions_IrlsInitialization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackStepOptions_IrlsInitialization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackStepOptions.IrlsInitialization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackStepOptions.IrlsInitialization)
    MergeFrom(*source);
  }
}

void TrackStepOptions_IrlsInitialization::MergeFrom(const TrackStepOptions_IrlsInitialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackStepOptions.IrlsInitialization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      activated_ = from.activated_;
    }
    if (cached_has_bits & 0x00000002u) {
      rounds_ = from.rounds_;
    }
    if (cached_has_bits & 0x00000004u) {
      cutoff_ = from.cutoff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackStepOptions_IrlsInitialization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackStepOptions.IrlsInitialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackStepOptions_IrlsInitialization::CopyFrom(const TrackStepOptions_IrlsInitialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackStepOptions.IrlsInitialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackStepOptions_IrlsInitialization::IsInitialized() const {
  return true;
}

void TrackStepOptions_IrlsInitialization::InternalSwap(TrackStepOptions_IrlsInitialization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activated_, other->activated_);
  swap(rounds_, other->rounds_);
  swap(cutoff_, other->cutoff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackStepOptions_IrlsInitialization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[3]);
}

// ===================================================================

class TrackStepOptions_CancelTrackingWithOcclusionOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackStepOptions_CancelTrackingWithOcclusionOptions>()._has_bits_);
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_motion_continuity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_inlier_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrackStepOptions_CancelTrackingWithOcclusionOptions::TrackStepOptions_CancelTrackingWithOcclusionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
}
TrackStepOptions_CancelTrackingWithOcclusionOptions::TrackStepOptions_CancelTrackingWithOcclusionOptions(const TrackStepOptions_CancelTrackingWithOcclusionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&activated_, &from.activated_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_inlier_ratio_) -
    reinterpret_cast<char*>(&activated_)) + sizeof(min_inlier_ratio_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::SharedCtor() {
activated_ = false;
min_motion_continuity_ = 0.4f;
min_inlier_ratio_ = 0.1f;
}

TrackStepOptions_CancelTrackingWithOcclusionOptions::~TrackStepOptions_CancelTrackingWithOcclusionOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::ArenaDtor(void* object) {
  TrackStepOptions_CancelTrackingWithOcclusionOptions* _this = reinterpret_cast< TrackStepOptions_CancelTrackingWithOcclusionOptions* >(object);
  (void)_this;
}
void TrackStepOptions_CancelTrackingWithOcclusionOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackStepOptions_CancelTrackingWithOcclusionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    activated_ = false;
    min_motion_continuity_ = 0.4f;
    min_inlier_ratio_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackStepOptions_CancelTrackingWithOcclusionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool activated = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activated(&has_bits);
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_motion_continuity = 2 [default = 0.4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_motion_continuity(&has_bits);
          min_motion_continuity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_inlier_ratio = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_min_inlier_ratio(&has_bits);
          min_inlier_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackStepOptions_CancelTrackingWithOcclusionOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool activated = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_activated(), target);
  }

  // optional float min_motion_continuity = 2 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_motion_continuity(), target);
  }

  // optional float min_inlier_ratio = 3 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_inlier_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  return target;
}

size_t TrackStepOptions_CancelTrackingWithOcclusionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool activated = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float min_motion_continuity = 2 [default = 0.4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_inlier_ratio = 3 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackStepOptions_CancelTrackingWithOcclusionOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackStepOptions_CancelTrackingWithOcclusionOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
    MergeFrom(*source);
  }
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::MergeFrom(const TrackStepOptions_CancelTrackingWithOcclusionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      activated_ = from.activated_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_motion_continuity_ = from.min_motion_continuity_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_inlier_ratio_ = from.min_inlier_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::CopyFrom(const TrackStepOptions_CancelTrackingWithOcclusionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackStepOptions_CancelTrackingWithOcclusionOptions::IsInitialized() const {
  return true;
}

void TrackStepOptions_CancelTrackingWithOcclusionOptions::InternalSwap(TrackStepOptions_CancelTrackingWithOcclusionOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activated_, other->activated_);
  swap(min_motion_continuity_, other->min_motion_continuity_);
  swap(min_inlier_ratio_, other->min_inlier_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackStepOptions_CancelTrackingWithOcclusionOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[4]);
}

// ===================================================================

class TrackStepOptions_CameraIntrinsics::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackStepOptions_CameraIntrinsics>()._has_bits_);
  static void set_has_fx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_k0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_k1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_k2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TrackStepOptions_CameraIntrinsics::TrackStepOptions_CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackStepOptions.CameraIntrinsics)
}
TrackStepOptions_CameraIntrinsics::TrackStepOptions_CameraIntrinsics(const TrackStepOptions_CameraIntrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackStepOptions.CameraIntrinsics)
}

void TrackStepOptions_CameraIntrinsics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(h_));
}

TrackStepOptions_CameraIntrinsics::~TrackStepOptions_CameraIntrinsics() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackStepOptions.CameraIntrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackStepOptions_CameraIntrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackStepOptions_CameraIntrinsics::ArenaDtor(void* object) {
  TrackStepOptions_CameraIntrinsics* _this = reinterpret_cast< TrackStepOptions_CameraIntrinsics* >(object);
  (void)_this;
}
void TrackStepOptions_CameraIntrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackStepOptions_CameraIntrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackStepOptions_CameraIntrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackStepOptions.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&fx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&fx_)) + sizeof(w_));
  }
  h_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackStepOptions_CameraIntrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_fx(&has_bits);
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fy(&has_bits);
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cx(&has_bits);
          cx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_cy(&has_bits);
          cy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float k0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_k0(&has_bits);
          k0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float k1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_k1(&has_bits);
          k1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float k2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_k2(&has_bits);
          k2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 w = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 h = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackStepOptions_CameraIntrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackStepOptions.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // optional float fy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  // optional float cx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cx(), target);
  }

  // optional float cy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cy(), target);
  }

  // optional float k0 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_k0(), target);
  }

  // optional float k1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_k1(), target);
  }

  // optional float k2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_k2(), target);
  }

  // optional int32 w = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_w(), target);
  }

  // optional int32 h = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackStepOptions.CameraIntrinsics)
  return target;
}

size_t TrackStepOptions_CameraIntrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackStepOptions.CameraIntrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float fx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float fy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float cx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float cy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float k0 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float k1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float k2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 w = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_w());
    }

  }
  // optional int32 h = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_h());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackStepOptions_CameraIntrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackStepOptions.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackStepOptions_CameraIntrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackStepOptions_CameraIntrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackStepOptions.CameraIntrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackStepOptions.CameraIntrinsics)
    MergeFrom(*source);
  }
}

void TrackStepOptions_CameraIntrinsics::MergeFrom(const TrackStepOptions_CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackStepOptions.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fx_ = from.fx_;
    }
    if (cached_has_bits & 0x00000002u) {
      fy_ = from.fy_;
    }
    if (cached_has_bits & 0x00000004u) {
      cx_ = from.cx_;
    }
    if (cached_has_bits & 0x00000008u) {
      cy_ = from.cy_;
    }
    if (cached_has_bits & 0x00000010u) {
      k0_ = from.k0_;
    }
    if (cached_has_bits & 0x00000020u) {
      k1_ = from.k1_;
    }
    if (cached_has_bits & 0x00000040u) {
      k2_ = from.k2_;
    }
    if (cached_has_bits & 0x00000080u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_h(from._internal_h());
  }
}

void TrackStepOptions_CameraIntrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackStepOptions.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackStepOptions_CameraIntrinsics::CopyFrom(const TrackStepOptions_CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackStepOptions.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackStepOptions_CameraIntrinsics::IsInitialized() const {
  return true;
}

void TrackStepOptions_CameraIntrinsics::InternalSwap(TrackStepOptions_CameraIntrinsics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackStepOptions_CameraIntrinsics, h_)
      + sizeof(TrackStepOptions_CameraIntrinsics::h_)
      - PROTOBUF_FIELD_OFFSET(TrackStepOptions_CameraIntrinsics, fx_)>(
          reinterpret_cast<char*>(&fx_),
          reinterpret_cast<char*>(&other->fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackStepOptions_CameraIntrinsics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[5]);
}

// ===================================================================

class TrackStepOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackStepOptions>()._has_bits_);
  static void set_has_tracking_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_track_object_and_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_irls_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spatial_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_motion_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_relative_motion_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_motion_disparity_low_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_motion_disparity_high_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_disparity_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_motion_prior_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_background_discrimination_low_level(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_background_discrimination_high_level(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_inlier_center_relative_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_inlier_spring_force(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_kinetic_center_relative_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_kinetic_spring_force(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_kinetic_spring_force_min_kinetic_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_velocity_update_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_max_track_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_expansion_size(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_inlier_low_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_inlier_high_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_kinetic_energy_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_prior_weight_increase(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_low_kinetic_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_high_kinetic_energy(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_return_internal_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_post_estimation_weights_for_state(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_compute_spatial_prior(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mediapipe::TrackStepOptions_IrlsInitialization& irls_initialization(const TrackStepOptions* msg);
  static void set_has_irls_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_static_motion_temporal_ratio(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions& cancel_tracking_with_occlusion_options(const TrackStepOptions* msg);
  static void set_has_cancel_tracking_with_occlusion_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_similarity_min_contd_inliers(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_box_similarity_max_scale(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_box_similarity_max_rotation(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_quad_homography_max_scale(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_quad_homography_max_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::mediapipe::TrackStepOptions_CameraIntrinsics& camera_intrinsics(const TrackStepOptions* msg);
  static void set_has_camera_intrinsics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_forced_pnp_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mediapipe::TrackStepOptions_IrlsInitialization&
TrackStepOptions::_Internal::irls_initialization(const TrackStepOptions* msg) {
  return *msg->irls_initialization_;
}
const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions&
TrackStepOptions::_Internal::cancel_tracking_with_occlusion_options(const TrackStepOptions* msg) {
  return *msg->cancel_tracking_with_occlusion_options_;
}
const ::mediapipe::TrackStepOptions_CameraIntrinsics&
TrackStepOptions::_Internal::camera_intrinsics(const TrackStepOptions* msg) {
  return *msg->camera_intrinsics_;
}
TrackStepOptions::TrackStepOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mediapipe.TrackStepOptions)
}
TrackStepOptions::TrackStepOptions(const TrackStepOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_irls_initialization()) {
    irls_initialization_ = new ::mediapipe::TrackStepOptions_IrlsInitialization(*from.irls_initialization_);
  } else {
    irls_initialization_ = nullptr;
  }
  if (from._internal_has_cancel_tracking_with_occlusion_options()) {
    cancel_tracking_with_occlusion_options_ = new ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions(*from.cancel_tracking_with_occlusion_options_);
  } else {
    cancel_tracking_with_occlusion_options_ = nullptr;
  }
  if (from._internal_has_camera_intrinsics()) {
    camera_intrinsics_ = new ::mediapipe::TrackStepOptions_CameraIntrinsics(*from.camera_intrinsics_);
  } else {
    camera_intrinsics_ = nullptr;
  }
  ::memcpy(&tracking_degrees_, &from.tracking_degrees_,
    static_cast<size_t>(reinterpret_cast<char*>(&quad_homography_max_scale_) -
    reinterpret_cast<char*>(&tracking_degrees_)) + sizeof(quad_homography_max_scale_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.TrackStepOptions)
}

void TrackStepOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&irls_initialization_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&forced_pnp_tracking_) -
    reinterpret_cast<char*>(&irls_initialization_)) + sizeof(forced_pnp_tracking_));
quad_homography_max_rotation_ = 0.3f;
irls_iterations_ = 5;
spatial_sigma_ = 0.15f;
min_motion_sigma_ = 0.002f;
relative_motion_sigma_ = 0.3f;
motion_disparity_low_level_ = 0.008f;
motion_disparity_high_level_ = 0.016f;
disparity_decay_ = 0.8f;
motion_prior_weight_ = 0.2f;
background_discrimination_low_level_ = 0.004f;
background_discrimination_high_level_ = 0.008f;
inlier_center_relative_distance_ = 0.1f;
inlier_spring_force_ = 0.3f;
kinetic_center_relative_distance_ = 0.4f;
kinetic_spring_force_ = 0.5f;
velocity_update_weight_ = 0.7f;
max_track_failures_ = 10;
expansion_size_ = 0.05f;
inlier_low_weight_ = 250;
inlier_high_weight_ = 500;
kinetic_spring_force_min_kinetic_energy_ = 0.003f;
kinetic_energy_decay_ = 0.98f;
prior_weight_increase_ = 0.2f;
low_kinetic_energy_ = 0.001f;
high_kinetic_energy_ = 0.004f;
use_post_estimation_weights_for_state_ = true;
static_motion_temporal_ratio_ = 0.003f;
object_similarity_min_contd_inliers_ = 30;
box_similarity_max_scale_ = 1.05f;
box_similarity_max_rotation_ = 0.2f;
quad_homography_max_scale_ = 1.2f;
}

TrackStepOptions::~TrackStepOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.TrackStepOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackStepOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete irls_initialization_;
  if (this != internal_default_instance()) delete cancel_tracking_with_occlusion_options_;
  if (this != internal_default_instance()) delete camera_intrinsics_;
}

void TrackStepOptions::ArenaDtor(void* object) {
  TrackStepOptions* _this = reinterpret_cast< TrackStepOptions* >(object);
  (void)_this;
}
void TrackStepOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackStepOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackStepOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.TrackStepOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(irls_initialization_ != nullptr);
      irls_initialization_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cancel_tracking_with_occlusion_options_ != nullptr);
      cancel_tracking_with_occlusion_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(camera_intrinsics_ != nullptr);
      camera_intrinsics_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&tracking_degrees_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&forced_pnp_tracking_) -
        reinterpret_cast<char*>(&tracking_degrees_)) + sizeof(forced_pnp_tracking_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    quad_homography_max_rotation_ = 0.3f;
    irls_iterations_ = 5;
    spatial_sigma_ = 0.15f;
    min_motion_sigma_ = 0.002f;
    relative_motion_sigma_ = 0.3f;
    motion_disparity_low_level_ = 0.008f;
    motion_disparity_high_level_ = 0.016f;
    disparity_decay_ = 0.8f;
  }
  if (cached_has_bits & 0x00ff0000u) {
    motion_prior_weight_ = 0.2f;
    background_discrimination_low_level_ = 0.004f;
    background_discrimination_high_level_ = 0.008f;
    inlier_center_relative_distance_ = 0.1f;
    inlier_spring_force_ = 0.3f;
    kinetic_center_relative_distance_ = 0.4f;
    kinetic_spring_force_ = 0.5f;
    velocity_update_weight_ = 0.7f;
  }
  if (cached_has_bits & 0xff000000u) {
    max_track_failures_ = 10;
    expansion_size_ = 0.05f;
    inlier_low_weight_ = 250;
    inlier_high_weight_ = 500;
    kinetic_spring_force_min_kinetic_energy_ = 0.003f;
    kinetic_energy_decay_ = 0.98f;
    prior_weight_increase_ = 0.2f;
    low_kinetic_energy_ = 0.001f;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    high_kinetic_energy_ = 0.004f;
    use_post_estimation_weights_for_state_ = true;
    static_motion_temporal_ratio_ = 0.003f;
    object_similarity_min_contd_inliers_ = 30;
    box_similarity_max_scale_ = 1.05f;
    box_similarity_max_rotation_ = 0.2f;
    quad_homography_max_scale_ = 1.2f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackStepOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 irls_iterations = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_irls_iterations(&_has_bits_);
          irls_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float spatial_sigma = 2 [default = 0.15];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_spatial_sigma(&_has_bits_);
          spatial_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_motion_sigma = 3 [default = 0.002];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_min_motion_sigma(&_has_bits_);
          min_motion_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float relative_motion_sigma = 4 [default = 0.3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_relative_motion_sigma(&_has_bits_);
          relative_motion_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float motion_disparity_low_level = 6 [default = 0.008];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_motion_disparity_low_level(&_has_bits_);
          motion_disparity_low_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float motion_disparity_high_level = 7 [default = 0.016];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_motion_disparity_high_level(&_has_bits_);
          motion_disparity_high_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float disparity_decay = 8 [default = 0.8];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_disparity_decay(&_has_bits_);
          disparity_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float motion_prior_weight = 9 [default = 0.2];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_motion_prior_weight(&_has_bits_);
          motion_prior_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float background_discrimination_low_level = 10 [default = 0.004];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_background_discrimination_low_level(&_has_bits_);
          background_discrimination_low_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float background_discrimination_high_level = 11 [default = 0.008];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_background_discrimination_high_level(&_has_bits_);
          background_discrimination_high_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_center_relative_distance = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_inlier_center_relative_distance(&_has_bits_);
          inlier_center_relative_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_spring_force = 13 [default = 0.3];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_inlier_spring_force(&_has_bits_);
          inlier_spring_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kinetic_center_relative_distance = 14 [default = 0.4];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_kinetic_center_relative_distance(&_has_bits_);
          kinetic_center_relative_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kinetic_spring_force = 15 [default = 0.5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_kinetic_spring_force(&_has_bits_);
          kinetic_spring_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocity_update_weight = 16 [default = 0.7];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_velocity_update_weight(&_has_bits_);
          velocity_update_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_track_failures = 17 [default = 10];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_track_failures(&_has_bits_);
          max_track_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float expansion_size = 18 [default = 0.05];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_expansion_size(&_has_bits_);
          expansion_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_low_weight = 19 [default = 250];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_inlier_low_weight(&_has_bits_);
          inlier_low_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inlier_high_weight = 20 [default = 500];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_inlier_high_weight(&_has_bits_);
          inlier_high_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kinetic_spring_force_min_kinetic_energy = 21 [default = 0.003];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_kinetic_spring_force_min_kinetic_energy(&_has_bits_);
          kinetic_spring_force_min_kinetic_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float kinetic_energy_decay = 22 [default = 0.98];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_kinetic_energy_decay(&_has_bits_);
          kinetic_energy_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float prior_weight_increase = 23 [default = 0.2];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_prior_weight_increase(&_has_bits_);
          prior_weight_increase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float low_kinetic_energy = 24 [default = 0.001];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_low_kinetic_energy(&_has_bits_);
          low_kinetic_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float high_kinetic_energy = 25 [default = 0.004];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_high_kinetic_energy(&_has_bits_);
          high_kinetic_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool return_internal_state = 26 [default = false];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_return_internal_state(&_has_bits_);
          return_internal_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compute_spatial_prior = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_compute_spatial_prior(&_has_bits_);
          compute_spatial_prior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackStepOptions.TrackingDegrees tracking_degrees = 28 [default = TRACKING_DEGREE_TRANSLATION];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::TrackStepOptions_TrackingDegrees_IsValid(val))) {
            _internal_set_tracking_degrees(static_cast<::mediapipe::TrackStepOptions_TrackingDegrees>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool use_post_estimation_weights_for_state = 29 [default = true];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_use_post_estimation_weights_for_state(&_has_bits_);
          use_post_estimation_weights_for_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackStepOptions.IrlsInitialization irls_initialization = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_irls_initialization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool track_object_and_camera = 32 [default = false];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_track_object_and_camera(&_has_bits_);
          track_object_and_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float static_motion_temporal_ratio = 33 [default = 0.003];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_static_motion_temporal_ratio(&_has_bits_);
          static_motion_temporal_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions cancel_tracking_with_occlusion_options = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_tracking_with_occlusion_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 object_similarity_min_contd_inliers = 35 [default = 30];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_similarity_min_contd_inliers(&_has_bits_);
          object_similarity_min_contd_inliers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float box_similarity_max_scale = 36 [default = 1.05];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_box_similarity_max_scale(&_has_bits_);
          box_similarity_max_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float box_similarity_max_rotation = 37 [default = 0.2];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_box_similarity_max_rotation(&_has_bits_);
          box_similarity_max_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float quad_homography_max_scale = 38 [default = 1.2];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_quad_homography_max_scale(&_has_bits_);
          quad_homography_max_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float quad_homography_max_rotation = 39 [default = 0.3];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_quad_homography_max_rotation(&_has_bits_);
          quad_homography_max_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.TrackStepOptions.CameraIntrinsics camera_intrinsics = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool forced_pnp_tracking = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_forced_pnp_tracking(&_has_bits_);
          forced_pnp_tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackStepOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.TrackStepOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 irls_iterations = 1 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_irls_iterations(), target);
  }

  // optional float spatial_sigma = 2 [default = 0.15];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_spatial_sigma(), target);
  }

  // optional float min_motion_sigma = 3 [default = 0.002];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_motion_sigma(), target);
  }

  // optional float relative_motion_sigma = 4 [default = 0.3];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_relative_motion_sigma(), target);
  }

  // optional float motion_disparity_low_level = 6 [default = 0.008];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_motion_disparity_low_level(), target);
  }

  // optional float motion_disparity_high_level = 7 [default = 0.016];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_motion_disparity_high_level(), target);
  }

  // optional float disparity_decay = 8 [default = 0.8];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_disparity_decay(), target);
  }

  // optional float motion_prior_weight = 9 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_motion_prior_weight(), target);
  }

  // optional float background_discrimination_low_level = 10 [default = 0.004];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_background_discrimination_low_level(), target);
  }

  // optional float background_discrimination_high_level = 11 [default = 0.008];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_background_discrimination_high_level(), target);
  }

  // optional float inlier_center_relative_distance = 12 [default = 0.1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_inlier_center_relative_distance(), target);
  }

  // optional float inlier_spring_force = 13 [default = 0.3];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_inlier_spring_force(), target);
  }

  // optional float kinetic_center_relative_distance = 14 [default = 0.4];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_kinetic_center_relative_distance(), target);
  }

  // optional float kinetic_spring_force = 15 [default = 0.5];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_kinetic_spring_force(), target);
  }

  // optional float velocity_update_weight = 16 [default = 0.7];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_velocity_update_weight(), target);
  }

  // optional int32 max_track_failures = 17 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_max_track_failures(), target);
  }

  // optional float expansion_size = 18 [default = 0.05];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_expansion_size(), target);
  }

  // optional float inlier_low_weight = 19 [default = 250];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_inlier_low_weight(), target);
  }

  // optional float inlier_high_weight = 20 [default = 500];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_inlier_high_weight(), target);
  }

  // optional float kinetic_spring_force_min_kinetic_energy = 21 [default = 0.003];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_kinetic_spring_force_min_kinetic_energy(), target);
  }

  // optional float kinetic_energy_decay = 22 [default = 0.98];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_kinetic_energy_decay(), target);
  }

  // optional float prior_weight_increase = 23 [default = 0.2];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_prior_weight_increase(), target);
  }

  // optional float low_kinetic_energy = 24 [default = 0.001];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_low_kinetic_energy(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float high_kinetic_energy = 25 [default = 0.004];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_high_kinetic_energy(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool return_internal_state = 26 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_return_internal_state(), target);
  }

  // optional bool compute_spatial_prior = 27 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_compute_spatial_prior(), target);
  }

  // optional .mediapipe.TrackStepOptions.TrackingDegrees tracking_degrees = 28 [default = TRACKING_DEGREE_TRANSLATION];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_tracking_degrees(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_post_estimation_weights_for_state = 29 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_use_post_estimation_weights_for_state(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.TrackStepOptions.IrlsInitialization irls_initialization = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::irls_initialization(this), target, stream);
  }

  // optional bool track_object_and_camera = 32 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_track_object_and_camera(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float static_motion_temporal_ratio = 33 [default = 0.003];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_static_motion_temporal_ratio(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions cancel_tracking_with_occlusion_options = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::cancel_tracking_with_occlusion_options(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 object_similarity_min_contd_inliers = 35 [default = 30];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_object_similarity_min_contd_inliers(), target);
  }

  // optional float box_similarity_max_scale = 36 [default = 1.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_box_similarity_max_scale(), target);
  }

  // optional float box_similarity_max_rotation = 37 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_box_similarity_max_rotation(), target);
  }

  // optional float quad_homography_max_scale = 38 [default = 1.2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_quad_homography_max_scale(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float quad_homography_max_rotation = 39 [default = 0.3];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(39, this->_internal_quad_homography_max_rotation(), target);
  }

  // optional .mediapipe.TrackStepOptions.CameraIntrinsics camera_intrinsics = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::camera_intrinsics(this), target, stream);
  }

  // optional bool forced_pnp_tracking = 41 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_forced_pnp_tracking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.TrackStepOptions)
  return target;
}

size_t TrackStepOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.TrackStepOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mediapipe.TrackStepOptions.IrlsInitialization irls_initialization = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *irls_initialization_);
    }

    // optional .mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions cancel_tracking_with_occlusion_options = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cancel_tracking_with_occlusion_options_);
    }

    // optional .mediapipe.TrackStepOptions.CameraIntrinsics camera_intrinsics = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_intrinsics_);
    }

    // optional .mediapipe.TrackStepOptions.TrackingDegrees tracking_degrees = 28 [default = TRACKING_DEGREE_TRANSLATION];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tracking_degrees());
    }

    // optional bool track_object_and_camera = 32 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool return_internal_state = 26 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool compute_spatial_prior = 27 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool forced_pnp_tracking = 41 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float quad_homography_max_rotation = 39 [default = 0.3];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional int32 irls_iterations = 1 [default = 5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_irls_iterations());
    }

    // optional float spatial_sigma = 2 [default = 0.15];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float min_motion_sigma = 3 [default = 0.002];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float relative_motion_sigma = 4 [default = 0.3];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float motion_disparity_low_level = 6 [default = 0.008];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float motion_disparity_high_level = 7 [default = 0.016];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float disparity_decay = 8 [default = 0.8];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float motion_prior_weight = 9 [default = 0.2];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float background_discrimination_low_level = 10 [default = 0.004];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float background_discrimination_high_level = 11 [default = 0.008];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float inlier_center_relative_distance = 12 [default = 0.1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float inlier_spring_force = 13 [default = 0.3];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float kinetic_center_relative_distance = 14 [default = 0.4];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional float kinetic_spring_force = 15 [default = 0.5];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 4;
    }

    // optional float velocity_update_weight = 16 [default = 0.7];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 max_track_failures = 17 [default = 10];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_track_failures());
    }

    // optional float expansion_size = 18 [default = 0.05];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float inlier_low_weight = 19 [default = 250];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float inlier_high_weight = 20 [default = 500];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float kinetic_spring_force_min_kinetic_energy = 21 [default = 0.003];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float kinetic_energy_decay = 22 [default = 0.98];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float prior_weight_increase = 23 [default = 0.2];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float low_kinetic_energy = 24 [default = 0.001];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional float high_kinetic_energy = 25 [default = 0.004];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional bool use_post_estimation_weights_for_state = 29 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional float static_motion_temporal_ratio = 33 [default = 0.003];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional int32 object_similarity_min_contd_inliers = 35 [default = 30];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_object_similarity_min_contd_inliers());
    }

    // optional float box_similarity_max_scale = 36 [default = 1.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float box_similarity_max_rotation = 37 [default = 0.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float quad_homography_max_scale = 38 [default = 1.2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackStepOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.TrackStepOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackStepOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackStepOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.TrackStepOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.TrackStepOptions)
    MergeFrom(*source);
  }
}

void TrackStepOptions::MergeFrom(const TrackStepOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.TrackStepOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_irls_initialization()->::mediapipe::TrackStepOptions_IrlsInitialization::MergeFrom(from._internal_irls_initialization());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cancel_tracking_with_occlusion_options()->::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions::MergeFrom(from._internal_cancel_tracking_with_occlusion_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_camera_intrinsics()->::mediapipe::TrackStepOptions_CameraIntrinsics::MergeFrom(from._internal_camera_intrinsics());
    }
    if (cached_has_bits & 0x00000008u) {
      tracking_degrees_ = from.tracking_degrees_;
    }
    if (cached_has_bits & 0x00000010u) {
      track_object_and_camera_ = from.track_object_and_camera_;
    }
    if (cached_has_bits & 0x00000020u) {
      return_internal_state_ = from.return_internal_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      compute_spatial_prior_ = from.compute_spatial_prior_;
    }
    if (cached_has_bits & 0x00000080u) {
      forced_pnp_tracking_ = from.forced_pnp_tracking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      quad_homography_max_rotation_ = from.quad_homography_max_rotation_;
    }
    if (cached_has_bits & 0x00000200u) {
      irls_iterations_ = from.irls_iterations_;
    }
    if (cached_has_bits & 0x00000400u) {
      spatial_sigma_ = from.spatial_sigma_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_motion_sigma_ = from.min_motion_sigma_;
    }
    if (cached_has_bits & 0x00001000u) {
      relative_motion_sigma_ = from.relative_motion_sigma_;
    }
    if (cached_has_bits & 0x00002000u) {
      motion_disparity_low_level_ = from.motion_disparity_low_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      motion_disparity_high_level_ = from.motion_disparity_high_level_;
    }
    if (cached_has_bits & 0x00008000u) {
      disparity_decay_ = from.disparity_decay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      motion_prior_weight_ = from.motion_prior_weight_;
    }
    if (cached_has_bits & 0x00020000u) {
      background_discrimination_low_level_ = from.background_discrimination_low_level_;
    }
    if (cached_has_bits & 0x00040000u) {
      background_discrimination_high_level_ = from.background_discrimination_high_level_;
    }
    if (cached_has_bits & 0x00080000u) {
      inlier_center_relative_distance_ = from.inlier_center_relative_distance_;
    }
    if (cached_has_bits & 0x00100000u) {
      inlier_spring_force_ = from.inlier_spring_force_;
    }
    if (cached_has_bits & 0x00200000u) {
      kinetic_center_relative_distance_ = from.kinetic_center_relative_distance_;
    }
    if (cached_has_bits & 0x00400000u) {
      kinetic_spring_force_ = from.kinetic_spring_force_;
    }
    if (cached_has_bits & 0x00800000u) {
      velocity_update_weight_ = from.velocity_update_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      max_track_failures_ = from.max_track_failures_;
    }
    if (cached_has_bits & 0x02000000u) {
      expansion_size_ = from.expansion_size_;
    }
    if (cached_has_bits & 0x04000000u) {
      inlier_low_weight_ = from.inlier_low_weight_;
    }
    if (cached_has_bits & 0x08000000u) {
      inlier_high_weight_ = from.inlier_high_weight_;
    }
    if (cached_has_bits & 0x10000000u) {
      kinetic_spring_force_min_kinetic_energy_ = from.kinetic_spring_force_min_kinetic_energy_;
    }
    if (cached_has_bits & 0x20000000u) {
      kinetic_energy_decay_ = from.kinetic_energy_decay_;
    }
    if (cached_has_bits & 0x40000000u) {
      prior_weight_increase_ = from.prior_weight_increase_;
    }
    if (cached_has_bits & 0x80000000u) {
      low_kinetic_energy_ = from.low_kinetic_energy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      high_kinetic_energy_ = from.high_kinetic_energy_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_post_estimation_weights_for_state_ = from.use_post_estimation_weights_for_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      static_motion_temporal_ratio_ = from.static_motion_temporal_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      object_similarity_min_contd_inliers_ = from.object_similarity_min_contd_inliers_;
    }
    if (cached_has_bits & 0x00000010u) {
      box_similarity_max_scale_ = from.box_similarity_max_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      box_similarity_max_rotation_ = from.box_similarity_max_rotation_;
    }
    if (cached_has_bits & 0x00000040u) {
      quad_homography_max_scale_ = from.quad_homography_max_scale_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void TrackStepOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.TrackStepOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackStepOptions::CopyFrom(const TrackStepOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.TrackStepOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackStepOptions::IsInitialized() const {
  return true;
}

void TrackStepOptions::InternalSwap(TrackStepOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackStepOptions, forced_pnp_tracking_)
      + sizeof(TrackStepOptions::forced_pnp_tracking_)
      - PROTOBUF_FIELD_OFFSET(TrackStepOptions, irls_initialization_)>(
          reinterpret_cast<char*>(&irls_initialization_),
          reinterpret_cast<char*>(&other->irls_initialization_));
  swap(quad_homography_max_rotation_, other->quad_homography_max_rotation_);
  swap(irls_iterations_, other->irls_iterations_);
  swap(spatial_sigma_, other->spatial_sigma_);
  swap(min_motion_sigma_, other->min_motion_sigma_);
  swap(relative_motion_sigma_, other->relative_motion_sigma_);
  swap(motion_disparity_low_level_, other->motion_disparity_low_level_);
  swap(motion_disparity_high_level_, other->motion_disparity_high_level_);
  swap(disparity_decay_, other->disparity_decay_);
  swap(motion_prior_weight_, other->motion_prior_weight_);
  swap(background_discrimination_low_level_, other->background_discrimination_low_level_);
  swap(background_discrimination_high_level_, other->background_discrimination_high_level_);
  swap(inlier_center_relative_distance_, other->inlier_center_relative_distance_);
  swap(inlier_spring_force_, other->inlier_spring_force_);
  swap(kinetic_center_relative_distance_, other->kinetic_center_relative_distance_);
  swap(kinetic_spring_force_, other->kinetic_spring_force_);
  swap(velocity_update_weight_, other->velocity_update_weight_);
  swap(max_track_failures_, other->max_track_failures_);
  swap(expansion_size_, other->expansion_size_);
  swap(inlier_low_weight_, other->inlier_low_weight_);
  swap(inlier_high_weight_, other->inlier_high_weight_);
  swap(kinetic_spring_force_min_kinetic_energy_, other->kinetic_spring_force_min_kinetic_energy_);
  swap(kinetic_energy_decay_, other->kinetic_energy_decay_);
  swap(prior_weight_increase_, other->prior_weight_increase_);
  swap(low_kinetic_energy_, other->low_kinetic_energy_);
  swap(high_kinetic_energy_, other->high_kinetic_energy_);
  swap(use_post_estimation_weights_for_state_, other->use_post_estimation_weights_for_state_);
  swap(static_motion_temporal_ratio_, other->static_motion_temporal_ratio_);
  swap(object_similarity_min_contd_inliers_, other->object_similarity_min_contd_inliers_);
  swap(box_similarity_max_scale_, other->box_similarity_max_scale_);
  swap(box_similarity_max_rotation_, other->box_similarity_max_rotation_);
  swap(quad_homography_max_scale_, other->quad_homography_max_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackStepOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_getter, &descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto_once,
      file_level_metadata_mediapipe_2futil_2ftracking_2ftracking_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::MotionBoxState_Quad* Arena::CreateMaybeMessage< ::mediapipe::MotionBoxState_Quad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionBoxState_Quad >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MotionBoxState* Arena::CreateMaybeMessage< ::mediapipe::MotionBoxState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionBoxState >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::MotionBoxInternalState* Arena::CreateMaybeMessage< ::mediapipe::MotionBoxInternalState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::MotionBoxInternalState >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackStepOptions_IrlsInitialization* Arena::CreateMaybeMessage< ::mediapipe::TrackStepOptions_IrlsInitialization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackStepOptions_IrlsInitialization >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* Arena::CreateMaybeMessage< ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackStepOptions_CameraIntrinsics* Arena::CreateMaybeMessage< ::mediapipe::TrackStepOptions_CameraIntrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackStepOptions_CameraIntrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::TrackStepOptions* Arena::CreateMaybeMessage< ::mediapipe::TrackStepOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::TrackStepOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <x/google/protobuf/port_undef.inc>
