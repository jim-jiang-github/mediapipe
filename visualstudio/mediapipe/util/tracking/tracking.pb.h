// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/tracking/tracking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftracking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftracking_2eproto

#include <limits>
#include <string>

#include <x/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <x/google/protobuf/port_undef.inc>
#include <x/google/protobuf/io/coded_stream.h>
#include <x/google/protobuf/arena.h>
#include <x/google/protobuf/arenastring.h>
#include <x/google/protobuf/generated_message_table_driven.h>
#include <x/google/protobuf/generated_message_util.h>
#include <x/google/protobuf/metadata_lite.h>
#include <x/google/protobuf/generated_message_reflection.h>
#include <x/google/protobuf/message.h>
#include <x/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <x/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <x/google/protobuf/generated_enum_reflection.h>
#include <x/google/protobuf/unknown_field_set.h>
#include "mediapipe/util/tracking/motion_models.pb.h"
// @@protoc_insertion_point(includes)
#include <x/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2ftracking_2ftracking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2ftracking_2ftracking_2eproto;
namespace mediapipe {
class MotionBoxInternalState;
struct MotionBoxInternalStateDefaultTypeInternal;
extern MotionBoxInternalStateDefaultTypeInternal _MotionBoxInternalState_default_instance_;
class MotionBoxState;
struct MotionBoxStateDefaultTypeInternal;
extern MotionBoxStateDefaultTypeInternal _MotionBoxState_default_instance_;
class MotionBoxState_Quad;
struct MotionBoxState_QuadDefaultTypeInternal;
extern MotionBoxState_QuadDefaultTypeInternal _MotionBoxState_Quad_default_instance_;
class TrackStepOptions;
struct TrackStepOptionsDefaultTypeInternal;
extern TrackStepOptionsDefaultTypeInternal _TrackStepOptions_default_instance_;
class TrackStepOptions_CameraIntrinsics;
struct TrackStepOptions_CameraIntrinsicsDefaultTypeInternal;
extern TrackStepOptions_CameraIntrinsicsDefaultTypeInternal _TrackStepOptions_CameraIntrinsics_default_instance_;
class TrackStepOptions_CancelTrackingWithOcclusionOptions;
struct TrackStepOptions_CancelTrackingWithOcclusionOptionsDefaultTypeInternal;
extern TrackStepOptions_CancelTrackingWithOcclusionOptionsDefaultTypeInternal _TrackStepOptions_CancelTrackingWithOcclusionOptions_default_instance_;
class TrackStepOptions_IrlsInitialization;
struct TrackStepOptions_IrlsInitializationDefaultTypeInternal;
extern TrackStepOptions_IrlsInitializationDefaultTypeInternal _TrackStepOptions_IrlsInitialization_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::MotionBoxInternalState* Arena::CreateMaybeMessage<::mediapipe::MotionBoxInternalState>(Arena*);
template<> ::mediapipe::MotionBoxState* Arena::CreateMaybeMessage<::mediapipe::MotionBoxState>(Arena*);
template<> ::mediapipe::MotionBoxState_Quad* Arena::CreateMaybeMessage<::mediapipe::MotionBoxState_Quad>(Arena*);
template<> ::mediapipe::TrackStepOptions* Arena::CreateMaybeMessage<::mediapipe::TrackStepOptions>(Arena*);
template<> ::mediapipe::TrackStepOptions_CameraIntrinsics* Arena::CreateMaybeMessage<::mediapipe::TrackStepOptions_CameraIntrinsics>(Arena*);
template<> ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* Arena::CreateMaybeMessage<::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions>(Arena*);
template<> ::mediapipe::TrackStepOptions_IrlsInitialization* Arena::CreateMaybeMessage<::mediapipe::TrackStepOptions_IrlsInitialization>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum MotionBoxState_TrackStatus : int {
  MotionBoxState_TrackStatus_BOX_UNTRACKED = 0,
  MotionBoxState_TrackStatus_BOX_EMPTY = 1,
  MotionBoxState_TrackStatus_BOX_NO_FEATURES = 2,
  MotionBoxState_TrackStatus_BOX_TRACKED = 3,
  MotionBoxState_TrackStatus_BOX_DUPLICATED = 4,
  MotionBoxState_TrackStatus_BOX_TRACKED_OUT_OF_BOUND = 5
};
bool MotionBoxState_TrackStatus_IsValid(int value);
constexpr MotionBoxState_TrackStatus MotionBoxState_TrackStatus_TrackStatus_MIN = MotionBoxState_TrackStatus_BOX_UNTRACKED;
constexpr MotionBoxState_TrackStatus MotionBoxState_TrackStatus_TrackStatus_MAX = MotionBoxState_TrackStatus_BOX_TRACKED_OUT_OF_BOUND;
constexpr int MotionBoxState_TrackStatus_TrackStatus_ARRAYSIZE = MotionBoxState_TrackStatus_TrackStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionBoxState_TrackStatus_descriptor();
template<typename T>
inline const std::string& MotionBoxState_TrackStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionBoxState_TrackStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionBoxState_TrackStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionBoxState_TrackStatus_descriptor(), enum_t_value);
}
inline bool MotionBoxState_TrackStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionBoxState_TrackStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionBoxState_TrackStatus>(
    MotionBoxState_TrackStatus_descriptor(), name, value);
}
enum TrackStepOptions_TrackingDegrees : int {
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_TRANSLATION = 0,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_SCALE = 1,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_ROTATION = 2,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_ROTATION_SCALE = 3,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_PERSPECTIVE = 4,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_SCALE = 5,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_ROTATION = 6,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_ROTATION_SCALE = 7,
  TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_PERSPECTIVE = 8
};
bool TrackStepOptions_TrackingDegrees_IsValid(int value);
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions_TrackingDegrees_TrackingDegrees_MIN = TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_TRANSLATION;
constexpr TrackStepOptions_TrackingDegrees TrackStepOptions_TrackingDegrees_TrackingDegrees_MAX = TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_PERSPECTIVE;
constexpr int TrackStepOptions_TrackingDegrees_TrackingDegrees_ARRAYSIZE = TrackStepOptions_TrackingDegrees_TrackingDegrees_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackStepOptions_TrackingDegrees_descriptor();
template<typename T>
inline const std::string& TrackStepOptions_TrackingDegrees_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackStepOptions_TrackingDegrees>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackStepOptions_TrackingDegrees_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackStepOptions_TrackingDegrees_descriptor(), enum_t_value);
}
inline bool TrackStepOptions_TrackingDegrees_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackStepOptions_TrackingDegrees* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackStepOptions_TrackingDegrees>(
    TrackStepOptions_TrackingDegrees_descriptor(), name, value);
}
// ===================================================================

class MotionBoxState_Quad PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionBoxState.Quad) */ {
 public:
  inline MotionBoxState_Quad() : MotionBoxState_Quad(nullptr) {}
  ~MotionBoxState_Quad() override;
  explicit constexpr MotionBoxState_Quad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionBoxState_Quad(const MotionBoxState_Quad& from);
  MotionBoxState_Quad(MotionBoxState_Quad&& from) noexcept
    : MotionBoxState_Quad() {
    *this = ::std::move(from);
  }

  inline MotionBoxState_Quad& operator=(const MotionBoxState_Quad& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionBoxState_Quad& operator=(MotionBoxState_Quad&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionBoxState_Quad& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionBoxState_Quad* internal_default_instance() {
    return reinterpret_cast<const MotionBoxState_Quad*>(
               &_MotionBoxState_Quad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MotionBoxState_Quad& a, MotionBoxState_Quad& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionBoxState_Quad* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionBoxState_Quad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionBoxState_Quad* New() const final {
    return CreateMaybeMessage<MotionBoxState_Quad>(nullptr);
  }

  MotionBoxState_Quad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionBoxState_Quad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionBoxState_Quad& from);
  void MergeFrom(const MotionBoxState_Quad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionBoxState_Quad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionBoxState.Quad";
  }
  protected:
  explicit MotionBoxState_Quad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated float vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  private:
  float _internal_vertices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertices() const;
  void _internal_add_vertices(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertices();
  public:
  float vertices(int index) const;
  void set_vertices(int index, float value);
  void add_vertices(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertices();

  // @@protoc_insertion_point(class_scope:mediapipe.MotionBoxState.Quad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto;
};
// -------------------------------------------------------------------

class MotionBoxState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionBoxState) */ {
 public:
  inline MotionBoxState() : MotionBoxState(nullptr) {}
  ~MotionBoxState() override;
  explicit constexpr MotionBoxState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionBoxState(const MotionBoxState& from);
  MotionBoxState(MotionBoxState&& from) noexcept
    : MotionBoxState() {
    *this = ::std::move(from);
  }

  inline MotionBoxState& operator=(const MotionBoxState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionBoxState& operator=(MotionBoxState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionBoxState& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionBoxState* internal_default_instance() {
    return reinterpret_cast<const MotionBoxState*>(
               &_MotionBoxState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MotionBoxState& a, MotionBoxState& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionBoxState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionBoxState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionBoxState* New() const final {
    return CreateMaybeMessage<MotionBoxState>(nullptr);
  }

  MotionBoxState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionBoxState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionBoxState& from);
  void MergeFrom(const MotionBoxState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionBoxState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionBoxState";
  }
  protected:
  explicit MotionBoxState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MotionBoxState_Quad Quad;

  typedef MotionBoxState_TrackStatus TrackStatus;
  static constexpr TrackStatus BOX_UNTRACKED =
    MotionBoxState_TrackStatus_BOX_UNTRACKED;
  static constexpr TrackStatus BOX_EMPTY =
    MotionBoxState_TrackStatus_BOX_EMPTY;
  static constexpr TrackStatus BOX_NO_FEATURES =
    MotionBoxState_TrackStatus_BOX_NO_FEATURES;
  static constexpr TrackStatus BOX_TRACKED =
    MotionBoxState_TrackStatus_BOX_TRACKED;
  static constexpr TrackStatus BOX_DUPLICATED =
    MotionBoxState_TrackStatus_BOX_DUPLICATED;
  static constexpr TrackStatus BOX_TRACKED_OUT_OF_BOUND =
    MotionBoxState_TrackStatus_BOX_TRACKED_OUT_OF_BOUND;
  static inline bool TrackStatus_IsValid(int value) {
    return MotionBoxState_TrackStatus_IsValid(value);
  }
  static constexpr TrackStatus TrackStatus_MIN =
    MotionBoxState_TrackStatus_TrackStatus_MIN;
  static constexpr TrackStatus TrackStatus_MAX =
    MotionBoxState_TrackStatus_TrackStatus_MAX;
  static constexpr int TrackStatus_ARRAYSIZE =
    MotionBoxState_TrackStatus_TrackStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrackStatus_descriptor() {
    return MotionBoxState_TrackStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& TrackStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrackStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrackStatus_Name.");
    return MotionBoxState_TrackStatus_Name(enum_t_value);
  }
  static inline bool TrackStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrackStatus* value) {
    return MotionBoxState_TrackStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialPriorFieldNumber = 12,
    kSpatialConfidenceFieldNumber = 13,
    kInlierIdsFieldNumber = 26,
    kInlierLengthFieldNumber = 27,
    kOutlierIdsFieldNumber = 28,
    kInlierIdMatchPosFieldNumber = 31,
    kOutlierIdMatchPosFieldNumber = 32,
    kInternalFieldNumber = 29,
    kQuadFieldNumber = 34,
    kPnpHomographyFieldNumber = 36,
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kDxFieldNumber = 7,
    kDyFieldNumber = 8,
    kPriorWeightFieldNumber = 9,
    kTrackStatusFieldNumber = 10,
    kPriorDiffFieldNumber = 14,
    kMotionDisparityFieldNumber = 15,
    kBackgroundDiscriminationFieldNumber = 16,
    kKineticEnergyFieldNumber = 17,
    kInlierCenterXFieldNumber = 18,
    kInlierCenterYFieldNumber = 19,
    kInlierWidthFieldNumber = 22,
    kInlierHeightFieldNumber = 23,
    kInlierSumFieldNumber = 24,
    kInlierRatioFieldNumber = 25,
    kRotationFieldNumber = 30,
    kTrackingConfidenceFieldNumber = 33,
    kAspectRatioFieldNumber = 35,
    kRequestGroupingFieldNumber = 37,
    kScaleFieldNumber = 5,
    kSpatialPriorGridSizeFieldNumber = 11,
  };
  // repeated float spatial_prior = 12 [packed = true];
  int spatial_prior_size() const;
  private:
  int _internal_spatial_prior_size() const;
  public:
  void clear_spatial_prior();
  private:
  float _internal_spatial_prior(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_spatial_prior() const;
  void _internal_add_spatial_prior(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_spatial_prior();
  public:
  float spatial_prior(int index) const;
  void set_spatial_prior(int index, float value);
  void add_spatial_prior(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      spatial_prior() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_spatial_prior();

  // repeated float spatial_confidence = 13 [packed = true];
  int spatial_confidence_size() const;
  private:
  int _internal_spatial_confidence_size() const;
  public:
  void clear_spatial_confidence();
  private:
  float _internal_spatial_confidence(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_spatial_confidence() const;
  void _internal_add_spatial_confidence(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_spatial_confidence();
  public:
  float spatial_confidence(int index) const;
  void set_spatial_confidence(int index, float value);
  void add_spatial_confidence(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      spatial_confidence() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_spatial_confidence();

  // repeated uint32 inlier_ids = 26 [packed = true];
  int inlier_ids_size() const;
  private:
  int _internal_inlier_ids_size() const;
  public:
  void clear_inlier_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inlier_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_inlier_ids() const;
  void _internal_add_inlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_inlier_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 inlier_ids(int index) const;
  void set_inlier_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_inlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      inlier_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_inlier_ids();

  // repeated uint32 inlier_length = 27 [packed = true];
  int inlier_length_size() const;
  private:
  int _internal_inlier_length_size() const;
  public:
  void clear_inlier_length();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inlier_length(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_inlier_length() const;
  void _internal_add_inlier_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_inlier_length();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 inlier_length(int index) const;
  void set_inlier_length(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_inlier_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      inlier_length() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_inlier_length();

  // repeated uint32 outlier_ids = 28 [packed = true];
  int outlier_ids_size() const;
  private:
  int _internal_outlier_ids_size() const;
  public:
  void clear_outlier_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outlier_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_outlier_ids() const;
  void _internal_add_outlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_outlier_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 outlier_ids(int index) const;
  void set_outlier_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_outlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      outlier_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_outlier_ids();

  // repeated uint32 inlier_id_match_pos = 31 [packed = true];
  int inlier_id_match_pos_size() const;
  private:
  int _internal_inlier_id_match_pos_size() const;
  public:
  void clear_inlier_id_match_pos();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inlier_id_match_pos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_inlier_id_match_pos() const;
  void _internal_add_inlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_inlier_id_match_pos();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 inlier_id_match_pos(int index) const;
  void set_inlier_id_match_pos(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_inlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      inlier_id_match_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_inlier_id_match_pos();

  // repeated uint32 outlier_id_match_pos = 32 [packed = true];
  int outlier_id_match_pos_size() const;
  private:
  int _internal_outlier_id_match_pos_size() const;
  public:
  void clear_outlier_id_match_pos();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outlier_id_match_pos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_outlier_id_match_pos() const;
  void _internal_add_outlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_outlier_id_match_pos();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 outlier_id_match_pos(int index) const;
  void set_outlier_id_match_pos(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_outlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      outlier_id_match_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_outlier_id_match_pos();

  // optional .mediapipe.MotionBoxInternalState internal = 29;
  bool has_internal() const;
  private:
  bool _internal_has_internal() const;
  public:
  void clear_internal();
  const ::mediapipe::MotionBoxInternalState& internal() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MotionBoxInternalState* release_internal();
  ::mediapipe::MotionBoxInternalState* mutable_internal();
  void set_allocated_internal(::mediapipe::MotionBoxInternalState* internal);
  private:
  const ::mediapipe::MotionBoxInternalState& _internal_internal() const;
  ::mediapipe::MotionBoxInternalState* _internal_mutable_internal();
  public:
  void unsafe_arena_set_allocated_internal(
      ::mediapipe::MotionBoxInternalState* internal);
  ::mediapipe::MotionBoxInternalState* unsafe_arena_release_internal();

  // optional .mediapipe.MotionBoxState.Quad quad = 34;
  bool has_quad() const;
  private:
  bool _internal_has_quad() const;
  public:
  void clear_quad();
  const ::mediapipe::MotionBoxState_Quad& quad() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::MotionBoxState_Quad* release_quad();
  ::mediapipe::MotionBoxState_Quad* mutable_quad();
  void set_allocated_quad(::mediapipe::MotionBoxState_Quad* quad);
  private:
  const ::mediapipe::MotionBoxState_Quad& _internal_quad() const;
  ::mediapipe::MotionBoxState_Quad* _internal_mutable_quad();
  public:
  void unsafe_arena_set_allocated_quad(
      ::mediapipe::MotionBoxState_Quad* quad);
  ::mediapipe::MotionBoxState_Quad* unsafe_arena_release_quad();

  // optional .mediapipe.Homography pnp_homography = 36;
  bool has_pnp_homography() const;
  private:
  bool _internal_has_pnp_homography() const;
  public:
  void clear_pnp_homography();
  const ::mediapipe::Homography& pnp_homography() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::Homography* release_pnp_homography();
  ::mediapipe::Homography* mutable_pnp_homography();
  void set_allocated_pnp_homography(::mediapipe::Homography* pnp_homography);
  private:
  const ::mediapipe::Homography& _internal_pnp_homography() const;
  ::mediapipe::Homography* _internal_mutable_pnp_homography();
  public:
  void unsafe_arena_set_allocated_pnp_homography(
      ::mediapipe::Homography* pnp_homography);
  ::mediapipe::Homography* unsafe_arena_release_pnp_homography();

  // optional float pos_x = 1;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // optional float pos_y = 2;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // optional float width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // optional float dx = 7;
  bool has_dx() const;
  private:
  bool _internal_has_dx() const;
  public:
  void clear_dx();
  float dx() const;
  void set_dx(float value);
  private:
  float _internal_dx() const;
  void _internal_set_dx(float value);
  public:

  // optional float dy = 8;
  bool has_dy() const;
  private:
  bool _internal_has_dy() const;
  public:
  void clear_dy();
  float dy() const;
  void set_dy(float value);
  private:
  float _internal_dy() const;
  void _internal_set_dy(float value);
  public:

  // optional float prior_weight = 9;
  bool has_prior_weight() const;
  private:
  bool _internal_has_prior_weight() const;
  public:
  void clear_prior_weight();
  float prior_weight() const;
  void set_prior_weight(float value);
  private:
  float _internal_prior_weight() const;
  void _internal_set_prior_weight(float value);
  public:

  // optional .mediapipe.MotionBoxState.TrackStatus track_status = 10 [default = BOX_UNTRACKED];
  bool has_track_status() const;
  private:
  bool _internal_has_track_status() const;
  public:
  void clear_track_status();
  ::mediapipe::MotionBoxState_TrackStatus track_status() const;
  void set_track_status(::mediapipe::MotionBoxState_TrackStatus value);
  private:
  ::mediapipe::MotionBoxState_TrackStatus _internal_track_status() const;
  void _internal_set_track_status(::mediapipe::MotionBoxState_TrackStatus value);
  public:

  // optional float prior_diff = 14;
  bool has_prior_diff() const;
  private:
  bool _internal_has_prior_diff() const;
  public:
  void clear_prior_diff();
  float prior_diff() const;
  void set_prior_diff(float value);
  private:
  float _internal_prior_diff() const;
  void _internal_set_prior_diff(float value);
  public:

  // optional float motion_disparity = 15;
  bool has_motion_disparity() const;
  private:
  bool _internal_has_motion_disparity() const;
  public:
  void clear_motion_disparity();
  float motion_disparity() const;
  void set_motion_disparity(float value);
  private:
  float _internal_motion_disparity() const;
  void _internal_set_motion_disparity(float value);
  public:

  // optional float background_discrimination = 16;
  bool has_background_discrimination() const;
  private:
  bool _internal_has_background_discrimination() const;
  public:
  void clear_background_discrimination();
  float background_discrimination() const;
  void set_background_discrimination(float value);
  private:
  float _internal_background_discrimination() const;
  void _internal_set_background_discrimination(float value);
  public:

  // optional float kinetic_energy = 17;
  bool has_kinetic_energy() const;
  private:
  bool _internal_has_kinetic_energy() const;
  public:
  void clear_kinetic_energy();
  float kinetic_energy() const;
  void set_kinetic_energy(float value);
  private:
  float _internal_kinetic_energy() const;
  void _internal_set_kinetic_energy(float value);
  public:

  // optional float inlier_center_x = 18;
  bool has_inlier_center_x() const;
  private:
  bool _internal_has_inlier_center_x() const;
  public:
  void clear_inlier_center_x();
  float inlier_center_x() const;
  void set_inlier_center_x(float value);
  private:
  float _internal_inlier_center_x() const;
  void _internal_set_inlier_center_x(float value);
  public:

  // optional float inlier_center_y = 19;
  bool has_inlier_center_y() const;
  private:
  bool _internal_has_inlier_center_y() const;
  public:
  void clear_inlier_center_y();
  float inlier_center_y() const;
  void set_inlier_center_y(float value);
  private:
  float _internal_inlier_center_y() const;
  void _internal_set_inlier_center_y(float value);
  public:

  // optional float inlier_width = 22;
  bool has_inlier_width() const;
  private:
  bool _internal_has_inlier_width() const;
  public:
  void clear_inlier_width();
  float inlier_width() const;
  void set_inlier_width(float value);
  private:
  float _internal_inlier_width() const;
  void _internal_set_inlier_width(float value);
  public:

  // optional float inlier_height = 23;
  bool has_inlier_height() const;
  private:
  bool _internal_has_inlier_height() const;
  public:
  void clear_inlier_height();
  float inlier_height() const;
  void set_inlier_height(float value);
  private:
  float _internal_inlier_height() const;
  void _internal_set_inlier_height(float value);
  public:

  // optional float inlier_sum = 24;
  bool has_inlier_sum() const;
  private:
  bool _internal_has_inlier_sum() const;
  public:
  void clear_inlier_sum();
  float inlier_sum() const;
  void set_inlier_sum(float value);
  private:
  float _internal_inlier_sum() const;
  void _internal_set_inlier_sum(float value);
  public:

  // optional float inlier_ratio = 25;
  bool has_inlier_ratio() const;
  private:
  bool _internal_has_inlier_ratio() const;
  public:
  void clear_inlier_ratio();
  float inlier_ratio() const;
  void set_inlier_ratio(float value);
  private:
  float _internal_inlier_ratio() const;
  void _internal_set_inlier_ratio(float value);
  public:

  // optional float rotation = 30 [default = 0];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // optional float tracking_confidence = 33;
  bool has_tracking_confidence() const;
  private:
  bool _internal_has_tracking_confidence() const;
  public:
  void clear_tracking_confidence();
  float tracking_confidence() const;
  void set_tracking_confidence(float value);
  private:
  float _internal_tracking_confidence() const;
  void _internal_set_tracking_confidence(float value);
  public:

  // optional float aspect_ratio = 35;
  bool has_aspect_ratio() const;
  private:
  bool _internal_has_aspect_ratio() const;
  public:
  void clear_aspect_ratio();
  float aspect_ratio() const;
  void set_aspect_ratio(float value);
  private:
  float _internal_aspect_ratio() const;
  void _internal_set_aspect_ratio(float value);
  public:

  // optional bool request_grouping = 37 [default = false];
  bool has_request_grouping() const;
  private:
  bool _internal_has_request_grouping() const;
  public:
  void clear_request_grouping();
  bool request_grouping() const;
  void set_request_grouping(bool value);
  private:
  bool _internal_request_grouping() const;
  void _internal_set_request_grouping(bool value);
  public:

  // optional float scale = 5 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional int32 spatial_prior_grid_size = 11 [default = 10];
  bool has_spatial_prior_grid_size() const;
  private:
  bool _internal_has_spatial_prior_grid_size() const;
  public:
  void clear_spatial_prior_grid_size();
  ::PROTOBUF_NAMESPACE_ID::int32 spatial_prior_grid_size() const;
  void set_spatial_prior_grid_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spatial_prior_grid_size() const;
  void _internal_set_spatial_prior_grid_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.MotionBoxState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > spatial_prior_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > spatial_confidence_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > inlier_ids_;
  mutable std::atomic<int> _inlier_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > inlier_length_;
  mutable std::atomic<int> _inlier_length_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > outlier_ids_;
  mutable std::atomic<int> _outlier_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > inlier_id_match_pos_;
  mutable std::atomic<int> _inlier_id_match_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > outlier_id_match_pos_;
  mutable std::atomic<int> _outlier_id_match_pos_cached_byte_size_;
  ::mediapipe::MotionBoxInternalState* internal_;
  ::mediapipe::MotionBoxState_Quad* quad_;
  ::mediapipe::Homography* pnp_homography_;
  float pos_x_;
  float pos_y_;
  float width_;
  float height_;
  float dx_;
  float dy_;
  float prior_weight_;
  int track_status_;
  float prior_diff_;
  float motion_disparity_;
  float background_discrimination_;
  float kinetic_energy_;
  float inlier_center_x_;
  float inlier_center_y_;
  float inlier_width_;
  float inlier_height_;
  float inlier_sum_;
  float inlier_ratio_;
  float rotation_;
  float tracking_confidence_;
  float aspect_ratio_;
  bool request_grouping_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 spatial_prior_grid_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto;
};
// -------------------------------------------------------------------

class MotionBoxInternalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.MotionBoxInternalState) */ {
 public:
  inline MotionBoxInternalState() : MotionBoxInternalState(nullptr) {}
  ~MotionBoxInternalState() override;
  explicit constexpr MotionBoxInternalState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionBoxInternalState(const MotionBoxInternalState& from);
  MotionBoxInternalState(MotionBoxInternalState&& from) noexcept
    : MotionBoxInternalState() {
    *this = ::std::move(from);
  }

  inline MotionBoxInternalState& operator=(const MotionBoxInternalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionBoxInternalState& operator=(MotionBoxInternalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionBoxInternalState& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionBoxInternalState* internal_default_instance() {
    return reinterpret_cast<const MotionBoxInternalState*>(
               &_MotionBoxInternalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotionBoxInternalState& a, MotionBoxInternalState& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionBoxInternalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionBoxInternalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionBoxInternalState* New() const final {
    return CreateMaybeMessage<MotionBoxInternalState>(nullptr);
  }

  MotionBoxInternalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionBoxInternalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionBoxInternalState& from);
  void MergeFrom(const MotionBoxInternalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionBoxInternalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.MotionBoxInternalState";
  }
  protected:
  explicit MotionBoxInternalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kDxFieldNumber = 3,
    kDyFieldNumber = 4,
    kCameraDxFieldNumber = 5,
    kCameraDyFieldNumber = 6,
    kTrackIdFieldNumber = 7,
    kInlierScoreFieldNumber = 8,
  };
  // repeated float pos_x = 1 [packed = true];
  int pos_x_size() const;
  private:
  int _internal_pos_x_size() const;
  public:
  void clear_pos_x();
  private:
  float _internal_pos_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pos_x() const;
  void _internal_add_pos_x(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pos_x();
  public:
  float pos_x(int index) const;
  void set_pos_x(int index, float value);
  void add_pos_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pos_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pos_x();

  // repeated float pos_y = 2 [packed = true];
  int pos_y_size() const;
  private:
  int _internal_pos_y_size() const;
  public:
  void clear_pos_y();
  private:
  float _internal_pos_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pos_y() const;
  void _internal_add_pos_y(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pos_y();
  public:
  float pos_y(int index) const;
  void set_pos_y(int index, float value);
  void add_pos_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pos_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pos_y();

  // repeated float dx = 3 [packed = true];
  int dx_size() const;
  private:
  int _internal_dx_size() const;
  public:
  void clear_dx();
  private:
  float _internal_dx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_dx() const;
  void _internal_add_dx(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_dx();
  public:
  float dx(int index) const;
  void set_dx(int index, float value);
  void add_dx(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      dx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_dx();

  // repeated float dy = 4 [packed = true];
  int dy_size() const;
  private:
  int _internal_dy_size() const;
  public:
  void clear_dy();
  private:
  float _internal_dy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_dy() const;
  void _internal_add_dy(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_dy();
  public:
  float dy(int index) const;
  void set_dy(int index, float value);
  void add_dy(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      dy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_dy();

  // repeated float camera_dx = 5 [packed = true];
  int camera_dx_size() const;
  private:
  int _internal_camera_dx_size() const;
  public:
  void clear_camera_dx();
  private:
  float _internal_camera_dx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_camera_dx() const;
  void _internal_add_camera_dx(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_camera_dx();
  public:
  float camera_dx(int index) const;
  void set_camera_dx(int index, float value);
  void add_camera_dx(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      camera_dx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_camera_dx();

  // repeated float camera_dy = 6 [packed = true];
  int camera_dy_size() const;
  private:
  int _internal_camera_dy_size() const;
  public:
  void clear_camera_dy();
  private:
  float _internal_camera_dy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_camera_dy() const;
  void _internal_add_camera_dy(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_camera_dy();
  public:
  float camera_dy(int index) const;
  void set_camera_dy(int index, float value);
  void add_camera_dy(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      camera_dy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_camera_dy();

  // repeated int32 track_id = 7 [packed = true];
  int track_id_size() const;
  private:
  int _internal_track_id_size() const;
  public:
  void clear_track_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_track_id() const;
  void _internal_add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_track_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 track_id(int index) const;
  void set_track_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      track_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_track_id();

  // repeated float inlier_score = 8 [packed = true];
  int inlier_score_size() const;
  private:
  int _internal_inlier_score_size() const;
  public:
  void clear_inlier_score();
  private:
  float _internal_inlier_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_inlier_score() const;
  void _internal_add_inlier_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_inlier_score();
  public:
  float inlier_score(int index) const;
  void set_inlier_score(int index, float value);
  void add_inlier_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      inlier_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_inlier_score();

  // @@protoc_insertion_point(class_scope:mediapipe.MotionBoxInternalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pos_x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pos_y_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > dx_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > dy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > camera_dx_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > camera_dy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > track_id_;
  mutable std::atomic<int> _track_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > inlier_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto;
};
// -------------------------------------------------------------------

class TrackStepOptions_IrlsInitialization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackStepOptions.IrlsInitialization) */ {
 public:
  inline TrackStepOptions_IrlsInitialization() : TrackStepOptions_IrlsInitialization(nullptr) {}
  ~TrackStepOptions_IrlsInitialization() override;
  explicit constexpr TrackStepOptions_IrlsInitialization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackStepOptions_IrlsInitialization(const TrackStepOptions_IrlsInitialization& from);
  TrackStepOptions_IrlsInitialization(TrackStepOptions_IrlsInitialization&& from) noexcept
    : TrackStepOptions_IrlsInitialization() {
    *this = ::std::move(from);
  }

  inline TrackStepOptions_IrlsInitialization& operator=(const TrackStepOptions_IrlsInitialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackStepOptions_IrlsInitialization& operator=(TrackStepOptions_IrlsInitialization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackStepOptions_IrlsInitialization& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackStepOptions_IrlsInitialization* internal_default_instance() {
    return reinterpret_cast<const TrackStepOptions_IrlsInitialization*>(
               &_TrackStepOptions_IrlsInitialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackStepOptions_IrlsInitialization& a, TrackStepOptions_IrlsInitialization& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackStepOptions_IrlsInitialization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackStepOptions_IrlsInitialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackStepOptions_IrlsInitialization* New() const final {
    return CreateMaybeMessage<TrackStepOptions_IrlsInitialization>(nullptr);
  }

  TrackStepOptions_IrlsInitialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackStepOptions_IrlsInitialization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackStepOptions_IrlsInitialization& from);
  void MergeFrom(const TrackStepOptions_IrlsInitialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackStepOptions_IrlsInitialization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackStepOptions.IrlsInitialization";
  }
  protected:
  explicit TrackStepOptions_IrlsInitialization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivatedFieldNumber = 1,
    kRoundsFieldNumber = 2,
    kCutoffFieldNumber = 3,
  };
  // optional bool activated = 1 [default = false];
  bool has_activated() const;
  private:
  bool _internal_has_activated() const;
  public:
  void clear_activated();
  bool activated() const;
  void set_activated(bool value);
  private:
  bool _internal_activated() const;
  void _internal_set_activated(bool value);
  public:

  // optional int32 rounds = 2 [default = 50];
  bool has_rounds() const;
  private:
  bool _internal_has_rounds() const;
  public:
  void clear_rounds();
  ::PROTOBUF_NAMESPACE_ID::int32 rounds() const;
  void set_rounds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rounds() const;
  void _internal_set_rounds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float cutoff = 3 [default = 0.005];
  bool has_cutoff() const;
  private:
  bool _internal_has_cutoff() const;
  public:
  void clear_cutoff();
  float cutoff() const;
  void set_cutoff(float value);
  private:
  float _internal_cutoff() const;
  void _internal_set_cutoff(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackStepOptions.IrlsInitialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool activated_;
  ::PROTOBUF_NAMESPACE_ID::int32 rounds_;
  float cutoff_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto;
};
// -------------------------------------------------------------------

class TrackStepOptions_CancelTrackingWithOcclusionOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions) */ {
 public:
  inline TrackStepOptions_CancelTrackingWithOcclusionOptions() : TrackStepOptions_CancelTrackingWithOcclusionOptions(nullptr) {}
  ~TrackStepOptions_CancelTrackingWithOcclusionOptions() override;
  explicit constexpr TrackStepOptions_CancelTrackingWithOcclusionOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackStepOptions_CancelTrackingWithOcclusionOptions(const TrackStepOptions_CancelTrackingWithOcclusionOptions& from);
  TrackStepOptions_CancelTrackingWithOcclusionOptions(TrackStepOptions_CancelTrackingWithOcclusionOptions&& from) noexcept
    : TrackStepOptions_CancelTrackingWithOcclusionOptions() {
    *this = ::std::move(from);
  }

  inline TrackStepOptions_CancelTrackingWithOcclusionOptions& operator=(const TrackStepOptions_CancelTrackingWithOcclusionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackStepOptions_CancelTrackingWithOcclusionOptions& operator=(TrackStepOptions_CancelTrackingWithOcclusionOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackStepOptions_CancelTrackingWithOcclusionOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackStepOptions_CancelTrackingWithOcclusionOptions* internal_default_instance() {
    return reinterpret_cast<const TrackStepOptions_CancelTrackingWithOcclusionOptions*>(
               &_TrackStepOptions_CancelTrackingWithOcclusionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrackStepOptions_CancelTrackingWithOcclusionOptions& a, TrackStepOptions_CancelTrackingWithOcclusionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackStepOptions_CancelTrackingWithOcclusionOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackStepOptions_CancelTrackingWithOcclusionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackStepOptions_CancelTrackingWithOcclusionOptions* New() const final {
    return CreateMaybeMessage<TrackStepOptions_CancelTrackingWithOcclusionOptions>(nullptr);
  }

  TrackStepOptions_CancelTrackingWithOcclusionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackStepOptions_CancelTrackingWithOcclusionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackStepOptions_CancelTrackingWithOcclusionOptions& from);
  void MergeFrom(const TrackStepOptions_CancelTrackingWithOcclusionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackStepOptions_CancelTrackingWithOcclusionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions";
  }
  protected:
  explicit TrackStepOptions_CancelTrackingWithOcclusionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivatedFieldNumber = 1,
    kMinMotionContinuityFieldNumber = 2,
    kMinInlierRatioFieldNumber = 3,
  };
  // optional bool activated = 1 [default = false];
  bool has_activated() const;
  private:
  bool _internal_has_activated() const;
  public:
  void clear_activated();
  bool activated() const;
  void set_activated(bool value);
  private:
  bool _internal_activated() const;
  void _internal_set_activated(bool value);
  public:

  // optional float min_motion_continuity = 2 [default = 0.4];
  bool has_min_motion_continuity() const;
  private:
  bool _internal_has_min_motion_continuity() const;
  public:
  void clear_min_motion_continuity();
  float min_motion_continuity() const;
  void set_min_motion_continuity(float value);
  private:
  float _internal_min_motion_continuity() const;
  void _internal_set_min_motion_continuity(float value);
  public:

  // optional float min_inlier_ratio = 3 [default = 0.1];
  bool has_min_inlier_ratio() const;
  private:
  bool _internal_has_min_inlier_ratio() const;
  public:
  void clear_min_inlier_ratio();
  float min_inlier_ratio() const;
  void set_min_inlier_ratio(float value);
  private:
  float _internal_min_inlier_ratio() const;
  void _internal_set_min_inlier_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool activated_;
  float min_motion_continuity_;
  float min_inlier_ratio_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto;
};
// -------------------------------------------------------------------

class TrackStepOptions_CameraIntrinsics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackStepOptions.CameraIntrinsics) */ {
 public:
  inline TrackStepOptions_CameraIntrinsics() : TrackStepOptions_CameraIntrinsics(nullptr) {}
  ~TrackStepOptions_CameraIntrinsics() override;
  explicit constexpr TrackStepOptions_CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackStepOptions_CameraIntrinsics(const TrackStepOptions_CameraIntrinsics& from);
  TrackStepOptions_CameraIntrinsics(TrackStepOptions_CameraIntrinsics&& from) noexcept
    : TrackStepOptions_CameraIntrinsics() {
    *this = ::std::move(from);
  }

  inline TrackStepOptions_CameraIntrinsics& operator=(const TrackStepOptions_CameraIntrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackStepOptions_CameraIntrinsics& operator=(TrackStepOptions_CameraIntrinsics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackStepOptions_CameraIntrinsics& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackStepOptions_CameraIntrinsics* internal_default_instance() {
    return reinterpret_cast<const TrackStepOptions_CameraIntrinsics*>(
               &_TrackStepOptions_CameraIntrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrackStepOptions_CameraIntrinsics& a, TrackStepOptions_CameraIntrinsics& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackStepOptions_CameraIntrinsics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackStepOptions_CameraIntrinsics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackStepOptions_CameraIntrinsics* New() const final {
    return CreateMaybeMessage<TrackStepOptions_CameraIntrinsics>(nullptr);
  }

  TrackStepOptions_CameraIntrinsics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackStepOptions_CameraIntrinsics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackStepOptions_CameraIntrinsics& from);
  void MergeFrom(const TrackStepOptions_CameraIntrinsics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackStepOptions_CameraIntrinsics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackStepOptions.CameraIntrinsics";
  }
  protected:
  explicit TrackStepOptions_CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxFieldNumber = 1,
    kFyFieldNumber = 2,
    kCxFieldNumber = 3,
    kCyFieldNumber = 4,
    kK0FieldNumber = 5,
    kK1FieldNumber = 6,
    kK2FieldNumber = 7,
    kWFieldNumber = 8,
    kHFieldNumber = 9,
  };
  // optional float fx = 1;
  bool has_fx() const;
  private:
  bool _internal_has_fx() const;
  public:
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // optional float fy = 2;
  bool has_fy() const;
  private:
  bool _internal_has_fy() const;
  public:
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // optional float cx = 3;
  bool has_cx() const;
  private:
  bool _internal_has_cx() const;
  public:
  void clear_cx();
  float cx() const;
  void set_cx(float value);
  private:
  float _internal_cx() const;
  void _internal_set_cx(float value);
  public:

  // optional float cy = 4;
  bool has_cy() const;
  private:
  bool _internal_has_cy() const;
  public:
  void clear_cy();
  float cy() const;
  void set_cy(float value);
  private:
  float _internal_cy() const;
  void _internal_set_cy(float value);
  public:

  // optional float k0 = 5;
  bool has_k0() const;
  private:
  bool _internal_has_k0() const;
  public:
  void clear_k0();
  float k0() const;
  void set_k0(float value);
  private:
  float _internal_k0() const;
  void _internal_set_k0(float value);
  public:

  // optional float k1 = 6;
  bool has_k1() const;
  private:
  bool _internal_has_k1() const;
  public:
  void clear_k1();
  float k1() const;
  void set_k1(float value);
  private:
  float _internal_k1() const;
  void _internal_set_k1(float value);
  public:

  // optional float k2 = 7;
  bool has_k2() const;
  private:
  bool _internal_has_k2() const;
  public:
  void clear_k2();
  float k2() const;
  void set_k2(float value);
  private:
  float _internal_k2() const;
  void _internal_set_k2(float value);
  public:

  // optional int32 w = 8;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 h = 9;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackStepOptions.CameraIntrinsics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float fx_;
  float fy_;
  float cx_;
  float cy_;
  float k0_;
  float k1_;
  float k2_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto;
};
// -------------------------------------------------------------------

class TrackStepOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TrackStepOptions) */ {
 public:
  inline TrackStepOptions() : TrackStepOptions(nullptr) {}
  ~TrackStepOptions() override;
  explicit constexpr TrackStepOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackStepOptions(const TrackStepOptions& from);
  TrackStepOptions(TrackStepOptions&& from) noexcept
    : TrackStepOptions() {
    *this = ::std::move(from);
  }

  inline TrackStepOptions& operator=(const TrackStepOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackStepOptions& operator=(TrackStepOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackStepOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackStepOptions* internal_default_instance() {
    return reinterpret_cast<const TrackStepOptions*>(
               &_TrackStepOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrackStepOptions& a, TrackStepOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackStepOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackStepOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackStepOptions* New() const final {
    return CreateMaybeMessage<TrackStepOptions>(nullptr);
  }

  TrackStepOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackStepOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackStepOptions& from);
  void MergeFrom(const TrackStepOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackStepOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TrackStepOptions";
  }
  protected:
  explicit TrackStepOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrackStepOptions_IrlsInitialization IrlsInitialization;
  typedef TrackStepOptions_CancelTrackingWithOcclusionOptions CancelTrackingWithOcclusionOptions;
  typedef TrackStepOptions_CameraIntrinsics CameraIntrinsics;

  typedef TrackStepOptions_TrackingDegrees TrackingDegrees;
  static constexpr TrackingDegrees TRACKING_DEGREE_TRANSLATION =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_TRANSLATION;
  static constexpr TrackingDegrees TRACKING_DEGREE_CAMERA_SCALE =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_SCALE;
  static constexpr TrackingDegrees TRACKING_DEGREE_CAMERA_ROTATION =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_ROTATION;
  static constexpr TrackingDegrees TRACKING_DEGREE_CAMERA_ROTATION_SCALE =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_ROTATION_SCALE;
  static constexpr TrackingDegrees TRACKING_DEGREE_CAMERA_PERSPECTIVE =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_CAMERA_PERSPECTIVE;
  static constexpr TrackingDegrees TRACKING_DEGREE_OBJECT_SCALE =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_SCALE;
  static constexpr TrackingDegrees TRACKING_DEGREE_OBJECT_ROTATION =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_ROTATION;
  static constexpr TrackingDegrees TRACKING_DEGREE_OBJECT_ROTATION_SCALE =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_ROTATION_SCALE;
  static constexpr TrackingDegrees TRACKING_DEGREE_OBJECT_PERSPECTIVE =
    TrackStepOptions_TrackingDegrees_TRACKING_DEGREE_OBJECT_PERSPECTIVE;
  static inline bool TrackingDegrees_IsValid(int value) {
    return TrackStepOptions_TrackingDegrees_IsValid(value);
  }
  static constexpr TrackingDegrees TrackingDegrees_MIN =
    TrackStepOptions_TrackingDegrees_TrackingDegrees_MIN;
  static constexpr TrackingDegrees TrackingDegrees_MAX =
    TrackStepOptions_TrackingDegrees_TrackingDegrees_MAX;
  static constexpr int TrackingDegrees_ARRAYSIZE =
    TrackStepOptions_TrackingDegrees_TrackingDegrees_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrackingDegrees_descriptor() {
    return TrackStepOptions_TrackingDegrees_descriptor();
  }
  template<typename T>
  static inline const std::string& TrackingDegrees_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrackingDegrees>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrackingDegrees_Name.");
    return TrackStepOptions_TrackingDegrees_Name(enum_t_value);
  }
  static inline bool TrackingDegrees_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrackingDegrees* value) {
    return TrackStepOptions_TrackingDegrees_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIrlsInitializationFieldNumber = 30,
    kCancelTrackingWithOcclusionOptionsFieldNumber = 34,
    kCameraIntrinsicsFieldNumber = 40,
    kTrackingDegreesFieldNumber = 28,
    kTrackObjectAndCameraFieldNumber = 32,
    kReturnInternalStateFieldNumber = 26,
    kComputeSpatialPriorFieldNumber = 27,
    kForcedPnpTrackingFieldNumber = 41,
    kQuadHomographyMaxRotationFieldNumber = 39,
    kIrlsIterationsFieldNumber = 1,
    kSpatialSigmaFieldNumber = 2,
    kMinMotionSigmaFieldNumber = 3,
    kRelativeMotionSigmaFieldNumber = 4,
    kMotionDisparityLowLevelFieldNumber = 6,
    kMotionDisparityHighLevelFieldNumber = 7,
    kDisparityDecayFieldNumber = 8,
    kMotionPriorWeightFieldNumber = 9,
    kBackgroundDiscriminationLowLevelFieldNumber = 10,
    kBackgroundDiscriminationHighLevelFieldNumber = 11,
    kInlierCenterRelativeDistanceFieldNumber = 12,
    kInlierSpringForceFieldNumber = 13,
    kKineticCenterRelativeDistanceFieldNumber = 14,
    kKineticSpringForceFieldNumber = 15,
    kVelocityUpdateWeightFieldNumber = 16,
    kMaxTrackFailuresFieldNumber = 17,
    kExpansionSizeFieldNumber = 18,
    kInlierLowWeightFieldNumber = 19,
    kInlierHighWeightFieldNumber = 20,
    kKineticSpringForceMinKineticEnergyFieldNumber = 21,
    kKineticEnergyDecayFieldNumber = 22,
    kPriorWeightIncreaseFieldNumber = 23,
    kLowKineticEnergyFieldNumber = 24,
    kHighKineticEnergyFieldNumber = 25,
    kUsePostEstimationWeightsForStateFieldNumber = 29,
    kStaticMotionTemporalRatioFieldNumber = 33,
    kObjectSimilarityMinContdInliersFieldNumber = 35,
    kBoxSimilarityMaxScaleFieldNumber = 36,
    kBoxSimilarityMaxRotationFieldNumber = 37,
    kQuadHomographyMaxScaleFieldNumber = 38,
  };
  // optional .mediapipe.TrackStepOptions.IrlsInitialization irls_initialization = 30;
  bool has_irls_initialization() const;
  private:
  bool _internal_has_irls_initialization() const;
  public:
  void clear_irls_initialization();
  const ::mediapipe::TrackStepOptions_IrlsInitialization& irls_initialization() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackStepOptions_IrlsInitialization* release_irls_initialization();
  ::mediapipe::TrackStepOptions_IrlsInitialization* mutable_irls_initialization();
  void set_allocated_irls_initialization(::mediapipe::TrackStepOptions_IrlsInitialization* irls_initialization);
  private:
  const ::mediapipe::TrackStepOptions_IrlsInitialization& _internal_irls_initialization() const;
  ::mediapipe::TrackStepOptions_IrlsInitialization* _internal_mutable_irls_initialization();
  public:
  void unsafe_arena_set_allocated_irls_initialization(
      ::mediapipe::TrackStepOptions_IrlsInitialization* irls_initialization);
  ::mediapipe::TrackStepOptions_IrlsInitialization* unsafe_arena_release_irls_initialization();

  // optional .mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions cancel_tracking_with_occlusion_options = 34;
  bool has_cancel_tracking_with_occlusion_options() const;
  private:
  bool _internal_has_cancel_tracking_with_occlusion_options() const;
  public:
  void clear_cancel_tracking_with_occlusion_options();
  const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions& cancel_tracking_with_occlusion_options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* release_cancel_tracking_with_occlusion_options();
  ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* mutable_cancel_tracking_with_occlusion_options();
  void set_allocated_cancel_tracking_with_occlusion_options(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* cancel_tracking_with_occlusion_options);
  private:
  const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions& _internal_cancel_tracking_with_occlusion_options() const;
  ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* _internal_mutable_cancel_tracking_with_occlusion_options();
  public:
  void unsafe_arena_set_allocated_cancel_tracking_with_occlusion_options(
      ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* cancel_tracking_with_occlusion_options);
  ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* unsafe_arena_release_cancel_tracking_with_occlusion_options();

  // optional .mediapipe.TrackStepOptions.CameraIntrinsics camera_intrinsics = 40;
  bool has_camera_intrinsics() const;
  private:
  bool _internal_has_camera_intrinsics() const;
  public:
  void clear_camera_intrinsics();
  const ::mediapipe::TrackStepOptions_CameraIntrinsics& camera_intrinsics() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mediapipe::TrackStepOptions_CameraIntrinsics* release_camera_intrinsics();
  ::mediapipe::TrackStepOptions_CameraIntrinsics* mutable_camera_intrinsics();
  void set_allocated_camera_intrinsics(::mediapipe::TrackStepOptions_CameraIntrinsics* camera_intrinsics);
  private:
  const ::mediapipe::TrackStepOptions_CameraIntrinsics& _internal_camera_intrinsics() const;
  ::mediapipe::TrackStepOptions_CameraIntrinsics* _internal_mutable_camera_intrinsics();
  public:
  void unsafe_arena_set_allocated_camera_intrinsics(
      ::mediapipe::TrackStepOptions_CameraIntrinsics* camera_intrinsics);
  ::mediapipe::TrackStepOptions_CameraIntrinsics* unsafe_arena_release_camera_intrinsics();

  // optional .mediapipe.TrackStepOptions.TrackingDegrees tracking_degrees = 28 [default = TRACKING_DEGREE_TRANSLATION];
  bool has_tracking_degrees() const;
  private:
  bool _internal_has_tracking_degrees() const;
  public:
  void clear_tracking_degrees();
  ::mediapipe::TrackStepOptions_TrackingDegrees tracking_degrees() const;
  void set_tracking_degrees(::mediapipe::TrackStepOptions_TrackingDegrees value);
  private:
  ::mediapipe::TrackStepOptions_TrackingDegrees _internal_tracking_degrees() const;
  void _internal_set_tracking_degrees(::mediapipe::TrackStepOptions_TrackingDegrees value);
  public:

  // optional bool track_object_and_camera = 32 [default = false];
  bool has_track_object_and_camera() const;
  private:
  bool _internal_has_track_object_and_camera() const;
  public:
  void clear_track_object_and_camera();
  bool track_object_and_camera() const;
  void set_track_object_and_camera(bool value);
  private:
  bool _internal_track_object_and_camera() const;
  void _internal_set_track_object_and_camera(bool value);
  public:

  // optional bool return_internal_state = 26 [default = false];
  bool has_return_internal_state() const;
  private:
  bool _internal_has_return_internal_state() const;
  public:
  void clear_return_internal_state();
  bool return_internal_state() const;
  void set_return_internal_state(bool value);
  private:
  bool _internal_return_internal_state() const;
  void _internal_set_return_internal_state(bool value);
  public:

  // optional bool compute_spatial_prior = 27 [default = false];
  bool has_compute_spatial_prior() const;
  private:
  bool _internal_has_compute_spatial_prior() const;
  public:
  void clear_compute_spatial_prior();
  bool compute_spatial_prior() const;
  void set_compute_spatial_prior(bool value);
  private:
  bool _internal_compute_spatial_prior() const;
  void _internal_set_compute_spatial_prior(bool value);
  public:

  // optional bool forced_pnp_tracking = 41 [default = false];
  bool has_forced_pnp_tracking() const;
  private:
  bool _internal_has_forced_pnp_tracking() const;
  public:
  void clear_forced_pnp_tracking();
  bool forced_pnp_tracking() const;
  void set_forced_pnp_tracking(bool value);
  private:
  bool _internal_forced_pnp_tracking() const;
  void _internal_set_forced_pnp_tracking(bool value);
  public:

  // optional float quad_homography_max_rotation = 39 [default = 0.3];
  bool has_quad_homography_max_rotation() const;
  private:
  bool _internal_has_quad_homography_max_rotation() const;
  public:
  void clear_quad_homography_max_rotation();
  float quad_homography_max_rotation() const;
  void set_quad_homography_max_rotation(float value);
  private:
  float _internal_quad_homography_max_rotation() const;
  void _internal_set_quad_homography_max_rotation(float value);
  public:

  // optional int32 irls_iterations = 1 [default = 5];
  bool has_irls_iterations() const;
  private:
  bool _internal_has_irls_iterations() const;
  public:
  void clear_irls_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 irls_iterations() const;
  void set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_irls_iterations() const;
  void _internal_set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float spatial_sigma = 2 [default = 0.15];
  bool has_spatial_sigma() const;
  private:
  bool _internal_has_spatial_sigma() const;
  public:
  void clear_spatial_sigma();
  float spatial_sigma() const;
  void set_spatial_sigma(float value);
  private:
  float _internal_spatial_sigma() const;
  void _internal_set_spatial_sigma(float value);
  public:

  // optional float min_motion_sigma = 3 [default = 0.002];
  bool has_min_motion_sigma() const;
  private:
  bool _internal_has_min_motion_sigma() const;
  public:
  void clear_min_motion_sigma();
  float min_motion_sigma() const;
  void set_min_motion_sigma(float value);
  private:
  float _internal_min_motion_sigma() const;
  void _internal_set_min_motion_sigma(float value);
  public:

  // optional float relative_motion_sigma = 4 [default = 0.3];
  bool has_relative_motion_sigma() const;
  private:
  bool _internal_has_relative_motion_sigma() const;
  public:
  void clear_relative_motion_sigma();
  float relative_motion_sigma() const;
  void set_relative_motion_sigma(float value);
  private:
  float _internal_relative_motion_sigma() const;
  void _internal_set_relative_motion_sigma(float value);
  public:

  // optional float motion_disparity_low_level = 6 [default = 0.008];
  bool has_motion_disparity_low_level() const;
  private:
  bool _internal_has_motion_disparity_low_level() const;
  public:
  void clear_motion_disparity_low_level();
  float motion_disparity_low_level() const;
  void set_motion_disparity_low_level(float value);
  private:
  float _internal_motion_disparity_low_level() const;
  void _internal_set_motion_disparity_low_level(float value);
  public:

  // optional float motion_disparity_high_level = 7 [default = 0.016];
  bool has_motion_disparity_high_level() const;
  private:
  bool _internal_has_motion_disparity_high_level() const;
  public:
  void clear_motion_disparity_high_level();
  float motion_disparity_high_level() const;
  void set_motion_disparity_high_level(float value);
  private:
  float _internal_motion_disparity_high_level() const;
  void _internal_set_motion_disparity_high_level(float value);
  public:

  // optional float disparity_decay = 8 [default = 0.8];
  bool has_disparity_decay() const;
  private:
  bool _internal_has_disparity_decay() const;
  public:
  void clear_disparity_decay();
  float disparity_decay() const;
  void set_disparity_decay(float value);
  private:
  float _internal_disparity_decay() const;
  void _internal_set_disparity_decay(float value);
  public:

  // optional float motion_prior_weight = 9 [default = 0.2];
  bool has_motion_prior_weight() const;
  private:
  bool _internal_has_motion_prior_weight() const;
  public:
  void clear_motion_prior_weight();
  float motion_prior_weight() const;
  void set_motion_prior_weight(float value);
  private:
  float _internal_motion_prior_weight() const;
  void _internal_set_motion_prior_weight(float value);
  public:

  // optional float background_discrimination_low_level = 10 [default = 0.004];
  bool has_background_discrimination_low_level() const;
  private:
  bool _internal_has_background_discrimination_low_level() const;
  public:
  void clear_background_discrimination_low_level();
  float background_discrimination_low_level() const;
  void set_background_discrimination_low_level(float value);
  private:
  float _internal_background_discrimination_low_level() const;
  void _internal_set_background_discrimination_low_level(float value);
  public:

  // optional float background_discrimination_high_level = 11 [default = 0.008];
  bool has_background_discrimination_high_level() const;
  private:
  bool _internal_has_background_discrimination_high_level() const;
  public:
  void clear_background_discrimination_high_level();
  float background_discrimination_high_level() const;
  void set_background_discrimination_high_level(float value);
  private:
  float _internal_background_discrimination_high_level() const;
  void _internal_set_background_discrimination_high_level(float value);
  public:

  // optional float inlier_center_relative_distance = 12 [default = 0.1];
  bool has_inlier_center_relative_distance() const;
  private:
  bool _internal_has_inlier_center_relative_distance() const;
  public:
  void clear_inlier_center_relative_distance();
  float inlier_center_relative_distance() const;
  void set_inlier_center_relative_distance(float value);
  private:
  float _internal_inlier_center_relative_distance() const;
  void _internal_set_inlier_center_relative_distance(float value);
  public:

  // optional float inlier_spring_force = 13 [default = 0.3];
  bool has_inlier_spring_force() const;
  private:
  bool _internal_has_inlier_spring_force() const;
  public:
  void clear_inlier_spring_force();
  float inlier_spring_force() const;
  void set_inlier_spring_force(float value);
  private:
  float _internal_inlier_spring_force() const;
  void _internal_set_inlier_spring_force(float value);
  public:

  // optional float kinetic_center_relative_distance = 14 [default = 0.4];
  bool has_kinetic_center_relative_distance() const;
  private:
  bool _internal_has_kinetic_center_relative_distance() const;
  public:
  void clear_kinetic_center_relative_distance();
  float kinetic_center_relative_distance() const;
  void set_kinetic_center_relative_distance(float value);
  private:
  float _internal_kinetic_center_relative_distance() const;
  void _internal_set_kinetic_center_relative_distance(float value);
  public:

  // optional float kinetic_spring_force = 15 [default = 0.5];
  bool has_kinetic_spring_force() const;
  private:
  bool _internal_has_kinetic_spring_force() const;
  public:
  void clear_kinetic_spring_force();
  float kinetic_spring_force() const;
  void set_kinetic_spring_force(float value);
  private:
  float _internal_kinetic_spring_force() const;
  void _internal_set_kinetic_spring_force(float value);
  public:

  // optional float velocity_update_weight = 16 [default = 0.7];
  bool has_velocity_update_weight() const;
  private:
  bool _internal_has_velocity_update_weight() const;
  public:
  void clear_velocity_update_weight();
  float velocity_update_weight() const;
  void set_velocity_update_weight(float value);
  private:
  float _internal_velocity_update_weight() const;
  void _internal_set_velocity_update_weight(float value);
  public:

  // optional int32 max_track_failures = 17 [default = 10];
  bool has_max_track_failures() const;
  private:
  bool _internal_has_max_track_failures() const;
  public:
  void clear_max_track_failures();
  ::PROTOBUF_NAMESPACE_ID::int32 max_track_failures() const;
  void set_max_track_failures(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_track_failures() const;
  void _internal_set_max_track_failures(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float expansion_size = 18 [default = 0.05];
  bool has_expansion_size() const;
  private:
  bool _internal_has_expansion_size() const;
  public:
  void clear_expansion_size();
  float expansion_size() const;
  void set_expansion_size(float value);
  private:
  float _internal_expansion_size() const;
  void _internal_set_expansion_size(float value);
  public:

  // optional float inlier_low_weight = 19 [default = 250];
  bool has_inlier_low_weight() const;
  private:
  bool _internal_has_inlier_low_weight() const;
  public:
  void clear_inlier_low_weight();
  float inlier_low_weight() const;
  void set_inlier_low_weight(float value);
  private:
  float _internal_inlier_low_weight() const;
  void _internal_set_inlier_low_weight(float value);
  public:

  // optional float inlier_high_weight = 20 [default = 500];
  bool has_inlier_high_weight() const;
  private:
  bool _internal_has_inlier_high_weight() const;
  public:
  void clear_inlier_high_weight();
  float inlier_high_weight() const;
  void set_inlier_high_weight(float value);
  private:
  float _internal_inlier_high_weight() const;
  void _internal_set_inlier_high_weight(float value);
  public:

  // optional float kinetic_spring_force_min_kinetic_energy = 21 [default = 0.003];
  bool has_kinetic_spring_force_min_kinetic_energy() const;
  private:
  bool _internal_has_kinetic_spring_force_min_kinetic_energy() const;
  public:
  void clear_kinetic_spring_force_min_kinetic_energy();
  float kinetic_spring_force_min_kinetic_energy() const;
  void set_kinetic_spring_force_min_kinetic_energy(float value);
  private:
  float _internal_kinetic_spring_force_min_kinetic_energy() const;
  void _internal_set_kinetic_spring_force_min_kinetic_energy(float value);
  public:

  // optional float kinetic_energy_decay = 22 [default = 0.98];
  bool has_kinetic_energy_decay() const;
  private:
  bool _internal_has_kinetic_energy_decay() const;
  public:
  void clear_kinetic_energy_decay();
  float kinetic_energy_decay() const;
  void set_kinetic_energy_decay(float value);
  private:
  float _internal_kinetic_energy_decay() const;
  void _internal_set_kinetic_energy_decay(float value);
  public:

  // optional float prior_weight_increase = 23 [default = 0.2];
  bool has_prior_weight_increase() const;
  private:
  bool _internal_has_prior_weight_increase() const;
  public:
  void clear_prior_weight_increase();
  float prior_weight_increase() const;
  void set_prior_weight_increase(float value);
  private:
  float _internal_prior_weight_increase() const;
  void _internal_set_prior_weight_increase(float value);
  public:

  // optional float low_kinetic_energy = 24 [default = 0.001];
  bool has_low_kinetic_energy() const;
  private:
  bool _internal_has_low_kinetic_energy() const;
  public:
  void clear_low_kinetic_energy();
  float low_kinetic_energy() const;
  void set_low_kinetic_energy(float value);
  private:
  float _internal_low_kinetic_energy() const;
  void _internal_set_low_kinetic_energy(float value);
  public:

  // optional float high_kinetic_energy = 25 [default = 0.004];
  bool has_high_kinetic_energy() const;
  private:
  bool _internal_has_high_kinetic_energy() const;
  public:
  void clear_high_kinetic_energy();
  float high_kinetic_energy() const;
  void set_high_kinetic_energy(float value);
  private:
  float _internal_high_kinetic_energy() const;
  void _internal_set_high_kinetic_energy(float value);
  public:

  // optional bool use_post_estimation_weights_for_state = 29 [default = true];
  bool has_use_post_estimation_weights_for_state() const;
  private:
  bool _internal_has_use_post_estimation_weights_for_state() const;
  public:
  void clear_use_post_estimation_weights_for_state();
  bool use_post_estimation_weights_for_state() const;
  void set_use_post_estimation_weights_for_state(bool value);
  private:
  bool _internal_use_post_estimation_weights_for_state() const;
  void _internal_set_use_post_estimation_weights_for_state(bool value);
  public:

  // optional float static_motion_temporal_ratio = 33 [default = 0.003];
  bool has_static_motion_temporal_ratio() const;
  private:
  bool _internal_has_static_motion_temporal_ratio() const;
  public:
  void clear_static_motion_temporal_ratio();
  float static_motion_temporal_ratio() const;
  void set_static_motion_temporal_ratio(float value);
  private:
  float _internal_static_motion_temporal_ratio() const;
  void _internal_set_static_motion_temporal_ratio(float value);
  public:

  // optional int32 object_similarity_min_contd_inliers = 35 [default = 30];
  bool has_object_similarity_min_contd_inliers() const;
  private:
  bool _internal_has_object_similarity_min_contd_inliers() const;
  public:
  void clear_object_similarity_min_contd_inliers();
  ::PROTOBUF_NAMESPACE_ID::int32 object_similarity_min_contd_inliers() const;
  void set_object_similarity_min_contd_inliers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_similarity_min_contd_inliers() const;
  void _internal_set_object_similarity_min_contd_inliers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float box_similarity_max_scale = 36 [default = 1.05];
  bool has_box_similarity_max_scale() const;
  private:
  bool _internal_has_box_similarity_max_scale() const;
  public:
  void clear_box_similarity_max_scale();
  float box_similarity_max_scale() const;
  void set_box_similarity_max_scale(float value);
  private:
  float _internal_box_similarity_max_scale() const;
  void _internal_set_box_similarity_max_scale(float value);
  public:

  // optional float box_similarity_max_rotation = 37 [default = 0.2];
  bool has_box_similarity_max_rotation() const;
  private:
  bool _internal_has_box_similarity_max_rotation() const;
  public:
  void clear_box_similarity_max_rotation();
  float box_similarity_max_rotation() const;
  void set_box_similarity_max_rotation(float value);
  private:
  float _internal_box_similarity_max_rotation() const;
  void _internal_set_box_similarity_max_rotation(float value);
  public:

  // optional float quad_homography_max_scale = 38 [default = 1.2];
  bool has_quad_homography_max_scale() const;
  private:
  bool _internal_has_quad_homography_max_scale() const;
  public:
  void clear_quad_homography_max_scale();
  float quad_homography_max_scale() const;
  void set_quad_homography_max_scale(float value);
  private:
  float _internal_quad_homography_max_scale() const;
  void _internal_set_quad_homography_max_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TrackStepOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::TrackStepOptions_IrlsInitialization* irls_initialization_;
  ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* cancel_tracking_with_occlusion_options_;
  ::mediapipe::TrackStepOptions_CameraIntrinsics* camera_intrinsics_;
  int tracking_degrees_;
  bool track_object_and_camera_;
  bool return_internal_state_;
  bool compute_spatial_prior_;
  bool forced_pnp_tracking_;
  float quad_homography_max_rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 irls_iterations_;
  float spatial_sigma_;
  float min_motion_sigma_;
  float relative_motion_sigma_;
  float motion_disparity_low_level_;
  float motion_disparity_high_level_;
  float disparity_decay_;
  float motion_prior_weight_;
  float background_discrimination_low_level_;
  float background_discrimination_high_level_;
  float inlier_center_relative_distance_;
  float inlier_spring_force_;
  float kinetic_center_relative_distance_;
  float kinetic_spring_force_;
  float velocity_update_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_track_failures_;
  float expansion_size_;
  float inlier_low_weight_;
  float inlier_high_weight_;
  float kinetic_spring_force_min_kinetic_energy_;
  float kinetic_energy_decay_;
  float prior_weight_increase_;
  float low_kinetic_energy_;
  float high_kinetic_energy_;
  bool use_post_estimation_weights_for_state_;
  float static_motion_temporal_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_similarity_min_contd_inliers_;
  float box_similarity_max_scale_;
  float box_similarity_max_rotation_;
  float quad_homography_max_scale_;
  friend struct ::TableStruct_mediapipe_2futil_2ftracking_2ftracking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionBoxState_Quad

// repeated float vertices = 1;
inline int MotionBoxState_Quad::_internal_vertices_size() const {
  return vertices_.size();
}
inline int MotionBoxState_Quad::vertices_size() const {
  return _internal_vertices_size();
}
inline void MotionBoxState_Quad::clear_vertices() {
  vertices_.Clear();
}
inline float MotionBoxState_Quad::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline float MotionBoxState_Quad::vertices(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.Quad.vertices)
  return _internal_vertices(index);
}
inline void MotionBoxState_Quad::set_vertices(int index, float value) {
  vertices_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.Quad.vertices)
}
inline void MotionBoxState_Quad::_internal_add_vertices(float value) {
  vertices_.Add(value);
}
inline void MotionBoxState_Quad::add_vertices(float value) {
  _internal_add_vertices(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.Quad.vertices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxState_Quad::_internal_vertices() const {
  return vertices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxState_Quad::vertices() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.Quad.vertices)
  return _internal_vertices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxState_Quad::_internal_mutable_vertices() {
  return &vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxState_Quad::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.Quad.vertices)
  return _internal_mutable_vertices();
}

// -------------------------------------------------------------------

// MotionBoxState

// optional float pos_x = 1;
inline bool MotionBoxState::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MotionBoxState::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void MotionBoxState::clear_pos_x() {
  pos_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MotionBoxState::_internal_pos_x() const {
  return pos_x_;
}
inline float MotionBoxState::pos_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.pos_x)
  return _internal_pos_x();
}
inline void MotionBoxState::_internal_set_pos_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  pos_x_ = value;
}
inline void MotionBoxState::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.pos_x)
}

// optional float pos_y = 2;
inline bool MotionBoxState::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MotionBoxState::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void MotionBoxState::clear_pos_y() {
  pos_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MotionBoxState::_internal_pos_y() const {
  return pos_y_;
}
inline float MotionBoxState::pos_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.pos_y)
  return _internal_pos_y();
}
inline void MotionBoxState::_internal_set_pos_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  pos_y_ = value;
}
inline void MotionBoxState::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.pos_y)
}

// optional float width = 3;
inline bool MotionBoxState::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MotionBoxState::has_width() const {
  return _internal_has_width();
}
inline void MotionBoxState::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float MotionBoxState::_internal_width() const {
  return width_;
}
inline float MotionBoxState::width() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.width)
  return _internal_width();
}
inline void MotionBoxState::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000020u;
  width_ = value;
}
inline void MotionBoxState::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.width)
}

// optional float height = 4;
inline bool MotionBoxState::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MotionBoxState::has_height() const {
  return _internal_has_height();
}
inline void MotionBoxState::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float MotionBoxState::_internal_height() const {
  return height_;
}
inline float MotionBoxState::height() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.height)
  return _internal_height();
}
inline void MotionBoxState::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000040u;
  height_ = value;
}
inline void MotionBoxState::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.height)
}

// optional float scale = 5 [default = 1];
inline bool MotionBoxState::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool MotionBoxState::has_scale() const {
  return _internal_has_scale();
}
inline void MotionBoxState::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x02000000u;
}
inline float MotionBoxState::_internal_scale() const {
  return scale_;
}
inline float MotionBoxState::scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.scale)
  return _internal_scale();
}
inline void MotionBoxState::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x02000000u;
  scale_ = value;
}
inline void MotionBoxState::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.scale)
}

// optional float rotation = 30 [default = 0];
inline bool MotionBoxState::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool MotionBoxState::has_rotation() const {
  return _internal_has_rotation();
}
inline void MotionBoxState::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float MotionBoxState::_internal_rotation() const {
  return rotation_;
}
inline float MotionBoxState::rotation() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.rotation)
  return _internal_rotation();
}
inline void MotionBoxState::_internal_set_rotation(float value) {
  _has_bits_[0] |= 0x00200000u;
  rotation_ = value;
}
inline void MotionBoxState::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.rotation)
}

// optional .mediapipe.MotionBoxState.Quad quad = 34;
inline bool MotionBoxState::_internal_has_quad() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || quad_ != nullptr);
  return value;
}
inline bool MotionBoxState::has_quad() const {
  return _internal_has_quad();
}
inline void MotionBoxState::clear_quad() {
  if (quad_ != nullptr) quad_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::MotionBoxState_Quad& MotionBoxState::_internal_quad() const {
  const ::mediapipe::MotionBoxState_Quad* p = quad_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MotionBoxState_Quad&>(
      ::mediapipe::_MotionBoxState_Quad_default_instance_);
}
inline const ::mediapipe::MotionBoxState_Quad& MotionBoxState::quad() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.quad)
  return _internal_quad();
}
inline void MotionBoxState::unsafe_arena_set_allocated_quad(
    ::mediapipe::MotionBoxState_Quad* quad) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quad_);
  }
  quad_ = quad;
  if (quad) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionBoxState.quad)
}
inline ::mediapipe::MotionBoxState_Quad* MotionBoxState::release_quad() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MotionBoxState_Quad* temp = quad_;
  quad_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MotionBoxState_Quad* MotionBoxState::unsafe_arena_release_quad() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionBoxState.quad)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MotionBoxState_Quad* temp = quad_;
  quad_ = nullptr;
  return temp;
}
inline ::mediapipe::MotionBoxState_Quad* MotionBoxState::_internal_mutable_quad() {
  _has_bits_[0] |= 0x00000002u;
  if (quad_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MotionBoxState_Quad>(GetArena());
    quad_ = p;
  }
  return quad_;
}
inline ::mediapipe::MotionBoxState_Quad* MotionBoxState::mutable_quad() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionBoxState.quad)
  return _internal_mutable_quad();
}
inline void MotionBoxState::set_allocated_quad(::mediapipe::MotionBoxState_Quad* quad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quad_;
  }
  if (quad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quad);
    if (message_arena != submessage_arena) {
      quad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quad, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quad_ = quad;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionBoxState.quad)
}

// optional float aspect_ratio = 35;
inline bool MotionBoxState::_internal_has_aspect_ratio() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool MotionBoxState::has_aspect_ratio() const {
  return _internal_has_aspect_ratio();
}
inline void MotionBoxState::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float MotionBoxState::_internal_aspect_ratio() const {
  return aspect_ratio_;
}
inline float MotionBoxState::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.aspect_ratio)
  return _internal_aspect_ratio();
}
inline void MotionBoxState::_internal_set_aspect_ratio(float value) {
  _has_bits_[0] |= 0x00800000u;
  aspect_ratio_ = value;
}
inline void MotionBoxState::set_aspect_ratio(float value) {
  _internal_set_aspect_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.aspect_ratio)
}

// optional bool request_grouping = 37 [default = false];
inline bool MotionBoxState::_internal_has_request_grouping() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool MotionBoxState::has_request_grouping() const {
  return _internal_has_request_grouping();
}
inline void MotionBoxState::clear_request_grouping() {
  request_grouping_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool MotionBoxState::_internal_request_grouping() const {
  return request_grouping_;
}
inline bool MotionBoxState::request_grouping() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.request_grouping)
  return _internal_request_grouping();
}
inline void MotionBoxState::_internal_set_request_grouping(bool value) {
  _has_bits_[0] |= 0x01000000u;
  request_grouping_ = value;
}
inline void MotionBoxState::set_request_grouping(bool value) {
  _internal_set_request_grouping(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.request_grouping)
}

// optional .mediapipe.Homography pnp_homography = 36;
inline bool MotionBoxState::_internal_has_pnp_homography() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pnp_homography_ != nullptr);
  return value;
}
inline bool MotionBoxState::has_pnp_homography() const {
  return _internal_has_pnp_homography();
}
inline const ::mediapipe::Homography& MotionBoxState::_internal_pnp_homography() const {
  const ::mediapipe::Homography* p = pnp_homography_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::Homography&>(
      ::mediapipe::_Homography_default_instance_);
}
inline const ::mediapipe::Homography& MotionBoxState::pnp_homography() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.pnp_homography)
  return _internal_pnp_homography();
}
inline void MotionBoxState::unsafe_arena_set_allocated_pnp_homography(
    ::mediapipe::Homography* pnp_homography) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pnp_homography_);
  }
  pnp_homography_ = pnp_homography;
  if (pnp_homography) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionBoxState.pnp_homography)
}
inline ::mediapipe::Homography* MotionBoxState::release_pnp_homography() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::Homography* temp = pnp_homography_;
  pnp_homography_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::Homography* MotionBoxState::unsafe_arena_release_pnp_homography() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionBoxState.pnp_homography)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::Homography* temp = pnp_homography_;
  pnp_homography_ = nullptr;
  return temp;
}
inline ::mediapipe::Homography* MotionBoxState::_internal_mutable_pnp_homography() {
  _has_bits_[0] |= 0x00000004u;
  if (pnp_homography_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::Homography>(GetArena());
    pnp_homography_ = p;
  }
  return pnp_homography_;
}
inline ::mediapipe::Homography* MotionBoxState::mutable_pnp_homography() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionBoxState.pnp_homography)
  return _internal_mutable_pnp_homography();
}
inline void MotionBoxState::set_allocated_pnp_homography(::mediapipe::Homography* pnp_homography) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pnp_homography_);
  }
  if (pnp_homography) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pnp_homography)->GetArena();
    if (message_arena != submessage_arena) {
      pnp_homography = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pnp_homography, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pnp_homography_ = pnp_homography;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionBoxState.pnp_homography)
}

// optional float dx = 7;
inline bool MotionBoxState::_internal_has_dx() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MotionBoxState::has_dx() const {
  return _internal_has_dx();
}
inline void MotionBoxState::clear_dx() {
  dx_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float MotionBoxState::_internal_dx() const {
  return dx_;
}
inline float MotionBoxState::dx() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.dx)
  return _internal_dx();
}
inline void MotionBoxState::_internal_set_dx(float value) {
  _has_bits_[0] |= 0x00000080u;
  dx_ = value;
}
inline void MotionBoxState::set_dx(float value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.dx)
}

// optional float dy = 8;
inline bool MotionBoxState::_internal_has_dy() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MotionBoxState::has_dy() const {
  return _internal_has_dy();
}
inline void MotionBoxState::clear_dy() {
  dy_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float MotionBoxState::_internal_dy() const {
  return dy_;
}
inline float MotionBoxState::dy() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.dy)
  return _internal_dy();
}
inline void MotionBoxState::_internal_set_dy(float value) {
  _has_bits_[0] |= 0x00000100u;
  dy_ = value;
}
inline void MotionBoxState::set_dy(float value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.dy)
}

// optional float kinetic_energy = 17;
inline bool MotionBoxState::_internal_has_kinetic_energy() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool MotionBoxState::has_kinetic_energy() const {
  return _internal_has_kinetic_energy();
}
inline void MotionBoxState::clear_kinetic_energy() {
  kinetic_energy_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float MotionBoxState::_internal_kinetic_energy() const {
  return kinetic_energy_;
}
inline float MotionBoxState::kinetic_energy() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.kinetic_energy)
  return _internal_kinetic_energy();
}
inline void MotionBoxState::_internal_set_kinetic_energy(float value) {
  _has_bits_[0] |= 0x00004000u;
  kinetic_energy_ = value;
}
inline void MotionBoxState::set_kinetic_energy(float value) {
  _internal_set_kinetic_energy(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.kinetic_energy)
}

// optional float prior_weight = 9;
inline bool MotionBoxState::_internal_has_prior_weight() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MotionBoxState::has_prior_weight() const {
  return _internal_has_prior_weight();
}
inline void MotionBoxState::clear_prior_weight() {
  prior_weight_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float MotionBoxState::_internal_prior_weight() const {
  return prior_weight_;
}
inline float MotionBoxState::prior_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.prior_weight)
  return _internal_prior_weight();
}
inline void MotionBoxState::_internal_set_prior_weight(float value) {
  _has_bits_[0] |= 0x00000200u;
  prior_weight_ = value;
}
inline void MotionBoxState::set_prior_weight(float value) {
  _internal_set_prior_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.prior_weight)
}

// optional .mediapipe.MotionBoxState.TrackStatus track_status = 10 [default = BOX_UNTRACKED];
inline bool MotionBoxState::_internal_has_track_status() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MotionBoxState::has_track_status() const {
  return _internal_has_track_status();
}
inline void MotionBoxState::clear_track_status() {
  track_status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::mediapipe::MotionBoxState_TrackStatus MotionBoxState::_internal_track_status() const {
  return static_cast< ::mediapipe::MotionBoxState_TrackStatus >(track_status_);
}
inline ::mediapipe::MotionBoxState_TrackStatus MotionBoxState::track_status() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.track_status)
  return _internal_track_status();
}
inline void MotionBoxState::_internal_set_track_status(::mediapipe::MotionBoxState_TrackStatus value) {
  assert(::mediapipe::MotionBoxState_TrackStatus_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  track_status_ = value;
}
inline void MotionBoxState::set_track_status(::mediapipe::MotionBoxState_TrackStatus value) {
  _internal_set_track_status(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.track_status)
}

// optional int32 spatial_prior_grid_size = 11 [default = 10];
inline bool MotionBoxState::_internal_has_spatial_prior_grid_size() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool MotionBoxState::has_spatial_prior_grid_size() const {
  return _internal_has_spatial_prior_grid_size();
}
inline void MotionBoxState::clear_spatial_prior_grid_size() {
  spatial_prior_grid_size_ = 10;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionBoxState::_internal_spatial_prior_grid_size() const {
  return spatial_prior_grid_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionBoxState::spatial_prior_grid_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.spatial_prior_grid_size)
  return _internal_spatial_prior_grid_size();
}
inline void MotionBoxState::_internal_set_spatial_prior_grid_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  spatial_prior_grid_size_ = value;
}
inline void MotionBoxState::set_spatial_prior_grid_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spatial_prior_grid_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.spatial_prior_grid_size)
}

// repeated float spatial_prior = 12 [packed = true];
inline int MotionBoxState::_internal_spatial_prior_size() const {
  return spatial_prior_.size();
}
inline int MotionBoxState::spatial_prior_size() const {
  return _internal_spatial_prior_size();
}
inline void MotionBoxState::clear_spatial_prior() {
  spatial_prior_.Clear();
}
inline float MotionBoxState::_internal_spatial_prior(int index) const {
  return spatial_prior_.Get(index);
}
inline float MotionBoxState::spatial_prior(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.spatial_prior)
  return _internal_spatial_prior(index);
}
inline void MotionBoxState::set_spatial_prior(int index, float value) {
  spatial_prior_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.spatial_prior)
}
inline void MotionBoxState::_internal_add_spatial_prior(float value) {
  spatial_prior_.Add(value);
}
inline void MotionBoxState::add_spatial_prior(float value) {
  _internal_add_spatial_prior(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.spatial_prior)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxState::_internal_spatial_prior() const {
  return spatial_prior_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxState::spatial_prior() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.spatial_prior)
  return _internal_spatial_prior();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxState::_internal_mutable_spatial_prior() {
  return &spatial_prior_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxState::mutable_spatial_prior() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.spatial_prior)
  return _internal_mutable_spatial_prior();
}

// repeated float spatial_confidence = 13 [packed = true];
inline int MotionBoxState::_internal_spatial_confidence_size() const {
  return spatial_confidence_.size();
}
inline int MotionBoxState::spatial_confidence_size() const {
  return _internal_spatial_confidence_size();
}
inline void MotionBoxState::clear_spatial_confidence() {
  spatial_confidence_.Clear();
}
inline float MotionBoxState::_internal_spatial_confidence(int index) const {
  return spatial_confidence_.Get(index);
}
inline float MotionBoxState::spatial_confidence(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.spatial_confidence)
  return _internal_spatial_confidence(index);
}
inline void MotionBoxState::set_spatial_confidence(int index, float value) {
  spatial_confidence_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.spatial_confidence)
}
inline void MotionBoxState::_internal_add_spatial_confidence(float value) {
  spatial_confidence_.Add(value);
}
inline void MotionBoxState::add_spatial_confidence(float value) {
  _internal_add_spatial_confidence(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.spatial_confidence)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxState::_internal_spatial_confidence() const {
  return spatial_confidence_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxState::spatial_confidence() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.spatial_confidence)
  return _internal_spatial_confidence();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxState::_internal_mutable_spatial_confidence() {
  return &spatial_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxState::mutable_spatial_confidence() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.spatial_confidence)
  return _internal_mutable_spatial_confidence();
}

// optional float prior_diff = 14;
inline bool MotionBoxState::_internal_has_prior_diff() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MotionBoxState::has_prior_diff() const {
  return _internal_has_prior_diff();
}
inline void MotionBoxState::clear_prior_diff() {
  prior_diff_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float MotionBoxState::_internal_prior_diff() const {
  return prior_diff_;
}
inline float MotionBoxState::prior_diff() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.prior_diff)
  return _internal_prior_diff();
}
inline void MotionBoxState::_internal_set_prior_diff(float value) {
  _has_bits_[0] |= 0x00000800u;
  prior_diff_ = value;
}
inline void MotionBoxState::set_prior_diff(float value) {
  _internal_set_prior_diff(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.prior_diff)
}

// optional float motion_disparity = 15;
inline bool MotionBoxState::_internal_has_motion_disparity() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MotionBoxState::has_motion_disparity() const {
  return _internal_has_motion_disparity();
}
inline void MotionBoxState::clear_motion_disparity() {
  motion_disparity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float MotionBoxState::_internal_motion_disparity() const {
  return motion_disparity_;
}
inline float MotionBoxState::motion_disparity() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.motion_disparity)
  return _internal_motion_disparity();
}
inline void MotionBoxState::_internal_set_motion_disparity(float value) {
  _has_bits_[0] |= 0x00001000u;
  motion_disparity_ = value;
}
inline void MotionBoxState::set_motion_disparity(float value) {
  _internal_set_motion_disparity(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.motion_disparity)
}

// optional float background_discrimination = 16;
inline bool MotionBoxState::_internal_has_background_discrimination() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MotionBoxState::has_background_discrimination() const {
  return _internal_has_background_discrimination();
}
inline void MotionBoxState::clear_background_discrimination() {
  background_discrimination_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float MotionBoxState::_internal_background_discrimination() const {
  return background_discrimination_;
}
inline float MotionBoxState::background_discrimination() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.background_discrimination)
  return _internal_background_discrimination();
}
inline void MotionBoxState::_internal_set_background_discrimination(float value) {
  _has_bits_[0] |= 0x00002000u;
  background_discrimination_ = value;
}
inline void MotionBoxState::set_background_discrimination(float value) {
  _internal_set_background_discrimination(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.background_discrimination)
}

// optional float inlier_center_x = 18;
inline bool MotionBoxState::_internal_has_inlier_center_x() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool MotionBoxState::has_inlier_center_x() const {
  return _internal_has_inlier_center_x();
}
inline void MotionBoxState::clear_inlier_center_x() {
  inlier_center_x_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float MotionBoxState::_internal_inlier_center_x() const {
  return inlier_center_x_;
}
inline float MotionBoxState::inlier_center_x() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_center_x)
  return _internal_inlier_center_x();
}
inline void MotionBoxState::_internal_set_inlier_center_x(float value) {
  _has_bits_[0] |= 0x00008000u;
  inlier_center_x_ = value;
}
inline void MotionBoxState::set_inlier_center_x(float value) {
  _internal_set_inlier_center_x(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_center_x)
}

// optional float inlier_center_y = 19;
inline bool MotionBoxState::_internal_has_inlier_center_y() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool MotionBoxState::has_inlier_center_y() const {
  return _internal_has_inlier_center_y();
}
inline void MotionBoxState::clear_inlier_center_y() {
  inlier_center_y_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float MotionBoxState::_internal_inlier_center_y() const {
  return inlier_center_y_;
}
inline float MotionBoxState::inlier_center_y() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_center_y)
  return _internal_inlier_center_y();
}
inline void MotionBoxState::_internal_set_inlier_center_y(float value) {
  _has_bits_[0] |= 0x00010000u;
  inlier_center_y_ = value;
}
inline void MotionBoxState::set_inlier_center_y(float value) {
  _internal_set_inlier_center_y(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_center_y)
}

// optional float inlier_sum = 24;
inline bool MotionBoxState::_internal_has_inlier_sum() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool MotionBoxState::has_inlier_sum() const {
  return _internal_has_inlier_sum();
}
inline void MotionBoxState::clear_inlier_sum() {
  inlier_sum_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float MotionBoxState::_internal_inlier_sum() const {
  return inlier_sum_;
}
inline float MotionBoxState::inlier_sum() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_sum)
  return _internal_inlier_sum();
}
inline void MotionBoxState::_internal_set_inlier_sum(float value) {
  _has_bits_[0] |= 0x00080000u;
  inlier_sum_ = value;
}
inline void MotionBoxState::set_inlier_sum(float value) {
  _internal_set_inlier_sum(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_sum)
}

// optional float inlier_ratio = 25;
inline bool MotionBoxState::_internal_has_inlier_ratio() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool MotionBoxState::has_inlier_ratio() const {
  return _internal_has_inlier_ratio();
}
inline void MotionBoxState::clear_inlier_ratio() {
  inlier_ratio_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float MotionBoxState::_internal_inlier_ratio() const {
  return inlier_ratio_;
}
inline float MotionBoxState::inlier_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_ratio)
  return _internal_inlier_ratio();
}
inline void MotionBoxState::_internal_set_inlier_ratio(float value) {
  _has_bits_[0] |= 0x00100000u;
  inlier_ratio_ = value;
}
inline void MotionBoxState::set_inlier_ratio(float value) {
  _internal_set_inlier_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_ratio)
}

// optional float inlier_width = 22;
inline bool MotionBoxState::_internal_has_inlier_width() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool MotionBoxState::has_inlier_width() const {
  return _internal_has_inlier_width();
}
inline void MotionBoxState::clear_inlier_width() {
  inlier_width_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float MotionBoxState::_internal_inlier_width() const {
  return inlier_width_;
}
inline float MotionBoxState::inlier_width() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_width)
  return _internal_inlier_width();
}
inline void MotionBoxState::_internal_set_inlier_width(float value) {
  _has_bits_[0] |= 0x00020000u;
  inlier_width_ = value;
}
inline void MotionBoxState::set_inlier_width(float value) {
  _internal_set_inlier_width(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_width)
}

// optional float inlier_height = 23;
inline bool MotionBoxState::_internal_has_inlier_height() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool MotionBoxState::has_inlier_height() const {
  return _internal_has_inlier_height();
}
inline void MotionBoxState::clear_inlier_height() {
  inlier_height_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float MotionBoxState::_internal_inlier_height() const {
  return inlier_height_;
}
inline float MotionBoxState::inlier_height() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_height)
  return _internal_inlier_height();
}
inline void MotionBoxState::_internal_set_inlier_height(float value) {
  _has_bits_[0] |= 0x00040000u;
  inlier_height_ = value;
}
inline void MotionBoxState::set_inlier_height(float value) {
  _internal_set_inlier_height(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_height)
}

// repeated uint32 inlier_ids = 26 [packed = true];
inline int MotionBoxState::_internal_inlier_ids_size() const {
  return inlier_ids_.size();
}
inline int MotionBoxState::inlier_ids_size() const {
  return _internal_inlier_ids_size();
}
inline void MotionBoxState::clear_inlier_ids() {
  inlier_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::_internal_inlier_ids(int index) const {
  return inlier_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::inlier_ids(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_ids)
  return _internal_inlier_ids(index);
}
inline void MotionBoxState::set_inlier_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inlier_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_ids)
}
inline void MotionBoxState::_internal_add_inlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inlier_ids_.Add(value);
}
inline void MotionBoxState::add_inlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_inlier_ids(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.inlier_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::_internal_inlier_ids() const {
  return inlier_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::inlier_ids() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.inlier_ids)
  return _internal_inlier_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::_internal_mutable_inlier_ids() {
  return &inlier_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::mutable_inlier_ids() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.inlier_ids)
  return _internal_mutable_inlier_ids();
}

// repeated uint32 inlier_id_match_pos = 31 [packed = true];
inline int MotionBoxState::_internal_inlier_id_match_pos_size() const {
  return inlier_id_match_pos_.size();
}
inline int MotionBoxState::inlier_id_match_pos_size() const {
  return _internal_inlier_id_match_pos_size();
}
inline void MotionBoxState::clear_inlier_id_match_pos() {
  inlier_id_match_pos_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::_internal_inlier_id_match_pos(int index) const {
  return inlier_id_match_pos_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::inlier_id_match_pos(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_id_match_pos)
  return _internal_inlier_id_match_pos(index);
}
inline void MotionBoxState::set_inlier_id_match_pos(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inlier_id_match_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_id_match_pos)
}
inline void MotionBoxState::_internal_add_inlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inlier_id_match_pos_.Add(value);
}
inline void MotionBoxState::add_inlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_inlier_id_match_pos(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.inlier_id_match_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::_internal_inlier_id_match_pos() const {
  return inlier_id_match_pos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::inlier_id_match_pos() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.inlier_id_match_pos)
  return _internal_inlier_id_match_pos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::_internal_mutable_inlier_id_match_pos() {
  return &inlier_id_match_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::mutable_inlier_id_match_pos() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.inlier_id_match_pos)
  return _internal_mutable_inlier_id_match_pos();
}

// repeated uint32 inlier_length = 27 [packed = true];
inline int MotionBoxState::_internal_inlier_length_size() const {
  return inlier_length_.size();
}
inline int MotionBoxState::inlier_length_size() const {
  return _internal_inlier_length_size();
}
inline void MotionBoxState::clear_inlier_length() {
  inlier_length_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::_internal_inlier_length(int index) const {
  return inlier_length_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::inlier_length(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.inlier_length)
  return _internal_inlier_length(index);
}
inline void MotionBoxState::set_inlier_length(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inlier_length_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.inlier_length)
}
inline void MotionBoxState::_internal_add_inlier_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  inlier_length_.Add(value);
}
inline void MotionBoxState::add_inlier_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_inlier_length(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.inlier_length)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::_internal_inlier_length() const {
  return inlier_length_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::inlier_length() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.inlier_length)
  return _internal_inlier_length();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::_internal_mutable_inlier_length() {
  return &inlier_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::mutable_inlier_length() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.inlier_length)
  return _internal_mutable_inlier_length();
}

// repeated uint32 outlier_ids = 28 [packed = true];
inline int MotionBoxState::_internal_outlier_ids_size() const {
  return outlier_ids_.size();
}
inline int MotionBoxState::outlier_ids_size() const {
  return _internal_outlier_ids_size();
}
inline void MotionBoxState::clear_outlier_ids() {
  outlier_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::_internal_outlier_ids(int index) const {
  return outlier_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::outlier_ids(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.outlier_ids)
  return _internal_outlier_ids(index);
}
inline void MotionBoxState::set_outlier_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  outlier_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.outlier_ids)
}
inline void MotionBoxState::_internal_add_outlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  outlier_ids_.Add(value);
}
inline void MotionBoxState::add_outlier_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_outlier_ids(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.outlier_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::_internal_outlier_ids() const {
  return outlier_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::outlier_ids() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.outlier_ids)
  return _internal_outlier_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::_internal_mutable_outlier_ids() {
  return &outlier_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::mutable_outlier_ids() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.outlier_ids)
  return _internal_mutable_outlier_ids();
}

// repeated uint32 outlier_id_match_pos = 32 [packed = true];
inline int MotionBoxState::_internal_outlier_id_match_pos_size() const {
  return outlier_id_match_pos_.size();
}
inline int MotionBoxState::outlier_id_match_pos_size() const {
  return _internal_outlier_id_match_pos_size();
}
inline void MotionBoxState::clear_outlier_id_match_pos() {
  outlier_id_match_pos_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::_internal_outlier_id_match_pos(int index) const {
  return outlier_id_match_pos_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionBoxState::outlier_id_match_pos(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.outlier_id_match_pos)
  return _internal_outlier_id_match_pos(index);
}
inline void MotionBoxState::set_outlier_id_match_pos(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  outlier_id_match_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.outlier_id_match_pos)
}
inline void MotionBoxState::_internal_add_outlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  outlier_id_match_pos_.Add(value);
}
inline void MotionBoxState::add_outlier_id_match_pos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_outlier_id_match_pos(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxState.outlier_id_match_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::_internal_outlier_id_match_pos() const {
  return outlier_id_match_pos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionBoxState::outlier_id_match_pos() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxState.outlier_id_match_pos)
  return _internal_outlier_id_match_pos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::_internal_mutable_outlier_id_match_pos() {
  return &outlier_id_match_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionBoxState::mutable_outlier_id_match_pos() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxState.outlier_id_match_pos)
  return _internal_mutable_outlier_id_match_pos();
}

// optional float tracking_confidence = 33;
inline bool MotionBoxState::_internal_has_tracking_confidence() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool MotionBoxState::has_tracking_confidence() const {
  return _internal_has_tracking_confidence();
}
inline void MotionBoxState::clear_tracking_confidence() {
  tracking_confidence_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float MotionBoxState::_internal_tracking_confidence() const {
  return tracking_confidence_;
}
inline float MotionBoxState::tracking_confidence() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.tracking_confidence)
  return _internal_tracking_confidence();
}
inline void MotionBoxState::_internal_set_tracking_confidence(float value) {
  _has_bits_[0] |= 0x00400000u;
  tracking_confidence_ = value;
}
inline void MotionBoxState::set_tracking_confidence(float value) {
  _internal_set_tracking_confidence(value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxState.tracking_confidence)
}

// optional .mediapipe.MotionBoxInternalState internal = 29;
inline bool MotionBoxState::_internal_has_internal() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || internal_ != nullptr);
  return value;
}
inline bool MotionBoxState::has_internal() const {
  return _internal_has_internal();
}
inline void MotionBoxState::clear_internal() {
  if (internal_ != nullptr) internal_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::MotionBoxInternalState& MotionBoxState::_internal_internal() const {
  const ::mediapipe::MotionBoxInternalState* p = internal_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MotionBoxInternalState&>(
      ::mediapipe::_MotionBoxInternalState_default_instance_);
}
inline const ::mediapipe::MotionBoxInternalState& MotionBoxState::internal() const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxState.internal)
  return _internal_internal();
}
inline void MotionBoxState::unsafe_arena_set_allocated_internal(
    ::mediapipe::MotionBoxInternalState* internal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_);
  }
  internal_ = internal;
  if (internal) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.MotionBoxState.internal)
}
inline ::mediapipe::MotionBoxInternalState* MotionBoxState::release_internal() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::MotionBoxInternalState* temp = internal_;
  internal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::MotionBoxInternalState* MotionBoxState::unsafe_arena_release_internal() {
  // @@protoc_insertion_point(field_release:mediapipe.MotionBoxState.internal)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::MotionBoxInternalState* temp = internal_;
  internal_ = nullptr;
  return temp;
}
inline ::mediapipe::MotionBoxInternalState* MotionBoxState::_internal_mutable_internal() {
  _has_bits_[0] |= 0x00000001u;
  if (internal_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::MotionBoxInternalState>(GetArena());
    internal_ = p;
  }
  return internal_;
}
inline ::mediapipe::MotionBoxInternalState* MotionBoxState::mutable_internal() {
  // @@protoc_insertion_point(field_mutable:mediapipe.MotionBoxState.internal)
  return _internal_mutable_internal();
}
inline void MotionBoxState::set_allocated_internal(::mediapipe::MotionBoxInternalState* internal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete internal_;
  }
  if (internal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(internal);
    if (message_arena != submessage_arena) {
      internal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  internal_ = internal;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.MotionBoxState.internal)
}

// -------------------------------------------------------------------

// MotionBoxInternalState

// repeated float pos_x = 1 [packed = true];
inline int MotionBoxInternalState::_internal_pos_x_size() const {
  return pos_x_.size();
}
inline int MotionBoxInternalState::pos_x_size() const {
  return _internal_pos_x_size();
}
inline void MotionBoxInternalState::clear_pos_x() {
  pos_x_.Clear();
}
inline float MotionBoxInternalState::_internal_pos_x(int index) const {
  return pos_x_.Get(index);
}
inline float MotionBoxInternalState::pos_x(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.pos_x)
  return _internal_pos_x(index);
}
inline void MotionBoxInternalState::set_pos_x(int index, float value) {
  pos_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.pos_x)
}
inline void MotionBoxInternalState::_internal_add_pos_x(float value) {
  pos_x_.Add(value);
}
inline void MotionBoxInternalState::add_pos_x(float value) {
  _internal_add_pos_x(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.pos_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::_internal_pos_x() const {
  return pos_x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::pos_x() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.pos_x)
  return _internal_pos_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::_internal_mutable_pos_x() {
  return &pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::mutable_pos_x() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.pos_x)
  return _internal_mutable_pos_x();
}

// repeated float pos_y = 2 [packed = true];
inline int MotionBoxInternalState::_internal_pos_y_size() const {
  return pos_y_.size();
}
inline int MotionBoxInternalState::pos_y_size() const {
  return _internal_pos_y_size();
}
inline void MotionBoxInternalState::clear_pos_y() {
  pos_y_.Clear();
}
inline float MotionBoxInternalState::_internal_pos_y(int index) const {
  return pos_y_.Get(index);
}
inline float MotionBoxInternalState::pos_y(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.pos_y)
  return _internal_pos_y(index);
}
inline void MotionBoxInternalState::set_pos_y(int index, float value) {
  pos_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.pos_y)
}
inline void MotionBoxInternalState::_internal_add_pos_y(float value) {
  pos_y_.Add(value);
}
inline void MotionBoxInternalState::add_pos_y(float value) {
  _internal_add_pos_y(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.pos_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::_internal_pos_y() const {
  return pos_y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::pos_y() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.pos_y)
  return _internal_pos_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::_internal_mutable_pos_y() {
  return &pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::mutable_pos_y() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.pos_y)
  return _internal_mutable_pos_y();
}

// repeated float dx = 3 [packed = true];
inline int MotionBoxInternalState::_internal_dx_size() const {
  return dx_.size();
}
inline int MotionBoxInternalState::dx_size() const {
  return _internal_dx_size();
}
inline void MotionBoxInternalState::clear_dx() {
  dx_.Clear();
}
inline float MotionBoxInternalState::_internal_dx(int index) const {
  return dx_.Get(index);
}
inline float MotionBoxInternalState::dx(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.dx)
  return _internal_dx(index);
}
inline void MotionBoxInternalState::set_dx(int index, float value) {
  dx_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.dx)
}
inline void MotionBoxInternalState::_internal_add_dx(float value) {
  dx_.Add(value);
}
inline void MotionBoxInternalState::add_dx(float value) {
  _internal_add_dx(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.dx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::_internal_dx() const {
  return dx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::dx() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.dx)
  return _internal_dx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::_internal_mutable_dx() {
  return &dx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::mutable_dx() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.dx)
  return _internal_mutable_dx();
}

// repeated float dy = 4 [packed = true];
inline int MotionBoxInternalState::_internal_dy_size() const {
  return dy_.size();
}
inline int MotionBoxInternalState::dy_size() const {
  return _internal_dy_size();
}
inline void MotionBoxInternalState::clear_dy() {
  dy_.Clear();
}
inline float MotionBoxInternalState::_internal_dy(int index) const {
  return dy_.Get(index);
}
inline float MotionBoxInternalState::dy(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.dy)
  return _internal_dy(index);
}
inline void MotionBoxInternalState::set_dy(int index, float value) {
  dy_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.dy)
}
inline void MotionBoxInternalState::_internal_add_dy(float value) {
  dy_.Add(value);
}
inline void MotionBoxInternalState::add_dy(float value) {
  _internal_add_dy(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.dy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::_internal_dy() const {
  return dy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::dy() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.dy)
  return _internal_dy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::_internal_mutable_dy() {
  return &dy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::mutable_dy() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.dy)
  return _internal_mutable_dy();
}

// repeated float camera_dx = 5 [packed = true];
inline int MotionBoxInternalState::_internal_camera_dx_size() const {
  return camera_dx_.size();
}
inline int MotionBoxInternalState::camera_dx_size() const {
  return _internal_camera_dx_size();
}
inline void MotionBoxInternalState::clear_camera_dx() {
  camera_dx_.Clear();
}
inline float MotionBoxInternalState::_internal_camera_dx(int index) const {
  return camera_dx_.Get(index);
}
inline float MotionBoxInternalState::camera_dx(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.camera_dx)
  return _internal_camera_dx(index);
}
inline void MotionBoxInternalState::set_camera_dx(int index, float value) {
  camera_dx_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.camera_dx)
}
inline void MotionBoxInternalState::_internal_add_camera_dx(float value) {
  camera_dx_.Add(value);
}
inline void MotionBoxInternalState::add_camera_dx(float value) {
  _internal_add_camera_dx(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.camera_dx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::_internal_camera_dx() const {
  return camera_dx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::camera_dx() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.camera_dx)
  return _internal_camera_dx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::_internal_mutable_camera_dx() {
  return &camera_dx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::mutable_camera_dx() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.camera_dx)
  return _internal_mutable_camera_dx();
}

// repeated float camera_dy = 6 [packed = true];
inline int MotionBoxInternalState::_internal_camera_dy_size() const {
  return camera_dy_.size();
}
inline int MotionBoxInternalState::camera_dy_size() const {
  return _internal_camera_dy_size();
}
inline void MotionBoxInternalState::clear_camera_dy() {
  camera_dy_.Clear();
}
inline float MotionBoxInternalState::_internal_camera_dy(int index) const {
  return camera_dy_.Get(index);
}
inline float MotionBoxInternalState::camera_dy(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.camera_dy)
  return _internal_camera_dy(index);
}
inline void MotionBoxInternalState::set_camera_dy(int index, float value) {
  camera_dy_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.camera_dy)
}
inline void MotionBoxInternalState::_internal_add_camera_dy(float value) {
  camera_dy_.Add(value);
}
inline void MotionBoxInternalState::add_camera_dy(float value) {
  _internal_add_camera_dy(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.camera_dy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::_internal_camera_dy() const {
  return camera_dy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::camera_dy() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.camera_dy)
  return _internal_camera_dy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::_internal_mutable_camera_dy() {
  return &camera_dy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::mutable_camera_dy() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.camera_dy)
  return _internal_mutable_camera_dy();
}

// repeated int32 track_id = 7 [packed = true];
inline int MotionBoxInternalState::_internal_track_id_size() const {
  return track_id_.size();
}
inline int MotionBoxInternalState::track_id_size() const {
  return _internal_track_id_size();
}
inline void MotionBoxInternalState::clear_track_id() {
  track_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionBoxInternalState::_internal_track_id(int index) const {
  return track_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionBoxInternalState::track_id(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.track_id)
  return _internal_track_id(index);
}
inline void MotionBoxInternalState::set_track_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  track_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.track_id)
}
inline void MotionBoxInternalState::_internal_add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  track_id_.Add(value);
}
inline void MotionBoxInternalState::add_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_track_id(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.track_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MotionBoxInternalState::_internal_track_id() const {
  return track_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MotionBoxInternalState::track_id() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.track_id)
  return _internal_track_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MotionBoxInternalState::_internal_mutable_track_id() {
  return &track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MotionBoxInternalState::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.track_id)
  return _internal_mutable_track_id();
}

// repeated float inlier_score = 8 [packed = true];
inline int MotionBoxInternalState::_internal_inlier_score_size() const {
  return inlier_score_.size();
}
inline int MotionBoxInternalState::inlier_score_size() const {
  return _internal_inlier_score_size();
}
inline void MotionBoxInternalState::clear_inlier_score() {
  inlier_score_.Clear();
}
inline float MotionBoxInternalState::_internal_inlier_score(int index) const {
  return inlier_score_.Get(index);
}
inline float MotionBoxInternalState::inlier_score(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.MotionBoxInternalState.inlier_score)
  return _internal_inlier_score(index);
}
inline void MotionBoxInternalState::set_inlier_score(int index, float value) {
  inlier_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.MotionBoxInternalState.inlier_score)
}
inline void MotionBoxInternalState::_internal_add_inlier_score(float value) {
  inlier_score_.Add(value);
}
inline void MotionBoxInternalState::add_inlier_score(float value) {
  _internal_add_inlier_score(value);
  // @@protoc_insertion_point(field_add:mediapipe.MotionBoxInternalState.inlier_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::_internal_inlier_score() const {
  return inlier_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MotionBoxInternalState::inlier_score() const {
  // @@protoc_insertion_point(field_list:mediapipe.MotionBoxInternalState.inlier_score)
  return _internal_inlier_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::_internal_mutable_inlier_score() {
  return &inlier_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MotionBoxInternalState::mutable_inlier_score() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.MotionBoxInternalState.inlier_score)
  return _internal_mutable_inlier_score();
}

// -------------------------------------------------------------------

// TrackStepOptions_IrlsInitialization

// optional bool activated = 1 [default = false];
inline bool TrackStepOptions_IrlsInitialization::_internal_has_activated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackStepOptions_IrlsInitialization::has_activated() const {
  return _internal_has_activated();
}
inline void TrackStepOptions_IrlsInitialization::clear_activated() {
  activated_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TrackStepOptions_IrlsInitialization::_internal_activated() const {
  return activated_;
}
inline bool TrackStepOptions_IrlsInitialization::activated() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.IrlsInitialization.activated)
  return _internal_activated();
}
inline void TrackStepOptions_IrlsInitialization::_internal_set_activated(bool value) {
  _has_bits_[0] |= 0x00000001u;
  activated_ = value;
}
inline void TrackStepOptions_IrlsInitialization::set_activated(bool value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.IrlsInitialization.activated)
}

// optional int32 rounds = 2 [default = 50];
inline bool TrackStepOptions_IrlsInitialization::_internal_has_rounds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackStepOptions_IrlsInitialization::has_rounds() const {
  return _internal_has_rounds();
}
inline void TrackStepOptions_IrlsInitialization::clear_rounds() {
  rounds_ = 50;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions_IrlsInitialization::_internal_rounds() const {
  return rounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions_IrlsInitialization::rounds() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.IrlsInitialization.rounds)
  return _internal_rounds();
}
inline void TrackStepOptions_IrlsInitialization::_internal_set_rounds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  rounds_ = value;
}
inline void TrackStepOptions_IrlsInitialization::set_rounds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rounds(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.IrlsInitialization.rounds)
}

// optional float cutoff = 3 [default = 0.005];
inline bool TrackStepOptions_IrlsInitialization::_internal_has_cutoff() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackStepOptions_IrlsInitialization::has_cutoff() const {
  return _internal_has_cutoff();
}
inline void TrackStepOptions_IrlsInitialization::clear_cutoff() {
  cutoff_ = 0.005f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrackStepOptions_IrlsInitialization::_internal_cutoff() const {
  return cutoff_;
}
inline float TrackStepOptions_IrlsInitialization::cutoff() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.IrlsInitialization.cutoff)
  return _internal_cutoff();
}
inline void TrackStepOptions_IrlsInitialization::_internal_set_cutoff(float value) {
  _has_bits_[0] |= 0x00000004u;
  cutoff_ = value;
}
inline void TrackStepOptions_IrlsInitialization::set_cutoff(float value) {
  _internal_set_cutoff(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.IrlsInitialization.cutoff)
}

// -------------------------------------------------------------------

// TrackStepOptions_CancelTrackingWithOcclusionOptions

// optional bool activated = 1 [default = false];
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_has_activated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::has_activated() const {
  return _internal_has_activated();
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::clear_activated() {
  activated_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_activated() const {
  return activated_;
}
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::activated() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions.activated)
  return _internal_activated();
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_set_activated(bool value) {
  _has_bits_[0] |= 0x00000001u;
  activated_ = value;
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::set_activated(bool value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions.activated)
}

// optional float min_motion_continuity = 2 [default = 0.4];
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_has_min_motion_continuity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::has_min_motion_continuity() const {
  return _internal_has_min_motion_continuity();
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::clear_min_motion_continuity() {
  min_motion_continuity_ = 0.4f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_min_motion_continuity() const {
  return min_motion_continuity_;
}
inline float TrackStepOptions_CancelTrackingWithOcclusionOptions::min_motion_continuity() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions.min_motion_continuity)
  return _internal_min_motion_continuity();
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_set_min_motion_continuity(float value) {
  _has_bits_[0] |= 0x00000002u;
  min_motion_continuity_ = value;
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::set_min_motion_continuity(float value) {
  _internal_set_min_motion_continuity(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions.min_motion_continuity)
}

// optional float min_inlier_ratio = 3 [default = 0.1];
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_has_min_inlier_ratio() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackStepOptions_CancelTrackingWithOcclusionOptions::has_min_inlier_ratio() const {
  return _internal_has_min_inlier_ratio();
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::clear_min_inlier_ratio() {
  min_inlier_ratio_ = 0.1f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_min_inlier_ratio() const {
  return min_inlier_ratio_;
}
inline float TrackStepOptions_CancelTrackingWithOcclusionOptions::min_inlier_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions.min_inlier_ratio)
  return _internal_min_inlier_ratio();
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::_internal_set_min_inlier_ratio(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_inlier_ratio_ = value;
}
inline void TrackStepOptions_CancelTrackingWithOcclusionOptions::set_min_inlier_ratio(float value) {
  _internal_set_min_inlier_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions.min_inlier_ratio)
}

// -------------------------------------------------------------------

// TrackStepOptions_CameraIntrinsics

// optional float fx = 1;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_fx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_fx() const {
  return _internal_has_fx();
}
inline void TrackStepOptions_CameraIntrinsics::clear_fx() {
  fx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TrackStepOptions_CameraIntrinsics::_internal_fx() const {
  return fx_;
}
inline float TrackStepOptions_CameraIntrinsics::fx() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.fx)
  return _internal_fx();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_fx(float value) {
  _has_bits_[0] |= 0x00000001u;
  fx_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.fx)
}

// optional float fy = 2;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_fy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_fy() const {
  return _internal_has_fy();
}
inline void TrackStepOptions_CameraIntrinsics::clear_fy() {
  fy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TrackStepOptions_CameraIntrinsics::_internal_fy() const {
  return fy_;
}
inline float TrackStepOptions_CameraIntrinsics::fy() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.fy)
  return _internal_fy();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_fy(float value) {
  _has_bits_[0] |= 0x00000002u;
  fy_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.fy)
}

// optional float cx = 3;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_cx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_cx() const {
  return _internal_has_cx();
}
inline void TrackStepOptions_CameraIntrinsics::clear_cx() {
  cx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrackStepOptions_CameraIntrinsics::_internal_cx() const {
  return cx_;
}
inline float TrackStepOptions_CameraIntrinsics::cx() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.cx)
  return _internal_cx();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_cx(float value) {
  _has_bits_[0] |= 0x00000004u;
  cx_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_cx(float value) {
  _internal_set_cx(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.cx)
}

// optional float cy = 4;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_cy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_cy() const {
  return _internal_has_cy();
}
inline void TrackStepOptions_CameraIntrinsics::clear_cy() {
  cy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrackStepOptions_CameraIntrinsics::_internal_cy() const {
  return cy_;
}
inline float TrackStepOptions_CameraIntrinsics::cy() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.cy)
  return _internal_cy();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_cy(float value) {
  _has_bits_[0] |= 0x00000008u;
  cy_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_cy(float value) {
  _internal_set_cy(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.cy)
}

// optional float k0 = 5;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_k0() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_k0() const {
  return _internal_has_k0();
}
inline void TrackStepOptions_CameraIntrinsics::clear_k0() {
  k0_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrackStepOptions_CameraIntrinsics::_internal_k0() const {
  return k0_;
}
inline float TrackStepOptions_CameraIntrinsics::k0() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.k0)
  return _internal_k0();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_k0(float value) {
  _has_bits_[0] |= 0x00000010u;
  k0_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_k0(float value) {
  _internal_set_k0(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.k0)
}

// optional float k1 = 6;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_k1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_k1() const {
  return _internal_has_k1();
}
inline void TrackStepOptions_CameraIntrinsics::clear_k1() {
  k1_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TrackStepOptions_CameraIntrinsics::_internal_k1() const {
  return k1_;
}
inline float TrackStepOptions_CameraIntrinsics::k1() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.k1)
  return _internal_k1();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_k1(float value) {
  _has_bits_[0] |= 0x00000020u;
  k1_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_k1(float value) {
  _internal_set_k1(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.k1)
}

// optional float k2 = 7;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_k2() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_k2() const {
  return _internal_has_k2();
}
inline void TrackStepOptions_CameraIntrinsics::clear_k2() {
  k2_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TrackStepOptions_CameraIntrinsics::_internal_k2() const {
  return k2_;
}
inline float TrackStepOptions_CameraIntrinsics::k2() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.k2)
  return _internal_k2();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_k2(float value) {
  _has_bits_[0] |= 0x00000040u;
  k2_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_k2(float value) {
  _internal_set_k2(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.k2)
}

// optional int32 w = 8;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_w() const {
  return _internal_has_w();
}
inline void TrackStepOptions_CameraIntrinsics::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions_CameraIntrinsics::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions_CameraIntrinsics::w() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.w)
  return _internal_w();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  w_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.w)
}

// optional int32 h = 9;
inline bool TrackStepOptions_CameraIntrinsics::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrackStepOptions_CameraIntrinsics::has_h() const {
  return _internal_has_h();
}
inline void TrackStepOptions_CameraIntrinsics::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions_CameraIntrinsics::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions_CameraIntrinsics::h() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.CameraIntrinsics.h)
  return _internal_h();
}
inline void TrackStepOptions_CameraIntrinsics::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  h_ = value;
}
inline void TrackStepOptions_CameraIntrinsics::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.CameraIntrinsics.h)
}

// -------------------------------------------------------------------

// TrackStepOptions

// optional .mediapipe.TrackStepOptions.TrackingDegrees tracking_degrees = 28 [default = TRACKING_DEGREE_TRANSLATION];
inline bool TrackStepOptions::_internal_has_tracking_degrees() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackStepOptions::has_tracking_degrees() const {
  return _internal_has_tracking_degrees();
}
inline void TrackStepOptions::clear_tracking_degrees() {
  tracking_degrees_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mediapipe::TrackStepOptions_TrackingDegrees TrackStepOptions::_internal_tracking_degrees() const {
  return static_cast< ::mediapipe::TrackStepOptions_TrackingDegrees >(tracking_degrees_);
}
inline ::mediapipe::TrackStepOptions_TrackingDegrees TrackStepOptions::tracking_degrees() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.tracking_degrees)
  return _internal_tracking_degrees();
}
inline void TrackStepOptions::_internal_set_tracking_degrees(::mediapipe::TrackStepOptions_TrackingDegrees value) {
  assert(::mediapipe::TrackStepOptions_TrackingDegrees_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  tracking_degrees_ = value;
}
inline void TrackStepOptions::set_tracking_degrees(::mediapipe::TrackStepOptions_TrackingDegrees value) {
  _internal_set_tracking_degrees(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.tracking_degrees)
}

// optional bool track_object_and_camera = 32 [default = false];
inline bool TrackStepOptions::_internal_has_track_object_and_camera() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackStepOptions::has_track_object_and_camera() const {
  return _internal_has_track_object_and_camera();
}
inline void TrackStepOptions::clear_track_object_and_camera() {
  track_object_and_camera_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrackStepOptions::_internal_track_object_and_camera() const {
  return track_object_and_camera_;
}
inline bool TrackStepOptions::track_object_and_camera() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.track_object_and_camera)
  return _internal_track_object_and_camera();
}
inline void TrackStepOptions::_internal_set_track_object_and_camera(bool value) {
  _has_bits_[0] |= 0x00000010u;
  track_object_and_camera_ = value;
}
inline void TrackStepOptions::set_track_object_and_camera(bool value) {
  _internal_set_track_object_and_camera(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.track_object_and_camera)
}

// optional int32 irls_iterations = 1 [default = 5];
inline bool TrackStepOptions::_internal_has_irls_iterations() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrackStepOptions::has_irls_iterations() const {
  return _internal_has_irls_iterations();
}
inline void TrackStepOptions::clear_irls_iterations() {
  irls_iterations_ = 5;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions::_internal_irls_iterations() const {
  return irls_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions::irls_iterations() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.irls_iterations)
  return _internal_irls_iterations();
}
inline void TrackStepOptions::_internal_set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  irls_iterations_ = value;
}
inline void TrackStepOptions::set_irls_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_irls_iterations(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.irls_iterations)
}

// optional float spatial_sigma = 2 [default = 0.15];
inline bool TrackStepOptions::_internal_has_spatial_sigma() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrackStepOptions::has_spatial_sigma() const {
  return _internal_has_spatial_sigma();
}
inline void TrackStepOptions::clear_spatial_sigma() {
  spatial_sigma_ = 0.15f;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TrackStepOptions::_internal_spatial_sigma() const {
  return spatial_sigma_;
}
inline float TrackStepOptions::spatial_sigma() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.spatial_sigma)
  return _internal_spatial_sigma();
}
inline void TrackStepOptions::_internal_set_spatial_sigma(float value) {
  _has_bits_[0] |= 0x00000400u;
  spatial_sigma_ = value;
}
inline void TrackStepOptions::set_spatial_sigma(float value) {
  _internal_set_spatial_sigma(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.spatial_sigma)
}

// optional float min_motion_sigma = 3 [default = 0.002];
inline bool TrackStepOptions::_internal_has_min_motion_sigma() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrackStepOptions::has_min_motion_sigma() const {
  return _internal_has_min_motion_sigma();
}
inline void TrackStepOptions::clear_min_motion_sigma() {
  min_motion_sigma_ = 0.002f;
  _has_bits_[0] &= ~0x00000800u;
}
inline float TrackStepOptions::_internal_min_motion_sigma() const {
  return min_motion_sigma_;
}
inline float TrackStepOptions::min_motion_sigma() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.min_motion_sigma)
  return _internal_min_motion_sigma();
}
inline void TrackStepOptions::_internal_set_min_motion_sigma(float value) {
  _has_bits_[0] |= 0x00000800u;
  min_motion_sigma_ = value;
}
inline void TrackStepOptions::set_min_motion_sigma(float value) {
  _internal_set_min_motion_sigma(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.min_motion_sigma)
}

// optional float relative_motion_sigma = 4 [default = 0.3];
inline bool TrackStepOptions::_internal_has_relative_motion_sigma() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_relative_motion_sigma() const {
  return _internal_has_relative_motion_sigma();
}
inline void TrackStepOptions::clear_relative_motion_sigma() {
  relative_motion_sigma_ = 0.3f;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TrackStepOptions::_internal_relative_motion_sigma() const {
  return relative_motion_sigma_;
}
inline float TrackStepOptions::relative_motion_sigma() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.relative_motion_sigma)
  return _internal_relative_motion_sigma();
}
inline void TrackStepOptions::_internal_set_relative_motion_sigma(float value) {
  _has_bits_[0] |= 0x00001000u;
  relative_motion_sigma_ = value;
}
inline void TrackStepOptions::set_relative_motion_sigma(float value) {
  _internal_set_relative_motion_sigma(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.relative_motion_sigma)
}

// optional float motion_disparity_low_level = 6 [default = 0.008];
inline bool TrackStepOptions::_internal_has_motion_disparity_low_level() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_motion_disparity_low_level() const {
  return _internal_has_motion_disparity_low_level();
}
inline void TrackStepOptions::clear_motion_disparity_low_level() {
  motion_disparity_low_level_ = 0.008f;
  _has_bits_[0] &= ~0x00002000u;
}
inline float TrackStepOptions::_internal_motion_disparity_low_level() const {
  return motion_disparity_low_level_;
}
inline float TrackStepOptions::motion_disparity_low_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.motion_disparity_low_level)
  return _internal_motion_disparity_low_level();
}
inline void TrackStepOptions::_internal_set_motion_disparity_low_level(float value) {
  _has_bits_[0] |= 0x00002000u;
  motion_disparity_low_level_ = value;
}
inline void TrackStepOptions::set_motion_disparity_low_level(float value) {
  _internal_set_motion_disparity_low_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.motion_disparity_low_level)
}

// optional float motion_disparity_high_level = 7 [default = 0.016];
inline bool TrackStepOptions::_internal_has_motion_disparity_high_level() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_motion_disparity_high_level() const {
  return _internal_has_motion_disparity_high_level();
}
inline void TrackStepOptions::clear_motion_disparity_high_level() {
  motion_disparity_high_level_ = 0.016f;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TrackStepOptions::_internal_motion_disparity_high_level() const {
  return motion_disparity_high_level_;
}
inline float TrackStepOptions::motion_disparity_high_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.motion_disparity_high_level)
  return _internal_motion_disparity_high_level();
}
inline void TrackStepOptions::_internal_set_motion_disparity_high_level(float value) {
  _has_bits_[0] |= 0x00004000u;
  motion_disparity_high_level_ = value;
}
inline void TrackStepOptions::set_motion_disparity_high_level(float value) {
  _internal_set_motion_disparity_high_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.motion_disparity_high_level)
}

// optional float disparity_decay = 8 [default = 0.8];
inline bool TrackStepOptions::_internal_has_disparity_decay() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_disparity_decay() const {
  return _internal_has_disparity_decay();
}
inline void TrackStepOptions::clear_disparity_decay() {
  disparity_decay_ = 0.8f;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TrackStepOptions::_internal_disparity_decay() const {
  return disparity_decay_;
}
inline float TrackStepOptions::disparity_decay() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.disparity_decay)
  return _internal_disparity_decay();
}
inline void TrackStepOptions::_internal_set_disparity_decay(float value) {
  _has_bits_[0] |= 0x00008000u;
  disparity_decay_ = value;
}
inline void TrackStepOptions::set_disparity_decay(float value) {
  _internal_set_disparity_decay(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.disparity_decay)
}

// optional float motion_prior_weight = 9 [default = 0.2];
inline bool TrackStepOptions::_internal_has_motion_prior_weight() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_motion_prior_weight() const {
  return _internal_has_motion_prior_weight();
}
inline void TrackStepOptions::clear_motion_prior_weight() {
  motion_prior_weight_ = 0.2f;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TrackStepOptions::_internal_motion_prior_weight() const {
  return motion_prior_weight_;
}
inline float TrackStepOptions::motion_prior_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.motion_prior_weight)
  return _internal_motion_prior_weight();
}
inline void TrackStepOptions::_internal_set_motion_prior_weight(float value) {
  _has_bits_[0] |= 0x00010000u;
  motion_prior_weight_ = value;
}
inline void TrackStepOptions::set_motion_prior_weight(float value) {
  _internal_set_motion_prior_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.motion_prior_weight)
}

// optional float background_discrimination_low_level = 10 [default = 0.004];
inline bool TrackStepOptions::_internal_has_background_discrimination_low_level() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_background_discrimination_low_level() const {
  return _internal_has_background_discrimination_low_level();
}
inline void TrackStepOptions::clear_background_discrimination_low_level() {
  background_discrimination_low_level_ = 0.004f;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TrackStepOptions::_internal_background_discrimination_low_level() const {
  return background_discrimination_low_level_;
}
inline float TrackStepOptions::background_discrimination_low_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.background_discrimination_low_level)
  return _internal_background_discrimination_low_level();
}
inline void TrackStepOptions::_internal_set_background_discrimination_low_level(float value) {
  _has_bits_[0] |= 0x00020000u;
  background_discrimination_low_level_ = value;
}
inline void TrackStepOptions::set_background_discrimination_low_level(float value) {
  _internal_set_background_discrimination_low_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.background_discrimination_low_level)
}

// optional float background_discrimination_high_level = 11 [default = 0.008];
inline bool TrackStepOptions::_internal_has_background_discrimination_high_level() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_background_discrimination_high_level() const {
  return _internal_has_background_discrimination_high_level();
}
inline void TrackStepOptions::clear_background_discrimination_high_level() {
  background_discrimination_high_level_ = 0.008f;
  _has_bits_[0] &= ~0x00040000u;
}
inline float TrackStepOptions::_internal_background_discrimination_high_level() const {
  return background_discrimination_high_level_;
}
inline float TrackStepOptions::background_discrimination_high_level() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.background_discrimination_high_level)
  return _internal_background_discrimination_high_level();
}
inline void TrackStepOptions::_internal_set_background_discrimination_high_level(float value) {
  _has_bits_[0] |= 0x00040000u;
  background_discrimination_high_level_ = value;
}
inline void TrackStepOptions::set_background_discrimination_high_level(float value) {
  _internal_set_background_discrimination_high_level(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.background_discrimination_high_level)
}

// optional float inlier_center_relative_distance = 12 [default = 0.1];
inline bool TrackStepOptions::_internal_has_inlier_center_relative_distance() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_inlier_center_relative_distance() const {
  return _internal_has_inlier_center_relative_distance();
}
inline void TrackStepOptions::clear_inlier_center_relative_distance() {
  inlier_center_relative_distance_ = 0.1f;
  _has_bits_[0] &= ~0x00080000u;
}
inline float TrackStepOptions::_internal_inlier_center_relative_distance() const {
  return inlier_center_relative_distance_;
}
inline float TrackStepOptions::inlier_center_relative_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.inlier_center_relative_distance)
  return _internal_inlier_center_relative_distance();
}
inline void TrackStepOptions::_internal_set_inlier_center_relative_distance(float value) {
  _has_bits_[0] |= 0x00080000u;
  inlier_center_relative_distance_ = value;
}
inline void TrackStepOptions::set_inlier_center_relative_distance(float value) {
  _internal_set_inlier_center_relative_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.inlier_center_relative_distance)
}

// optional float inlier_spring_force = 13 [default = 0.3];
inline bool TrackStepOptions::_internal_has_inlier_spring_force() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_inlier_spring_force() const {
  return _internal_has_inlier_spring_force();
}
inline void TrackStepOptions::clear_inlier_spring_force() {
  inlier_spring_force_ = 0.3f;
  _has_bits_[0] &= ~0x00100000u;
}
inline float TrackStepOptions::_internal_inlier_spring_force() const {
  return inlier_spring_force_;
}
inline float TrackStepOptions::inlier_spring_force() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.inlier_spring_force)
  return _internal_inlier_spring_force();
}
inline void TrackStepOptions::_internal_set_inlier_spring_force(float value) {
  _has_bits_[0] |= 0x00100000u;
  inlier_spring_force_ = value;
}
inline void TrackStepOptions::set_inlier_spring_force(float value) {
  _internal_set_inlier_spring_force(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.inlier_spring_force)
}

// optional float kinetic_center_relative_distance = 14 [default = 0.4];
inline bool TrackStepOptions::_internal_has_kinetic_center_relative_distance() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_kinetic_center_relative_distance() const {
  return _internal_has_kinetic_center_relative_distance();
}
inline void TrackStepOptions::clear_kinetic_center_relative_distance() {
  kinetic_center_relative_distance_ = 0.4f;
  _has_bits_[0] &= ~0x00200000u;
}
inline float TrackStepOptions::_internal_kinetic_center_relative_distance() const {
  return kinetic_center_relative_distance_;
}
inline float TrackStepOptions::kinetic_center_relative_distance() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.kinetic_center_relative_distance)
  return _internal_kinetic_center_relative_distance();
}
inline void TrackStepOptions::_internal_set_kinetic_center_relative_distance(float value) {
  _has_bits_[0] |= 0x00200000u;
  kinetic_center_relative_distance_ = value;
}
inline void TrackStepOptions::set_kinetic_center_relative_distance(float value) {
  _internal_set_kinetic_center_relative_distance(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.kinetic_center_relative_distance)
}

// optional float kinetic_spring_force = 15 [default = 0.5];
inline bool TrackStepOptions::_internal_has_kinetic_spring_force() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_kinetic_spring_force() const {
  return _internal_has_kinetic_spring_force();
}
inline void TrackStepOptions::clear_kinetic_spring_force() {
  kinetic_spring_force_ = 0.5f;
  _has_bits_[0] &= ~0x00400000u;
}
inline float TrackStepOptions::_internal_kinetic_spring_force() const {
  return kinetic_spring_force_;
}
inline float TrackStepOptions::kinetic_spring_force() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.kinetic_spring_force)
  return _internal_kinetic_spring_force();
}
inline void TrackStepOptions::_internal_set_kinetic_spring_force(float value) {
  _has_bits_[0] |= 0x00400000u;
  kinetic_spring_force_ = value;
}
inline void TrackStepOptions::set_kinetic_spring_force(float value) {
  _internal_set_kinetic_spring_force(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.kinetic_spring_force)
}

// optional float kinetic_spring_force_min_kinetic_energy = 21 [default = 0.003];
inline bool TrackStepOptions::_internal_has_kinetic_spring_force_min_kinetic_energy() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_kinetic_spring_force_min_kinetic_energy() const {
  return _internal_has_kinetic_spring_force_min_kinetic_energy();
}
inline void TrackStepOptions::clear_kinetic_spring_force_min_kinetic_energy() {
  kinetic_spring_force_min_kinetic_energy_ = 0.003f;
  _has_bits_[0] &= ~0x10000000u;
}
inline float TrackStepOptions::_internal_kinetic_spring_force_min_kinetic_energy() const {
  return kinetic_spring_force_min_kinetic_energy_;
}
inline float TrackStepOptions::kinetic_spring_force_min_kinetic_energy() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.kinetic_spring_force_min_kinetic_energy)
  return _internal_kinetic_spring_force_min_kinetic_energy();
}
inline void TrackStepOptions::_internal_set_kinetic_spring_force_min_kinetic_energy(float value) {
  _has_bits_[0] |= 0x10000000u;
  kinetic_spring_force_min_kinetic_energy_ = value;
}
inline void TrackStepOptions::set_kinetic_spring_force_min_kinetic_energy(float value) {
  _internal_set_kinetic_spring_force_min_kinetic_energy(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.kinetic_spring_force_min_kinetic_energy)
}

// optional float velocity_update_weight = 16 [default = 0.7];
inline bool TrackStepOptions::_internal_has_velocity_update_weight() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_velocity_update_weight() const {
  return _internal_has_velocity_update_weight();
}
inline void TrackStepOptions::clear_velocity_update_weight() {
  velocity_update_weight_ = 0.7f;
  _has_bits_[0] &= ~0x00800000u;
}
inline float TrackStepOptions::_internal_velocity_update_weight() const {
  return velocity_update_weight_;
}
inline float TrackStepOptions::velocity_update_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.velocity_update_weight)
  return _internal_velocity_update_weight();
}
inline void TrackStepOptions::_internal_set_velocity_update_weight(float value) {
  _has_bits_[0] |= 0x00800000u;
  velocity_update_weight_ = value;
}
inline void TrackStepOptions::set_velocity_update_weight(float value) {
  _internal_set_velocity_update_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.velocity_update_weight)
}

// optional int32 max_track_failures = 17 [default = 10];
inline bool TrackStepOptions::_internal_has_max_track_failures() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_max_track_failures() const {
  return _internal_has_max_track_failures();
}
inline void TrackStepOptions::clear_max_track_failures() {
  max_track_failures_ = 10;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions::_internal_max_track_failures() const {
  return max_track_failures_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions::max_track_failures() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.max_track_failures)
  return _internal_max_track_failures();
}
inline void TrackStepOptions::_internal_set_max_track_failures(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  max_track_failures_ = value;
}
inline void TrackStepOptions::set_max_track_failures(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_track_failures(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.max_track_failures)
}

// optional float expansion_size = 18 [default = 0.05];
inline bool TrackStepOptions::_internal_has_expansion_size() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_expansion_size() const {
  return _internal_has_expansion_size();
}
inline void TrackStepOptions::clear_expansion_size() {
  expansion_size_ = 0.05f;
  _has_bits_[0] &= ~0x02000000u;
}
inline float TrackStepOptions::_internal_expansion_size() const {
  return expansion_size_;
}
inline float TrackStepOptions::expansion_size() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.expansion_size)
  return _internal_expansion_size();
}
inline void TrackStepOptions::_internal_set_expansion_size(float value) {
  _has_bits_[0] |= 0x02000000u;
  expansion_size_ = value;
}
inline void TrackStepOptions::set_expansion_size(float value) {
  _internal_set_expansion_size(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.expansion_size)
}

// optional float inlier_low_weight = 19 [default = 250];
inline bool TrackStepOptions::_internal_has_inlier_low_weight() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_inlier_low_weight() const {
  return _internal_has_inlier_low_weight();
}
inline void TrackStepOptions::clear_inlier_low_weight() {
  inlier_low_weight_ = 250;
  _has_bits_[0] &= ~0x04000000u;
}
inline float TrackStepOptions::_internal_inlier_low_weight() const {
  return inlier_low_weight_;
}
inline float TrackStepOptions::inlier_low_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.inlier_low_weight)
  return _internal_inlier_low_weight();
}
inline void TrackStepOptions::_internal_set_inlier_low_weight(float value) {
  _has_bits_[0] |= 0x04000000u;
  inlier_low_weight_ = value;
}
inline void TrackStepOptions::set_inlier_low_weight(float value) {
  _internal_set_inlier_low_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.inlier_low_weight)
}

// optional float inlier_high_weight = 20 [default = 500];
inline bool TrackStepOptions::_internal_has_inlier_high_weight() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_inlier_high_weight() const {
  return _internal_has_inlier_high_weight();
}
inline void TrackStepOptions::clear_inlier_high_weight() {
  inlier_high_weight_ = 500;
  _has_bits_[0] &= ~0x08000000u;
}
inline float TrackStepOptions::_internal_inlier_high_weight() const {
  return inlier_high_weight_;
}
inline float TrackStepOptions::inlier_high_weight() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.inlier_high_weight)
  return _internal_inlier_high_weight();
}
inline void TrackStepOptions::_internal_set_inlier_high_weight(float value) {
  _has_bits_[0] |= 0x08000000u;
  inlier_high_weight_ = value;
}
inline void TrackStepOptions::set_inlier_high_weight(float value) {
  _internal_set_inlier_high_weight(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.inlier_high_weight)
}

// optional float kinetic_energy_decay = 22 [default = 0.98];
inline bool TrackStepOptions::_internal_has_kinetic_energy_decay() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_kinetic_energy_decay() const {
  return _internal_has_kinetic_energy_decay();
}
inline void TrackStepOptions::clear_kinetic_energy_decay() {
  kinetic_energy_decay_ = 0.98f;
  _has_bits_[0] &= ~0x20000000u;
}
inline float TrackStepOptions::_internal_kinetic_energy_decay() const {
  return kinetic_energy_decay_;
}
inline float TrackStepOptions::kinetic_energy_decay() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.kinetic_energy_decay)
  return _internal_kinetic_energy_decay();
}
inline void TrackStepOptions::_internal_set_kinetic_energy_decay(float value) {
  _has_bits_[0] |= 0x20000000u;
  kinetic_energy_decay_ = value;
}
inline void TrackStepOptions::set_kinetic_energy_decay(float value) {
  _internal_set_kinetic_energy_decay(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.kinetic_energy_decay)
}

// optional float prior_weight_increase = 23 [default = 0.2];
inline bool TrackStepOptions::_internal_has_prior_weight_increase() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_prior_weight_increase() const {
  return _internal_has_prior_weight_increase();
}
inline void TrackStepOptions::clear_prior_weight_increase() {
  prior_weight_increase_ = 0.2f;
  _has_bits_[0] &= ~0x40000000u;
}
inline float TrackStepOptions::_internal_prior_weight_increase() const {
  return prior_weight_increase_;
}
inline float TrackStepOptions::prior_weight_increase() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.prior_weight_increase)
  return _internal_prior_weight_increase();
}
inline void TrackStepOptions::_internal_set_prior_weight_increase(float value) {
  _has_bits_[0] |= 0x40000000u;
  prior_weight_increase_ = value;
}
inline void TrackStepOptions::set_prior_weight_increase(float value) {
  _internal_set_prior_weight_increase(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.prior_weight_increase)
}

// optional float low_kinetic_energy = 24 [default = 0.001];
inline bool TrackStepOptions::_internal_has_low_kinetic_energy() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TrackStepOptions::has_low_kinetic_energy() const {
  return _internal_has_low_kinetic_energy();
}
inline void TrackStepOptions::clear_low_kinetic_energy() {
  low_kinetic_energy_ = 0.001f;
  _has_bits_[0] &= ~0x80000000u;
}
inline float TrackStepOptions::_internal_low_kinetic_energy() const {
  return low_kinetic_energy_;
}
inline float TrackStepOptions::low_kinetic_energy() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.low_kinetic_energy)
  return _internal_low_kinetic_energy();
}
inline void TrackStepOptions::_internal_set_low_kinetic_energy(float value) {
  _has_bits_[0] |= 0x80000000u;
  low_kinetic_energy_ = value;
}
inline void TrackStepOptions::set_low_kinetic_energy(float value) {
  _internal_set_low_kinetic_energy(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.low_kinetic_energy)
}

// optional float high_kinetic_energy = 25 [default = 0.004];
inline bool TrackStepOptions::_internal_has_high_kinetic_energy() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TrackStepOptions::has_high_kinetic_energy() const {
  return _internal_has_high_kinetic_energy();
}
inline void TrackStepOptions::clear_high_kinetic_energy() {
  high_kinetic_energy_ = 0.004f;
  _has_bits_[1] &= ~0x00000001u;
}
inline float TrackStepOptions::_internal_high_kinetic_energy() const {
  return high_kinetic_energy_;
}
inline float TrackStepOptions::high_kinetic_energy() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.high_kinetic_energy)
  return _internal_high_kinetic_energy();
}
inline void TrackStepOptions::_internal_set_high_kinetic_energy(float value) {
  _has_bits_[1] |= 0x00000001u;
  high_kinetic_energy_ = value;
}
inline void TrackStepOptions::set_high_kinetic_energy(float value) {
  _internal_set_high_kinetic_energy(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.high_kinetic_energy)
}

// optional bool return_internal_state = 26 [default = false];
inline bool TrackStepOptions::_internal_has_return_internal_state() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackStepOptions::has_return_internal_state() const {
  return _internal_has_return_internal_state();
}
inline void TrackStepOptions::clear_return_internal_state() {
  return_internal_state_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrackStepOptions::_internal_return_internal_state() const {
  return return_internal_state_;
}
inline bool TrackStepOptions::return_internal_state() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.return_internal_state)
  return _internal_return_internal_state();
}
inline void TrackStepOptions::_internal_set_return_internal_state(bool value) {
  _has_bits_[0] |= 0x00000020u;
  return_internal_state_ = value;
}
inline void TrackStepOptions::set_return_internal_state(bool value) {
  _internal_set_return_internal_state(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.return_internal_state)
}

// optional bool use_post_estimation_weights_for_state = 29 [default = true];
inline bool TrackStepOptions::_internal_has_use_post_estimation_weights_for_state() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool TrackStepOptions::has_use_post_estimation_weights_for_state() const {
  return _internal_has_use_post_estimation_weights_for_state();
}
inline void TrackStepOptions::clear_use_post_estimation_weights_for_state() {
  use_post_estimation_weights_for_state_ = true;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool TrackStepOptions::_internal_use_post_estimation_weights_for_state() const {
  return use_post_estimation_weights_for_state_;
}
inline bool TrackStepOptions::use_post_estimation_weights_for_state() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.use_post_estimation_weights_for_state)
  return _internal_use_post_estimation_weights_for_state();
}
inline void TrackStepOptions::_internal_set_use_post_estimation_weights_for_state(bool value) {
  _has_bits_[1] |= 0x00000002u;
  use_post_estimation_weights_for_state_ = value;
}
inline void TrackStepOptions::set_use_post_estimation_weights_for_state(bool value) {
  _internal_set_use_post_estimation_weights_for_state(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.use_post_estimation_weights_for_state)
}

// optional bool compute_spatial_prior = 27 [default = false];
inline bool TrackStepOptions::_internal_has_compute_spatial_prior() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackStepOptions::has_compute_spatial_prior() const {
  return _internal_has_compute_spatial_prior();
}
inline void TrackStepOptions::clear_compute_spatial_prior() {
  compute_spatial_prior_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TrackStepOptions::_internal_compute_spatial_prior() const {
  return compute_spatial_prior_;
}
inline bool TrackStepOptions::compute_spatial_prior() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.compute_spatial_prior)
  return _internal_compute_spatial_prior();
}
inline void TrackStepOptions::_internal_set_compute_spatial_prior(bool value) {
  _has_bits_[0] |= 0x00000040u;
  compute_spatial_prior_ = value;
}
inline void TrackStepOptions::set_compute_spatial_prior(bool value) {
  _internal_set_compute_spatial_prior(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.compute_spatial_prior)
}

// optional .mediapipe.TrackStepOptions.IrlsInitialization irls_initialization = 30;
inline bool TrackStepOptions::_internal_has_irls_initialization() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || irls_initialization_ != nullptr);
  return value;
}
inline bool TrackStepOptions::has_irls_initialization() const {
  return _internal_has_irls_initialization();
}
inline void TrackStepOptions::clear_irls_initialization() {
  if (irls_initialization_ != nullptr) irls_initialization_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::TrackStepOptions_IrlsInitialization& TrackStepOptions::_internal_irls_initialization() const {
  const ::mediapipe::TrackStepOptions_IrlsInitialization* p = irls_initialization_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackStepOptions_IrlsInitialization&>(
      ::mediapipe::_TrackStepOptions_IrlsInitialization_default_instance_);
}
inline const ::mediapipe::TrackStepOptions_IrlsInitialization& TrackStepOptions::irls_initialization() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.irls_initialization)
  return _internal_irls_initialization();
}
inline void TrackStepOptions::unsafe_arena_set_allocated_irls_initialization(
    ::mediapipe::TrackStepOptions_IrlsInitialization* irls_initialization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(irls_initialization_);
  }
  irls_initialization_ = irls_initialization;
  if (irls_initialization) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackStepOptions.irls_initialization)
}
inline ::mediapipe::TrackStepOptions_IrlsInitialization* TrackStepOptions::release_irls_initialization() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackStepOptions_IrlsInitialization* temp = irls_initialization_;
  irls_initialization_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackStepOptions_IrlsInitialization* TrackStepOptions::unsafe_arena_release_irls_initialization() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackStepOptions.irls_initialization)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::TrackStepOptions_IrlsInitialization* temp = irls_initialization_;
  irls_initialization_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackStepOptions_IrlsInitialization* TrackStepOptions::_internal_mutable_irls_initialization() {
  _has_bits_[0] |= 0x00000001u;
  if (irls_initialization_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackStepOptions_IrlsInitialization>(GetArena());
    irls_initialization_ = p;
  }
  return irls_initialization_;
}
inline ::mediapipe::TrackStepOptions_IrlsInitialization* TrackStepOptions::mutable_irls_initialization() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackStepOptions.irls_initialization)
  return _internal_mutable_irls_initialization();
}
inline void TrackStepOptions::set_allocated_irls_initialization(::mediapipe::TrackStepOptions_IrlsInitialization* irls_initialization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete irls_initialization_;
  }
  if (irls_initialization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(irls_initialization);
    if (message_arena != submessage_arena) {
      irls_initialization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, irls_initialization, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  irls_initialization_ = irls_initialization;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackStepOptions.irls_initialization)
}

// optional float static_motion_temporal_ratio = 33 [default = 0.003];
inline bool TrackStepOptions::_internal_has_static_motion_temporal_ratio() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool TrackStepOptions::has_static_motion_temporal_ratio() const {
  return _internal_has_static_motion_temporal_ratio();
}
inline void TrackStepOptions::clear_static_motion_temporal_ratio() {
  static_motion_temporal_ratio_ = 0.003f;
  _has_bits_[1] &= ~0x00000004u;
}
inline float TrackStepOptions::_internal_static_motion_temporal_ratio() const {
  return static_motion_temporal_ratio_;
}
inline float TrackStepOptions::static_motion_temporal_ratio() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.static_motion_temporal_ratio)
  return _internal_static_motion_temporal_ratio();
}
inline void TrackStepOptions::_internal_set_static_motion_temporal_ratio(float value) {
  _has_bits_[1] |= 0x00000004u;
  static_motion_temporal_ratio_ = value;
}
inline void TrackStepOptions::set_static_motion_temporal_ratio(float value) {
  _internal_set_static_motion_temporal_ratio(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.static_motion_temporal_ratio)
}

// optional .mediapipe.TrackStepOptions.CancelTrackingWithOcclusionOptions cancel_tracking_with_occlusion_options = 34;
inline bool TrackStepOptions::_internal_has_cancel_tracking_with_occlusion_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cancel_tracking_with_occlusion_options_ != nullptr);
  return value;
}
inline bool TrackStepOptions::has_cancel_tracking_with_occlusion_options() const {
  return _internal_has_cancel_tracking_with_occlusion_options();
}
inline void TrackStepOptions::clear_cancel_tracking_with_occlusion_options() {
  if (cancel_tracking_with_occlusion_options_ != nullptr) cancel_tracking_with_occlusion_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions& TrackStepOptions::_internal_cancel_tracking_with_occlusion_options() const {
  const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* p = cancel_tracking_with_occlusion_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions&>(
      ::mediapipe::_TrackStepOptions_CancelTrackingWithOcclusionOptions_default_instance_);
}
inline const ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions& TrackStepOptions::cancel_tracking_with_occlusion_options() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.cancel_tracking_with_occlusion_options)
  return _internal_cancel_tracking_with_occlusion_options();
}
inline void TrackStepOptions::unsafe_arena_set_allocated_cancel_tracking_with_occlusion_options(
    ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* cancel_tracking_with_occlusion_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_tracking_with_occlusion_options_);
  }
  cancel_tracking_with_occlusion_options_ = cancel_tracking_with_occlusion_options;
  if (cancel_tracking_with_occlusion_options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackStepOptions.cancel_tracking_with_occlusion_options)
}
inline ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* TrackStepOptions::release_cancel_tracking_with_occlusion_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* temp = cancel_tracking_with_occlusion_options_;
  cancel_tracking_with_occlusion_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* TrackStepOptions::unsafe_arena_release_cancel_tracking_with_occlusion_options() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackStepOptions.cancel_tracking_with_occlusion_options)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* temp = cancel_tracking_with_occlusion_options_;
  cancel_tracking_with_occlusion_options_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* TrackStepOptions::_internal_mutable_cancel_tracking_with_occlusion_options() {
  _has_bits_[0] |= 0x00000002u;
  if (cancel_tracking_with_occlusion_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions>(GetArena());
    cancel_tracking_with_occlusion_options_ = p;
  }
  return cancel_tracking_with_occlusion_options_;
}
inline ::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* TrackStepOptions::mutable_cancel_tracking_with_occlusion_options() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackStepOptions.cancel_tracking_with_occlusion_options)
  return _internal_mutable_cancel_tracking_with_occlusion_options();
}
inline void TrackStepOptions::set_allocated_cancel_tracking_with_occlusion_options(::mediapipe::TrackStepOptions_CancelTrackingWithOcclusionOptions* cancel_tracking_with_occlusion_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cancel_tracking_with_occlusion_options_;
  }
  if (cancel_tracking_with_occlusion_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_tracking_with_occlusion_options);
    if (message_arena != submessage_arena) {
      cancel_tracking_with_occlusion_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_tracking_with_occlusion_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cancel_tracking_with_occlusion_options_ = cancel_tracking_with_occlusion_options;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackStepOptions.cancel_tracking_with_occlusion_options)
}

// optional int32 object_similarity_min_contd_inliers = 35 [default = 30];
inline bool TrackStepOptions::_internal_has_object_similarity_min_contd_inliers() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool TrackStepOptions::has_object_similarity_min_contd_inliers() const {
  return _internal_has_object_similarity_min_contd_inliers();
}
inline void TrackStepOptions::clear_object_similarity_min_contd_inliers() {
  object_similarity_min_contd_inliers_ = 30;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions::_internal_object_similarity_min_contd_inliers() const {
  return object_similarity_min_contd_inliers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackStepOptions::object_similarity_min_contd_inliers() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.object_similarity_min_contd_inliers)
  return _internal_object_similarity_min_contd_inliers();
}
inline void TrackStepOptions::_internal_set_object_similarity_min_contd_inliers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  object_similarity_min_contd_inliers_ = value;
}
inline void TrackStepOptions::set_object_similarity_min_contd_inliers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_object_similarity_min_contd_inliers(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.object_similarity_min_contd_inliers)
}

// optional float box_similarity_max_scale = 36 [default = 1.05];
inline bool TrackStepOptions::_internal_has_box_similarity_max_scale() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool TrackStepOptions::has_box_similarity_max_scale() const {
  return _internal_has_box_similarity_max_scale();
}
inline void TrackStepOptions::clear_box_similarity_max_scale() {
  box_similarity_max_scale_ = 1.05f;
  _has_bits_[1] &= ~0x00000010u;
}
inline float TrackStepOptions::_internal_box_similarity_max_scale() const {
  return box_similarity_max_scale_;
}
inline float TrackStepOptions::box_similarity_max_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.box_similarity_max_scale)
  return _internal_box_similarity_max_scale();
}
inline void TrackStepOptions::_internal_set_box_similarity_max_scale(float value) {
  _has_bits_[1] |= 0x00000010u;
  box_similarity_max_scale_ = value;
}
inline void TrackStepOptions::set_box_similarity_max_scale(float value) {
  _internal_set_box_similarity_max_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.box_similarity_max_scale)
}

// optional float box_similarity_max_rotation = 37 [default = 0.2];
inline bool TrackStepOptions::_internal_has_box_similarity_max_rotation() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool TrackStepOptions::has_box_similarity_max_rotation() const {
  return _internal_has_box_similarity_max_rotation();
}
inline void TrackStepOptions::clear_box_similarity_max_rotation() {
  box_similarity_max_rotation_ = 0.2f;
  _has_bits_[1] &= ~0x00000020u;
}
inline float TrackStepOptions::_internal_box_similarity_max_rotation() const {
  return box_similarity_max_rotation_;
}
inline float TrackStepOptions::box_similarity_max_rotation() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.box_similarity_max_rotation)
  return _internal_box_similarity_max_rotation();
}
inline void TrackStepOptions::_internal_set_box_similarity_max_rotation(float value) {
  _has_bits_[1] |= 0x00000020u;
  box_similarity_max_rotation_ = value;
}
inline void TrackStepOptions::set_box_similarity_max_rotation(float value) {
  _internal_set_box_similarity_max_rotation(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.box_similarity_max_rotation)
}

// optional float quad_homography_max_scale = 38 [default = 1.2];
inline bool TrackStepOptions::_internal_has_quad_homography_max_scale() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool TrackStepOptions::has_quad_homography_max_scale() const {
  return _internal_has_quad_homography_max_scale();
}
inline void TrackStepOptions::clear_quad_homography_max_scale() {
  quad_homography_max_scale_ = 1.2f;
  _has_bits_[1] &= ~0x00000040u;
}
inline float TrackStepOptions::_internal_quad_homography_max_scale() const {
  return quad_homography_max_scale_;
}
inline float TrackStepOptions::quad_homography_max_scale() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.quad_homography_max_scale)
  return _internal_quad_homography_max_scale();
}
inline void TrackStepOptions::_internal_set_quad_homography_max_scale(float value) {
  _has_bits_[1] |= 0x00000040u;
  quad_homography_max_scale_ = value;
}
inline void TrackStepOptions::set_quad_homography_max_scale(float value) {
  _internal_set_quad_homography_max_scale(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.quad_homography_max_scale)
}

// optional float quad_homography_max_rotation = 39 [default = 0.3];
inline bool TrackStepOptions::_internal_has_quad_homography_max_rotation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrackStepOptions::has_quad_homography_max_rotation() const {
  return _internal_has_quad_homography_max_rotation();
}
inline void TrackStepOptions::clear_quad_homography_max_rotation() {
  quad_homography_max_rotation_ = 0.3f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TrackStepOptions::_internal_quad_homography_max_rotation() const {
  return quad_homography_max_rotation_;
}
inline float TrackStepOptions::quad_homography_max_rotation() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.quad_homography_max_rotation)
  return _internal_quad_homography_max_rotation();
}
inline void TrackStepOptions::_internal_set_quad_homography_max_rotation(float value) {
  _has_bits_[0] |= 0x00000100u;
  quad_homography_max_rotation_ = value;
}
inline void TrackStepOptions::set_quad_homography_max_rotation(float value) {
  _internal_set_quad_homography_max_rotation(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.quad_homography_max_rotation)
}

// optional .mediapipe.TrackStepOptions.CameraIntrinsics camera_intrinsics = 40;
inline bool TrackStepOptions::_internal_has_camera_intrinsics() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || camera_intrinsics_ != nullptr);
  return value;
}
inline bool TrackStepOptions::has_camera_intrinsics() const {
  return _internal_has_camera_intrinsics();
}
inline void TrackStepOptions::clear_camera_intrinsics() {
  if (camera_intrinsics_ != nullptr) camera_intrinsics_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::TrackStepOptions_CameraIntrinsics& TrackStepOptions::_internal_camera_intrinsics() const {
  const ::mediapipe::TrackStepOptions_CameraIntrinsics* p = camera_intrinsics_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::TrackStepOptions_CameraIntrinsics&>(
      ::mediapipe::_TrackStepOptions_CameraIntrinsics_default_instance_);
}
inline const ::mediapipe::TrackStepOptions_CameraIntrinsics& TrackStepOptions::camera_intrinsics() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.camera_intrinsics)
  return _internal_camera_intrinsics();
}
inline void TrackStepOptions::unsafe_arena_set_allocated_camera_intrinsics(
    ::mediapipe::TrackStepOptions_CameraIntrinsics* camera_intrinsics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_intrinsics_);
  }
  camera_intrinsics_ = camera_intrinsics;
  if (camera_intrinsics) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.TrackStepOptions.camera_intrinsics)
}
inline ::mediapipe::TrackStepOptions_CameraIntrinsics* TrackStepOptions::release_camera_intrinsics() {
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::TrackStepOptions_CameraIntrinsics* temp = camera_intrinsics_;
  camera_intrinsics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mediapipe::TrackStepOptions_CameraIntrinsics* TrackStepOptions::unsafe_arena_release_camera_intrinsics() {
  // @@protoc_insertion_point(field_release:mediapipe.TrackStepOptions.camera_intrinsics)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::TrackStepOptions_CameraIntrinsics* temp = camera_intrinsics_;
  camera_intrinsics_ = nullptr;
  return temp;
}
inline ::mediapipe::TrackStepOptions_CameraIntrinsics* TrackStepOptions::_internal_mutable_camera_intrinsics() {
  _has_bits_[0] |= 0x00000004u;
  if (camera_intrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TrackStepOptions_CameraIntrinsics>(GetArena());
    camera_intrinsics_ = p;
  }
  return camera_intrinsics_;
}
inline ::mediapipe::TrackStepOptions_CameraIntrinsics* TrackStepOptions::mutable_camera_intrinsics() {
  // @@protoc_insertion_point(field_mutable:mediapipe.TrackStepOptions.camera_intrinsics)
  return _internal_mutable_camera_intrinsics();
}
inline void TrackStepOptions::set_allocated_camera_intrinsics(::mediapipe::TrackStepOptions_CameraIntrinsics* camera_intrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camera_intrinsics_;
  }
  if (camera_intrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camera_intrinsics);
    if (message_arena != submessage_arena) {
      camera_intrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_intrinsics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  camera_intrinsics_ = camera_intrinsics;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.TrackStepOptions.camera_intrinsics)
}

// optional bool forced_pnp_tracking = 41 [default = false];
inline bool TrackStepOptions::_internal_has_forced_pnp_tracking() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackStepOptions::has_forced_pnp_tracking() const {
  return _internal_has_forced_pnp_tracking();
}
inline void TrackStepOptions::clear_forced_pnp_tracking() {
  forced_pnp_tracking_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TrackStepOptions::_internal_forced_pnp_tracking() const {
  return forced_pnp_tracking_;
}
inline bool TrackStepOptions::forced_pnp_tracking() const {
  // @@protoc_insertion_point(field_get:mediapipe.TrackStepOptions.forced_pnp_tracking)
  return _internal_forced_pnp_tracking();
}
inline void TrackStepOptions::_internal_set_forced_pnp_tracking(bool value) {
  _has_bits_[0] |= 0x00000080u;
  forced_pnp_tracking_ = value;
}
inline void TrackStepOptions::set_forced_pnp_tracking(bool value) {
  _internal_set_forced_pnp_tracking(value);
  // @@protoc_insertion_point(field_set:mediapipe.TrackStepOptions.forced_pnp_tracking)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::MotionBoxState_TrackStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::MotionBoxState_TrackStatus>() {
  return ::mediapipe::MotionBoxState_TrackStatus_descriptor();
}
template <> struct is_proto_enum< ::mediapipe::TrackStepOptions_TrackingDegrees> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::TrackStepOptions_TrackingDegrees>() {
  return ::mediapipe::TrackStepOptions_TrackingDegrees_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <x/google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2futil_2ftracking_2ftracking_2eproto
